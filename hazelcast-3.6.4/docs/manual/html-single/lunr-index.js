
var index = lunr(function () {
    this.field('body');
    this.ref('url');
});

var documentTitles = {};



documentTitles["index.html#preface"] = "Preface";
index.add({
    url: "index.html#preface",
    title: "Preface",
    body: "# Preface  Welcome to the Hazelcast Reference Manual. This manual includes concepts, instructions, and samples to guide you on how to use Hazelcast and build Hazelcast applications.  As the reader of this manual, you must be familiar with the Java programming language and you should have installed your preferred Integrated Development Environment (IDE).   "
});

documentTitles["index.html#hazelcast-editions"] = "Hazelcast Editions";
index.add({
    url: "index.html#hazelcast-editions",
    title: "Hazelcast Editions",
    body: "## Hazelcast Editions  This Reference Manual covers all editions of Hazelcast. Throughout this manual:  - **Hazelcast** refers to the open source edition of Hazelcast in-memory data grid middleware. It is also the name of the company (Hazelcast, Inc.) providing the Hazelcast product. - &lt;font color=\&quot;#3981DB\&quot;&gt;**Hazelcast Enterprise**&lt;/font&gt; is a commercially licensed edition of Hazelcast which provides high-value enterprise features in addition to Hazelcast. - &lt;font color=\&quot;##153F75\&quot;&gt;**Hazelcast Enterprise HD**&lt;/font&gt; is a commercially licensed edition of Hazelcast which provides High-Density (HD) Memory Store and Hot Restart Persistence features in addition to Hazelcast Enterprise.   "
});

documentTitles["index.html#hazelcast-architecture"] = "Hazelcast Architecture";
index.add({
    url: "index.html#hazelcast-architecture",
    title: "Hazelcast Architecture",
    body: "## Hazelcast Architecture  You can see the features for all Hazelcast editions in the following architecture diagram.  ![Hazelcast Architecture](images/HazelcastArchitecture.png)  ![image](images/NoteSmall.jpg) ***NOTE*** *You can see small \&quot;HD\&quot; boxes for some features in the above diagram. Those features can use High-Density (HD) Memory Store when it is available. It means if you have Hazelcast Enterprise HD, you can use those features with HD Memory Store.*  For more information on Hazelcast's Architecture, please see the white paper &lt;a href=\&quot;https://hazelcast.com/resources/architects-view-hazelcast/\&quot; target=\&quot;_blank\&quot;&gt;An Architect’s View of Hazelcast&lt;/a&gt;.  "
});

documentTitles["index.html#hazelcast-plugins"] = "Hazelcast Plugins";
index.add({
    url: "index.html#hazelcast-plugins",
    title: "Hazelcast Plugins",
    body: "## Hazelcast Plugins  You can extend Hazelcast's functionality by using its plugins. These plugins have their own lifecycles. Please see &lt;a href=\&quot;http://hazelcast.org/plugins/\&quot; target=\&quot;_blank\&quot;&gt;Plugins page&lt;/a&gt; to learn about Hazelcast plugins you can use.   "
});

documentTitles["index.html#licensing"] = "Licensing";
index.add({
    url: "index.html#licensing",
    title: "Licensing",
    body: "## Licensing  Hazelcast and Hazelcast Reference Manual are free and provided under the Apache License, Version 2.0. Hazelcast Enterprise is commercially licensed by Hazelcast, Inc.  For more detailed information on licensing, please see the [License Questions appendix](#license-questions).   "
});

documentTitles["index.html#trademarks"] = "Trademarks";
index.add({
    url: "index.html#trademarks",
    title: "Trademarks",
    body: "## Trademarks  Hazelcast is a registered trademark of Hazelcast, Inc. All other trademarks in this manual are held by their respective owners.    "
});

documentTitles["index.html#customer-support"] = "Customer Support";
index.add({
    url: "index.html#customer-support",
    title: "Customer Support",
    body: "## Customer Support  Support for Hazelcast is provided via &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues\&quot; target=\&quot;_blank\&quot;&gt;GitHub&lt;/a&gt;, &lt;a href=\&quot;https://groups.google.com/forum/#!forum/hazelcast\&quot; target=\&quot;_blank\&quot;&gt;Mail Group&lt;/a&gt; and &lt;a href=\&quot;http://www.stackoverflow.com\&quot; target=\&quot;_blank\&quot;&gt;StackOverflow&lt;/a&gt;  For information on the commercial support for Hazelcast and Hazelcast Enterprise, please see  &lt;a href=\&quot;https://hazelcast.com/pricing/\&quot; target=\&quot;_blank\&quot;&gt;hazelcast.com&lt;/a&gt;.  "
});

documentTitles["index.html#release-notes"] = "Release Notes";
index.add({
    url: "index.html#release-notes",
    title: "Release Notes",
    body: "## Release Notes  Please refer to the &lt;a href=\&quot;http://docs.hazelcast.org/docs/release-notes/\&quot; target=\&quot;_blank\&quot;&gt;Release Notes document&lt;/a&gt; for the new features, enhancements and fixes performed for each Hazelcast release.    "
});

documentTitles["index.html#contributing-to-hazelcast"] = "Contributing to Hazelcast";
index.add({
    url: "index.html#contributing-to-hazelcast",
    title: "Contributing to Hazelcast",
    body: "## Contributing to Hazelcast  You can contribute to the Hazelcast code, report a bug, or request an enhancement. Please see the following resources.  - &lt;a href=\&quot;https://hazelcast.atlassian.net/wiki/display/COM/Developing+with+Git\&quot; target=\&quot;_blank\&quot;&gt;Developing with Git&lt;/a&gt;: Document that explains the branch mechanism of Hazelcast and how to request changes. - &lt;a href=\&quot;https://hazelcast.atlassian.net/wiki/display/COM/Hazelcast+Contributor+Agreement\&quot; target=\&quot;_blank\&quot;&gt;Hazelcast Contributor Agreement form&lt;/a&gt;: Form that each contributing developer needs to fill and send back to Hazelcast. - &lt;a href=\&quot;https://github.com/hazelcast/hazelcast\&quot; target=\&quot;_blank\&quot;&gt;Hazelcast on GitHub&lt;/a&gt;: Hazelcast repository where the code is developed, issues and pull requests are managed.  "
});

documentTitles["index.html#phone-home"] = "Phone Home";
index.add({
    url: "index.html#phone-home",
    title: "Phone Home",
    body: "## Phone Home  Hazelcast uses phone home data to learn about usage of Hazelcast.  Hazelcast member instances call our phone home server initially when they are started and then every 24 hours. This applies to all the instances joined to the cluster.  **What is sent in?**  The following information is sent in a phone home:  - Hazelcast version - Local Hazelcast member UUID - Download ID  - A hash value of the cluster ID - Cluster size bands for 5, 10, 20, 40, 60, 100, 150, 300, 600 and &gt; 600 - Number of connected clients bands of 5, 10, 20, 40, 60, 100, 150, 300, 600 and &gt; 600 - Cluster uptime - Member uptime - Environment Information: 	- Name of operating system 	- Kernel architecture (32-bit or 64-bit) 	- Version of operating system 	- Version of installed Java 	- Name of Java Virtual Machine - Hazelcast Enterprise specific:  	- Number of clients by language (Java, C++, C#) 	- Flag for Hazelcast Enterprise  	- Hash value of license key 	- Native memory usage  **Phone Home Code**  The phone home code itself is open source. Please see &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/blob/master/hazelcast/src/main/java/com/hazelcast/util/PhoneHome.java\&quot; target=\&quot;_blank\&quot;&gt;here&lt;/a&gt;.  **Disabling Phone Homes**  Set the `hazelcast.phone.home.enabled` system property to false either in the config or on the Java command line. Please see the [System Properties section](#system-properties) for information on how to set a property.   **Phone Home URLs**  For versions 1.x and 2.x: &lt;a href=\&quot;http://www.hazelcast.com/version.jsp\&quot; target=\&quot;_blank\&quot;&gt;http://www.hazelcast.com/version.jsp&lt;/a&gt;.  For versions 3.x up to 3.6: &lt;a href=\&quot;http://versioncheck.hazelcast.com/version.jsp\&quot; target=\&quot;_blank\&quot;&gt;http://versioncheck.hazelcast.com/version.jsp&lt;/a&gt;.  For versions after 3.6: &lt;a href=\&quot;http://phonehome.hazelcast.com/ping\&quot; target=\&quot;_blank\&quot;&gt;http://phonehome.hazelcast.com/ping&lt;/a&gt;.    "
});

documentTitles["index.html#typographical-conventions"] = "Typographical Conventions";
index.add({
    url: "index.html#typographical-conventions",
    title: "Typographical Conventions",
    body: "## Typographical Conventions  Below table shows the conventions used in this manual.  |Convention|Description| |:-|:-| |**bold font**| - Indicates part of a sentence that requires the reader's specific attention. &lt;br&gt; - Also indicates property/parameter values.| |*italic font*|- When italicized words are enclosed with \&quot;&lt;\&quot; and \&quot;&gt;\&quot;, it indicates a variable in the command or code syntax that you must replace (for example, `hazelcast-&lt;`*version*`&gt;.jar`). &lt;br&gt; - Note and Related Information texts are in italics.| |`monospace`|Indicates files, folders, class and library names, code snippets, and inline code words in a sentence.| |***RELATED INFORMATION***|Indicates a resource that is relevant to the topic, usually with a link or cross-reference.| |![image](images/NoteSmall.jpg) ***NOTE***| Indicates information that is of special interest or importance, for example an additional action required only in certain circumstances.| |element &amp; attribute|Mostly used in the context of declarative configuration that you perform using Hazelcast XML file. Element refers to an XML tag used to configure a Hazelcast feature. Attribute is a parameter owned by an element, contributing into the declaration of that element's configuration. Please see the following example.&lt;br&gt;&lt;/br&gt;`&lt;port port-count=\&quot;100\&quot;&gt;5701&lt;/port&gt;`&lt;br&gt;&lt;/br&gt; In this example, `port-count` is an **attribute** of the `port` **element**.   &lt;br&gt;&lt;/br&gt;             "
});

documentTitles["index.html#document-revision-history"] = "Document Revision History";
index.add({
    url: "index.html#document-revision-history",
    title: "Document Revision History",
    body: "# Document Revision History  This chapter lists the changes made to this document from the previous release.  &lt;br&gt;&lt;/br&gt; ![image](images/NoteSmall.jpg)***NOTE:*** *Please refer to the &lt;a href=\&quot;http://docs.hazelcast.org/docs/release-notes/\&quot; target=\&quot;_blank\&quot;&gt;Release Notes&lt;/a&gt; for the new features, enhancements and fixes performed for each Hazelcast release. You can also find information on upgrading Hazelcast from previous releases in the Release Notes document.*  &lt;br&gt;&lt;/br&gt;  |Chapter|Section|Description| |:-------|:-------|:-----------| |[Chapter 1 - Preface](#preface)||Added Hazelcast Architecture as a new section. Renamed the section Product Naming as Hazelcast Editions and updated its content by adding the new edition \&quot;Hazelcast Enterprise HD\&quot;.| |[Chapter 3 - Getting Started](#getting-started)|[Phone Home](#phone-home)|Added as a new section to explain phone home data.| ||[Deploying using Docker](#deploying-using-docker)|Added as a new section to describe how you can deploy your Hazelcast projects using the Docker platform. ||[Using the Scripts in the Package](#using-the-scripts-in-the-package)|Added as a new section explaining the scripts you have when you download Hazelcast. |[Chapter 5 - Understanding Configuration](#understanding-configuration)||Added as a new chapter to provide the fundamentals of Hazelcast configuration. |[Chapter 6 - Setting Up Clusters](#setting-up-clusters)|[Discovering Members with jclouds](#discovering-members-with-jclouds)|Added as a new section to explain how you can enable Hazelcast to discover your members with jclouds&amp;reg;.| |||Chapter name changed to \&quot;Setting Up Clusters\&quot;. It was \&quot;Hazelcast Clusters\&quot; before. The reason is to gather all clusters related information under this chapter. |[Chapter 7 - Distributed Data Structures](#distributed-data-structures)|[Map](#map)|[Evicting Map Entries](#evicting-map-entries) section updated by adding the definition for the `min-eviction-check-millis` property. The section [Understanding Map Eviction](#understanding-map-eviction) added for a more clearer explanation of the eviction mechanism.&lt;br&gt;&lt;/br&gt; [Setting In Memory Format section](#setting-in-memory-format) updated by adding the information on how to configure Hazelcast Map to use High-Density Memory Store.&lt;br&gt;&lt;/br&gt; [Creating Near Cache for Map](#creating-near-cache-for-map) updated by adding a note related to enabling near caches on a lite member.&lt;br&gt;&lt;/br&gt;[Using High-Density Memory Store with Near Cache](#using-high-density-memory-store-with-near-cache) added as a new section.&lt;br&gt;&lt;/br&gt;[Required configuration changes when using NATIVE](#required-configuration-changes-when-using-native) added as a new section.&lt;br&gt;&lt;/br&gt;[Using High-Density Memory Store with Map](#using-high-density-memory-store-with-map) added as a new section.&lt;br&gt;&lt;/br&gt;The section previously known as Continuous Query moved under the Map section with the name [Listening to Map Entries with Predicates](#listening-to-map-entries-with-predicates).&lt;br&gt;&lt;/br&gt;[Near Cache Invalidation](#near-cache-invalidation) added as a new section. ||[Lock](#lock)|Added the explanation for the method `tryLock` with lease. ||[Replicated Map](#replicated-map)|[Replicating instead of Partitioning](#replicating-instead-of-partitioning) updated by adding a note related to replicated map usage in a lite member. The whole section enhanced. |[Chapter 8 - Distributed Events](#distributed-events)|| Whole chapter improved and new sections added explaining how to register listeners. |[Chapter 9 - Distributed Computing](#distributed-computing)|[Selecting Members for Task Execution](#selecting-members-for-task-execution)| Added a paragraph on how to select a lite member. |[Chapter 10 - Distributed Query](#distributed-query)|[Filtering with Paging Predicates](#filtering-with-paging-predicates)| The note stating that the random page accessing is not supported removed, since it is now supported with this release. |[Chapter 11 - Transactions](#transactions)|[ONE_PHASE vs. TWO_PHASE](#one_phase-vs-two_phase)| Added as a new section explaining the trade offs between these two transaction types. ||[Creating a Transaction Interface](#creating-a-transaction-interface)|Replaced the transaction type name LOCAL with ONE_PHASE. Updated the definitions of transaction types. ||[Integrating into J2EE](#integrating-into-j2ee)| Added information related to class loaders. |[Chapter 12 - Hazelcast JCache](#hazelcast-jcache)|[ICache Partition Lost Listener](#icache-partition-lost-listener)| Added as a new section explaining how to listen when a partition is lost in a Hazelcast JCache implementation. ||[JCache Split-Brain](#jcache-split-brain)|Added as a new section. |[Chapter 13 - Integrated Clustering](#integrated-clustering)|[Web Session Replication](#web-session-replication)|[Marking Transient Attributes](#marking-transient-attributes) added as a new section.| ||[Spring Integration](#spring-integration)|[Declarative Hazelcast JCache Based Caching Configuration](#declarative-hazelcast-jcache-based-caching-configuration) added as a new section. ||[Hibernate Second Level Cache](#hibernate-second-level-cache)|Added additional information related to Hibernate Native Client mode to the introduction paragraph of the [Setting Client/Server for Hibernate section](#setting-client-server-for-hibernate).| |[Chapter 14 - Storage](#storage)|[Hot Restart Persistence](#hot-restart-persistence)|Added as a new section to explain how Hazelcast's Hot Restart feature works and its design details.| |[Chapter 15 - Hazelcast Java Client](#hazelcast-java-client)|[Hazelcast Clients Feature Comparison](#hazelcast-clients-feature-comparison)|Added as a new section. ||[Client Network Configuration](#client-network-configuration)|Updated by adding the definition of the new IAM role configuration element. |[Chapter 16 - Other Client Implementations](#other-client-implementations)|[Windows C++ Client](#windows-c-client)|Updated by adding static/dynamic library related flag information. |[Chapter 17 - Serialization](#serialization)||Whole chapter reviewed after serialization improvements and [Global Serializer](#global-serializer) added as a new section. |[Chapter 18 - Management](#management)|[Defining a Cluster Quorum](#defining-a-cluster-quorum)|Added information on quorum support for caches. Added the definition of the new configuration element `quorum-ref` to [ICache Configuration section](#icache-configuration).| ||[Management Center](#management-center)|A note on how to see the cache statistics on the Management Center added under the [Caches section](#monitoring-caches).&lt;br&gt;&lt;/br&gt;[Replicated Maps](#monitoring-replicated-maps) added as a new section.&lt;br&gt;&lt;br&gt; Added the information explaining the new e-mail notification mechanism to [Creating Alerts](#creating-alerts).&lt;br&gt;&lt;/br&gt;[Monitoring WAN Replication](#monitoring-wan-replication) added as a new section.&lt;br&gt;&lt;/br&gt;[Hot Restart](#hot-restart) added as a new section.&lt;br&gt;&lt;/br&gt;[Getting Started to Management Center](#getting-started-to-management-center) added as a new section to explain the licensing mechanism, selecting clusters and how to create administrator user credentials. ||[Monitoring with JMX](#monitoring-with-jmx)|[MBean Naming for Hazelcast Data Structures](#mbean-naming-for-hazelcast-data-structures) and [Connecting to JMX Agent](#connecting-to-jmx-agent) added as new sections. ||[Enabling Lite Members](#enabling-lite-members)|Added as a new section. Also [Data Partitioning](#data-partitioning) and [Partition Table](#partition-table) sections  updated to include Lite Member related information. ||[Using the Script cluster.sh](#using-the-script-cluster-sh)|Added as a new section explaining this cluster management script that comes when you download Hazelcast.  ||[Using REST API for Cluster Management](#using-rest-api-for-cluster-management)|Added as a new section explaining how you can use REST commands to manage your cluster.  |[Chapter 19 - Security](#security)|[SSL](#ssl)|First paragraph updated to include the information that SSL is capable of securing socket level communication between Hazelcast members and clients too. |[Chapter 22 - WAN](#wan)||Whole chapter updated and new content added.| |[Chapter 23 - OSGI](#osgi)||Added as a new chapter.| |[Chapter 24 - Extending Hazelcast](#extending-hazelcast)||This title added as a chapter to include the section previously present as \&quot;User Defined Services\&quot;.| ||[Discovery SPI](#discovery-spi)|Added as a new section. ||[Config Properties SPI](#config-properties-spi)|Added as a new section. |[Chapter 29 - FAQ](#frequently-asked-questions)||Added new questions/answers.| |[Chapter 30 - Glossary](#glossary)||Added new glossary items.|       &lt;br&gt; &lt;/br&gt;    "
});

documentTitles["index.html#getting-started"] = "Getting Started";
index.add({
    url: "index.html#getting-started",
    title: "Getting Started",
    body: "# Getting Started  This chapter explains how to install Hazelcast and start a Hazelcast member and client. It describes the executable files in the download package and also provides the fundamentals for configuring Hazelcast and its deployment options.   "
});

documentTitles["index.html#installation"] = "Installation";
index.add({
    url: "index.html#installation",
    title: "Installation",
    body: "## Installation  The following sections explains the installation of Hazelcast and Hazelcast Enterprise. It also includes notes and changes to consider when upgrading Hazelcast.   "
});

documentTitles["index.html#hazelcast"] = "Hazelcast";
index.add({
    url: "index.html#hazelcast",
    title: "Hazelcast",
    body: "### Hazelcast  You can find Hazelcast in standard Maven repositories. If your project uses Maven, you do not need to add  additional repositories to your `pom.xml` or add `hazelcast-&lt;version&gt;.jar` file into your  classpath (Maven does that for you). Just add the following lines to your `pom.xml`:  ```xml &lt;dependencies&gt; 	&lt;dependency&gt; 		&lt;groupId&gt;com.hazelcast&lt;/groupId&gt; 		&lt;artifactId&gt;hazelcast&lt;/artifactId&gt; 		&lt;version&gt;3.6&lt;/version&gt; 	&lt;/dependency&gt; &lt;/dependencies&gt; ``` As an alternative, you can download and install Hazelcast yourself. You only need to:  -   Download the package `hazelcast-&lt;version&gt;.zip` or `hazelcast-&lt;version&gt;.tar.gz` from &lt;a href=\&quot;http://hazelcast.org/download/\&quot; target=\&quot;_blank\&quot;&gt;hazelcast.org&lt;/a&gt;.  -   Extract the downloaded `hazelcast-&lt;version&gt;.zip` or `hazelcast-&lt;version&gt;.tar.gz`.  -   Add the file `hazelcast-&lt;version&gt;.jar` to your classpath.       "
});

documentTitles["index.html#hazelcast-enterprise"] = "Hazelcast Enterprise";
index.add({
    url: "index.html#hazelcast-enterprise",
    title: "Hazelcast Enterprise",
    body: "### Hazelcast Enterprise  There are two Maven repositories defined for Hazelcast Enterprise:  ``` &lt;repository&gt;        &lt;id&gt;Hazelcast Private Snapshot Repository&lt;/id&gt;        &lt;url&gt;https://repository-hazelcast-l337.forge.cloudbees.com/snapshot/&lt;/url&gt; &lt;/repository&gt; &lt;repository&gt;         &lt;id&gt;Hazelcast Private Release Repository&lt;/id&gt;         &lt;url&gt;https://repository-hazelcast-l337.forge.cloudbees.com/release/&lt;/url&gt; &lt;/repository&gt; ```  Hazelcast Enterprise customers may also define dependencies, a sample of which is shown below.  ``` &lt;dependency&gt;      &lt;groupId&gt;com.hazelcast&lt;/groupId&gt;      &lt;artifactId&gt;hazelcast-enterprise-tomcat6&lt;/artifactId&gt;      &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt;      &lt;groupId&gt;com.hazelcast&lt;/groupId&gt;      &lt;artifactId&gt;hazelcast-enterprise-tomcat7&lt;/artifactId&gt;      &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt;       &lt;groupId&gt;com.hazelcast&lt;/groupId&gt;       &lt;artifactId&gt;hazelcast-enterprise&lt;/artifactId&gt;       &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt;       &lt;groupId&gt;com.hazelcast&lt;/groupId&gt;       &lt;artifactId&gt;hazelcast-enterprise-all&lt;/artifactId&gt;       &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt; ```           "
});

documentTitles["index.html#setting-the-license-key"] = "Setting the License Key";
index.add({
    url: "index.html#setting-the-license-key",
    title: "Setting the License Key",
    body: "### Setting the License Key  Hazelcast Enterprise offers you two types of licenses: **Enterprise** and **Enterprise HD**. The supported features differ in your Hazelcast setup according to the license type you own.  * **Enterprise license**: In addition to the open source edition of Hazelcast, Enterprise features are the following: 	* Security 	* WAN Replication 	* Continuous Query Cache 	* Clustered REST 	* Clustered JMX  	* Web Sessions &lt;br&gt;&lt;/br&gt; * **Enterprise HD license**: In addition to the Enterprise features, Enterprise HD features are the following: 	* High-Density Memory Store 	* Hot Restart Persistence    To use Hazelcast Enterprise, you need to set the provided license key using one of the configuration methods shown below.   &lt;br&gt;&lt;/br&gt; **Declarative Configuration:**  Add the below line to any place you like in the file `hazelcast.xml`. This XML file offers you a declarative way to configure your Hazelcast. It is included in the Hazelcast download package. When you extract the downloaded package, you will see the file `hazelcast.xml` under the `/bin` directory.  ```xml &lt;hazelcast&gt;   ...   &lt;license-key&gt;Your Enterprise License Key&lt;/license-key&gt;   ... &lt;/hazelcast&gt; ```  &lt;br&gt;&lt;/br&gt; **Client Declarative Configuration:**  Native client distributions (Java, C++, .NET) of Hazelcast are open source. However, there are some Hazelcast Enterprise features which can be used with the Java Client such as SSL, Socket Interceptors, High-Density backed Near Cache, etc. In that case, you also need to have a Hazelcast Enterprise license and you should include this license in the file `hazelcast-client-full.xml` which is located under the directory `src/main/resources` of your `hazelcast-client` package, as shown below.  ```xml &lt;hazelcast-client&gt;   ...   &lt;license-key&gt;Your Enterprise License Key&lt;/license-key&gt;   ... &lt;/hazelcast-client&gt; ```  &lt;br&gt;&lt;/br&gt; **Programmatic Configuration:**  Alternatively, you can set your license key programmatically as shown below.  ```java Config config = new Config(); config.setLicenseKey( \&quot;Your Enterprise License Key\&quot; ); ```   &lt;br&gt;&lt;/br&gt; **Spring XML Configuration:**  If you are using Spring with Hazelcast, then you can set the license key using the Spring XML schema, as shown below.  ```xml &lt;hz:config&gt;   ...   &lt;hz:license-key&gt;Your Enterprise License Key&lt;/hz:license-key&gt;   ... &lt;/hz:config&gt; ```   &lt;br&gt;&lt;/br&gt; **JVM System Property:**  As another option, you can set your license key using the below command (the \&quot;-D\&quot; command line option).  ```plain -Dhazelcast.enterprise.license.key=Your Enterprise License Key ```  &lt;br&gt; &lt;/br&gt;       "
});

documentTitles["index.html#upgrading-from-3x"] = "Upgrading from 3.x";
index.add({
    url: "index.html#upgrading-from-3x",
    title: "Upgrading from 3.x",
    body: "### Upgrading from 3.x   - **Introducing the `spring-aware` element:** Before the release 3.5, Hazelcast uses `SpringManagedContext` to scan `SpringAware` annotations by default. This may cause some performance overhead for the users who do not use `SpringAware`. This behavior has been changed with the release of Hazelcast 3.5. `SpringAware` annotations are disabled by default. By introducing the `spring-aware` element, now it is possible to enable it by adding the `&lt;hz:spring-aware /&gt;` tag to the configuration. Please see the [Spring Integration section](#spring-integration).  - **Introducing new configuration options for WAN replication:** Starting with the release 3.6, WAN replication related system properties, which are configured on a per member basis, can now be configured per target cluster. The 4 system properties below are no longer valid.  	* `hazelcast.enterprise.wanrep.batch.size`, please see the [WAN Replication Batch Size](http://docs.hazelcast.org/docs/latest-dev/manual/html-single/index.html#batch-size).   	* `hazelcast.enterprise.wanrep.batchfrequency.seconds`, please see the [WAN Replication Batch Maximum Delay](http://docs.hazelcast.org/docs/latest-dev/manual/html-single/index.html#batch-maximum-delay).  	* `hazelcast.enterprise.wanrep.optimeout.millis`, please see the [WAN Replication Response Timeout](http://docs.hazelcast.org/docs/latest-dev/manual/html-single/index.html#response-timeout).  	* `hazelcast.enterprise.wanrep.queue.capacity`, please see the [WAN Replication Queue Capacity](http://docs.hazelcast.org/docs/latest-dev/manual/html-single/index.html#queue-capacity).   - **Removal of deprecated getId() method**:  The method `getId()` in the interface `DistributedObject` has been removed. Please use the method `getName()` instead.  - **Change in the Custom Serialization in the C++ Client Distribution**:  Before, the method `getTypeId()` was used to retrieve the ID of the object to be serialized. Now, the method `getHazelcastTypeId()` is used and you give your object as a parameter to this new method. Also, `getTypeId()` was used in your custom serializer class, now it has been renamed to `getHazelcastTypeId()` too. Note that, these changes also apply when you want to switch from Hazelcast 3.6.1 to 3.6.2 too.         "
});

documentTitles["index.html#upgrading-from-2x"] = "Upgrading from 2.x";
index.add({
    url: "index.html#upgrading-from-2x",
    title: "Upgrading from 2.x",
    body: "### Upgrading from 2.x   - **Removal of deprecated static methods:** The static methods of Hazelcast class reaching Hazelcast data components have been removed. The functionality of these methods can be reached from the HazelcastInstance interface. You should replace the following:  ```java Map&lt;Integer, String&gt; customers = Hazelcast.getMap( \&quot;customers\&quot; ); ```  with  ```java HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance(); // or if you already started an instance named \&quot;instance1\&quot; // HazelcastInstance hazelcastInstance = Hazelcast.getHazelcastInstanceByName( \&quot;instance1\&quot; ); Map&lt;Integer, String&gt; customers = hazelcastInstance.getMap( \&quot;customers\&quot; ); ```  - **Renaming \&quot;instance\&quot; to \&quot;distributed object\&quot;:** Before 3.0 there was confusion about the term \&quot;instance\&quot;: it was used for both the cluster members and the distributed objects (map, queue, topic, etc. instances). Starting with 3.0, the term instance will be only used for Hazelcast instances, namely cluster members. We will use the term \&quot;distributed object\&quot; for map, queue, etc. instances. You should replace the related methods with the new renamed ones. 3.0 clients are smart clients in that they know in which cluster member the data is located, so you can replace your lite members with native clients.  ```java public static void main( String[] args ) throws InterruptedException {   HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance();   IMap map = hazelcastInstance.getMap( \&quot;test\&quot; );   Collection&lt;Instance&gt; instances = hazelcastInstance.getInstances();   for ( Instance instance : instances ) {     if ( instance.getInstanceType() == Instance.InstanceType.MAP ) {       System.out.println( \&quot;There is a map with name: \&quot; + instance.getId() );     }   } } ```  with  ```java public static void main( String[] args ) throws InterruptedException {   HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance();   IMap map = hz.getMap( \&quot;test\&quot; );   Collection&lt;DistributedObject&gt; objects = hazelcastInstance.getDistributedObjects();   for ( DistributedObject distributedObject : objects ) {     if ( distributedObject instanceof IMap ) {       System.out.println( \&quot;There is a map with name: \&quot; + distributedObject.getName() );     }   } } ```  - **Package structure change:** PartitionService has been moved to package `com.hazelcast.core` from `com.hazelcast.partition`.   - **Listener API change:** Before 3.0, `removeListener` methods were taking the Listener object as a parameter. But this caused confusion because same listener object may be used as a parameter for different listener registrations. So we have changed the listener API. `addListener` methods returns a unique ID and you can remove a listener by using this ID. So you should do the following replacement if needed:  ```java IMap map = hazelcastInstance.getMap( \&quot;map\&quot; ); map.addEntryListener( listener, true ); map.removeEntryListener( listener ); ```      with 	 ```java IMap map = hazelcastInstance.getMap( \&quot;map\&quot; ); String listenerId = map.addEntryListener( listener, true ); map.removeEntryListener( listenerId ); ```  - **IMap changes:** - `tryRemove(K key, long timeout, TimeUnit timeunit)` returns boolean indicating whether operation is successful. - `tryLockAndGet(K key, long time, TimeUnit timeunit)` is removed. - `putAndUnlock(K key, V value)` is removed. - `lockMap(long time, TimeUnit timeunit)` and `unlockMap()` are removed. - `getMapEntry(K key)` is renamed as `getEntryView(K key)`. The returned object's type, MapEntry class is renamed as EntryView. - There is no predefined names for merge policies. You just give the full class name of the merge policy implementation.  ```xml &lt;merge-policy&gt;com.hazelcast.map.merge.PassThroughMergePolicy&lt;/merge-policy&gt; ```  Also MergePolicy interface has been renamed to MapMergePolicy and also returning null from the implemented `merge()` method causes the existing entry to be removed.  - **IQueue changes:** There is no change on IQueue API but there are changes on how `IQueue` is configured. With Hazelcast 3.0 there will be no backing map configuration for queue. Settings like backup count will be directly configured on queue config. For queue configuration details, please see the [Queue section](#queue). - **Transaction API change:** In Hazelcast 3.0, transaction API is completely different. Please see the [Transactions chapter](#transactions). - **ExecutorService API change:** Classes MultiTask and DistributedTask have been removed. All the functionality is supported by the newly presented interface IExecutorService. Please see the [Executor Service section](#executor-service). - **LifeCycleService API:** The lifecycle has been simplified. `pause()`, `resume()`, `restart()` methods have been removed. - **AtomicNumber:** `AtomicNumber` class has been renamed to `IAtomicLong`. - **ICountDownLatch:** `await()` operation has been removed. We expect users to use `await()` method with timeout parameters. - **ISemaphore API:** The `ISemaphore` has been substantially changed. `attach()`, `detach()` methods have been removed. - In 2.x releases, the default value for `max-size` eviction policy was **cluster_wide_map_size**. In 3.x releases, default is **PER_NODE**. After upgrading, the `max-size` should be set according to this new default, if it is not changed. Otherwise, it is likely that OutOfMemory exception may be thrown.          "
});

documentTitles["index.html#starting-the-member-and-client"] = "Starting the Member and Client";
index.add({
    url: "index.html#starting-the-member-and-client",
    title: "Starting the Member and Client",
    body: "## Starting the Member and Client  Having installed Hazelcast, you can get started.   In this short tutorial, you perform the following activities.  1. Create a simple Java application using the Hazelcast distributed map and queue.  2. Run our application twice to have a cluster with two members (JVMs).  3. Connect to our cluster from another Java application by using the Hazelcast Native Java Client API.  Let's begin.   - The following code starts the first Hazelcast member and creates and uses the `customers` map and queue.  ```java import com.hazelcast.core.Hazelcast; import com.hazelcast.core.HazelcastInstance;  import java.util.Map; import java.util.Queue;  public class GettingStarted {   public static void main( String[] args ) {     HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance();     Map&lt;Integer, String&gt; customers = hazelcastInstance.getMap( \&quot;customers\&quot; );     customers.put( 1, \&quot;Joe\&quot; );     customers.put( 2, \&quot;Ali\&quot; );     customers.put( 3, \&quot;Avi\&quot; );      System.out.println( \&quot;Customer with key 1: \&quot; + customers.get(1) );     System.out.println( \&quot;Map Size:\&quot; + customers.size() );      Queue&lt;String&gt; queueCustomers = hazelcastInstance.getQueue( \&quot;customers\&quot; );     queueCustomers.offer( \&quot;Tom\&quot; );     queueCustomers.offer( \&quot;Mary\&quot; );     queueCustomers.offer( \&quot;Jane\&quot; );     System.out.println( \&quot;First customer: \&quot; + queueCustomers.poll() );     System.out.println( \&quot;Second customer: \&quot;+ queueCustomers.peek() );     System.out.println( \&quot;Queue size: \&quot; + queueCustomers.size() );   } } ```  - Run this `GettingStarted` class a second time to get the second member  started. The members form a cluster and the output is similar to the following.  ``` Members [2] {   Member [127.0.0.1:5701]   Member [127.0.0.1:5702] this }                               ```  - Now, add the `hazelcast-client-`*`&lt;version&gt;`*`.jar` library to your classpath.  This is required to use a Hazelcast client.  - The following code starts a Hazelcast Client, connects to our cluster,  and prints the size of the `customers` map.  ```java     package com.hazelcast.test;  import com.hazelcast.client.config.ClientConfig; import com.hazelcast.client.HazelcastClient; import com.hazelcast.core.HazelcastInstance; import com.hazelcast.core.IMap;  public class GettingStartedClient {     public static void main( String[] args ) {         ClientConfig clientConfig = new ClientConfig();         HazelcastInstance client = HazelcastClient.newHazelcastClient( clientConfig );         IMap map = client.getMap( \&quot;customers\&quot; );         System.out.println( \&quot;Map Size:\&quot; + map.size() );     } } ``` - When you run it, you see the client properly connecting to the cluster  and printing the map size as **3**.  Hazelcast also offers a tool, **Management Center**, that enables you to monitor your cluster.  To use it, deploy the `mancenter-`*`&lt;version&gt;`*`.war` included in the ZIP file to your web server.  You can use it to monitor your maps, queues, and other distributed data structures and members. Please  see the [Management Center section](#management-center) for usage explanations.   By default, Hazelcast uses Multicast to discover other members that can form a cluster.  If you are  working with other Hazelcast developers on the same network, you may find yourself joining their  clusters under the default settings.  Hazelcast provides a way to segregate clusters within the same  network when using Multicast. Please see the [Creating Cluster Groups](#creating-cluster-groups)  for more information.  Alternatively, if you do not wish to use the default Multicast mechanism,  you can provide a fixed list of IP addresses that are allowed to join. Please see  the [Join Configuration section](#join) for more information. &lt;br&gt; &lt;/br&gt;  ***RELATED INFORMATION***  *You can also check the video tutorials &lt;a href=\&quot;http://hazelcast.org/getting-started/\&quot; target=\&quot;_blank\&quot;&gt;here&lt;/a&gt;.* &lt;br&gt; &lt;/br&gt;      "
});

documentTitles["index.html#using-the-scripts-in-the-package"] = "Using the Scripts In The Package";
index.add({
    url: "index.html#using-the-scripts-in-the-package",
    title: "Using the Scripts In The Package",
    body: "## Using the Scripts In The Package  When you download and extract the Hazelcast ZIP or TAR.GZ package, you will see 3 scripts under the `/bin` folder which provide basic functionalities for member and cluster management.  The following are the names and descriptions of each script:  - `start.sh` / `start.bat`: Starts a Hazelcast member with default configuration in the working directory*. - `stop.sh` / `stop.bat`: Stops the Hazelcast member that was started in the current working directory. - `cluster.sh`: Provides basic functionalities for cluster management such as getting and changing the cluster state, shutting down the cluster or forcing the cluster to clean its persisted data and make a fresh start.  ![image](images/NoteSmall.jpg) ***NOTE:*** *`start.sh` / `start.bat` scripts lets you start one Hazelcast instance per folder. To start a new instance, please unzip Hazelcast ZIP or TAR.GZ package in a new folder. *  Please refer to the [Using the Script cluster.sh section](#using-the-script-cluster-sh) to learn the usage of this script.       "
});

documentTitles["index.html#deploying-on-amazon-ec2"] = "Deploying On Amazon EC2";
index.add({
    url: "index.html#deploying-on-amazon-ec2",
    title: "Deploying On Amazon EC2",
    body: "## Deploying On Amazon EC2  You can deploy your Hazelcast project onto Amazon EC2 environment using Third Party tools such as &lt;a href=\&quot;https://www.vagrantup.com\&quot; target=\&quot;_blank\&quot;&gt;Vagrant&lt;/a&gt; and &lt;a href=\&quot;https://www.chef.io/chef/\&quot; target=\&quot;_blank\&quot;&gt;Chef&lt;/a&gt;.  You can find a sample deployment project (`amazon-ec2-vagrant-chef`) with step by step instructions in the `hazelcast-integration` folder of the **hazelcast-code-samples** package which you can download at &lt;a href=\&quot;http://hazelcast.org/download/\&quot; target=\&quot;_blank\&quot;&gt;hazelcast.org&lt;/a&gt;. Please refer to this sample project for more information.    "
});

documentTitles["index.html#deploying-using-docker"] = "Deploying using Docker";
index.add({
    url: "index.html#deploying-using-docker",
    title: "Deploying using Docker",
    body: "## Deploying using Docker  You can deploy your Hazelcast projects using the Docker containers. Hazelcast has three images on Docker:  - Hazelcast - Hazelcast Enterprise - Hazelcast Management Center   After you pull an image from the Docker registry, you can run your image to start the management center or a Hazelcast instance with Hazelcast's default configuration. All repositories provide the latest stable releases but you can pull a specific release too. You can also specify environment variables when running the image.  If you want to start a customized Hazelcast instance, you can extend the Hazelcast image by providing your own configuration file.  Please refer to &lt;a href=\&quot;https://hub.docker.com/u/hazelcast/\&quot; target=\&quot;_blank\&quot;&gt;https://hub.docker.com/u/hazelcast/&lt;/a&gt; for more information on each repository and the procedures to run a Hazelcast image.    "
});

documentTitles["index.html#hazelcast-overview"] = "Hazelcast Overview";
index.add({
    url: "index.html#hazelcast-overview",
    title: "Hazelcast Overview",
    body: "# Hazelcast Overview   Hazelcast is an open source In-Memory Data Grid (IMDG).  It provides elastically scalable distributed In-Memory computing, widely recognized as the fastest and most scalable approach to application performance. Hazelcast does this in open source. More importantly, Hazelcast makes distributed computing simple by offering distributed implementations of many developer friendly interfaces from Java such as Map, Queue, ExecutorService, Lock, and JCache. For example, the Map interface provides an In-Memory Key Value store which confers many of the advantages of NoSQL in terms of developer friendliness and developer productivity.  In addition to distributing data In-Memory, Hazelcast provides a convenient set of APIs to access the CPUs in your cluster for maximum processing speed. Hazelcast is designed to be lightweight and easy to use. Since Hazelcast is delivered as a compact library (JAR) and since it has no external dependencies other than Java, it easily plugs into your software solution and provides distributed data structures and distributed computing utilities.  Hazelcast is highly scalable and available (100% operational, never failing). Distributed applications can use Hazelcast for distributed caching, synchronization, clustering, processing, pub/sub messaging, etc. Hazelcast is implemented in Java and has clients for Java, C/C++, .NET and REST. Hazelcast also speaks memcache protocol. It plugs into Hibernate and can easily be used with any existing database system.  If you are looking for In-Memory speed, elastic scalability, and the developer friendliness of NoSQL, Hazelcast is a great choice.  **Hazelcast is simple**  Hazelcast is written in Java with no other dependencies. It exposes the same API from the familiar Java util package, exposing the same interfaces. Just add `hazelcast.jar` to your classpath, and you can quickly enjoy JVMs clustering and you can start building scalable applications.  **Hazelcast is Peer-to-Peer**  Unlike many NoSQL solutions, Hazelcast is peer-to-peer. There is no master and slave; there is no single point of failure. All nodes store equal amounts of data and do equal amounts of processing. You can embed Hazelcast in your existing application or use it in client and server mode where your application is a client to Hazelcast nodes.  **Hazelcast is scalable**  Hazelcast is designed to scale up to hundreds and thousands of nodes. Simply add new nodes and they will automatically discover the cluster and will linearly increase both memory and processing capacity. The nodes maintain a TCP connection between each other and all communication is performed through this layer.  **Hazelcast is fast**  Hazelcast stores everything in-memory. It is designed to perform very fast reads and updates.  **Hazelcast is redundant**  Hazelcast keeps the backup of each data entry on multiple nodes. On a node failure, the data is restored from the backup and the cluster will continue to operate without downtime.       "
});

documentTitles["index.html#sharding-in-hazelcast"] = "Sharding in Hazelcast";
index.add({
    url: "index.html#sharding-in-hazelcast",
    title: "Sharding in Hazelcast",
    body: "## Sharding in Hazelcast  Hazelcast shards are called Partitions. By default, Hazelcast has 271 partitions. Given a key, we serialize, hash and mode it with the number of partitions to find the partition which the key belongs to. The partitions themselves are distributed equally among the members of the cluster. Hazelcast also creates the backups of partitions and distributes them among nodes for redundancy.  &lt;br&gt;&lt;/br&gt; ***RELATED INFORMATION***  *Please refer to the [Data Partitioning section](#data-partitioning) for more information on how Hazelcast partitions your data.*       "
});

documentTitles["index.html#hazelcast-topology"] = "Hazelcast Topology";
index.add({
    url: "index.html#hazelcast-topology",
    title: "Hazelcast Topology",
    body: "## Hazelcast Topology  You can deploy a Hazelcast cluster in two ways: Embedded or Client/Server.  If you have an application whose main focal point is asynchronous or high performance computing and lots of task executions, then Embedded deployment is useful. In this type, members include both the application and Hazelcast data and services. The advantage of the Embedded deployment is having a low-latency data access.  See the below illustration.  ![Embedded Topology](images/P2Pcluster.jpg)    In the Client/Server deployment, Hazelcast data and services are centralized in one or more server members and they are accessed by the application through clients.  You can have a cluster of server members that can be independently created and scaled. Your clients communicate with these members to reach to Hazelcast data and services on them. Hazelcast provides native clients (Java, .NET and C++), Memcache clients and REST clients.  See the below illustration.  ![Client Server Topology](images/CSCluster.jpg)  Client/Server deployment has advantages including more predictable and reliable Hazelcast performance, easier identification of problem causes, and most importantly, better scalability.  When you need to scale in this deployment type, just add more Hazelcast server members. You can address client and server scalability concerns separately.  If you want low-latency data access, as it is in the Embedded deployment, and you also want the scalability advantages of the Client/Server deployment, you can consider to define near caches for your clients. This enables the frequently used data to be kept in the client's local memory. Please refer to [Configuring Client Near Cache](#configuring-client-near-cache).      "
});

documentTitles["index.html#why-hazelcast"] = "Why Hazelcast?";
index.add({
    url: "index.html#why-hazelcast",
    title: "Why Hazelcast?",
    body: "## Why Hazelcast?    **A Glance at Traditional Data Persistence**  Data is at the core of software systems. In conventional architectures, a relational database persists and provides access to data. Applications are talking directly with a database which has its backup as another machine. To increase performance, tuning or a faster machine is required. This can cost a large amount of money or effort.  There is also the idea of keeping copies of data next to the database, which is performed using technologies like external key-value stores or second level caching. This helps to offload the database. However, when the database is saturated or the applications perform mostly \&quot;put\&quot; operations (writes), this approach is of no use because it insulates the database only from the \&quot;get\&quot; loads (reads). Even if the applications are read-intensive, there can be consistency problems: when data changes, what happens to the cache, and how are the changes handled? This is when concepts like time-to-live (TTL) or write-through come in.  However, in the case of TTL, if the access is less frequent then the TTL, the result will always be a cache miss. On the other hand, in the case of write-through caches; if there are more than one of these caches in a cluster, then we again have consistency issues. This can be avoided by having the nodes communicating with each other so that entry invalidations can be propagated.  We can conclude that an ideal cache would combine TTL and write-through features. And, there are several cache servers and in-memory database solutions in this field. However, those are stand-alone single instances with a distribution mechanism to an extent provided by other technologies. This brings us back to square one: we would experience saturation or capacity issues if the product is a single instance or if consistency is not provided by the distribution.  **And, there is Hazelcast**  Hazelcast, a brand new approach to data, is designed around the concept of distribution. Hazelcast shares data around the cluster for flexibility and performance. It is an in-memory data grid for clustering and highly scalable data distribution.  One of the main features of Hazelcast is not having a master member. Each cluster member is configured to be the same in terms of functionality. The oldest member (the first member created in the cluster) automatically performs the data assignment to cluster members. If the oldest member dies, the second oldest member takes over.  Another main feature is the data being held entirely in-memory. This is fast. In the case of a failure, such as a member crash, no data will be lost since Hazelcast distributes copies of data across all the cluster members.  As shown in the feature list in the [Hazelcast Overview](#hazelcast-overview), Hazelcast supports a number of distributed data structures and distributed computing utilities. This provides powerful ways of accessing distributed clustered memory and accessing CPUs for true distributed computing.   **Hazelcast's Distinctive Strengths**   * It is open source. * It is only a JAR file. You do not need to install software. * It is a library, it does not impose an architecture on Hazelcast users. * It provides out of the box distributed data structures, such as Map, Queue, MultiMap, Topic, Lock and Executor. * There is no \&quot;master\&quot;, meaning no single point of failure in Hazelcast cluster; each member in the cluster is configured to be functionally the same. * When the size of your memory and compute requirements increase, new members can be dynamically joined to the cluster to scale elastically. * Data is resilient to member failure. Data backups are distributed across the cluster. This is a big benefit when a member in the cluster crashes; data will not be lost. * Members are always aware of each other unlike the traditional key-value caching solutions. * You can build your own custom distributed data structures using the Service Programming Interface (SPI) if you are not happy with the data structures provided.  Finally, Hazelcast has a vibrant open source community enabling it to be continuously developed.  Hazelcast is a fit when you need:  -	analytic applications requiring big data processing by partitioning the data, -	to retain frequently accessed data in the grid, -	a cache, particularly an open source JCache provider with elastic distributed scalability, -	a primary data store for applications with utmost performance, scalability and low-latency requirements, -	an In-Memory NoSQL Key Value Store, -	publish/subscribe communication at highest speed and scalability between applications, -	applications that need to scale elastically in distributed and cloud environments, -	a highly available distributed cache for applications, -	an alternative to Coherence and Terracotta.      "
});

documentTitles["index.html#data-partitioning"] = "Data Partitioning";
index.add({
    url: "index.html#data-partitioning",
    title: "Data Partitioning",
    body: "## Data Partitioning  As you read in the [Sharding in Hazelcast section](#sharding-in-hazelcast), Hazelcast shards are called Partitions. Partitions are memory segments, where each of those segments can contain hundreds or thousands of data entries, depending on the memory capacity of your system.   By default, Hazelcast offers 271 partitions. When you start a cluster member, it starts with these 271 partitions. The following illustration shows the partitions in a Hazelcast cluster with single member.  ![Single Member with Partitions](images/NodePartition.jpg)  When you start a second member on that cluster (creating a Hazelcast cluster with 2 members), the partitions are distributed as shown in the following illustration.   ![Cluster with Two Members - Backups are Created](images/BackupPartitions.jpg)  In the illustration, the partitions with black text are primary partitions, and the partitions with blue text are replica partitions (backups). The first member has 135 primary partitions (black), and each of these partitions are backed up in the second member (blue). At the same time, the first member also has the replica partitions of the second member's primary partitions.  As you add more members, Hazelcast one-by-one moves some of the primary and replica partitions to the new members, making all members equal and redundant. Only the minimum amount of partitions will be moved to scale out Hazelcast. The following is an illustration of the partition distributions in a Hazelcast cluster with 4 members.  ![Cluster with Four Members](images/4NodeCluster.jpg)  Hazelcast distributes the partitions equally among the members of the cluster. Hazelcast creates the backups of partitions and distributes them among the members for redundancy.  Partition distributions in the above illustrations are for your convenience and for a more clearer description. Normally, the partitions are not distributed in an order (as they are shown in these illustrations), they are distributed randomly. The important point here is that Hazelcast equally distributes the partitions and their backups among the members.  With Hazelcast 3.6, lite members are introduced. Lite members are a new type of members that do not own any partition. Lite members are intended for use in computationally-heavy task executions and listener registrations. Although they do not own any partitions, they can access partitions that are owned by other members in the cluster.  &lt;br&gt;&lt;/br&gt; ***RELATED INFORMATION***  *Please refer to the [Enabling Lite Members section](#enabling-lite-members).* &lt;br&gt;&lt;/br&gt;    "
});

documentTitles["index.html#how-the-data-is-partitioned"] = "How the Data is Partitioned";
index.add({
    url: "index.html#how-the-data-is-partitioned",
    title: "How the Data is Partitioned",
    body: "### How the Data is Partitioned  Hazelcast distributes data entries into the partitions using a hashing algorithm. Given an object key (for example, for a map) or an object name (for example, for a topic or list):  - the key or name is serialized (converted into a byte array), - this byte array is hashed, and - the result of the hash is mod by the number of partitions.  The result of this modulo - *MOD(hash result, partition count)* -  is the partition in which the data will be stored, that is the **partition ID**. For ALL members you have in your cluster, the partition ID for a given key will always be the same.  "
});

documentTitles["index.html#partition-table"] = "Partition Table";
index.add({
    url: "index.html#partition-table",
    title: "Partition Table",
    body: "### Partition Table  When you start a member, a partition table is created within it. This table stores the partition IDs and the cluster members they belong. The purpose of this table is to make all members (including lite members) in the cluster aware of this information, making sure that each member knows where the data is.  The oldest member in the cluster (the one that started first) periodically sends the partition table to all members. In this way, each member in the cluster is informed about any changes to the partition ownership. The ownerships may be changed when, for example, a new member joins the cluster, or when a member leaves the cluster.  ![image](images/NoteSmall.jpg) ***NOTE:*** *If the oldest member goes down, the next oldest member sends the partition table information to the other ones.*  You can configure the frequency (how often) that the member sends the partition table the information by using the `hazelcast.partition.table.send.interval` system property. The property is set to every 15 seconds by default.   "
});

documentTitles["index.html#repartitioning"] = "Repartitioning";
index.add({
    url: "index.html#repartitioning",
    title: "Repartitioning",
    body: "### Repartitioning  Repartitioning is the process of redistribution of partition ownerships. Hazelcast performs the repartitioning in the following cases:  - When a member joins to the cluster. - When a member leaves the cluster.  In these cases, the partition table in the oldest member is updated with the new partition ownerships.   Note that if a lite member joins or leaves a cluster, repartitioning is not triggered since lite members do not own any partitions.        "
});

documentTitles["index.html#use-cases"] = "Use Cases";
index.add({
    url: "index.html#use-cases",
    title: "Use Cases",
    body: "## Use Cases  Some example usages are listed below. Hazelcast can be used: -	To share server configuration/information to see how a cluster performs,    -	To cluster highly changing data with event notifications (e.g. user based events) and to queue and distribute background tasks,    -	As a simple Memcache with near cache,    -	As a cloud-wide scheduler of certain processes that need to be performed on some nodes,    -	To share information (user information, queues, maps, etc.) on the fly with multiple nodes in different installations under OSGI environments,    -	To share thousands of keys in a cluster where there is a web service interface on an application server and some validation,    -	As a distributed topic (publish/subscribe server) to build scalable chat servers for smartphones,    -	As a front layer for a Cassandra back-end,    -	To distribute user object states across the cluster, to pass messages between objects and to share system data structures (static initialization state, mirrored objects, object identity generators),    -	As a multi-tenancy cache where each tenant has its own map,    -	To share datasets (e.g. table-like data structure) to be used by applications,    -	To distribute the load and collect status from Amazon EC2 servers where front-end is developed using, for example, Spring framework,    -	As a real time streamer for performance detection,  -	As storage for session data in web applications (enables horizontal scalability of the web application).     "
});

documentTitles["index.html#resources"] = "Resources";
index.add({
    url: "index.html#resources",
    title: "Resources",
    body: "## Resources   -	Hazelcast source code can be found at &lt;a href=\&quot;https://github.com/hazelcast/hazelcast\&quot; target=\&quot;_blank\&quot;&gt;Github/Hazelcast&lt;/a&gt;. -	Hazelcast API can be found at &lt;a href=\&quot;http://www.hazelcast.org/docs/latest-dev/javadoc/\&quot; target=\&quot;_blank\&quot;&gt;Hazelcast.org/docs/Javadoc&lt;/a&gt;. -	Code samples can be downloaded from &lt;a href=\&quot;http://hazelcast.org/download/\&quot; target=\&quot;_blank\&quot;&gt;Hazelcast.org/download&lt;/a&gt;. -	More use cases and resources can be found at &lt;a href=\&quot;http://www.hazelcast.com\&quot; target=\&quot;_blank\&quot;&gt;Hazelcast.com&lt;/a&gt;. -	Questions and discussions can be posted at &lt;a href=\&quot;https://groups.google.com/forum/#!forum/hazelcast\&quot; target=\&quot;_blank\&quot;&gt;Hazelcast mail group&lt;/a&gt;.  &lt;br&gt; &lt;/br&gt;        "
});

documentTitles["index.html#understanding-configuration"] = "Understanding Configuration";
index.add({
    url: "index.html#understanding-configuration",
    title: "Understanding Configuration",
    body: "# Understanding Configuration  This chapter describes the options to configure your Hazelcast applications and explains the utilities which you can make use of while configuring. You can configure Hazelcast using one or mix of the following options:   * Declarative way * Programmatic way * Using Hazelcast system properties * Within the Spring context  "
});

documentTitles["index.html#configuring-declaratively"] = "Configuring Declaratively";
index.add({
    url: "index.html#configuring-declaratively",
    title: "Configuring Declaratively",
    body: "## Configuring Declaratively   This is the configuration option where you use an XML configuration file. When you download and unzip `hazelcast-&lt;version&gt;.zip`, you will see the following files present in `/bin` folder, which are standard XML-formatted configuration files:  * `hazelcast.xml`: Default declarative configuration file for Hazelcast. The configuration in this XML file should be fine for most of the Hazelcast users. If not, you can tailor this XML file according to your needs by adding/removing/modifying properties. * `hazelcast-full-example.xml`: Configuration file which includes all Hazelcast configuration elements and attributes with their descriptions. It is the \&quot;superset\&quot; of `hazelcast.xml`. You can use `hazelcast-full-example.xml` as a reference document to learn about any element or attribute, or you can change its name to `hazelcast.xml` and start to use it as your Hazelcast configuration file.  A part of `hazelcast.xml` is shown as an example below.  ```xml &lt;group&gt; 	&lt;name&gt;dev&lt;/name&gt; 	&lt;password&gt;dev-pass&lt;/password&gt; &lt;/group&gt; &lt;management-center enabled=\&quot;false\&quot;&gt;http://localhost:8080/mancenter&lt;/management-center&gt; &lt;network&gt; 	&lt;port auto-increment=\&quot;true\&quot; port-count=\&quot;100\&quot;&gt;5701&lt;/port&gt; 	&lt;outbound-ports&gt; 		&lt;!-- 		Allowed port range when connecting to other members. 		0 or * means the port provided by the system. 		--&gt; 		&lt;ports&gt;0&lt;/ports&gt; 	&lt;/outbound-ports&gt; 	&lt;join&gt; 		&lt;multicast enabled=\&quot;true\&quot;&gt; 		&lt;multicast-group&gt;224.2.2.3&lt;/multicast-group&gt; 		&lt;multicast-port&gt;54327&lt;/multicast-port&gt; 		&lt;/multicast&gt; 		&lt;tcp-ip enabled=\&quot;false\&quot;&gt; ```  "
});

documentTitles["index.html#composing-declarative-configuration"] = "Composing Declarative Configuration";
index.add({
    url: "index.html#composing-declarative-configuration",
    title: "Composing Declarative Configuration",
    body: "### Composing Declarative Configuration  You can compose the declarative configuration of your Hazelcast member or Hazelcast client from multiple declarative configuration snippets. In order to compose a declarative configuration, you can use the `&lt;import/&gt;` element to load different declarative configuration files.  Let's say you want to compose the declarative configuration for Hazelcast out of two configurations: `development-group-config.xml` and `development-network-config.xml`. These two configurations are shown below.  `development-group-config.xml`:  ```xml &lt;hazelcast&gt;   &lt;group&gt;       &lt;name&gt;dev&lt;/name&gt;       &lt;password&gt;dev-pass&lt;/password&gt;   &lt;/group&gt; &lt;/hazelcast&gt; ``` &lt;br&gt;&lt;/br&gt;  `development-network-config.xml`:  ```xml &lt;hazelcast&gt;   &lt;network&gt;     &lt;port auto-increment=\&quot;true\&quot; port-count=\&quot;100\&quot;&gt;5701&lt;/port&gt;     &lt;join&gt;         &lt;multicast enabled=\&quot;true\&quot;&gt;             &lt;multicast-group&gt;224.2.2.3&lt;/multicast-group&gt;             &lt;multicast-port&gt;54327&lt;/multicast-port&gt;         &lt;/multicast&gt;     &lt;/join&gt;   &lt;/network&gt; &lt;/hazelcast&gt; ```  To get your example Hazelcast declarative configuration out of the above two, use the `&lt;import/&gt;` element as shown below.   ```xml &lt;hazelcast&gt;   &lt;import resource=\&quot;development-group-config.xml\&quot;/&gt;   &lt;import resource=\&quot;development-network-config.xml\&quot;/&gt; &lt;/hazelcast&gt; ```  This feature also applies to the declarative configuration of Hazelcast client. Please see the following examples.   `client-group-config.xml`:  ```xml &lt;hazelcast-client&gt;   &lt;group&gt;       &lt;name&gt;dev&lt;/name&gt;       &lt;password&gt;dev-pass&lt;/password&gt;   &lt;/group&gt; &lt;/hazelcast-client&gt; ``` &lt;br&gt;&lt;/br&gt;  `client-network-config.xml`:  ```xml &lt;hazelcast-client&gt;     &lt;network&gt;         &lt;cluster-members&gt;             &lt;address&gt;127.0.0.1:7000&lt;/address&gt;         &lt;/cluster-members&gt;     &lt;/network&gt; &lt;/hazelcast-client&gt; ```  To get a Hazelcast client declarative configuration from the above two examples, use the `&lt;import/&gt;` element as shown below.  ```xml &lt;hazelcast-client&gt;   &lt;import resource=\&quot;client-group-config.xml\&quot;/&gt;   &lt;import resource=\&quot;client-network-config.xml\&quot;/&gt; &lt;/hazelcast&gt; ```   &lt;br&gt;&lt;/br&gt; ![image](images/NoteSmall.jpg) ***NOTE:*** *Use `&lt;import/&gt;` element on top level of the XML hierarchy.* &lt;br&gt;&lt;/br&gt;  Using the element `&lt;import&gt;`, you can also load XML resources from classpath and file system:  ```xml &lt;hazelcast&gt;   &lt;import resource=\&quot;file:///etc/hazelcast/development-group-config.xml\&quot;/&gt; &lt;!-- loaded from filesystem --&gt;   &lt;import resource=\&quot;classpath:development-network-config.xml\&quot;/&gt;  &lt;!-- loaded from classpath --&gt; &lt;/hazelcast&gt; ```  The element `&lt;import&gt;` supports placeholders too. Please see the following example snippet:  ```xml &lt;hazelcast&gt;   &lt;import resource=\&quot;${environment}-group-config.xml\&quot;/&gt;   &lt;import resource=\&quot;${environment}-network-config.xml\&quot;/&gt; &lt;/hazelcast&gt; ```    "
});

documentTitles["index.html#configuring-programmatically"] = "Configuring Programmatically";
index.add({
    url: "index.html#configuring-programmatically",
    title: "Configuring Programmatically",
    body: "## Configuring Programmatically  Besides declarative configuration, you can configure your cluster programmatically. For this you can create a `Config` object, set/change its properties and attributes, and use this `Config` object to create a new Hazelcast member. Following is an example code which configures some network and Hazelcast Map properties.  ```java Config config = new Config(); config.getNetworkConfig().setPort( 5900 ) 					.setPortAutoIncrement( false );                  MapConfig mapConfig = new MapConfig(); mapConfig.setName( \&quot;testMap\&quot; ) 					.setBackupCount( 2 ); 					.setTimeToLiveSeconds( 300 );          config.addMapConfig( mapConfig ); ```  To create a Hazelcast member with the above example configuration, pass the configuration object as shown below:  ``` HazelcastInstance hazelcast = Hazelcast.newHazelcastInstance( config ); ```  You can also create a named Hazelcast member. In this case, you should set `instanceName` of `Config` object as shown below:  ```java Config config = new Config(); config.setInstanceName( \&quot;my-instance\&quot; ); Hazelcast.newHazelcastInstance( config ); ```  To retrieve an existing Hazelcast member by its name, use the following:      ``` Hazelcast.getHazelcastInstanceByName( \&quot;my-instance\&quot; ); ```  To retrieve all existing Hazelcast members, use the following:  ``` Hazelcast.getAllHazelcastInstances(); ```  &lt;br&gt; ![image](images/NoteSmall.jpg) ***NOTE:*** *Hazelcast performs schema validation through the file `hazelcast-config-&lt;version&gt;.xsd` which comes with your Hazelcast libraries. Hazelcast throws a meaningful exception if there is an error in the declarative or programmatic configuration.*  &lt;br&gt;  If you want to specify your own configuration file to create `Config`, Hazelcast supports several ways including filesystem, classpath, InputStream, and URL:  - `Config cfg = new XmlConfigBuilder(xmlFileName).build();` - `Config cfg = new XmlConfigBuilder(inputStream).build();` - `Config cfg = new ClasspathXmlConfig(xmlFileName);` - `Config cfg = new FileSystemXmlConfig(configFilename);` - `Config cfg = new UrlXmlConfig(url);` - `Config cfg = new InMemoryXmlConfig(xml);`   "
});

documentTitles["index.html#configuring-with-system-properties"] = "Configuring with System Properties";
index.add({
    url: "index.html#configuring-with-system-properties",
    title: "Configuring with System Properties",
    body: "## Configuring with System Properties  You can use system properties to configure some aspects of Hazelcast. You set these properties as name and value pairs through declarative configuration, programmatic configuration or JVM system property. Following are examples for each option.  **Declaratively:**  ```xml   ....   &lt;properties&gt;     &lt;property name=\&quot;hazelcast.property.foo\&quot;&gt;value&lt;/property&gt;     ....   &lt;/properties&gt; &lt;/hazelcast&gt; ```  **Programmatically:**  ```java Config config = new Config() ; config.setProperty( \&quot;hazelcast.property.foo\&quot;, \&quot;value\&quot; ); ```  **Using JVM's `System` class or `-D` argument:**  `System.setProperty( \&quot;hazelcast.property.foo\&quot;, \&quot;value\&quot; );`  or  `java -Dhazelcast.property.foo=value`  You will see Hazelcast system properties mentioned throughout this Reference Manual as required in some of the chapters and sections. All Hazelcast system properties are listed in the [System Properties appendix](#system-properties) with their descriptions, default values and property types as a reference for you.    "
});

documentTitles["index.html#configuring-within-spring-context"] = "Configuring within Spring Context";
index.add({
    url: "index.html#configuring-within-spring-context",
    title: "Configuring within Spring Context",
    body: "## Configuring within Spring Context  If you use Hazelcast with [Spring](https://spring.io/) you can declare beans using the namespace `hazelcast`. When you add the namespace declaration to the element `beans` in the Spring context file, you can start to use the namespace shortcut `hz` to be used as a bean declaration. Following is an example Hazelcast configuration when integrated with Spring:  ``` &lt;hz:hazelcast id=\&quot;instance\&quot;&gt;   &lt;hz:config&gt;     &lt;hz:group name=\&quot;dev\&quot; password=\&quot;password\&quot;/&gt;     &lt;hz:network port=\&quot;5701\&quot; port-auto-increment=\&quot;false\&quot;&gt;       &lt;hz:join&gt;         &lt;hz:multicast enabled=\&quot;false\&quot;/&gt;         &lt;hz:tcp-ip enabled=\&quot;true\&quot;&gt;           &lt;hz:members&gt;10.10.1.2, 10.10.1.3&lt;/hz:members&gt;         &lt;/hz:tcp-ip&gt;       &lt;/hz:join&gt;     &lt;/hz:network&gt;   &lt;/hz:config&gt; &lt;/hz:hazelcast&gt; ```  Please see the [Spring Integration section](#spring-integration) for more information on Hazelcast-Spring integration.   "
});

documentTitles["index.html#checking-configuration"] = "Checking Configuration";
index.add({
    url: "index.html#checking-configuration",
    title: "Checking Configuration",
    body: "## Checking Configuration  When you start a Hazelcast member without passing a `Config` object, as explained in the [Configuring Programmatically section](#configuring-programmatically), Hazelcast checks the member's configuration as follows:  -	First, it looks for the `hazelcast.config` system property. If it is set, its value is used as the path. This is useful if you want to be able to change your Hazelcast configuration; you can do this because it is not embedded within the application. You can set the `config` option with the following command:   	`- Dhazelcast.config=`*`&lt;path to the hazelcast.xml&gt;`*. 	 	The path can be a regular one or a classpath reference with the prefix `classpath:`. -	If the above system property is not set, Hazelcast then checks whether there is a `hazelcast.xml` file in the working directory. -	If not, it then checks whether `hazelcast.xml` exists on the classpath. -	If none of the above works, Hazelcast loads the default configuration (`hazelcast.xml`) that comes with your Hazelcast package.  Before configuring Hazelcast, please try to work with the default configuration to see if it works for you. This default configuration should be fine for most of the users. If not, you can consider to modify the configuration to be more suitable for your environment.    "
});

documentTitles["index.html#using-wildcards"] = "Using Wildcards";
index.add({
    url: "index.html#using-wildcards",
    title: "Using Wildcards",
    body: "## Using Wildcards  Hazelcast supports wildcard configuration for all distributed data structures that can be configured using `Config`, that is, for all except `IAtomicLong`, `IAtomicReference`. Using an asterisk (\*) character in the name, different instances of maps, queues, topics, semaphores, etc. can be configured by a single configuration.  A single asterisk (\*) can be placed anywhere inside the configuration name.  For instance, a map named `com.hazelcast.test.mymap` can be configured using one of the following configurations.  ```xml &lt;map name=\&quot;com.hazelcast.test.*\&quot;&gt; ... &lt;/map&gt; ``` ```xml &lt;map name=\&quot;com.hazel*\&quot;&gt; ... &lt;/map&gt; ``` ```xml &lt;map name=\&quot;*.test.mymap\&quot;&gt; ... &lt;/map&gt; ``` ```xml &lt;map name=\&quot;com.*test.mymap\&quot;&gt; ... &lt;/map&gt; ```  Or a queue '`com.hazelcast.test.myqueue`':  ```xml &lt;queue name=\&quot;*hazelcast.test.myqueue\&quot;&gt; ... &lt;/queue&gt; ``` ```xml &lt;queue name=\&quot;com.hazelcast.*.myqueue\&quot;&gt; ... &lt;/queue&gt; ```   "
});

documentTitles["index.html#using-variables"] = "Using Variables";
index.add({
    url: "index.html#using-variables",
    title: "Using Variables",
    body: "## Using Variables  In your Hazelcast and/or Hazelcast Client declarative configuration, you can use variables to set the values of the elements. This is valid when you set a system property programmatically or you use the command line interface. You can use a variable in the declarative configuration to access the values of the system properties you set.  For example, see the following command that sets two system properties.  ``` -Dgroup.name=dev -Dgroup.password=somepassword ```  Let's get the values of these system properties in the declarative configuration of Hazelcast, as shown below.  ```xml &lt;hazelcast&gt;   &lt;group&gt;     &lt;name&gt;${group.name}&lt;/name&gt;     &lt;password&gt;${group.password}&lt;/password&gt;   &lt;/group&gt; &lt;/hazelcast&gt; ```  This also applies to the declarative configuration of Hazelcast Client, as shown below.  ```xml &lt;hazelcast-client&gt;   &lt;group&gt;     &lt;name&gt;${group.name}&lt;/name&gt;     &lt;password&gt;${group.password}&lt;/password&gt;   &lt;/group&gt; &lt;/hazelcast-client&gt; ```  If you do not want to rely on the system properties, you can use the `XmlConfigBuilder` and explicitly set a `Properties` instance, as shown below.   ```java Properties properties = new Properties();  // fill the properties, e.g. from database/LDAP, etc.  XmlConfigBuilder builder = new XmlConfigBuilder(); builder.setProperties(properties) Config config = builder.build(); HazelcastInstance hz = Hazelcast.newHazelcastInstance(config); ```     "
});

documentTitles["index.html#setting-up-clusters"] = "Setting Up Clusters";
index.add({
    url: "index.html#setting-up-clusters",
    title: "Setting Up Clusters",
    body: "# Setting Up Clusters  This chapter describes Hazelcast clusters and the methods cluster members use to form a Hazelcast cluster.   "
});

documentTitles["index.html#discovering-cluster-members"] = "Discovering Cluster Members";
index.add({
    url: "index.html#discovering-cluster-members",
    title: "Discovering Cluster Members",
    body: "## Discovering Cluster Members  A Hazelcast cluster is a network of cluster members that run Hazelcast. Cluster members (also called nodes) automatically join together to form a cluster. This automatic joining takes place with various discovery mechanisms that the cluster members use to find each other. Hazelcast uses the following discovery mechanisms:  - [Multicast](#discovering-members-by-multicast) - [TCP](#discovering-members-by-tcp) - [EC2 Cloud](#discovering-members-within-ec2-cloud) - [jclouds&amp;reg;](#discovering-members-with-jclouds)  Each discovery mechanism is explained in the following sections.  	 ![image](images/NoteSmall.jpg) ***NOTE:*** *After a cluster is formed, communication between cluster members is always via TCP/IP, regardless of the discovery mechanism used.*         "
});

documentTitles["index.html#discovering-members-by-multicast"] = "Discovering Members by Multicast";
index.add({
    url: "index.html#discovering-members-by-multicast",
    title: "Discovering Members by Multicast",
    body: "### Discovering Members by Multicast  With the multicast auto-discovery mechanism, Hazelcast allows cluster members to find each other using multicast communication. The cluster members do not need to know the concrete addresses of the other members, they just multicast to all the other members for listening. It depends on your environment if multicast is possible or allowed.  To set your Hazelcast to multicast auto-discovery, set the following configuration elements. Please refer to the [multicast element section](#multicast-element) for the full description of the multicast discovery configuration elements.  - Set the `enabled` attribute of the `multicast` element to \&quot;true\&quot;. - Set `multicast-group`, `multicast-port`, `multicast-time-to-live`, etc. to your multicast values. - Set the `enabled` attribute of both `tcp-ip` and `aws` elements to \&quot;false\&quot;.  The following is an example declarative configuration.  ```xml &lt;hazelcast&gt;    ...   &lt;network&gt;     ...         &lt;join&gt;             &lt;multicast enabled=\&quot;true\&quot;&gt;                 &lt;multicast-group&gt;224.2.2.3&lt;/multicast-group&gt;                 &lt;multicast-port&gt;54327&lt;/multicast-port&gt;                 &lt;multicast-time-to-live&gt;32&lt;/multicast-time-to-live&gt;                 &lt;multicast-timeout-seconds&gt;2&lt;/multicast-timeout-seconds&gt;                 &lt;trusted-interfaces&gt;                    &lt;interface&gt;192.168.1.102&lt;/interface&gt;                 &lt;/trusted-interfaces&gt;                &lt;/multicast&gt;             &lt;tcp-ip enabled=\&quot;false\&quot;&gt;             &lt;/tcp-ip&gt;             &lt;aws enabled=\&quot;false\&quot;&gt;             &lt;/aws&gt;         &lt;/join&gt;   &lt;network&gt;      ```  Pay attention to the `multicast-timeout-seconds` element. `multicast-timeout-seconds` specifies the time in seconds that a node should wait for a valid multicast response from another node running in the network before declaring itself as the leader node (the first node joined to the cluster) and creating its own cluster. This only applies to the startup of nodes where no leader has been assigned yet. If you specify a high value to `multicast-timeout-seconds`, such as 60 seconds, it means that until a leader is selected, each node will wait 60 seconds before moving on. Be careful when providing a high value. Also be careful not to set the value too low, or the nodes might give up too early and create their own cluster.         "
});

documentTitles["index.html#discovering-members-by-tcp"] = "Discovering Members by TCP";
index.add({
    url: "index.html#discovering-members-by-tcp",
    title: "Discovering Members by TCP",
    body: "### Discovering Members by TCP  If multicast is not the preferred way of discovery for your environment, then you can configure Hazelcast to be a full TCP/IP cluster. When you configure Hazelcast to discover members by TCP/IP, you must list all or a subset of the members' hostnames and/or IP addresses as cluster members. You do not have to list all of these cluster members, but at least one of the listed members has to be active in the cluster when a new member joins.  To set your Hazelcast to be a full TCP/IP cluster, set the following configuration elements. Please refer to the [tcp-ip element section](#tcp-ip-element) for the full description of the TCP/IP discovery configuration elements.  - Set the `enabled` attribute of the `multicast` element to \&quot;false\&quot;. - Set the `enabled` attribute of the `aws` element to \&quot;false\&quot;. - Set the `enabled` attribute of the `tcp-ip` element to \&quot;true\&quot;. - Set your `member` elements within the `tcp-ip` element.  The following is an example declarative configuration.  ```xml &lt;hazelcast&gt;    ...   &lt;network&gt;     ...     &lt;join&gt;       &lt;multicast enabled=\&quot;false\&quot;&gt;       &lt;/multicast&gt;       &lt;tcp-ip enabled=\&quot;true\&quot;&gt;         &lt;member&gt;machine1&lt;/member&gt;         &lt;member&gt;machine2&lt;/member&gt;         &lt;member&gt;machine3:5799&lt;/member&gt;         &lt;member&gt;192.168.1.0-7&lt;/member&gt;         &lt;member&gt;192.168.1.21&lt;/member&gt;       &lt;/tcp-ip&gt;       ...     &lt;/join&gt;     ...   &lt;/network&gt;   ... &lt;/hazelcast&gt; ```  As shown above, you can provide IP addresses or hostnames for `member` elements. You can also give a range of IP addresses, such as `192.168.1.0-7`.  Instead of providing members line by line as shown above, you also have the option to use the `members` element and write comma-separated IP addresses, as shown below.  `&lt;members&gt;192.168.1.0-7,192.168.1.21&lt;/members&gt;`  If you do not provide ports for the members, Hazelcast automatically tries the ports 5701, 5702, and so on.  By default, Hazelcast binds to all local network interfaces to accept incoming traffic. You can change this behavior using the system property `hazelcast.socket.bind.any`. If you set this property to `false`, Hazelcast uses the interfaces specified in the `interfaces` element (please refer to the [Interfaces Configuration section](#interfaces)). If no interfaces are provided, then it will try to resolve one interface to bind from the `member` elements.       "
});

documentTitles["index.html#discovering-members-within-ec2-cloud"] = "Discovering Members within EC2 Cloud";
index.add({
    url: "index.html#discovering-members-within-ec2-cloud",
    title: "Discovering Members within EC2 Cloud",
    body: "### Discovering Members within EC2 Cloud  Hazelcast supports EC2 Auto Discovery. It is useful when you do not want to provide or you cannot provide the list of possible IP addresses.   To configure your cluster to use EC2 Auto Discovery, set the following configuration elements. Please refer to the [aws element section](#aws-element) for the full description of the EC2 Auto Discovery configuration elements.  - Add the *hazelcast-cloud.jar* dependency to your project. Note that it is also bundled inside *hazelcast-all.jar*. The Hazelcast cloud module does not depend on any other third party modules. - Disable join over multicast and TCP/IP: set the `enabled` attribute of the `multicast` element to \&quot;false\&quot;, and set the `enabled` attribute of the `tcp-ip` element to \&quot;false\&quot;. - Set the `enabled` attribute of the `aws` element to \&quot;true\&quot;. - Within the `aws` element, provide your credentials (access and secret key), your region, etc.  The following is an example declarative configuration.  ```xml  &lt;hazelcast&gt;    ...   &lt;network&gt;     ...     &lt;join&gt;       &lt;multicast enabled=\&quot;false\&quot;&gt;&lt;/multicast&gt;       &lt;tcp-ip enabled=\&quot;false\&quot;&gt;&lt;/tcp-ip&gt;       &lt;aws enabled=\&quot;true\&quot;&gt;         &lt;access-key&gt;my-access-key&lt;/access-key&gt;         &lt;secret-key&gt;my-secret-key&lt;/secret-key&gt;         &lt;region&gt;us-west-1&lt;/region&gt;         &lt;host-header&gt;ec2.amazonaws.com&lt;/host-header&gt;         &lt;security-group-name&gt;hazelcast-sg&lt;/security-group-name&gt;         &lt;tag-key&gt;type&lt;/tag-key&gt;         &lt;tag-value&gt;hz-nodes&lt;/tag-value&gt;       &lt;/aws&gt;     &lt;/join&gt; ```    "
});

documentTitles["index.html#debugging"] = "Debugging";
index.add({
    url: "index.html#debugging",
    title: "Debugging",
    body: "#### Debugging  When needed, Hazelcast can log the events for the instances that exist in a region. To see what has happened or to trace the activities while forming the cluster, change the log level in your logging mechanism to `FINEST` or `DEBUG`. After this change, you can also see in the generated log whether the instances are accepted or rejected, and the reason the instances were rejected. Note that changing the log level in this way may affect the performance of the cluster. Please see the [Logging Configuration section](#logging-configuration) for information on logging mechanisms.  &lt;br&gt; &lt;/br&gt; ***RELATED INFORMATION***  *You can download the white paper *\&quot;Hazelcast on AWS: Best Practices for Deployment\&quot;* from &lt;a href=\&quot;http://hazelcast.com/resources/hazelcast-on-aws-best-practices-for-deployment/\&quot; target=\&quot;_blank\&quot;&gt;Hazelcast.com&lt;/a&gt;.* &lt;br&gt; &lt;/br&gt;           "
});

documentTitles["index.html#discovering-members-with-jclouds"] = "Discovering Members with jclouds";
index.add({
    url: "index.html#discovering-members-with-jclouds",
    title: "Discovering Members with jclouds",
    body: "### Discovering Members with jclouds  Hazelcast members and native clients support jclouds&amp;reg; for discovery. It is useful when you do not want to provide or you cannot provide the list of possible IP addresses on various cloud providers. However currently, for AWS EC2 which is also based on jclouds, you still need to configure your cluster using the &lt;aws&gt; element as described in the above [Discovering Members within EC2 Cloud](#discovering-members-within-ec2-cloud) section.  To configure your cluster to use jclouds Auto Discovery, follow these steps:  - Add the *hazelcast-jclouds.jar* dependency to your project. Note that this is also bundled inside *hazelcast-all.jar*. The Hazelcast jclouds module depends on jclouds; please make sure the necessary JARs for your provider are present on the classpath. - Disable the multicast and TCP/IP join mechanisms. To do this, set the `enabled` attributes of the `multicast` and `tcp-ip` elements to `false` in your `hazelcast.xml` configuration file - Set the `enabled` attribute of the `hazelcast.discovery.enabled` property to `true`. - Within the `discovery-providers` element, provide your credentials (access and secret key), your region, etc.  The following is an example declarative configuration.  ```xml  ...   &lt;properties&gt;     &lt;property name=\&quot;hazelcast.discovery.enabled\&quot;&gt;true&lt;/property&gt;   &lt;/properties&gt;    ....  &lt;join&gt;     &lt;multicast enabled=\&quot;false\&quot;&gt;     &lt;/multicast&gt;     &lt;tcp-ip enabled=\&quot;false\&quot;&gt;     &lt;/tcp-ip&gt;     &lt;discovery-strategies&gt;         &lt;discovery-strategy class=\&quot;com.hazelcast.jclouds.JCloudsDiscoveryStrategy\&quot; enabled=\&quot;true\&quot;&gt;           &lt;properties&gt;            &lt;property name=\&quot;provider\&quot;&gt;google-compute-engine&lt;/property&gt;            &lt;property name=\&quot;identity\&quot;&gt;GCE_IDENTITY&lt;/property&gt;            &lt;property name=\&quot;credential\&quot;&gt;GCE_CREDENTIAL&lt;/property&gt;           &lt;/properties&gt;         &lt;/discovery-strategy&gt;     &lt;/discovery-strategies&gt; &lt;/join&gt; ... ``` As stated in the first paragraph of this section, Hazelcast native clients also support jclouds for discovery. It means you can also configure your `hazelcast-client.xml` configuration file to include the &lt;discovery-strategies&gt; element in the same way as it is with `hazelcast.xml`.  The table below lists the jclouds configuration properties with their descriptions.  Property Name | Type | Description :--------------|:------|:------------ `provider`|String|String value which is used to identify ComputeService provider. For example, \&quot;google-compute-engine\&quot; is used for Google Cloud services. See the &lt;a href=\&quot;https://jclouds.apache.org/reference/providers/#compute \&quot; target=\&quot;_blank\&quot;&gt;full provider list here&lt;/a&gt;. `identity`|String|Cloud Provider identity, can be thought of as a user name for cloud services. `credential`|String|Cloud Provider credential, can be thought of as a password for cloud services. `zones`|String|Defines zone for a cloud service (optional). Can be used with comma separated values for multiple values. `regions`|String|Defines region for a cloud service (optional). Can be used with comma separated values for multiple values. `tag-keys`|String|Filters cloud instances with tags (optional). Can be used with comma separated values for multiple values. `tag-values`|String|Filters cloud instances with tags (optional) Can be used with comma separated values for multiple values. `group`|String|Filters instance groups (optional). When used with AWS it maps to security group. `hz-port`|Int|Port which the hazelcast instance service uses on the cluster member. Default value is 5701. (optional) `role-name*`|String|Used for IAM role support specific to AWS (optional, but if defined, no identity or credential should be defined in the configuration). `credentialPath*`|String|Used for cloud providers which require an extra JSON or P12 key file. This denotes the path of that file. Only tested with google compute engine. (Required if google-compute engine is used.)  "
});

documentTitles["index.html#configuring-dependencies-for-jclouds-via-maven"] = "Configuring Dependencies for jclouds via Maven";
index.add({
    url: "index.html#configuring-dependencies-for-jclouds-via-maven",
    title: "Configuring Dependencies for jclouds via Maven",
    body: "#### Configuring Dependencies for jclouds via Maven  jclouds depends on many libraries internally and `hazelcast-jclouds.jar` does not contain any of them. If you want to use jclouds, the recommended way is to use its dependency management tool. The following is a simple maven dependency configuration which uses maven assembly plugin to create an uber JAR with the necessary jclouds properties.  ```xml  &lt;project xmlns=\&quot;http://maven.apache.org/POM/4.0.0\&quot; xmlns:xsi=\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;          xsi:schemaLocation=\&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\&quot;&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;groupId&gt;group-id&lt;/groupId&gt;     &lt;artifactId&gt;artifact-id &lt;/artifactId&gt;     &lt;version&gt;version&lt;/version&gt;     &lt;name&gt;compute-basics&lt;/name&gt;      &lt;properties&gt;         &lt;jclouds.version&gt;latest-version&lt;/jclouds.version&gt;         &lt;hazelcast.version&gt;latest-version&lt;/hazelcast.version&gt;     &lt;/properties&gt;      &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;com.hazelcast&lt;/groupId&gt;             &lt;artifactId&gt;hazelcast&lt;/artifactId&gt;             &lt;version&gt;${hazelcast.version}&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;com.hazelcast&lt;/groupId&gt;             &lt;artifactId&gt;hazelcast-jclouds&lt;/artifactId&gt;             &lt;version&gt;${hazelcast.version}&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.apache.jclouds&lt;/groupId&gt;             &lt;artifactId&gt;jclouds-compute&lt;/artifactId&gt;             &lt;version&gt;${jclouds.version}&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.apache.jclouds&lt;/groupId&gt;             &lt;artifactId&gt;jclouds-allcompute&lt;/artifactId&gt;             &lt;version&gt;${jclouds.version}&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.apache.jclouds.labs&lt;/groupId&gt;             &lt;artifactId&gt;google-compute-engine&lt;/artifactId&gt;             &lt;version&gt;${jclouds.version}&lt;/version&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;     &lt;build&gt;         &lt;plugins&gt;             ...             &lt;plugin&gt;                 &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;                 &lt;executions&gt;                     &lt;execution&gt;                         &lt;phase&gt;package&lt;/phase&gt;                         &lt;goals&gt;                             &lt;goal&gt;single&lt;/goal&gt;                         &lt;/goals&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;                 &lt;configuration&gt;                     &lt;descriptorRefs&gt;                         &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;                     &lt;/descriptorRefs&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt;             ...         &lt;/plugins&gt;     &lt;/build&gt; &lt;/project&gt; ```   "
});

documentTitles["index.html#configuring-iam-roles-for-aws"] = "Configuring IAM Roles for AWS";
index.add({
    url: "index.html#configuring-iam-roles-for-aws",
    title: "Configuring IAM Roles for AWS",
    body: "#### Configuring IAM Roles for AWS  IAM roles are used to make secure requests from your clients. You can provide the name of your IAM role that you created previously on your AWS console to the jclouds configuration. IAM roles only work in AWS and when a role name is provided, the other credentials properties should be empty.  ```xml  ...   &lt;properties&gt;     &lt;property name=\&quot;hazelcast.discovery.enabled\&quot;&gt;true&lt;/property&gt;   &lt;/properties&gt;    ....  &lt;join&gt;     &lt;multicast enabled=\&quot;false\&quot;&gt;     &lt;/multicast&gt;     &lt;tcp-ip enabled=\&quot;false\&quot;&gt;     &lt;/tcp-ip&gt;     &lt;discovery-providers&gt;         &lt;discovery-provider class=\&quot;com.hazelcast.jclouds.JCloudsDiscoveryStrategy\&quot; enabled=\&quot;true\&quot;&gt;           &lt;properties&gt;                   &lt;property name=\&quot;provider\&quot;&gt;aws-ec2&lt;/property&gt;                   &lt;property name=\&quot;role-name\&quot;&gt;i-am-role-for-member&lt;/property&gt;                   &lt;property name=\&quot;credential\&quot;&gt;AWS_CREDENTIAL&lt;/property&gt;           &lt;/properties&gt;         &lt;/discovery-provider&gt;     &lt;/discovery-providers&gt; &lt;/join&gt; ... ```  "
});

documentTitles["index.html#discovering-members-on-different-regions"] = "Discovering Members on Different Regions";
index.add({
    url: "index.html#discovering-members-on-different-regions",
    title: "Discovering Members on Different Regions",
    body: "#### Discovering Members on Different Regions  You can define multiple regions in your jclouds configuration. By default, Hazelcast Discovery SPI uses private IP addresses for member connection. If you want the members to find each other over a different region, you must set the system property `hazelcast.discovery.public.ip.enabled` to `true`. In this way, the members on different regions can connect to each other by using public IPs.  ```xml  ...   &lt;properties&gt;     &lt;property name=\&quot;hazelcast.discovery.enabled\&quot;&gt;true&lt;/property&gt;     &lt;property name=\&quot;hazelcast.discovery.public.ip.enabled\&quot;&gt;true&lt;/property&gt;   &lt;/properties&gt;    ....  &lt;join&gt;     &lt;multicast enabled=\&quot;false\&quot;&gt;     &lt;/multicast&gt;     &lt;tcp-ip enabled=\&quot;false\&quot;&gt;     &lt;/tcp-ip&gt;     &lt;discovery-providers&gt;         &lt;discovery-provider class=\&quot;com.hazelcast.jclouds.JCloudsDiscoveryStrategy\&quot; enabled=\&quot;true\&quot;&gt;           &lt;properties&gt;            &lt;property name=\&quot;provider\&quot;&gt;aws-ec2&lt;/property&gt;            &lt;property name=\&quot;identity\&quot;&gt;AWS_IDENTITY&lt;/property&gt;            &lt;property name=\&quot;credential\&quot;&gt;AWS_CREDENTIAL&lt;/property&gt;           &lt;/properties&gt;         &lt;/discovery-provider&gt;     &lt;/discovery-providers&gt; &lt;/join&gt; ... ```    "
});

documentTitles["index.html#creating-cluster-groups"] = "Creating Cluster Groups";
index.add({
    url: "index.html#creating-cluster-groups",
    title: "Creating Cluster Groups",
    body: "## Creating Cluster Groups  You can create cluster groups. To do this, use the `group` configuration element.   By specifying a group name and group password, you can separate your clusters in a simple way. Example groupings can be by *development*, *production*, *test*, *app*, etc. The following is an example declarative configuration.  ```xml &lt;hazelcast&gt;   &lt;group&gt;     &lt;name&gt;app1&lt;/name&gt;     &lt;password&gt;app1-pass&lt;/password&gt;   &lt;/group&gt;   ... &lt;/hazelcast&gt; ```  You can also define the cluster groups using the programmatic configuration. A JVM can host multiple Hazelcast instances. Each Hazelcast instance can only participate in one group. Each Hazelcast instance only joins to its own group, it does not mess with other groups. The following code example creates three separate Hazelcast instances: `h1` belongs to the `app1` cluster, while `h2` and `h3` belong to the `app2` cluster.  ```java Config configApp1 = new Config(); configApp1.getGroupConfig().setName( \&quot;app1\&quot; ).setPassword( \&quot;app1-pass\&quot; );  Config configApp2 = new Config(); configApp2.getGroupConfig().setName( \&quot;app2\&quot; ).setPassword( \&quot;app2-pass\&quot; );  HazelcastInstance h1 = Hazelcast.newHazelcastInstance( configApp1 ); HazelcastInstance h2 = Hazelcast.newHazelcastInstance( configApp2 ); HazelcastInstance h3 = Hazelcast.newHazelcastInstance( configApp2 ); ```     "
});

documentTitles["index.html#partition-group-configuration"] = "Partition Group Configuration";
index.add({
    url: "index.html#partition-group-configuration",
    title: "Partition Group Configuration",
    body: "## Partition Group Configuration  Hazelcast distributes key objects into partitions using a consistent hashing algorithm. Those partitions are assigned to nodes. An entry is stored in the node that owns the partition to which the entry's key is assigned. The total partition count is 271 by default; you can change it with the configuration property `hazelcast.map.partition.count`. Please see the [System Properties section](#system-properties).  Along with those partitions, there are also copies of the partitions as backups. Backup partitions can have multiple copies due to the backup count defined in configuration, such as first backup partition, second backup partition, etc. A node cannot hold more than one copy of a partition (ownership or backup). By default, Hazelcast distributes partitions and their backup copies randomly and equally among cluster nodes, assuming all nodes in the cluster are identical.  But what if some nodes share the same JVM or physical machine or chassis and you want backups of these nodes to be assigned to nodes in another machine or chassis? What if processing or memory capacities of some nodes are different and you do not want an equal number of partitions to be assigned to all nodes?  You can group nodes in the same JVM (or physical machine) or nodes located in the same chassis. Or you can group nodes to create identical capacity. We call these groups **partition groups**. Partitions are assigned to those partition groups instead of to single nodes. Backups of these partitions are located in another partition group.  When you enable partition grouping, Hazelcast presents three choices for you to configure partition groups.  - You can group nodes automatically using the IP addresses of nodes, so nodes sharing the same network interface will be grouped together. All members on the same host (IP address or domain name) will be a single partition group. This helps to avoid data loss when a physical server crashes, because multiple replicas of the same partition are not stored on the same host. But if there are multiple network interfaces or domain names per physical machine, that will make this assumption invalid.  ```xml &lt;partition-group enabled=\&quot;true\&quot; group-type=\&quot;HOST_AWARE\&quot; /&gt; ```  ```java Config config = ...; PartitionGroupConfig partitionGroupConfig = config.getPartitionGroupConfig(); partitionGroupConfig.setEnabled( true )     .setGroupType( MemberGroupType.HOST_AWARE ); ```  - You can do custom grouping using Hazelcast's interface matching configuration. This way, you can add different and multiple interfaces to a group. You can also use wildcards in the interface addresses. For example, the users can create rack aware or data warehouse partition groups using custom partition grouping.  ```xml &lt;partition-group enabled=\&quot;true\&quot; group-type=\&quot;CUSTOM\&quot;&gt; &lt;member-group&gt;   &lt;interface&gt;10.10.0.*&lt;/interface&gt;   &lt;interface&gt;10.10.3.*&lt;/interface&gt;   &lt;interface&gt;10.10.5.*&lt;/interface&gt; &lt;/member-group&gt; &lt;member-group&gt;   &lt;interface&gt;10.10.10.10-100&lt;/interface&gt;   &lt;interface&gt;10.10.1.*&lt;/interface&gt;   &lt;interface&gt;10.10.2.*&lt;/interface&gt; &lt;/member-group &lt;/partition-group&gt; ```  ```java Config config = ...; PartitionGroupConfig partitionGroupConfig = config.getPartitionGroupConfig(); partitionGroupConfig.setEnabled( true )     .setGroupType( MemberGroupType.CUSTOM );  MemberGroupConfig memberGroupConfig = new MemberGroupConfig(); memberGroupConfig.addInterface( \&quot;10.10.0.*\&quot; ) .addInterface( \&quot;10.10.3.*\&quot; ).addInterface(\&quot;10.10.5.*\&quot; );  MemberGroupConfig memberGroupConfig2 = new MemberGroupConfig(); memberGroupConfig2.addInterface( \&quot;10.10.10.10-100\&quot; ) .addInterface( \&quot;10.10.1.*\&quot;).addInterface( \&quot;10.10.2.*\&quot; );  partitionGroupConfig.addMemberGroupConfig( memberGroupConfig ); partitionGroupConfig.addMemberGroupConfig( memberGroupConfig2 ); ```  - You can give every member its own group. Each member is a group of its own and primary and backup partitions are distributed randomly (not on the same physical member). This gives the least amount of protection and is the default configuration for a Hazelcast cluster.  ```xml &lt;partition-group enabled=\&quot;true\&quot; group-type=\&quot;PER_MEMBER\&quot; /&gt; ```  ```java Config config = ...; PartitionGroupConfig partitionGroupConfig = config.getPartitionGroupConfig(); partitionGroupConfig.setEnabled( true )     .setGroupType( MemberGroupType.PER_MEMBER ); ```      "
});

documentTitles["index.html#logging-configuration"] = "Logging Configuration";
index.add({
    url: "index.html#logging-configuration",
    title: "Logging Configuration",
    body: "## Logging Configuration  Hazelcast has a flexible logging configuration and does not depend on any logging framework except JDK logging. It has built-in adaptors for a number of logging frameworks and it also supports custom loggers by providing logging interfaces.  To use built-in adaptors, set the `hazelcast.logging.type` property to one of the predefined types below.  -   **jdk**: JDK logging (default)  -   **log4j**: Log4j  -   **slf4j**: Slf4j  -   **none**: disable logging  You can set `hazelcast.logging.type` through declarative configuration, programmatic configuration, or JVM system property.   ![image](images/NoteSmall.jpg) ***NOTE:*** *If you choose to use `log4j` or `slf4j`, you should include the proper dependencies in the classpath.* &lt;br&gt;&lt;/br&gt;  **Declarative Configuration**  ```xml &lt;hazelcast&gt;   ....   &lt;properties&gt;     &lt;property name=\&quot;hazelcast.logging.type\&quot;&gt;jdk&lt;/property&gt;     ....   &lt;/properties&gt; &lt;/hazelcast&gt; ```  **Programmatic Configuration**  ```java Config config = new Config() ; config.setProperty( \&quot;hazelcast.logging.type\&quot;, \&quot;log4j\&quot; ); ```  **System Property**  	-	Using JVM parameter: `java -Dhazelcast.logging.type=slf4j` 	-	Using System class: `System.setProperty( \&quot;hazelcast.logging.type\&quot;, \&quot;none\&quot; );`   If the provided logging mechanisms are not satisfactory, you can implement your own using the custom logging feature. To use it, implement the `com.hazelcast.logging.LoggerFactory` and `com.hazelcast.logging.ILogger` interfaces and set the system property `hazelcast.logging.class` as your custom `LoggerFactory` class name.  ```plain -Dhazelcast.logging.class=foo.bar.MyLoggingFactory ```  You can also listen to logging events generated by Hazelcast runtime by registering `LogListener`s to `LoggingService`.  ```java LogListener listener = new LogListener() {   public void log( LogEvent logEvent ) {     // do something   } } HazelcastInstance instance = Hazelcast.newHazelcastInstance(); LoggingService loggingService = instance.getLoggingService(); loggingService.addLogListener( Level.INFO, listener ); ``` Through the `LoggingService`, you can get the currently used ILogger implementation and log your own messages too.  ![image](images/NoteSmall.jpg) ***NOTE:*** *If you are not using command line for configuring logging, you should be careful about Hazelcast classes. They may be defaulted to `jdk` logging before newly configured logging is read. When logging mechanism is selected, it will not change.*  &lt;br&gt;&lt;/br&gt;     "
});

documentTitles["index.html#other-network-configurations"] = "Other Network Configurations";
index.add({
    url: "index.html#other-network-configurations",
    title: "Other Network Configurations",
    body: "## Other Network Configurations   All network related configurations are performed via the `network` element in the Hazelcast XML configuration file or the class `NetworkConfig` when using programmatic configuration. Following subsections describe the available configurations that you can perform under the `network` element.  "
});

documentTitles["index.html#public-address"] = "Public Address";
index.add({
    url: "index.html#public-address",
    title: "Public Address",
    body: "### Public Address  `public-address` overrides the public address of a member. By default, a member selects its socket address as its public address. But behind a network address translation (NAT), two endpoints (members) may not be able to see/access each other. If both members set their public addresses to their defined addresses on NAT, then that way they can communicate with each other. In this case, their public addresses are not an address of a local network interface but a virtual address defined by NAT. It is optional to set and useful when you have a private cloud. Note that, the value for this element should be given in the format *`host IP address:port number`*. See the following examples.  **Declarative:**  ```xml &lt;network&gt;     &lt;public-address&gt;11.22.33.44:5555&lt;/public-address&gt; &lt;/network&gt; ```  **Programmatic:**  ```java Config config = new Config(); config.getNetworkConfig()       .setPublicAddress( \&quot;11.22.33.44\&quot;, \&quot;5555\&quot; );  ```   "
});

documentTitles["index.html#port"] = "Port";
index.add({
    url: "index.html#port",
    title: "Port",
    body: "### Port  You can specify the ports that Hazelcast will use to communicate between cluster members. Its default value is `5701`. The following are example configurations.  **Declarative:**  ```xml &lt;network&gt;   &lt;port port-count=\&quot;20\&quot; auto-increment=\&quot;false\&quot;&gt;5701&lt;/port&gt; &lt;/network&gt; ```  **Programmatic:**  ```java Config config = new Config(); config.getNetworkConfig().setPort( \&quot;5701\&quot; );               .setPortCount( \&quot;20\&quot; ).setPortAutoIncrement( false ); ```  `port` has the following attributes.  - `port-count`: By default, Hazelcast will try 100 ports to bind. Meaning that, if you set the value of port as 5701, as members are joining to the cluster, Hazelcast tries to find ports between 5701 and 5801. You can choose to change the port count in the cases like having large instances on a single machine or willing to have only a few ports to be assigned. The parameter `port-count` is used for this purpose, whose default value is 100.    - `auto-increment`: According to the above example, Hazelcast will try to find free ports between 5701 and 5801. Normally, you will not need to change this value, but it will come very handy when needed. You may also want to choose to use only one port. In that case, you can disable the auto-increment feature of `port` by setting `auto-increment` to `false`.   The parameter `port-count` is ignored when the above configuration is made.  "
});

documentTitles["index.html#outbound-ports"] = "Outbound Ports";
index.add({
    url: "index.html#outbound-ports",
    title: "Outbound Ports",
    body: "### Outbound Ports   By default, Hazelcast lets the system pick up an ephemeral port during socket bind operation. But security policies/firewalls may require you to restrict outbound ports to be used by Hazelcast-enabled applications. To fulfill this requirement, you can configure Hazelcast to use only defined outbound ports. The following are example configurations.   **Declarative:**  ```xml   &lt;network&gt;     &lt;outbound-ports&gt;       &lt;!-- ports between 33000 and 35000 --&gt;       &lt;ports&gt;33000-35000&lt;/ports&gt;       &lt;!-- comma separated ports --&gt;       &lt;ports&gt;37000,37001,37002,37003&lt;/ports&gt;        &lt;ports&gt;38000,38500-38600&lt;/ports&gt;     &lt;/outbound-ports&gt;   &lt;/network&gt; ```  **Programmatic:**  ```java ... NetworkConfig networkConfig = config.getNetworkConfig(); // ports between 35000 and 35100 networkConfig.addOutboundPortDefinition(\&quot;35000-35100\&quot;); // comma separated ports networkConfig.addOutboundPortDefinition(\&quot;36001, 36002, 36003\&quot;); networkConfig.addOutboundPort(37000); networkConfig.addOutboundPort(37001); ... ```  ***Note:*** *You can use port ranges and/or comma separated ports.*  As shown in the programmatic configuration, you use the method `addOutboundPort` to add only one port. If you need to add a group of ports, then use the method `addOutboundPortDefinition`.   In the declarative configuration, the element `ports` can be used for both single and multiple port definitions.  "
});

documentTitles["index.html#reuse-address"] = "Reuse Address";
index.add({
    url: "index.html#reuse-address",
    title: "Reuse Address",
    body: "### Reuse Address  When you shutdown a cluster member, the server socket port will be in the `TIME_WAIT` state for the next couple of minutes. If you start the member right after shutting it down, you may not be able to bind it to the same port because it is in the `TIME_WAIT` state. If you set the `reuse-address` element to `true`, the `TIME_WAIT` state is ignored and you can bind the member to the same port again.  The following are example configurations.  **Declarative:**  ```xml   &lt;network&gt;     &lt;reuse-address&gt;true&lt;/reuse-address&gt;   &lt;/network&gt; ```  **Programmatic:**  ```java ... NetworkConfig networkConfig = config.getNetworkConfig();  networkConfig.setReuseAddress( true ); ... ```   "
});

documentTitles["index.html#join"] = "Join";
index.add({
    url: "index.html#join",
    title: "Join",
    body: "### Join  The `join` configuration element is used to discover Hazelcast members and enable them to form a cluster. Hazelcast provides multicast, TCP/IP, EC2, and jclouds&amp;reg; discovery mechanisms. These mechanisms are explained the [Discovering Cluster Members section](#discovering-cluster-members). This section describes all the sub-elements and attributes of `join` element. The following are example configurations.  **Declarative:**  ```xml    &lt;network&gt;         &lt;join&gt;             &lt;multicast enabled=\&quot;true\&quot;&gt;                 &lt;multicast-group&gt;224.2.2.3&lt;/multicast-group&gt;                 &lt;multicast-port&gt;54327&lt;/multicast-port&gt;                 &lt;multicast-time-to-live&gt;32&lt;/multicast-time-to-live&gt;                 &lt;multicast-timeout-seconds&gt;2&lt;/multicast-timeout-seconds&gt;                 &lt;trusted-interfaces&gt;                    &lt;interface&gt;192.168.1.102&lt;/interface&gt;                 &lt;/trusted-interfaces&gt;                &lt;/multicast&gt;             &lt;tcp-ip enabled=\&quot;false\&quot;&gt;                 &lt;required-member&gt;192.168.1.104&lt;/required-member&gt;                 &lt;member&gt;192.168.1.104&lt;/member&gt;                 &lt;members&gt;192.168.1.105,192.168.1.106&lt;/members&gt;             &lt;/tcp-ip&gt;             &lt;aws enabled=\&quot;false\&quot;&gt;                 &lt;access-key&gt;my-access-key&lt;/access-key&gt;                 &lt;secret-key&gt;my-secret-key&lt;/secret-key&gt;                 &lt;region&gt;us-west-1&lt;/region&gt;                 &lt;host-header&gt;ec2.amazonaws.com&lt;/host-header&gt;                 &lt;security-group-name&gt;hazelcast-sg&lt;/security-group-name&gt;                 &lt;tag-key&gt;type&lt;/tag-key&gt;                 &lt;tag-value&gt;hz-members&lt;/tag-value&gt;             &lt;/aws&gt;             &lt;discovery-strategies&gt;               &lt;discovery-strategy ... /&gt;             &lt;/discovery-strategies&gt;         &lt;/join&gt;    &lt;network&gt;      ```  **Programmatic:**  ```java Config config = new Config(); NetworkConfig network = config.getNetworkConfig(); JoinConfig join = network.getJoin(); join.getMulticastConfig().setEnabled( false )             .addTrustedInterface( \&quot;192.168.1.102\&quot; ); join.getTcpIpConfig().addMember( \&quot;10.45.67.32\&quot; ).addMember( \&quot;10.45.67.100\&quot; )             .setRequiredMember( \&quot;192.168.10.100\&quot; ).setEnabled( true ); ```  The `join` element has the following sub-elements and attributes.  "
});

documentTitles["index.html#multicast-element"] = "multicast element";
index.add({
    url: "index.html#multicast-element",
    title: "multicast element",
    body: "#### multicast element   The `multicast` element includes parameters to fine tune the multicast join mechanism.  - `enabled`: Specifies whether the multicast discovery is enabled or not, `true` or `false`. - `multicast-group`: The multicast group IP address. Specify it when you want to create clusters within the same network. Values can be between 224.0.0.0 and 239.255.255.255. Default value is 224.2.2.3. - `multicast-port`: The multicast socket port that the Hazelcast member listens to and sends discovery messages through. Default value is 54327. - `multicast-time-to-live`: Time-to-live value for multicast packets sent out to control the scope of multicasts. See more information [here](http://www.tldp.org/HOWTO/Multicast-HOWTO-2.html). - `multicast-timeout-seconds`: Only when the members are starting up, this timeout (in seconds) specifies the period during which a member waits for a multicast response from another member. For example, if you set it as 60 seconds, each member will wait for 60 seconds until a leader member is selected. Its default value is 2 seconds.  - `trusted-interfaces`: Includes IP addresses of trusted members. When a member wants to join to the cluster, its join request will be rejected if it is not a trusted member. You can give an IP addresses range using the wildcard (\*) on the last digit of IP address (e.g. 192.168.1.\* or 192.168.1.100-110). 	 "
});

documentTitles["index.html#tcp-ip-element"] = "tcp-ip element";
index.add({
    url: "index.html#tcp-ip-element",
    title: "tcp-ip element",
    body: "#### tcp-ip element   The `tcp-ip` element includes parameters to fine tune the TCP/IP join mechanism.  - `enabled`: Specifies whether the TCP/IP discovery is enabled or not. Values can be `true` or `false`. - `required-member`: IP address of the required member. Cluster will only formed if the member with this IP address is found. - `member`: IP address(es) of one or more well known members. Once members are connected to these well known ones, all member addresses will be communicated with each other. You can also give comma separated IP addresses using the `members` element.  ![image](images/NoteSmall.jpg)***NOTE:*** *`tcp-ip` element also accepts the `interface` parameter. Please refer to the [Interfaces element description](#interfaces).*  - `connection-timeout-seconds`: Defines the connection timeout. This is the maximum amount of time Hazelcast is going to try to connect to a well known member before giving up. Setting it to a too low value could mean that a member is not able to connect to a cluster. Setting it to a too high value means that member startup could slow down because of longer timeouts (e.g. when a well known member is not up). Increasing this value is recommended if you have many IPs listed and the members cannot properly build up the cluster. Its default value is 5.  "
});

documentTitles["index.html#aws-element"] = "aws element";
index.add({
    url: "index.html#aws-element",
    title: "aws element",
    body: "#### aws element   The `aws` element includes parameters to allow the members to form a cluster on the Amazon EC2 environment.  - `enabled`: Specifies whether the EC2 discovery is enabled or not, `true` or `false`. - `access-key`, `secret-key`: Access and secret keys of your account on EC2. - `region`: The region where your members are running. Default value is `us-east-1`. You need to specify this if the region is other than the default one. - `host-header`: The URL that is the entry point for a web service. It is optional. - `security-group-name`: Name of the security group you specified at the EC2 management console. It is used to narrow the Hazelcast members to be within this group. It is optional. - `tag-key`, `tag-value`: To narrow the members in the cloud down to only Hazelcast members, you can set these parameters as the ones you specified in the EC2 console. They are optional. - `connection-timeout-seconds`: The maximum amount of time Hazelcast will try to connect to a well known member before giving up. Setting this value too low could mean that a member is not able to connect to a cluster. Setting the value too high means that member startup could slow down because of longer timeouts (for example, when a well known member is not up). Increasing this value is recommended if you have many IPs listed and the members cannot properly build up the cluster. Its default value is 5.   ![image](images/NoteSmall.jpg) ***NOTE:*** *If you are using a cloud provider other than AWS, you can use the programmatic configuration to specify a TCP/IP cluster. The members will need to be retrieved from that provider (e.g. JClouds).*  "
});

documentTitles["index.html#discovery-strategies-element"] = "discovery-strategies element";
index.add({
    url: "index.html#discovery-strategies-element",
    title: "discovery-strategies element",
    body: "#### discovery-strategies element  The `discovery-strategies` element configures internal or external discovery strategies based on the Hazelcast Discovery SPI. For further information, please refer to the [Discovery SPI section](#discovery-spi) and the vendor documentation of the used discovery strategy.  "
});

documentTitles["index.html#awsclient-configuration"] = "AWSClient Configuration";
index.add({
    url: "index.html#awsclient-configuration",
    title: "AWSClient Configuration",
    body: "##### AWSClient Configuration  To make sure EC2 instances are found correctly, you can use the `AWSClient` class. It determines the private IP addresses of EC2 instances to be connected. Give the `AWSClient` class the values for the parameters that you specified in the `aws` element, as shown below. You will see whether your EC2 instances are found.  ```java public static void main( String[] args )throws Exception{    AwsConfig config = new AwsConfig();    config.setSecretKey( ... ) ;   config.setSecretKey( ... );   config.setRegion( ... );   config.setSecurityGroupName( ... );   config.setTagKey( ... );   config.setTagValue( ... );   config.setEnabled( true );   AWSClient client = new AWSClient( config );   List&lt;String&gt; ipAddresses = client.getPrivateIpAddresses();   System.out.println( \&quot;addresses found:\&quot; + ipAddresses );    for ( String ip: ipAddresses ) {     System.out.println( ip );    } } ```   "
});

documentTitles["index.html#interfaces"] = "Interfaces";
index.add({
    url: "index.html#interfaces",
    title: "Interfaces",
    body: "### Interfaces  You can specify which network interfaces that Hazelcast should use. Servers mostly have more than one network interface, so you may want to list the valid IPs. Range characters ('\*' and '-') can be used for simplicity. For instance, 10.3.10.\* refers to IPs between 10.3.10.0 and 10.3.10.255. Interface 10.3.10.4-18 refers to IPs between 10.3.10.4 and 10.3.10.18 (4 and 18 included). If network interface configuration is enabled (it is disabled by default) and if Hazelcast cannot find an matching interface, then it will print a message on the console and will not start on that member.  The following are example configurations.  **Declarative:**  ```xml &lt;hazelcast&gt;   ...   &lt;network&gt;     ...     &lt;interfaces enabled=\&quot;true\&quot;&gt;       &lt;interface&gt;10.3.16.*&lt;/interface&gt;        &lt;interface&gt;10.3.10.4-18&lt;/interface&gt;        &lt;interface&gt;192.168.1.3&lt;/interface&gt;              &lt;/interfaces&gt;       &lt;/network&gt;   ... &lt;/hazelcast&gt;  ```  **Programmatic:**  ```java Config config = new Config(); NetworkConfig network = config.getNetworkConfig(); InterfacesConfig interface = network.getInterfaces(); interface.setEnabled( true )             .addInterface( \&quot;192.168.1.3\&quot; ); ```    "
});

documentTitles["index.html#ipv6-support"] = "IPv6 Support";
index.add({
    url: "index.html#ipv6-support",
    title: "IPv6 Support",
    body: "### IPv6 Support  Hazelcast supports IPv6 addresses seamlessly (This support is switched off by default, please see the note at the end of this section).  All you need is to define IPv6 addresses or interfaces in [network configuration](#network-configuration). The only current limitation is that you cannot define wildcard IPv6 addresses in the TCP/IP join configuration (`tcp-ip` element). [Interfaces](#interfaces) configuration does not have this limitation, you can configure wildcard IPv6 interfaces in the same way as IPv4 interfaces.  ```xml &lt;hazelcast&gt;   ...   &lt;network&gt;     &lt;port auto-increment=\&quot;true\&quot;&gt;5701&lt;/port&gt;     &lt;join&gt;       &lt;multicast enabled=\&quot;false\&quot;&gt;         &lt;multicast-group&gt;FF02:0:0:0:0:0:0:1&lt;/multicast-group&gt;         &lt;multicast-port&gt;54327&lt;/multicast-port&gt;       &lt;/multicast&gt;       &lt;tcp-ip enabled=\&quot;true\&quot;&gt;         &lt;member&gt;[fe80::223:6cff:fe93:7c7e]:5701&lt;/member&gt;         &lt;interface&gt;192.168.1.0-7&lt;/interface&gt;         &lt;interface&gt;192.168.1.*&lt;/interface&gt;         &lt;interface&gt;fe80:0:0:0:45c5:47ee:fe15:493a&lt;/interface&gt;       &lt;/tcp-ip&gt;     &lt;/join&gt;     &lt;interfaces enabled=\&quot;true\&quot;&gt;       &lt;interface&gt;10.3.16.*&lt;/interface&gt;       &lt;interface&gt;10.3.10.4-18&lt;/interface&gt;       &lt;interface&gt;fe80:0:0:0:45c5:47ee:fe15:*&lt;/interface&gt;       &lt;interface&gt;fe80::223:6cff:fe93:0-5555&lt;/interface&gt;     &lt;/interfaces&gt;     ...   &lt;/network&gt;   ... &lt;/hazelcast&gt; ```  JVM has two system properties for setting the preferred protocol stack (IPv4 or IPv6) as well as the preferred address family types (inet4 or inet6). On a dual stack machine, IPv6 stack is preferred by default, you can change this through the `java.net.preferIPv4Stack=&lt;true|false&gt;` system property. When querying name services, JVM prefers IPv4 addresses over IPv6 addresses and will return an IPv4 address if possible. You can change this through `java.net.preferIPv6Addresses=&lt;true|false&gt;` system property.  Also see additional &lt;a href=\&quot;http://docs.oracle.com/javase/1.5.0/docs/guide/net/ipv6_guide/\&quot; target=\&quot;_blank\&quot;&gt;details on IPv6 support in Java&lt;/a&gt;.  ![image](images/NoteSmall.jpg) ***NOTE:*** *IPv6 support has been switched off by default, since some platforms have issues using the IPv6 stack. Some other platforms such as Amazon AWS have no support at all. To enable IPv6 support, just set configuration property `hazelcast.prefer.ipv4.stack` to *false*. Please refer to the [System Properties section](#system-properties) for details.*      "
});

documentTitles["index.html#distributed-data-structures"] = "Distributed Data Structures";
index.add({
    url: "index.html#distributed-data-structures",
    title: "Distributed Data Structures",
    body: "# Distributed Data Structures  As mentioned in the [Overview section](#hazelcast-overview), Hazelcast offers distributed implementations of Java interfaces. Below is the list of these implementations with links to the corresponding sections in this manual.  - **Standard utility collections:**  	- [Map](#map) is the distributed implementation of `java.util.Map`. It lets you read from and write to a Hazelcast map with methods such as `get` and `put`. 	- [Queue](#queue) is the distributed implementation of `java.util.concurrent.BlockingQueue`. You can add an item in one member and remove it from another one. 	- [Ringbuffer](#ringbuffer) is implemented for reliable eventing system. It is also a distributed data structure. 	- [Set](#set) is the distributed and concurrent implementation of `java.util.Set`. It does not allow duplicate elements and does not preserve their order. 	- [List](#list) is similar to Hazelcast Set. The only difference is that it allows duplicate elements and preserves their order. 	- [MultiMap](#multimap) is a specialized Hazelcast map. It is a distributed data structure where you can store multiple values for a single key. 	- [Replicated Map](#replicated-map) does not partition data. It does not spread data to different cluster members. Instead, it replicates the data to all members.  - **Topic** is the distributed mechanism for publishing messages that are delivered to multiple subscribers. It is also known as the publish/subscribe (pub/sub) messaging model. Please see the [Topic section](#topic) for more information. Hazelcast also has a structure called Reliable Topic which uses the same interface of Hazelcast Topic. The difference is that it is backed up by the Ringbuffer data structure. Please see the [Reliable Topic section](#reliable-topic).  - **Concurrency utilities**:  	- [Lock](#lock) is the distributed implementation of `java.util.concurrent.locks.Lock`. When you use lock, the critical section that Hazelcast Lock guards is guaranteed to be executed by only one thread in the entire cluster. 	- [Semaphore](#isemaphore) is the distributed implementation of `java.util.concurrent.Semaphore`. When performing concurrent activities, semaphores offer permits to control the thread counts. 	- [AtomicLong](#iatomiclong) is the distributed implementation of `java.util.concurrent.atomic.AtomicLong`. Most of AtomicLong's operations are available. However, these operations involve remote calls and hence their performances differ from AtomicLong, due to being distributed. 	- [AtomicReference](#iatomicreference) is the distributed implementation of `java.util.concurrent.atomic.AtomicReference`. When you need to deal with a reference in a distributed environment, you can use Hazelcast AtomicReference.  	- [IdGenerator](#idgenerator) is used to generate cluster-wide unique identifiers. ID generation occurs almost at the speed of `AtomicLong.incrementAndGet()`. 	- [CountdownLatch](#icountdownlatch) is the distributed implementation of `java.util.concurrent.CountDownLatch`. Hazelcast CountDownLatch is a gate keeper for concurrent activities. It enables the threads to wait for other threads to complete their operations.  Common Features of all Hazelcast Data Structures:   - If a member goes down, its backup replica (which holds the same data) will dynamically redistribute the data, including the ownership and locks on them, to the remaining live members. As a result, there will not be any data loss. - There is no single cluster master that can be a single point of failure. Every member in the cluster has equal rights and responsibilities. No single member is superior. There is no dependency on an external 'server' or 'master'.  Here is an example of how you can retrieve existing data structure instances (map, queue, set, lock, topic, etc.) and how you can listen for instance events, such as an instance being created or destroyed.  ```java import java.util.Collection; import com.hazelcast.config.Config; import com.hazelcast.core.*;  public class Sample implements DistributedObjectListener {   public static void main(String[] args) {     Sample sample = new Sample();      Config config = new Config();     HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance(config);     hazelcastInstance.addDistributedObjectListener(sample);      Collection&lt;DistributedObject&gt; distributedObjects = hazelcastInstance.getDistributedObjects();     for (DistributedObject distributedObject : distributedObjects) {       System.out.println(distributedObject.getName() + \&quot;,\&quot; + distributedObject.getId());     }   }    @Override   public void distributedObjectCreated(DistributedObjectEvent event) {     DistributedObject instance = event.getDistributedObject();     System.out.println(\&quot;Created \&quot; + instance.getName() + \&quot;,\&quot; + instance.getId());   }    @Override   public void distributedObjectDestroyed(DistributedObjectEvent event) {     DistributedObject instance = event.getDistributedObject();     System.out.println(\&quot;Destroyed \&quot; + instance.getName() + \&quot;,\&quot; + instance.getId());   } } ```       "
});

documentTitles["index.html#map"] = "Map";
index.add({
    url: "index.html#map",
    title: "Map",
    body: "## Map  Hazelcast Map (`IMap`) extends the interface `java.util.concurrent.ConcurrentMap` and hence `java.util.Map`. It is the distributed implementation of Java map. You can perform operations like reading and writing from/to a Hazelcast map with the well known get and put methods.  "
});

documentTitles["index.html#getting-a-map-and-putting-an-entry"] = "Getting a Map and Putting an Entry";
index.add({
    url: "index.html#getting-a-map-and-putting-an-entry",
    title: "Getting a Map and Putting an Entry",
    body: "### Getting a Map and Putting an Entry  Hazelcast will partition your map entries and almost evenly distribute them onto all Hazelcast members. Each member carries approximately \&quot;(1/n `*` total-data) + backups\&quot;, **n** being the number of members in the cluster. For example, if you have a member with 1000 objects to be stored in the cluster, and then you start a second member, each member will both store 500 objects and back up the 500 objects in the other member.  Let's create a Hazelcast instance and fill a map named `Capitals` with key-value pairs using the following code. Use the HazelcastInstance `getMap` method to get the map, then use the map `put` method to put an entry into the map.  ```java public class FillMapMember {   public static void main( String[] args ) {      HazelcastInstance hzInstance = Hazelcast.newHazelcastInstance();     Map&lt;String, String&gt; capitalcities = hzInstance.getMap( \&quot;capitals\&quot; );      capitalcities.put( \&quot;1\&quot;, \&quot;Tokyo\&quot; );     capitalcities.put( \&quot;2\&quot;, \&quot;Paris” );     capitalcities.put( \&quot;3\&quot;, \&quot;Washington\&quot; );     capitalcities.put( \&quot;4\&quot;, \&quot;Ankara\&quot; );     capitalcities.put( \&quot;5\&quot;, \&quot;Brussels\&quot; );     capitalcities.put( \&quot;6\&quot;, \&quot;Amsterdam\&quot; );     capitalcities.put( \&quot;7\&quot;, \&quot;New Delhi\&quot; );     capitalcities.put( \&quot;8\&quot;, \&quot;London\&quot; );     capitalcities.put( \&quot;9\&quot;, \&quot;Berlin\&quot; );     capitalcities.put( \&quot;10\&quot;, \&quot;Oslo\&quot; );     capitalcities.put( \&quot;11\&quot;, \&quot;Moscow\&quot; );     ...     ...     capitalcities.put( \&quot;120\&quot;, \&quot;Stockholm\&quot; )   } } ```  When you run this code, a cluster member is created with a map whose entries are distributed across the members's partitions. See the below illustration. For now, this is a single member cluster.  ![Key-Values in a Member](images/1Node.jpg)  ![image](images/NoteSmall.jpg) ***NOTE:*** *Please note that some of the partitions will not contain any data entries since we only have 120 objects and the partition count is 271 by default. This count is configurable and can be changed using the system property `hazelcast.partition.count`. Please see the [System Properties section](#system-properties).*  "
});

documentTitles["index.html#creating-a-member-for-map-backup"] = "Creating A Member for Map Backup";
index.add({
    url: "index.html#creating-a-member-for-map-backup",
    title: "Creating A Member for Map Backup",
    body: "#### Creating A Member for Map Backup  Now, let's create a second member by running the above code again. This will create a cluster with 2 members. This is also where backups of entries are created; remember the backup partitions mentioned in the [Hazelcast Overview section](#hazelcast-overview). The following illustration shows two members and how the data and its backup is distributed.  ![Key-Values Distributed Among Two Members](images/2Nodes.jpg)  As you see, when a new member joins the cluster, it takes ownership and loads some of the data in the cluster. Eventually, it will carry almost \&quot;(1/n `*` total-data) + backups\&quot; of the data, reducing the load on other nodes.  `HazelcastInstance::getMap` returns an instance of `com.hazelcast.core.IMap` which extends  the `java.util.concurrent.ConcurrentMap` interface. Methods like  `ConcurrentMap.putIfAbsent(key,value)` and `ConcurrentMap.replace(key,value)` can be used  on the distributed map, as shown in the example below.  ```java import com.hazelcast.core.Hazelcast; import com.hazelcast.core.HazelcastInstance; import java.util.concurrent.ConcurrentMap;  HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance();  Customer getCustomer( String id ) {     ConcurrentMap&lt;String, Customer&gt; customers = hazelcastInstance.getMap( \&quot;customers\&quot; );     Customer customer = customers.get( id );     if (customer == null) {         customer = new Customer( id );         customer = customers.putIfAbsent( id, customer );     }     return customer; }                 public boolean updateCustomer( Customer customer ) {     ConcurrentMap&lt;String, Customer&gt; customers = hazelcastInstance.getMap( \&quot;customers\&quot; );     return ( customers.replace( customer.getId(), customer ) != null );             }                  public boolean removeCustomer( Customer customer ) {     ConcurrentMap&lt;String, Customer&gt; customers = hazelcastInstance.getMap( \&quot;customers\&quot; );     return customers.remove( customer.getId(), customer );            } ```  All `ConcurrentMap` operations such as `put` and `remove` might wait if the key is locked by another thread in the local or remote JVM. But, they will eventually return with success. `ConcurrentMap` operations never throw a `java.util.ConcurrentModificationException`.  Also see:  - [Data Affinity section](#data-affinity). - [Map Configuration with wildcards](#using-wildcard).       "
});

documentTitles["index.html#backing-up-maps"] = "Backing Up Maps";
index.add({
    url: "index.html#backing-up-maps",
    title: "Backing Up Maps",
    body: "### Backing Up Maps   Hazelcast distributes map entries onto multiple cluster members (JVMs). Each member holds some portion of the data.   Distributed maps have 1 backup by default. If a member goes down, you do not lose data. Backup operations are synchronous, so when a `map.put(key, value)` returns, it is guaranteed that the map entry is replicated to one other node. For the reads, it is also guaranteed that `map.get(key)` returns the latest value of the entry. Consistency is strictly enforced.   "
});

documentTitles["index.html#creating-sync-backups"] = "Creating Sync Backups";
index.add({
    url: "index.html#creating-sync-backups",
    title: "Creating Sync Backups",
    body: "#### Creating Sync Backups  To provide data safety, Hazelcast allows you to specify the number of backup copies you want to have. That way, data on a cluster member will be copied onto other member(s).   To create synchronous backups, select the number of backup copies using the `backup-count` property.  ```xml &lt;hazelcast&gt;   &lt;map name=\&quot;default\&quot;&gt;     &lt;backup-count&gt;1&lt;/backup-count&gt;   &lt;/map&gt; &lt;/hazelcast&gt; ```  When this count is 1, a map entry will have its backup on one other node in the cluster. If you set it to 2, then a map entry will have its backup on two other nodes. You can set it to 0 if you do not want your entries to be backed up, e.g. if performance is more important than backing up. The maximum value for the backup count is 6.  Hazelcast supports both synchronous and asynchronous backups. By default, backup operations are synchronous and configured with `backup-count`. In this case, backup operations block operations until backups are successfully copied to backup nodes (or deleted from backup nodes in case of remove) and acknowledgements are received. Therefore, backups are updated before a `put` operation is completed. Sync backup operations have a blocking cost which may lead to latency issues.  "
});

documentTitles["index.html#creating-async-backups"] = "Creating Async Backups";
index.add({
    url: "index.html#creating-async-backups",
    title: "Creating Async Backups",
    body: "#### Creating Async Backups  Asynchronous backups, on the other hand, do not block operations. They are fire &amp; forget and do not require acknowledgements; the backup operations are performed at some point in time.  To create asynchronous backups, select the number of async backups with the `async-backup-count` property. An example is shown below.    ```xml &lt;hazelcast&gt;   &lt;map name=\&quot;default\&quot;&gt;     &lt;backup-count&gt;0&lt;/backup-count&gt;     &lt;async-backup-count&gt;1&lt;/async-backup-count&gt;   &lt;/map&gt; &lt;/hazelcast&gt; ```  &lt;br&gt;&lt;/br&gt; ![image](images/NoteSmall.jpg) ***NOTE:*** *Backups increase memory usage since they are also kept in memory.*  ![image](images/NoteSmall.jpg) ***NOTE:*** *A map can have both sync and aysnc backups at the same time.*    "
});

documentTitles["index.html#enabling-backup-reads"] = "Enabling Backup Reads";
index.add({
    url: "index.html#enabling-backup-reads",
    title: "Enabling Backup Reads",
    body: "#### Enabling Backup Reads  By default, Hazelcast has one sync backup copy. If `backup-count` is set to more than 1, then each member will carry both owned entries and backup copies of other members. So for the `map.get(key)` call, it is possible that the calling member has a backup copy of that key. By default, `map.get(key)` will always read the value from the actual owner of the key for consistency.  To enable backup reads (read local backup entries), set the value of the `read-backup-data` property to **true**. Its default value is **false** for strong consistency. Enabling backup reads can improve performance.   ```xml &lt;hazelcast&gt;   &lt;map name=\&quot;default\&quot;&gt;     &lt;backup-count&gt;0&lt;/backup-count&gt;     &lt;async-backup-count&gt;1&lt;/async-backup-count&gt;     &lt;read-backup-data&gt;true&lt;/read-backup-data&gt;   &lt;/map&gt; &lt;/hazelcast&gt; ```  This feature is available when there is at least 1 sync or async backup.  Please note that, if you are performing a read from a backup, you should take into account that your hits to the keys in the backups are not reflected as hits to the original keys on the primary members; this has an impact on IMap's maximum idle seconds or time-to-live seconds expiration. Therefore, even though there is a hit on a key in backups, your original key on the primary member may expire.    "
});

documentTitles["index.html#evicting-map-entries"] = "Evicting Map Entries";
index.add({
    url: "index.html#evicting-map-entries",
    title: "Evicting Map Entries",
    body: "### Evicting Map Entries  Unless you delete the map entries manually or use an eviction policy, they will remain in the map. Hazelcast supports policy based eviction for distributed maps. Currently supported policies are LRU (Least Recently Used) and LFU (Least Frequently Used).  "
});

documentTitles["index.html#understanding-map-eviction"] = "Understanding Map Eviction";
index.add({
    url: "index.html#understanding-map-eviction",
    title: "Understanding Map Eviction",
    body: "#### Understanding Map Eviction  Hazelcast Map performs eviction based on partitions. For example, when you specify a size using the `PER_NODE` attribute for `max-size` (please see [Configuring Map Eviction](#configuring-map-eviction)), Hazelcast internally calculates the maximum size for every partition. Hazelcast uses the following equation to calculate the maximum size of a partition:  ``` partition maximum size = max-size * member-count / partition-count ```  The eviction process starts according to this calculated partition maximum size when you try to put an entry. When entry count in that partition exceeds partition maximum size, eviction starts on that partition.  Assume that you have the following figures as examples:  * Partition count: 200 * Entry count for each partition: 100 * `max-size` (PER_NODE): 20000 * `eviction-percentage` (please see [Configuring Map Eviction](#configuring-map-eviction)):  10%  The total number of entries here is 20000 (partition count * entry count for each partition). This means you are at the eviction threshold since you set the `max-size` to 20000. When you try to put an entry:  1. The entry goes to the relevant partition. 2. The partition checks whether the eviction threshold is reached (`max-size`). 3. If reached, approximately 10 (100 * 10%) entries are evicted from that particular partition.  As a result of this eviction process, when you check the size of your map, it is ~19990 (20000 - ~10). After this eviction, subsequent put operations will not trigger the next eviction until the map size is again close to the `max-size`.  ![image](images/NoteSmall.jpg) ***NOTE:*** *The above scenario is just an example to describe how the eviction process works. Hazelcast finds the most optimum number of entries to be evicted according to your cluster size and selected policy.*   "
});

documentTitles["index.html#configuring-map-eviction"] = "Configuring Map Eviction";
index.add({
    url: "index.html#configuring-map-eviction",
    title: "Configuring Map Eviction",
    body: "#### Configuring Map Eviction  The following is an example declarative configuration for map eviction.  ```xml &lt;hazelcast&gt;   &lt;map name=\&quot;default\&quot;&gt;     ...     &lt;time-to-live-seconds&gt;0&lt;/time-to-live-seconds&gt;     &lt;max-idle-seconds&gt;0&lt;/max-idle-seconds&gt;     &lt;eviction-policy&gt;LRU&lt;/eviction-policy&gt;     &lt;max-size policy=\&quot;PER_NODE\&quot;&gt;5000&lt;/max-size&gt;     &lt;eviction-percentage&gt;25&lt;/eviction-percentage&gt;     &lt;min-eviction-check-millis&gt;100&lt;/min-eviction-check-millis&gt;     ...   &lt;/map&gt; &lt;/hazelcast&gt; ```  Let's describe each element.  - `time-to-live`: Maximum time in seconds for each entry to stay in the map. If it is not 0, entries that are older than this time and not updated for this time are evicted automatically. Valid values are integers between 0 and `Integer.MAX VALUE`. Default value is 0, which means infinite. If it is not 0, entries are evicted regardless of the set `eviction-policy`.   - `max-idle-seconds`: Maximum time in seconds for each entry to stay idle in the map. Entries that are idle for more than this time are evicted automatically. An entry is idle if no `get`, `put`, `EntryProcessor.process` or `containsKey` is called. Valid values are integers between 0 and `Integer.MAX VALUE`. Default value is 0, which means infinite. - `eviction-policy`: Valid values are described below. 	- NONE: Default policy. If set, no items will be evicted and the property `max-size` will be ignored.  You still can combine it with `time-to-live-seconds` and `max-idle-seconds`. 	- LRU: Least Recently Used. 	- LFU: Least Frequently Used.  - `max-size`: Maximum size of the map. When maximum size is reached, the map is evicted based on the policy defined. Valid values are integers between 0 and `Integer.MAX VALUE`. Default value is 0. If you want `max-size` to work, set the `eviction-policy` property to a value other than NONE. Its attributes are described below. 	- `PER_NODE`: Maximum number of map entries in each cluster member. This is the default policy. If you use this option, please note that you cannot set the `max-size` to a value lower than the partition count (which is 271 by default).		  		`&lt;max-size policy=\&quot;PER_NODE\&quot;&gt;5000&lt;/max-size&gt;`  	- `PER_PARTITION`: Maximum number of map entries within each partition. Storage size depends on the partition count in a cluster member. This attribute should not be used often. Avoid using this attribute with a small cluster: if the cluster is small it will be hosting more partitions, and therefore map entries, than that of a larger cluster. Thus, for a small cluster, eviction of the entries will decrease performance (the number of entries is large).  		`&lt;max-size policy=\&quot;PER_PARTITION\&quot;&gt;27100&lt;/max-size&gt;`  	- `USED_HEAP_SIZE`: Maximum used heap size in megabytes per map for each Hazelcast instance. Please note that this policy does not work when [in-memory format](#setting-in-memory-format) is set to `OBJECT`, since the memory footprint cannot be determined when data is put as `OBJECT`.  		`&lt;max-size policy=\&quot;USED_HEAP_SIZE\&quot;&gt;4096&lt;/max-size&gt;`  	- `USED_HEAP_PERCENTAGE`: Maximum used heap size percentage per map for each Hazelcast instance. If, for example, JVM is configured to have 1000 MB and this value is 10, then the map entries will be evicted when used heap size exceeds 100 MB. Please note that this policy does not work when [in-memory format](#setting-in-memory-format) is set to `OBJECT`, since the memory footprint cannot be determined when data is put as `OBJECT`.  		`&lt;max-size policy=\&quot;USED_HEAP_PERCENTAGE\&quot;&gt;10&lt;/max-size&gt;`  	- `FREE_HEAP_SIZE`: Minimum free heap size in megabytes for each JVM.  		`&lt;max-size policy=\&quot;FREE_HEAP_SIZE\&quot;&gt;512&lt;/max-size&gt;`  	- `FREE_HEAP_PERCENTAGE`: Minimum free heap size percentage for each JVM. If, for example, JVM is configured to have 1000 MB and this value is 10, then the map entries will be evicted when free heap size is below 100 MB.  		`&lt;max-size policy=\&quot;FREE_HEAP_PERCENTAGE\&quot;&gt;10&lt;/max-size&gt;`  	- `USED_NATIVE_MEMORY_SIZE`: (&lt;font color=\&quot;##153F75\&quot;&gt;**Hazelcast Enterprise HD**&lt;/font&gt;) Maximum used native memory size in megabytes per map for each Hazelcast instance.  		`&lt;max-size policy=\&quot;USED_NATIVE_MEMORY_SIZE\&quot;&gt;1024&lt;/max-size&gt;`  	- `USED_NATIVE_MEMORY_PERCENTAGE`: (&lt;font color=\&quot;##153F75\&quot;&gt;**Hazelcast Enterprise HD**&lt;/font&gt;) Maximum used native memory size percentage per map for each Hazelcast instance.  		`&lt;max-size policy=\&quot;USED_NATIVE_MEMORY_PERCENTAGE\&quot;&gt;65&lt;/max-size&gt;`  	- `FREE_NATIVE_MEMORY_SIZE`: (&lt;font color=\&quot;##153F75\&quot;&gt;**Hazelcast Enterprise HD**&lt;/font&gt;) Minimum free native memory size in megabytes for each Hazelcast instance.  		`&lt;max-size policy=\&quot;FREE_NATIVE_MEMORY_SIZE\&quot;&gt;256&lt;/max-size&gt;`  	- `FREE_NATIVE_MEMORY_PERCENTAGE`: (&lt;font color=\&quot;##153F75\&quot;&gt;**Hazelcast Enterprise HD**&lt;/font&gt;) Minimum free native memory size percentage for each Hazelcast instance.  		`&lt;max-size policy=\&quot;FREE_NATIVE_MEMORY_PERCENTAGE\&quot;&gt;5&lt;/max-size&gt;`   - `eviction-percentage`: When `max-size` is reached, the specified percentage of the map will be evicted. For example, if set to 25, 25% of the entries will be evicted. Setting this property to a smaller value will cause eviction of a smaller number of map entries. Therefore, if map entries are inserted frequently, smaller percentage values may lead to overheads. Valid values are integers between 0 and 100. The default value is 25. - `min-eviction-check-millis`: Minimum time in milliseconds which should elapse before checking whether a partition of the map is evictable or not. In other terms, this property specifies the frequency of the eviction process. The default value is 100. Setting it to 0 (zero) makes the eviction process run for every put operation.  ![image](images/NoteSmall.jpg) ***NOTE:*** *When map entries are inserted frequently, the property `min-eviction-check-millis` should be set to a number lower than the insertion period in order not to let any entry escape from the eviction.*   "
});

documentTitles["index.html#example-eviction-configurations"] = "Example Eviction Configurations";
index.add({
    url: "index.html#example-eviction-configurations",
    title: "Example Eviction Configurations",
    body: "#### Example Eviction Configurations   ```xml &lt;map name=\&quot;documents\&quot;&gt;   &lt;max-size policy=\&quot;PER_NODE\&quot;&gt;10000&lt;/max-size&gt;   &lt;eviction-policy&gt;LRU&lt;/eviction-policy&gt;   &lt;max-idle-seconds&gt;60&lt;/max-idle-seconds&gt; &lt;/map&gt; ```  In the above example, `documents` map starts to evict its entries from a member when the map size exceeds 10000 in that member. Then, the entries least recently used will be evicted. The entries not used for more than 60 seconds will be evicted as well.  And the following is an example eviction configuration for a map having `NATIVE` as the in-memory format:  ```xml &lt;map name=\&quot;nativeMap*\&quot;&gt;     &lt;in-memory-format&gt;NATIVE&lt;/in-memory-format&gt;     &lt;eviction-policy&gt;LFU&lt;/eviction-policy&gt;     &lt;max-size policy=\&quot;USED_NATIVE_MEMORY_PERCENTAGE\&quot;&gt;99&lt;/max-size&gt; &lt;/map&gt; ```   "
});

documentTitles["index.html#evicting-specific-entries"] = "Evicting Specific Entries";
index.add({
    url: "index.html#evicting-specific-entries",
    title: "Evicting Specific Entries",
    body: "#### Evicting Specific Entries   The eviction policies and configurations explained above apply to all the entries of a map. The entries that meet the specified eviction conditions are evicted.   But you may want to evict some specific map entries.  In this case, you can use the `ttl` and `timeunit` parameters of the method `map.put()`. An example code line is given below.  `myMap.put( \&quot;1\&quot;, \&quot;John\&quot;, 50, TimeUnit.SECONDS )`  The map entry with the key \&quot;1\&quot; will be evicted 50 seconds after it is put into `myMap`.   "
});

documentTitles["index.html#evicting-all-entries"] = "Evicting All Entries";
index.add({
    url: "index.html#evicting-all-entries",
    title: "Evicting All Entries",
    body: "#### Evicting All Entries  To evict all keys from the map except the locked ones, use the method `evictAll()`. If a MapStore is defined for the map, `deleteAll` is not called by `evictAll`. If you want to call the method `deleteAll`, use `clear()`.  An example is given below.  ```java public class EvictAll {      public static void main(String[] args) {         final int numberOfKeysToLock = 4;         final int numberOfEntriesToAdd = 1000;          HazelcastInstance node1 = Hazelcast.newHazelcastInstance();         HazelcastInstance node2 = Hazelcast.newHazelcastInstance();          IMap&lt;Integer, Integer&gt; map = node1.getMap(EvictAll.class.getCanonicalName());         for (int i = 0; i &lt; numberOfEntriesToAdd; i++) {             map.put(i, i);         }          for (int i = 0; i &lt; numberOfKeysToLock; i++) {             map.lock(i);         }          // should keep locked keys and evict all others.         map.evictAll();          System.out.printf(\&quot;# After calling evictAll...\n\&quot;);         System.out.printf(\&quot;# Expected map size\t: %d\n\&quot;, numberOfKeysToLock);         System.out.printf(\&quot;# Actual map size\t: %d\n\&quot;, map.size());      } } ```   ![image](images/NoteSmall.jpg) ***NOTE:*** *Only EVICT_ALL event is fired for any registered listeners.*        "
});

documentTitles["index.html#setting-in-memory-format"] = "Setting In Memory Format";
index.add({
    url: "index.html#setting-in-memory-format",
    title: "Setting In Memory Format",
    body: "### Setting In Memory Format  IMap (and a few other Hazelcast data structures, such as ICache) has an `in-memory-format` configuration option. By default, Hazelcast stores data into memory in binary (serialized) format. But sometimes, it can be efficient to store the entries in their object form, especially in cases of local processing, such as entry processor and queries.  To set how the data will be stored in memory, set `in-memory-format` in the configuration. You have the following format options.  - `BINARY` (default): This is the default option. The data will be stored in serialized binary format. You can use this option if you mostly perform regular map operations, such as `put` and `get`.  - `OBJECT`: The data will be stored in deserialized form. This configuration is good for maps where entry processing and queries form the majority of all operations and the objects are complex, making the serialization cost respectively high. By storing objects, entry processing will not contain the deserialization cost.   - `NATIVE`: (&lt;font color=\&quot;##153F75\&quot;&gt;**Hazelcast Enterprise HD**&lt;/font&gt;) This option is used to enable the map to use Hazelcast's High-Density Memory Store. Please refer to the [Using High-Density Memory Store with Map section](#using-high-density-memory-store-with-map).  Regular operations like `get` rely on the object instance. When the `OBJECT` format is used and a `get` is performed, the map does not return the stored instance, but creates a clone. Therefore, this whole `get` operation first includes a serialization on the member owning the instance, and then a deserialization on the member calling the instance. When the `BINARY` format is used, only a deserialization is required; `BINARY` is faster.  Similarly, a `put` operation is faster when the `BINARY` format is used. If the format was `OBJECT`, map would create a clone of the instance, and there would first be a serialization and then a deserialization. When BINARY is used, only a deserialization is needed.   ![image](images/NoteSmall.jpg) ***NOTE:*** *If a value is stored in `OBJECT` format, a change on a returned value does not affect the stored instance. In this case, the returned instance is not the actual one but a clone. Therefore, changes made on an object after it is returned will not reflect on the actual stored data. Similarly, when a value is written to a map and the value is stored in `OBJECT` format, it will be a copy of the `put` value. Therefore, changes made on the object after it is stored will not reflect on the stored data.*       "
});

documentTitles["index.html#using-high-density-memory-store-with-map"] = "Using High-Density Memory Store with Map";
index.add({
    url: "index.html#using-high-density-memory-store-with-map",
    title: "Using High-Density Memory Store with Map",
    body: "### Using High-Density Memory Store with Map  &lt;font color=\&quot;##153F75\&quot;&gt;**Hazelcast Enterprise HD**&lt;/font&gt; &lt;br&gt;&lt;/br&gt;  Hazelcast instances are Java programs. In case of `BINARY` and `OBJECT` in-memory formats, Hazelcast stores your distributed data into the heap of its server instances. Java heap is subject to garbage collection (GC). In case of larger heaps, garbage collection might cause your application to pause for tens of seconds (even minutes for really large heaps), badly affecting your application performance and response times.  As the data gets bigger, you either run the application with larger heap, which would result in longer GC pauses or run multiple instances with smaller heap which can turn into an operational nightmare if the number of such instances becomes very high.  To overcome this challenge, Hazelcast offers High-Density Memory Store for your maps. You can configure your map to use High-Density Memory Store by setting the in-memory format to `NATIVE`. The following snippet is the declarative configuration example.   ```xml &lt;map name=\&quot;nativeMap*\&quot;&gt;    &lt;in-memory-format&gt;NATIVE&lt;/in-memory-format&gt; &lt;/map&gt; ```  Keep in mind that you should have already enabled the High-Density Memory Store usage for your cluster. Please see [Configuring High-Density Memory Store section](#configuring-high-density-memory-store).   "
});

documentTitles["index.html#required-configuration-changes-when-using-native"] = "Required configuration changes when using NATIVE";
index.add({
    url: "index.html#required-configuration-changes-when-using-native",
    title: "Required configuration changes when using NATIVE",
    body: "#### Required configuration changes when using NATIVE  Note that the eviction mechanism is different for `NATIVE` in-memory format. The new eviction algorithm for map with High-Density Memory Store is similar to that of JCache with High-Density Memory Store and is described [here](#eviction-algorithm).    - Eviction percentage has no effect.      ```xml     &lt;map name=\&quot;nativeMap*\&quot;&gt;       &lt;in-memory-format&gt;NATIVE&lt;/in-memory-format&gt;       &lt;eviction-percentage&gt;25&lt;/eviction-percentage&gt; &lt;-- NO IMPACT with NATIVE     &lt;/map&gt;     ```   - These IMap eviction policies for `max-size` cannot be used: `FREE_HEAP_PERCENTAGE`, `FREE_HEAP_SIZE`, `USED_HEAP_PERCENTAGE`, `USED_HEAP_SIZE`.    - Near cache eviction configuration is also different for `NATIVE` in-memory format.      For a near cache configuration with in-memory format set to `BINARY`:          ```xml         &lt;map name=\&quot;nativeMap*\&quot;&gt;            &lt;near-cache&gt;             &lt;in-memory-format&gt;BINARY&lt;/in-memory-format&gt;             &lt;max-size&gt;10000&lt;/max-size&gt; &lt;-- NO IMPACT with NATIVE             &lt;eviction-policy&gt;LFU&lt;/eviction-policy&gt; &lt;-- NO IMPACT with NATIVE           &lt;/near-cache&gt;          &lt;/map&gt;      ```       the equivalent configuration for `NATIVE` in-memory format would be similar to the following:      ```xml          &lt;map name=\&quot;nativeMap*\&quot;&gt;             &lt;near-cache&gt;              &lt;in-memory-format&gt;NATIVE&lt;/in-memory-format&gt;              &lt;eviction size=\&quot;10000\&quot; eviction-policy=\&quot;LFU\&quot; max-size-policy=\&quot;USED_NATIVE_MEMORY_SIZE\&quot;/&gt;   &lt;-- Correct configuration with NATIVE            &lt;/near-cache&gt;           &lt;/map&gt;      ```    - Near cache eviction policy `ENTRY_COUNT` cannot be used for `max-size-policy`.   &lt;br&gt;&lt;/br&gt; ***RELATED INFORMATION***  *Please refer to the [High-Density Memory Store section](#high-density-memory-store) for more information.* &lt;br&gt;&lt;/br&gt;       "
});

documentTitles["index.html#loading-and-storing-persistent-data"] = "Loading and Storing Persistent Data";
index.add({
    url: "index.html#loading-and-storing-persistent-data",
    title: "Loading and Storing Persistent Data",
    body: "### Loading and Storing Persistent Data  Hazelcast allows you to load and store the distributed map entries from/to a persistent data store such as a relational database. To do this, you can use Hazelcast's `MapStore` and `MapLoader` interfaces.  When you provide a `MapLoader` implementation and request an entry (`IMap.get()`) that does not exist in memory, `MapLoader`'s `load` or `loadAll` methods will load that entry from the data store. This loaded entry is placed into the map and will stay there until it is removed or evicted.  When a `MapStore` implementation is provided, an entry is also put into a user defined data store.   ![image](images/NoteSmall.jpg) ***NOTE:*** *Data store needs to be a centralized system that is accessible from all Hazelcast members. Persistence to local file system is not supported.*  ![image](images/NoteSmall.jpg) ***NOTE:*** *Also note that, the `MapStore` interface extends the `MapLoader` interface as you can see in the interface [code](https://github.com/hazelcast/hazelcast/blob/master/hazelcast/src/main/java/com/hazelcast/core/MapStore.java).*     Following is a `MapStore` example.  ```java public class PersonMapStore implements MapStore&lt;Long, Person&gt; {     private final Connection con;      public PersonMapStore() {         try {             con = DriverManager.getConnection(\&quot;jdbc:hsqldb:mydatabase\&quot;, \&quot;SA\&quot;, \&quot;\&quot;);             con.createStatement().executeUpdate(                     \&quot;create table if not exists person (id bigint, name varchar(45))\&quot;);         } catch (SQLException e) {             throw new RuntimeException(e);         }     }      public synchronized void delete(Long key) {         System.out.println(\&quot;Delete:\&quot; + key);         try {             con.createStatement().executeUpdate(                     format(\&quot;delete from person where id = %s\&quot;, key));         } catch (SQLException e) {             throw new RuntimeException(e);         }     }      public synchronized void store(Long key, Person value) {         try {             con.createStatement().executeUpdate(                     format(\&quot;insert into person values(%s,'%s')\&quot;, key, value.name));         } catch (SQLException e) {             throw new RuntimeException(e);         }     }      public synchronized void storeAll(Map&lt;Long, Person&gt; map) {         for (Map.Entry&lt;Long, Person&gt; entry : map.entrySet())             store(entry.getKey(), entry.getValue());     }      public synchronized void deleteAll(Collection&lt;Long&gt; keys) {         for (Long key : keys) delete(key);     }      public synchronized Person load(Long key) {         try {             ResultSet resultSet = con.createStatement().executeQuery(                     format(\&quot;select name from person where id =%s\&quot;, key));             try {                 if (!resultSet.next()) return null;                 String name = resultSet.getString(1);                 return new Person(name);             } finally {                 resultSet.close();             }         } catch (SQLException e) {             throw new RuntimeException(e);         }     }      public synchronized Map&lt;Long, Person&gt; loadAll(Collection&lt;Long&gt; keys) {         Map&lt;Long, Person&gt; result = new HashMap&lt;Long, Person&gt;();         for (Long key : keys) result.put(key, load(key));         return result;     }      public Iterable&lt;Long&gt; loadAllKeys() {         return null;     } } ```  ![image](images/NoteSmall.jpg) ***NOTE:*** *During the initial loading process, MapStore uses a thread different than the partition threads that is used by the ExecutorService. After the initialization is completed, the `map.get` method looks up any inexistent value from the database in a partition thread or the `map.put` method looks up the database to return the previously associated value for a key also in a partition thread.*  &lt;br&gt;&lt;/br&gt; ***RELATED INFORMATION***  *For more MapStore/MapLoader code samples please see &lt;a href=\&quot;https://github.com/hazelcast/hazelcast-code-samples/tree/master/distributed-map/mapstore/src/main/java\&quot; target=\&quot;_blank\&quot;&gt;here&lt;/a&gt;.* &lt;br&gt;&lt;/br&gt;  Hazelcast supports read-through, write-through, and write-behind persistence modes which are explained in the subsections below.  "
});

documentTitles["index.html#using-read-through-persistence"] = "Using Read-Through Persistence";
index.add({
    url: "index.html#using-read-through-persistence",
    title: "Using Read-Through Persistence",
    body: "#### Using Read-Through Persistence  If an entry does not exist in the memory when an application asks for it, Hazelcast asks your loader implementation to load that entry from the data store.  If the entry exists there, the loader implementation gets it, hands it to Hazelcast, and Hazelcast puts it into the memory. This is read-through persistence mode.    "
});

documentTitles["index.html#setting-write-through-persistence"] = "Setting Write-Through Persistence";
index.add({
    url: "index.html#setting-write-through-persistence",
    title: "Setting Write-Through Persistence",
    body: "#### Setting Write-Through Persistence  `MapStore` can be configured to be write-through by setting the `write-delay-seconds` property to **0**. This means the entries will be put to the data store synchronously.  In this mode, when the `map.put(key,value)` call returns:  - `MapStore.store(key,value)` is successfully called so the entry is persisted. - In-Memory entry is updated. - In-Memory backup copies are successfully created on other cluster members (if `backup-count` is greater than 0).  The same behavior goes for a `map.remove(key)` call. The only difference is that  `MapStore.delete(key)` is called when the entry will be deleted.  If `MapStore` throws an exception, then the exception will be propagated back to the original `put` or `remove` call in the form of `RuntimeException`.  "
});

documentTitles["index.html#setting-write-behind-persistence"] = "Setting Write-Behind Persistence";
index.add({
    url: "index.html#setting-write-behind-persistence",
    title: "Setting Write-Behind Persistence",
    body: "#### Setting Write-Behind Persistence  You can configure `MapStore` as write-behind by setting the `write-delay-seconds` property to a value bigger than **0**. This means the modified entries will be put to the data store asynchronously after a configured delay.   ![image](images/NoteSmall.jpg) ***NOTE:*** *In write-behind mode, by default Hazelcast coalesces updates on a specific key, i.e. applies only the last update on it. However, you can set `MapStoreConfig#setWriteCoalescing` to `FALSE` and you can store all updates performed on a key to the data store.*  ![image](images/NoteSmall.jpg) ***NOTE:*** *When you set `MapStoreConfig#setWriteCoalescing` to `FALSE`, after you reached per-node maximum write-behind-queue capacity, subsequent put operations will fail with `ReachedMaxSizeException`. This exception will be thrown to prevent uncontrolled grow of write-behind queues. You can set per node maximum capacity using the system property `hazelcast.map.write.behind.queue.capacity`. Please refer to the [System Properties section](#system-properties) for information on this property and how to set the system properties.*   In write-behind mode, when the `map.put(key,value)` call returns:  - In-Memory entry is updated. - In-Memory backup copies are successfully created on other cluster members (if `backup-count` is greater than 0). - The entry is marked as dirty so that after `write-delay-seconds`, it can be persisted with `MapStore.store(key,value)` call. - For fault tolerance, dirty entries are stored in a queue on the primary member and also on a back-up member.  The same behavior goes for the `map.remove(key)`, the only difference is that  `MapStore.delete(key)` is called when the entry will be deleted.  If `MapStore` throws an exception, then Hazelcast tries to store the entry again. If the entry still cannot be stored, a log message is printed and the entry is re-queued.   For batch write operations, which are only allowed in write-behind mode, Hazelcast will call `MapStore.storeAll(map)` and `MapStore.deleteAll(collection)` to do all writes in a single call. &lt;br&gt;&lt;/br&gt;  ![image](images/NoteSmall.jpg) ***NOTE:*** *If a map entry is marked as dirty, i.e. it is waiting to be persisted to the `MapStore` in a write-behind scenario, the eviction process forces the entry to be stored. By this way, you will have control on the number of entries waiting to be stored, and thus you can prevent a possible OutOfMemory exception.* &lt;br&gt;&lt;/br&gt;   ![image](images/NoteSmall.jpg) ***NOTE:*** *`MapStore` or `MapLoader` implementations should not use Hazelcast Map/Queue/MultiMap/List/Set operations. Your implementation should only work with your data store. Otherwise, you may get into deadlock situations.*  Here is a sample configuration:  ```xml &lt;hazelcast&gt;   ...   &lt;map name=\&quot;default\&quot;&gt;     ...     &lt;map-store enabled=\&quot;true\&quot; initial-mode=\&quot;LAZY\&quot;&gt;       &lt;class-name&gt;com.hazelcast.examples.DummyStore&lt;/class-name&gt;       &lt;write-delay-seconds&gt;60&lt;/write-delay-seconds&gt;       &lt;write-batch-size&gt;1000&lt;/write-batch-size&gt;       &lt;write-coalescing&gt;true&lt;/write-coalescing&gt;     &lt;/map-store&gt;   &lt;/map&gt; &lt;/hazelcast&gt; ```  The following are the descriptions of MapStore configuration elements and attributes:  - `class-name`: Name of the class implementing MapLoader and/or MapStore. - `write-delay-seconds`: Number of seconds to delay to call the MapStore.store(key, value). If the value is zero then it is write-through so MapStore.store(key, value) will be called as soon as the entry is updated. Otherwise it is write-behind so updates will be stored after write-delay-seconds value by calling Hazelcast.storeAll(map). Default value is 0. - `write-batch-size`: Used to create batch chunks when writing map store. In default mode, all map entries will be tried to be written in one go. To create batch chunks, the minimum meaningful value for write-batch-size is 2. For values smaller than 2, it works as in default mode. - `write-coalescing`: In write-behind mode, by default Hazelcast coalesces updates on a specific key, i.e. applies only the last update on it. You can set this element to `false` to store all updates performed on a key to the data store. - `enabled`: True to enable this map-store, false to disable. Default value is true. - `initial-mode`: Sets the initial load mode. LAZY is the default load mode, where load is asynchronous. EAGER means load is blocked till all partitions are loaded.   "
});

documentTitles["index.html#storing-entries-to-multiple-maps"] = "Storing Entries to Multiple Maps";
index.add({
    url: "index.html#storing-entries-to-multiple-maps",
    title: "Storing Entries to Multiple Maps",
    body: "#### Storing Entries to Multiple Maps  A configuration can be applied to more than one map using wildcards (see [Using Wildcard](#using-wildcard)), meaning that the configuration is shared among the maps. But `MapStore` does not know which entries to store when there is one configuration applied to multiple maps.   To store entries when there is one configuration applied to multiple maps, use Hazelcast's `MapStoreFactory` interface. Using the `MapStoreFactory` interface, `MapStore`s for each map can be created when a wildcard configuration is used. Example code is shown below.  ```java Config config = new Config(); MapConfig mapConfig = config.getMapConfig( \&quot;*\&quot; ); MapStoreConfig mapStoreConfig = mapConfig.getMapStoreConfig(); mapStoreConfig.setFactoryImplementation( new MapStoreFactory&lt;Object, Object&gt;() {   @Override   public MapLoader&lt;Object, Object&gt; newMapStore( String mapName, Properties properties ) {     return null;   } }); ```  To initialize the `MapLoader` implementation with the given map name, configuration properties, and the Hazelcast instance, implement the `MapLoaderLifecycleSupport` interface. This interface has the methods `init()` and `destroy()` as shown below.  ```java public interface MapLoaderLifecycleSupport {    void init( HazelcastInstance hazelcastInstance, Properties properties, String mapName );    void destroy(); } ```  The method `init()` initializes the `MapLoader` implementation. Hazelcast calls this method when the map is first used on the Hazelcast instance. The `MapLoader` implementation can initialize the required resources for implementing `MapLoader` such as reading a configuration file or creating a database connection.  Hazelcast calls the method `destroy()` before shutting down. You can override this method  to cleanup the resources held by this `MapLoader` implementation, such as closing the database connections.    "
});

documentTitles["index.html#initializing-map-on-startup-lazyeager"] = "Initializing Map on Startup - LAZY/EAGER";
index.add({
    url: "index.html#initializing-map-on-startup-lazyeager",
    title: "Initializing Map on Startup - LAZY/EAGER",
    body: "#### Initializing Map on Startup - LAZY/EAGER  To pre-populate the in-memory map when the map is first touched/used, use the `MapLoader.loadAllKeys` API.  If `MapLoader.loadAllKeys` returns NULL, then nothing will be loaded. Your `MapLoader.loadAllKeys` implementation can return all or some of the keys. For example, you may select and return only the `hot` keys. `MapLoader.loadAllKeys` is the fastest way of pre-populating the map since Hazelcast will optimize the loading process by having each cluster member load its owned portion of the entries.  The `InitialLoadMode` configuration parameter in the class &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/blob/master/hazelcast/src/main/java/com/hazelcast/config/MapStoreConfig.java\&quot; target=\&quot;_blank\&quot;&gt;MapStoreConfig&lt;/a&gt; has two values: `LAZY` and `EAGER`. If `InitialLoadMode` is set to `LAZY`, data is not loaded during the map creation. If it is set to `EAGER`, the whole data is loaded while the map is created and everything becomes ready to use. Also, if you add indices to your map with the &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/blob/master/hazelcast/src/main/java/com/hazelcast/config/MapIndexConfig.java\&quot; target=\&quot;_blank\&quot;&gt;MapIndexConfig&lt;/a&gt; class or the [`addIndex`](#indexing-queries) method, then `InitialLoadMode` is overridden and `MapStoreConfig` behaves as if `EAGER` mode is on.  Here is the `MapLoader` initialization flow:  1. When `getMap()` is first called from any member, initialization will start depending on the value of `InitialLoadMode`. If it is set to `EAGER`, initialization starts.  If it is set to `LAZY`, initialization does not start but data is loaded each time a partition loading completes. 2. Hazelcast will call `MapLoader.loadAllKeys()` to get all your keys on one of the members. 3. That member will distribute keys to all other members in batches. 4. Each member will load values of all its owned keys by calling `MapLoader.loadAll(keys)`. 5. Each member puts its owned entries into the map by calling `IMap.putTransient(key,value)`.  If the load mode is `LAZY` and when the `clear()` method is called (which triggers `MapStore.deleteAll()`), Hazelcast will remove **ONLY** the loaded entries from your map and datastore. Since the whole data is not loaded for this case (`LAZY` mode), please note that there may be still entries in your datastore. &lt;br&gt;&lt;/br&gt;  ![image](images/NoteSmall.jpg) ***NOTE:*** *The return type of `loadAllKeys()` is changed from `Set` to `Iterable` with the release of Hazelcast 3.5. MapLoader implementations from previous releases are also supported and do not need to be adapted.* &lt;br&gt;&lt;/br&gt;  While implementing a `MapLoader` you can either set a `className` and Hazelcast will create an instance for you OR you can set directly an instance. When you set `className` and Hazelcast creates an instance for you, then the instance is set back to your `MapConfig`. Before Hazelcast 3.6.3, this injection happens immediately when you create a proxy regardless of the LAZY/EAGER configuration. Starting with Hazelcast 3.6.3, the instance is set only after the map is touched for first time (when in LAZY mode). There is no behavior change in EAGER mode.  &lt;br&gt;&lt;/br&gt; "
});

documentTitles["index.html#loading-keys-incrementally"] = "Loading Keys Incrementally";
index.add({
    url: "index.html#loading-keys-incrementally",
    title: "Loading Keys Incrementally",
    body: "#### Loading Keys Incrementally  If the number of keys to load is large, it is more efficient to load them incrementally than loading them all at once. To support incremental loading, the `MapLoader.loadAllKeys()` method returns an `Iterable` which can be lazily populated with the results of a database query.   Hazelcast iterates over the `Iterable` and, while doing so, sends out the keys to their respective owner members. The `Iterator` obtained from `MapLoader.loadAllKeys()` may also implement the `Closeable` interface, in which case `Iterator` is closed once the iteration is over. This is intended for releasing resources such as closing a JDBC result set.   "
});

documentTitles["index.html#forcing-all-keys-to-be-loaded"] = "Forcing All Keys To Be Loaded";
index.add({
    url: "index.html#forcing-all-keys-to-be-loaded",
    title: "Forcing All Keys To Be Loaded",
    body: "#### Forcing All Keys To Be Loaded  The method `loadAll` loads some or all keys into a data store in order to optimize the multiple load operations. The method has two signatures (i.e. the same method can take two different parameter lists). One signature loads the given keys and the other loads all keys. Please see the example code below.   ```java public class LoadAll {      public static void main(String[] args) {         final int numberOfEntriesToAdd = 1000;         final String mapName = LoadAll.class.getCanonicalName();         final Config config = createNewConfig(mapName);         final HazelcastInstance node = Hazelcast.newHazelcastInstance(config);         final IMap&lt;Integer, Integer&gt; map = node.getMap(mapName);                 populateMap(map, numberOfEntriesToAdd);         System.out.printf(\&quot;# Map store has %d elements\n\&quot;, numberOfEntriesToAdd);             map.evictAll();         System.out.printf(\&quot;# After evictAll map size\t: %d\n\&quot;, map.size());                  map.loadAll(true);         System.out.printf(\&quot;# After loadAll map size\t: %d\n\&quot;, map.size());     } } ```   "
});

documentTitles["index.html#post-processing-objects-in-map-store"] = "Post-Processing Objects in Map Store";
index.add({
    url: "index.html#post-processing-objects-in-map-store",
    title: "Post-Processing Objects in Map Store",
    body: "#### Post-Processing Objects in Map Store  In some scenarios, you may need to modify the object after storing it into the map store. For example, you can get an ID or version auto-generated by your database and then you need to modify your object stored in the distributed map but not to break the synchronization between database and data grid.   To post-process an object in the map store, implement the `PostProcessingMapStore` interface to put the modified object into the distributed map. That causes an extra step of `Serialization`, so use it only when needed. (This is only valid when using the `write-through` map store configuration.)  Here is an example of post processing map store:  ```java class ProcessingStore implements MapStore&lt;Integer, Employee&gt;, PostProcessingMapStore {   @Override   public void store( Integer key, Employee employee ) {     EmployeeId id = saveEmployee();     employee.setId( id.getId() );   } } ```  ![image](images/NoteSmall.jpg) ***NOTE:*** *Please note that if you are using a post processing map store in combination with entry processors, post-processed values will not be carried to backups.*      "
});

documentTitles["index.html#creating-near-cache-for-map"] = "Creating Near Cache for Map";
index.add({
    url: "index.html#creating-near-cache-for-map",
    title: "Creating Near Cache for Map",
    body: "### Creating Near Cache for Map  Map entries in Hazelcast are partitioned across the cluster. Suppose you read the key `k` a number of times and `k` is owned by another member in your cluster. Each `map.get(k)` will be a remote operation, meaning lots of network trips. If you have a map that is read-mostly, then you should consider creating a near cache for the map so that reads can be much faster and consume less network traffic. These benefits do not come free; when using near cache, you should consider the following issues:  - Cluster members will have to hold extra cached data, which increases memory consumption. - If invalidation is turned on and entries are updated frequently, then invalidations will be costly. - Near cache breaks the strong consistency guarantees; you might be reading stale data.  Near cache is highly recommended for the maps that are read-mostly. The following is the configuration example for map's near cache in the Hazelcast configuration file.  ```xml &lt;hazelcast&gt;   ...   &lt;map name=\&quot;my-read-mostly-map\&quot;&gt;     ...     &lt;near-cache name=\&quot;default\&quot;&gt;       &lt;in-memory-format&gt;BINARY&lt;/in-memory-format&gt;       &lt;max-size&gt;5000&lt;/max-size&gt;       &lt;time-to-live-seconds&gt;0&lt;/time-to-live-seconds&gt;       &lt;max-idle-seconds&gt;60&lt;/max-idle-seconds&gt;       &lt;eviction-policy&gt;LRU&lt;/eviction-policy&gt;       &lt;invalidate-on-change&gt;true&lt;/invalidate-on-change&gt;       &lt;cache-local-entries&gt;false&lt;/cache-local-entries&gt;     &lt;/near-cache&gt;   &lt;/map&gt; &lt;/hazelcast&gt; ```  The element `&lt;near-cache&gt;` has an optional attribute \&quot;name\&quot; whose default value is `default`. Following are the descriptions of all configuration elements:  - `&lt;max-size&gt;`: Maximum size of the near cache. When this is reached, near cache is evicted based on the policy defined. Any integer between 0 and Integer.MAX_VALUE. 0 means `Integer.MAX_VALUE`. Its default value is 0. - `&lt;time-to-live-seconds&gt;`: Maximum number of seconds for each entry to stay in the near cache. Entries that are older than this period are automatically evicted from the near cache. Regardless of the eviction policy used, `&lt;time-to-live-seconds&gt;` still applies. Any integer between 0 and `Integer.MAX_VALUE`. 0 means infinite. Its default value is 0. - `&lt;max-idle-seconds&gt;`: Maximum number of seconds each entry can stay in the near cache as untouched (not read). Entries that are not read more than this period are removed from the near cache. Any integer between 0 and `Integer.MAX_VALUE`. 0 means `Integer.MAX_VALUE`. Its default value is 0. - `&lt;eviction-policy&gt;`: Eviction policy configuration. Its default values is NONE. Available values are as follows: 	- NONE: No items will be evicted and the property max-size will be ignored. You still can combine it with time-to-live-seconds and max-idle-seconds. 	- LRU: 	Least Recently Used. 	- LFU: 	Least Frequently Used. - `&lt;invalidate-on-change&gt;`: Specifies whether the cached entries are evicted when the entries are updated or removed. Its default value is true. - `&lt;in-memory-format&gt;`: Specifies in which format data will be stored in your near cache. Note that a map's in-memory format can be different from that of its near cache. Available values are as follows: 	- BINARY: Data will be stored in serialized binary format. It is the default option. 	- OBJECT: Data will be stored in deserialized form. 	- NATIVE: Data will be stored in the near cache that uses Hazelcast's High-Density Memory Store feature. This option is available only in Hazelcast Enterprise HD. Note that a map and its near cache can independently use High-Density Memory Store. For example, while your map does not use High-Density Memory Store, its near cache can use it. - `&lt;cache-local-entries&gt;`: Specifies whether the local entries will be cached. It can be useful when in-memory format for near cache is different from that of the map. By default, it is disabled.  ![image](images/NoteSmall.jpg) ***NOTE:*** *If you use High-Density Memory Store for your near cache, the elements `&lt;max-size&gt;` and `&lt;eviction-policy&gt;` do not have any impact. In this case, you need to use the element `&lt;eviction&gt;` to specify the eviction behavior. Please refer to the [Using High-Density Memory Store with Near Cache section](#using-high-density-memory-store-with-near-cache).* &lt;br&gt;&lt;/br&gt;   Programmatically, you configure near cache by using the class &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/blob/master/hazelcast/src/main/java/com/hazelcast/config/NearCacheConfig.java\&quot; target=\&quot;_blank\&quot;&gt;NearCacheConfig&lt;/a&gt;. This class is used both in the cluster members and clients. In a client/server system, you must enable the near cache separately on the client, without you needing to configure it on the member. For information on how to create a near cache on a client (native Java client), please see [Configuring Client Near Cache](#configuring-client-near-cache). Please note that near cache configuration is specific to the member or client itself, a map in a member may not have near cache configured while the same map in a client may have near cache configured.  If you are using near cache, you should take into account that your hits to the keys in near cache are not reflected as hits to the original keys on the primary members; this has an impact on IMap's maximum idle seconds or time-to-live seconds expiration. Therefore, even though there is a hit on a key in near cache, your original key on the primary member may expire.   ![image](images/NoteSmall.jpg) ***NOTE:*** *Near cache works only when you access data via `map.get(k)` methods.  Data returned using a predicate is not stored in the near cache.*  ![image](images/NoteSmall.jpg) ***NOTE:*** *Even though lite members do not store any data for Hazelcast data structures, you can enable near cache on lite members for faster reads.*  "
});

documentTitles["index.html#using-high-density-memory-store-with-near-cache"] = "Using High-Density Memory Store with Near Cache";
index.add({
    url: "index.html#using-high-density-memory-store-with-near-cache",
    title: "Using High-Density Memory Store with Near Cache",
    body: "#### Using High-Density Memory Store with Near Cache  &lt;font color=\&quot;##153F75\&quot;&gt;**Hazelcast Enterprise HD**&lt;/font&gt; &lt;br&gt;&lt;/br&gt;  Hazelcast offers High-Density Memory Store for the near caches in your maps. You can enable your near cache to use the High-Density Memory Store by setting the in-memory format to `NATIVE`. The following snippet is the declarative configuration example.   ```xml &lt;hazelcast&gt;   ...   &lt;map name=\&quot;my-read-mostly-map\&quot;&gt;     ...     &lt;near-cache&gt;        ...        &lt;in-memory-format&gt;NATIVE&lt;/in-memory-format&gt;        &lt;eviction size=\&quot;1000\&quot; max-size-policy=\&quot;ENTRY_COUNT\&quot; eviction-policy=\&quot;LFU\&quot;/&gt;        ...     &lt;/near-cache&gt;     ...     &lt;/map&gt; &lt;/hazelcast&gt;   ```  The element `&lt;eviction&gt;` is used to specify the eviction behavior when you use High-Density Memory Store for your near cache. It has the following attributes:  - `size`: Maximum size (entry count) of the near cache. - `max-size-policy`: Maximum size policy for eviction of the near cache. Available values are as follows: 	* ENTRY_COUNT: Maximum entry count per member. 	* USED_NATIVE_MEMORY_SIZE: Maximum used native memory size in megabytes. 	* USED_NATIVE_MEMORY_PERCENTAGE: Maximum used native memory percentage. 	* FREE_NATIVE_MEMORY_SIZE: Minimum free native memory size to trigger cleanup. 	* FREE_NATIVE_MEMORY_PERCENTAGE: Minimum free native memory percentage to trigger cleanup. - `eviction-policy`: Eviction policy configuration. Its default values is NONE. Available values are as follows: 	- NONE: No items will be evicted and the property max-size will be ignored. You still can combine it with time-to-live-seconds and max-idle-seconds. 	- LRU: 	Least Recently Used. 	- LFU: 	Least Frequently Used.  Keep in mind that you should have already enabled the High-Density Memory Store usage for your cluster. Please see the [Configuring High-Density Memory Store section](#configuring-high-density-memory-store).  Note that a map and its near cache can independently use High-Density Memory Store. For example, while your map does not use High-Density Memory Store, its near cache can use it.     "
});

documentTitles["index.html#near-cache-invalidation"] = "Near Cache Invalidation";
index.add({
    url: "index.html#near-cache-invalidation",
    title: "Near Cache Invalidation",
    body: "#### Near Cache Invalidation  When you enable invalidations on near cache, either programmatically via `NearCacheConfig#setInvalidateOnChange` or declaratively via `&lt;invalidate-on-change&gt;true&lt;/invalidate-on-change&gt;`, when entires are updated or removed from an entry in the underlying IMap, corresponding entries are removed from near caches to prevent stale reads. This is called near cache invalidation.   Invalidation can be sent from members to client near caches or to member near caches, either individually or in batches. Default behavior is sending in batches. If there are lots of mutating operations such as put/remove on IMap, it is advised that you make invalidations in batches. This reduces the network traffic and keeps the eventing system less busy.  You can use the following system properties to configure the near cache invalidation:  - `hazelcast.map.invalidation.batch.enabled`: Enable or disable batching. Default value is true. When it is set to false, all invalidations are sent immediately. - `hazelcast.map.invalidation.batch.size`: Maximum number of invalidations in a batch. Default value is 100. - `hazelcast.map.invalidation.batchfrequency.seconds`: If we cannot reach the configured batch size, a background process sends invalidations periodically. Default value is 10 seconds.  If there are a lot of clients or many mutating operations, batching should remain enabled and the batch size should be configured with the `hazelcast.map.invalidation.batch.size` system property to a suitable value.       "
});

documentTitles["index.html#locking-maps"] = "Locking Maps";
index.add({
    url: "index.html#locking-maps",
    title: "Locking Maps",
    body: "### Locking Maps  Hazelcast Distributed Map (IMap) is thread-safe to meet your thread safety requirements. When these requirements increase or you want to have more control on the concurrency, consider the following Hazelcast solutions.  Let's work on a sample case as shown below.  ```java public class RacyUpdateMember {     public static void main( String[] args ) throws Exception {         HazelcastInstance hz = Hazelcast.newHazelcastInstance();         IMap&lt;String, Value&gt; map = hz.getMap( \&quot;map\&quot; );         String key = \&quot;1\&quot;;         map.put( key, new Value() );         System.out.println( \&quot;Starting\&quot; );         for ( int k = 0; k &lt; 1000; k++ ) {             if ( k % 100 == 0 ) System.out.println( \&quot;At: \&quot; + k );             Value value = map.get( key );             Thread.sleep( 10 );             value.amount++;             map.put( key, value );         }         System.out.println( \&quot;Finished! Result = \&quot; + map.get(key).amount );     }      static class Value implements Serializable {         public int amount;     } } ```  If the above code is run by more than one cluster member simultaneously, there will be likely a race condition. You can solve this condition with Hazelcast using either of the following solutions.    "
});

documentTitles["index.html#pessimistic-locking"] = "Pessimistic Locking";
index.add({
    url: "index.html#pessimistic-locking",
    title: "Pessimistic Locking",
    body: "#### Pessimistic Locking  One way to solve the race issue is using pessimistic locking: lock the map entry until you are finished with it.  To perform pessimistic locking, use the lock mechanism provided by Hazelcast distributed map, i.e. the `map.lock` and `map.unlock` methods. See the below example code.  ```java public class PessimisticUpdateMember {     public static void main( String[] args ) throws Exception {         HazelcastInstance hz = Hazelcast.newHazelcastInstance();         IMap&lt;String, Value&gt; map = hz.getMap( \&quot;map\&quot; );         String key = \&quot;1\&quot;;         map.put( key, new Value() );         System.out.println( \&quot;Starting\&quot; );         for ( int k = 0; k &lt; 1000; k++ ) {             map.lock( key );             try {                 Value value = map.get( key );                 Thread.sleep( 10 );                 value.amount++;                 map.put( key, value );             } finally {                 map.unlock( key );             }         }         System.out.println( \&quot;Finished! Result = \&quot; + map.get( key ).amount );     }      static class Value implements Serializable {         public int amount;     } } ```  The IMap lock will automatically be collected by the garbage collector when the lock is released and no other waiting conditions exist on the lock.  The IMap lock is reentrant, but it does not support fairness.  Another way to solve the race issue can be acquiring a predictable `Lock` object from Hazelcast. This way, every value in the map can be given a lock or you can create a stripe of locks.   "
});

documentTitles["index.html#optimistic-locking"] = "Optimistic Locking";
index.add({
    url: "index.html#optimistic-locking",
    title: "Optimistic Locking",
    body: "#### Optimistic Locking  In Hazelcast, you can apply the optimistic locking strategy with the map's `replace` method. This method compares values in object or data forms depending on the in-memory format configuration. If the values are equal, it replaces the old value with the new one. If you want to use your defined `equals` method, `in-memory-format` should be `OBJECT`. Otherwise, Hazelcast serializes objects to `BINARY` forms and compares them.  See the below example code.   ```java public class OptimisticMember {     public static void main( String[] args ) throws Exception {         HazelcastInstance hz = Hazelcast.newHazelcastInstance();         IMap&lt;String, Value&gt; map = hz.getMap( \&quot;map\&quot; );         String key = \&quot;1\&quot;;         map.put( key, new Value() );         System.out.println( \&quot;Starting\&quot; );         for ( int k = 0; k &lt; 1000; k++ ) {             if ( k % 10 == 0 ) System.out.println( \&quot;At: \&quot; + k );             for (; ; ) {                 Value oldValue = map.get( key );                 Value newValue = new Value( oldValue );                 Thread.sleep( 10 );                 newValue.amount++;                 if ( map.replace( key, oldValue, newValue ) )                     break;             }         }         System.out.println( \&quot;Finished! Result = \&quot; + map.get( key ).amount );     }      static class Value implements Serializable {         public int amount;          public Value() {         }          public Value( Value that ) {             this.amount = that.amount;         }          public boolean equals( Object o ) {             if ( o == this ) return true;             if ( !( o instanceof Value ) ) return false;             Value that = ( Value ) o;             return that.amount == this.amount;         }     } } ```  ![image](images/NoteSmall.jpg) ***NOTE:*** *The above example code is intentionally broken.*  "
});

documentTitles["index.html#pessimistic-vs-optimistic-locking"] = "Pessimistic vs. Optimistic Locking";
index.add({
    url: "index.html#pessimistic-vs-optimistic-locking",
    title: "Pessimistic vs. Optimistic Locking",
    body: "#### Pessimistic vs. Optimistic Locking  Depending on your locking requirements, you can pick one locking strategy.  Optimistic locking is better for mostly read-only systems. It has a performance boost over pessimistic locking.  Pessimistic locking is good if there are lots of updates on the same key. It is more robust than optimistic locking from the perspective of data consistency.  In Hazelcast, use `IExecutorService` to submit a task to a key owner, or to a member or members. This is the recommended way to perform task executions, rather than using pessimistic or optimistic locking techniques. `IExecutorService` will have less network hops and less data over wire, and tasks will be executed very near to the data. Please refer to the [Data Affinity section](#data-affinity).  "
});

documentTitles["index.html#solving-the-aba-problem"] = "Solving the ABA Problem";
index.add({
    url: "index.html#solving-the-aba-problem",
    title: "Solving the ABA Problem",
    body: "#### Solving the ABA Problem  The ABA problem occurs in environments when a shared resource is open to change by multiple threads. Even if one thread sees the same value for a particular key in consecutive reads, it does not mean that nothing has changed between the reads. Another thread may change the value, do work, and change the value back, while the first thread thinks that nothing has changed.  To prevent these kind of problems, one solution is to use a version number and to check it before any write to be sure that nothing has changed between consecutive reads. Although all the other fields will be equal, the version field will prevent objects from being seen as equal. This is the optimistic locking strategy, and it is used in environments which do not expect intensive concurrent changes on a specific key.  In Hazelcast, you can apply the [optimistic locking](#optimistic-locking) strategy with the map `replace` method.      "
});

documentTitles["index.html#accessing-entry-statistics"] = "Accessing Entry Statistics";
index.add({
    url: "index.html#accessing-entry-statistics",
    title: "Accessing Entry Statistics",
    body: "### Accessing Entry Statistics  Hazelcast keeps statistics about each map entry, such as creation time, last update time, last access time, number of hits, and version. To access the map entry statistics, use an `IMap.getEntryView(key)` call. Here is an example.  ```java import com.hazelcast.core.Hazelcast; import com.hazelcast.core.EntryView;  HazelcastInstance hz = Hazelcast.newHazelcastInstance(); EntryView entry = hz.getMap( \&quot;quotes\&quot; ).getEntryView( \&quot;1\&quot; ); System.out.println ( \&quot;size in memory  : \&quot; + entry.getCost() ); System.out.println ( \&quot;creationTime    : \&quot; + entry.getCreationTime() ); System.out.println ( \&quot;expirationTime  : \&quot; + entry.getExpirationTime() ); System.out.println ( \&quot;number of hits  : \&quot; + entry.getHits() ); System.out.println ( \&quot;lastAccessedTime: \&quot; + entry.getLastAccessTime() ); System.out.println ( \&quot;lastUpdateTime  : \&quot; + entry.getLastUpdateTime() ); System.out.println ( \&quot;version         : \&quot; + entry.getVersion() ); System.out.println ( \&quot;key             : \&quot; + entry.getKey() ); System.out.println ( \&quot;value           : \&quot; + entry.getValue() ); ```         "
});

documentTitles["index.html#map-listener"] = "Map Listener";
index.add({
    url: "index.html#map-listener",
    title: "Map Listener",
    body: "### Map Listener  Please refer to the [Listening for Map Events section](#listening-for-map-events).        "
});

documentTitles["index.html#listening-to-map-entries-with-predicates"] = "Listening to Map Entries with Predicates";
index.add({
    url: "index.html#listening-to-map-entries-with-predicates",
    title: "Listening to Map Entries with Predicates",
    body: "### Listening to Map Entries with Predicates  You can listen to the modifications performed on specific map entries. You can think of it as an entry listener with predicates. Please see the [Listening for Map Events section](#listening-for-map-events) for information on how to add entry listeners to a map.   As an example, let's listen to the changes made on an employee with the surname \&quot;Smith\&quot;. First, let's create the `Employee` class.  ```java import java.io.Serializable;  public class Employee implements Serializable {      private final String surname;      public Employee(String surname) {         this.surname = surname;     }      @Override     public String toString() {         return \&quot;Employee{\&quot; +                 \&quot;surname='\&quot; + surname + '\'' +                 '}';     } } ```  Then, let's create a continuous query by adding the entry listener with the `surname` predicate.  ```java import com.hazelcast.core.*; import com.hazelcast.query.SqlPredicate;  public class ContinuousQuery {      public static void main(String[] args) {         HazelcastInstance hz = Hazelcast.newHazelcastInstance();         IMap&lt;String, String&gt; map = hz.getMap(\&quot;map\&quot;);         map.addEntryListener(new MyEntryListener(),                 new SqlPredicate(\&quot;surname=smith\&quot;), true);         System.out.println(\&quot;Entry Listener registered\&quot;);     }      static class MyEntryListener             implements EntryListener&lt;String, String&gt; {         @Override         public void entryAdded(EntryEvent&lt;String, String&gt; event) {             System.out.println(\&quot;Entry Added:\&quot; + event);         }          @Override         public void entryRemoved(EntryEvent&lt;String, String&gt; event) {             System.out.println(\&quot;Entry Removed:\&quot; + event);         }          @Override         public void entryUpdated(EntryEvent&lt;String, String&gt; event) {             System.out.println(\&quot;Entry Updated:\&quot; + event);         }          @Override         public void entryEvicted(EntryEvent&lt;String, String&gt; event) {             System.out.println(\&quot;Entry Evicted:\&quot; + event);         }          @Override         public void mapEvicted(MapEvent event) {             System.out.println(\&quot;Map Evicted:\&quot; + event);          }     } } ```  And now, let's play with the employee \&quot;smith\&quot; and see how that employee will be listened to.  ```java import com.hazelcast.core.Hazelcast; import com.hazelcast.core.HazelcastInstance; import com.hazelcast.core.IMap;  public class Modify {      public static void main(String[] args) {         HazelcastInstance hz = Hazelcast.newHazelcastInstance();         IMap&lt;String, Employee&gt; map = hz.getMap(\&quot;map\&quot;);          map.put(\&quot;1\&quot;, new Employee(\&quot;smith\&quot;));         map.put(\&quot;2\&quot;, new Employee(\&quot;jordan\&quot;));         System.out.println(\&quot;done\&quot;);         System.exit(0);     } } ```  When you first run the class `ContinuousQuery` and then run `Modify`, you will see output similar to the listing below.  ``` entryAdded:EntryEvent {Address[192.168.178.10]:5702} key=1,oldValue=null, value=Person{name= smith }, event=ADDED, by Member [192.168.178.10]:5702 ```  &lt;br&gt; &lt;/br&gt;           "
});

documentTitles["index.html#adding-interceptors"] = "Adding Interceptors";
index.add({
    url: "index.html#adding-interceptors",
    title: "Adding Interceptors",
    body: "### Adding Interceptors  You can add intercept operations and then execute your own business logic synchronously blocking the operations. You can change the returned value from a `get` operation, change the value to be `put`, or `cancel` operations by throwing an exception.  Interceptors are different from listeners. With listeners, you take an action after the operation has been completed. Interceptor actions are synchronous and you can alter the behavior of operation, change the values, or totally cancel it.  Map interceptors are chained, so adding the same interceptor multiple times to the same map can result in duplicate effects. This can easily happen when the interceptor is added to the map at node initialization, so that each node adds the same interceptor. When you add the interceptor in this way, be sure to implement the `hashCode()` method to return the same value for every instance of the interceptor. It is not strictly necessary, but it is a good idea to also implement `equals()` as this will ensure that the map interceptor can be removed reliably.  The IMap API has two methods for adding and removing an interceptor to the map: `addInterceptor` and `removeInterceptor`.  ```java /**  * Adds an interceptor for the map. Added interceptor intercepts operations  * and executes user defined methods and cancels operations if   * user defined methods throw exceptions.   *  * @param interceptor map interceptor.  * @return id of registered interceptor.  */ String addInterceptor( MapInterceptor interceptor );  /**  * Removes the given interceptor for this map. So it does not   * intercept operations anymore.   *  * @param id registration ID of the map interceptor.  */ void removeInterceptor( String id ); ```  Here is the `MapInterceptor` interface:  ```java public interface MapInterceptor extends Serializable {    /**    * Intercept the get operation before it returns a value.    * Return another object to change the return value of get().    * Returning null causes the get() operation to return the original value,    * namely return null if you do not want to change anything.    *     *    * @param value the original value to be returned as the result of get() operation.    * @return the new value that is returned by get() operation.    */   Object interceptGet( Object value );    /**    * Called after get() operation is completed.    *     *    * @param value the value returned as the result of get() operation.    */   void afterGet( Object value );    /**    * Intercept put operation before modifying map data.    * Return the object to be put into the map.    * Returning null causes the put() operation to operate as expected,    * namely no interception. Throwing an exception cancels the put operation.    *     *    * @param oldValue the value currently existing in the map.    * @param newValue the new value to be put.    * @return new value after intercept operation.    */   Object interceptPut( Object oldValue, Object newValue );    /**    * Called after put() operation is completed.    *     *    * @param value the value returned as the result of put() operation.    */   void afterPut( Object value );    /**    * Intercept remove operation before removing the data.    * Return the object to be returned as the result of remove operation.    * Throwing an exception cancels the remove operation.    *     *    * @param removedValue the existing value to be removed.    * @return the value to be returned as the result of remove operation.    */   Object interceptRemove( Object removedValue );    /**    * Called after remove() operation is completed.    *     *    * @param value the value returned as the result of remove(.) operation    */   void afterRemove( Object value ); } ```  **Example Usage:**  ```java public class InterceptorTest {    @Test   public void testMapInterceptor() throws InterruptedException {     HazelcastInstance hazelcastInstance1 = Hazelcast.newHazelcastInstance();     HazelcastInstance hazelcastInstance2 = Hazelcast.newHazelcastInstance();     IMap&lt;Object, Object&gt; map = hazelcastInstance1.getMap( \&quot;testMapInterceptor\&quot; );     SimpleInterceptor interceptor = new SimpleInterceptor();     map.addInterceptor( interceptor );     map.put( 1, \&quot;New York\&quot; );     map.put( 2, \&quot;Istanbul\&quot; );     map.put( 3, \&quot;Tokyo\&quot; );     map.put( 4, \&quot;London\&quot; );     map.put( 5, \&quot;Paris\&quot; );     map.put( 6, \&quot;Cairo\&quot; );     map.put( 7, \&quot;Hong Kong\&quot; );      try {       map.remove( 1 );     } catch ( Exception ignore ) {     }     try {       map.remove( 2 );     } catch ( Exception ignore ) {     }      assertEquals( map.size(), 6) ;      assertEquals( map.get( 1 ), null );     assertEquals( map.get( 2 ), \&quot;ISTANBUL:\&quot; );     assertEquals( map.get( 3 ), \&quot;TOKYO:\&quot; );     assertEquals( map.get( 4 ), \&quot;LONDON:\&quot; );     assertEquals( map.get( 5 ), \&quot;PARIS:\&quot; );     assertEquals( map.get( 6 ), \&quot;CAIRO:\&quot; );     assertEquals( map.get( 7 ), \&quot;HONG KONG:\&quot; );      map.removeInterceptor( interceptor );     map.put( 8, \&quot;Moscow\&quot; );      assertEquals( map.get( 8 ), \&quot;Moscow\&quot; );     assertEquals( map.get( 1 ), null );     assertEquals( map.get( 2 ), \&quot;ISTANBUL\&quot; );     assertEquals( map.get( 3 ), \&quot;TOKYO\&quot; );     assertEquals( map.get( 4 ), \&quot;LONDON\&quot; );     assertEquals( map.get( 5 ), \&quot;PARIS\&quot; );     assertEquals( map.get( 6 ), \&quot;CAIRO\&quot; );     assertEquals( map.get( 7 ), \&quot;HONG KONG\&quot; );   }    static class SimpleInterceptor implements MapInterceptor, Serializable {      @Override     public Object interceptGet( Object value ) {       if (value == null)         return null;       return value + \&quot;:\&quot;;     }      @Override     public void afterGet( Object value ) {     }      @Override     public Object interceptPut( Object oldValue, Object newValue ) {       return newValue.toString().toUpperCase();     }      @Override     public void afterPut( Object value ) {     }      @Override     public Object interceptRemove( Object removedValue ) {       if(removedValue.equals( \&quot;ISTANBUL\&quot; ))         throw new RuntimeException( \&quot;you can not remove this\&quot; );       return removedValue;     }      @Override     public void afterRemove( Object value ) {       // do something     }   } } ```        "
});

documentTitles["index.html#preventing-out-of-memory-exceptions"] = "Preventing Out of Memory Exceptions";
index.add({
    url: "index.html#preventing-out-of-memory-exceptions",
    title: "Preventing Out of Memory Exceptions",
    body: "### Preventing Out of Memory Exceptions  It is very easy to trigger an out of memory exception (OOME) with query based map methods, especially with large clusters or heap sizes. For example, on a 5 node cluster with 10 GB of data and 25 GB heap size per node, a single call of `IMap.entrySet()` fetches 50 GB of data and crashes the calling instance.  A call of `IMap.values()` may return too much data for a single node. This can also happen with a real query and an unlucky choice of predicates, especially when the parameters are chosen by a user of your application.  To prevent this, you can configure a maximum result size limit for query based operations. This is not a limit like `SELECT * FROM map LIMIT 100`, which you can achieve by a [Paging Predicate](#filtering-with-paging-predicates). A maximum result size limit for query based operations is meant to be a last line of defense to prevent your nodes from retrieving more data than they can handle.  The Hazelcast component which calculates this limit is the `QueryResultSizeLimiter`.  "
});

documentTitles["index.html#setting-query-result-size-limit"] = "Setting Query Result Size Limit";
index.add({
    url: "index.html#setting-query-result-size-limit",
    title: "Setting Query Result Size Limit",
    body: "#### Setting Query Result Size Limit  If the `QueryResultSizeLimiter` is activated, it calculates a result size limit per partition. Each `QueryOperation` runs on all partitions of a node, so it collects result entries as long as the node limit is not exceeded. If that happens, a `QueryResultSizeExceededException` is thrown and propagated to the calling instance.  This feature depends on an equal distribution of the data on the cluster nodes to calculate the result size limit per node. Therefore, there is a minimum value defined in `QueryResultSizeLimiter.MINIMUM_MAX_RESULT_LIMIT`. Configured values below the minimum will be increased to the minimum.  "
});

documentTitles["index.html#local-pre-check"] = "Local Pre-check";
index.add({
    url: "index.html#local-pre-check",
    title: "Local Pre-check",
    body: "##### Local Pre-check  In addition to the distributed result size check in the `QueryOperations`, there is a local pre-check on the calling instance. If you call the method from a client, the pre-check is executed on the member which invokes the `QueryOperations`.  Since the local pre-check can increase the latency of a `QueryOperation` you can configure how many local partitions should be considered for the pre-check or you can deactivate the feature completely.  "
});

documentTitles["index.html#scope-of-result-size-limit"] = "Scope of Result Size Limit";
index.add({
    url: "index.html#scope-of-result-size-limit",
    title: "Scope of Result Size Limit",
    body: "##### Scope of Result Size Limit  Besides the designated query operations, there are other operations which use predicates internally. Those method calls will throw the `QueryResultSizeExceededException` as well. Please see the following matrix to see the methods that are covered by the query result size limit.  ![Methods Covered by Query Result Size Limit](images/Map-QueryResultSizeLimiterScope.png)  "
});

documentTitles["index.html#configuring-query-result-size"] = "Configuring Query Result Size";
index.add({
    url: "index.html#configuring-query-result-size",
    title: "Configuring Query Result Size",
    body: "##### Configuring Query Result Size  The query result size limit is configured via the following system properties.  - `hazelcast.query.result.size.limit`: Result size limit for query operations on maps. This value defines the maximum number of returned elements for a single query result. If a query exceeds this number of elements, a QueryResultSizeExceededException is thrown. - `hazelcast.query.max.local.partition.limit.for.precheck`: Maximum value of local partitions to trigger local pre-check for TruePredicate query operations on maps.  Please refer to the [System Properties section](#system-properties) to see the full descriptions of these properties and how to set them.    "
});

documentTitles["index.html#queue"] = "Queue";
index.add({
    url: "index.html#queue",
    title: "Queue",
    body: "## Queue  Hazelcast distributed queue is an implementation of `java.util.concurrent.BlockingQueue`. Being distributed, Hazelcast distributed queue enables all cluster members to interact with it. Using Hazelcast distributed queue, you can add an item in one cluster member and remove it from another one.  "
});

documentTitles["index.html#getting-a-queue-and-putting-items"] = "Getting a Queue and Putting Items";
index.add({
    url: "index.html#getting-a-queue-and-putting-items",
    title: "Getting a Queue and Putting Items",
    body: "### Getting a Queue and Putting Items  Use the HazelcastInstance `getQueue` method to get the queue, then use the queue `put` method to put items into the queue.  ```java import com.hazelcast.core.Hazelcast; import java.util.concurrent.BlockingQueue; import java.util.concurrent.TimeUnit;  public class SampleQueue {    public static void main(String[] args) throws Exception {     HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance();    BlockingQueue&lt;MyTask&gt; queue = hazelcastInstance.getQueue( \&quot;tasks\&quot; );    queue.put( new MyTask() );    MyTask task = queue.take();     boolean offered = queue.offer( new MyTask(), 10, TimeUnit.SECONDS );    task = queue.poll( 5, TimeUnit.SECONDS );    if ( task != null ) {      //process task    }   } } ```   FIFO ordering will apply to all queue operations across the cluster. User objects (such as `MyTask` in the example above) that are enqueued or dequeued have to be `Serializable`.  Hazelcast distributed queue performs no batching while iterating over the queue. All items will be copied locally and iteration will occur locally.  Hazelcast distributed queue uses `ItemListener` to listen to events which occur when items are added to and removed from the Queue. Please refer to the [Listening for Item Events section](#listening-for-item-events) for information on how to create an item listener class and register it.     "
});

documentTitles["index.html#creating-an-example-queue"] = "Creating an Example Queue";
index.add({
    url: "index.html#creating-an-example-queue",
    title: "Creating an Example Queue",
    body: "### Creating an Example Queue  The following example code illustrates a distributed queue that connects a producer and consumer.  "
});

documentTitles["index.html#putting-items-on-the-queue"] = "Putting Items on the Queue";
index.add({
    url: "index.html#putting-items-on-the-queue",
    title: "Putting Items on the Queue",
    body: "#### Putting Items on the Queue  Let's `put` one integer on the queue every second, 100 integers total.  ```java import com.hazelcast.core.Hazelcast; import com.hazelcast.core.HazelcastInstance; import com.hazelcast.core.IQueue;  public class ProducerMember {   public static void main( String[] args ) throws Exception {     HazelcastInstance hz = Hazelcast.newHazelcastInstance();     IQueue&lt;Integer&gt; queue = hz.getQueue( \&quot;queue\&quot; );     for ( int k = 1; k &lt; 100; k++ ) {       queue.put( k );       System.out.println( \&quot;Producing: \&quot; + k );       Thread.sleep(1000);     }     queue.put( -1 );     System.out.println( \&quot;Producer Finished!\&quot; );   } } ```   `Producer` puts a **-1** on the queue to show that the `put`'s are finished.   "
});

documentTitles["index.html#taking-items-off-the-queue"] = "Taking Items off the Queue";
index.add({
    url: "index.html#taking-items-off-the-queue",
    title: "Taking Items off the Queue",
    body: "#### Taking Items off the Queue  Now, let's create a `Consumer` class to `take` a message from this queue, as shown below.   ```java import com.hazelcast.core.Hazelcast; import com.hazelcast.core.HazelcastInstance; import com.hazelcast.core.IQueue;  public class ConsumerMember {   public static void main( String[] args ) throws Exception {     HazelcastInstance hz = Hazelcast.newHazelcastInstance();     IQueue&lt;Integer&gt; queue = hz.getQueue( \&quot;queue\&quot; );     while ( true ) {       int item = queue.take();       System.out.println( \&quot;Consumed: \&quot; + item );       if ( item == -1 ) {         queue.put( -1 );         break;       }       Thread.sleep( 5000 );     }     System.out.println( \&quot;Consumer Finished!\&quot; );   } } ```  As seen in the above example code, `Consumer` waits 5 seconds before it consumes the next message. It stops once it receives **-1**. Also note that `Consumer` puts **-1** back on the queue before the loop is ended.   When you first start `Producer` and then start `Consumer`, items produced on the queue will be consumed from the same queue.  "
});

documentTitles["index.html#balancing-the-queue-operations"] = "Balancing the Queue Operations";
index.add({
    url: "index.html#balancing-the-queue-operations",
    title: "Balancing the Queue Operations",
    body: "#### Balancing the Queue Operations  From the above example code, you can see that an item is produced every second, and consumed every 5 seconds. Therefore, the consumer keeps growing. To balance the produce/consume operation, let's start another consumer. By this way, consumption is distributed to these two consumers, as seen in the sample outputs below.   The second consumer is started. After a while, here is the first consumer output:  ```plain ... Consumed 13  Consumed 15 Consumer 17 ... ```  Here is the second consumer output:  ```plain ... Consumed 14  Consumed 16 Consumer 18 ... ```  In the case of a lot of producers and consumers for the queue, using a list of queues may solve the queue bottlenecks. In this case, be aware that the order of the messages sent to different queues is not guaranteed. Since in most cases strict ordering is not important, a list of queues is a good solution.  ![image](images/NoteSmall.jpg) ***NOTE:*** *The items are taken from the queue in the same order they were put on the queue. However, if there is more than one consumer, this order is not guaranteed.*  "
});

documentTitles["index.html#itemids-when-offering-items"] = "ItemIDs When Offering Items";
index.add({
    url: "index.html#itemids-when-offering-items",
    title: "ItemIDs When Offering Items",
    body: "#### ItemIDs When Offering Items  Hazelcast gives an `itemId` for each item you offer, which is an incrementing sequence identification for the queue items. You should consider the following to understand the `itemId` assignment behavior:  - When a Hazelcast member with a queue, that is configured to have at least one backup, is restarted, the `itemId` assignment resumes from the last known highest `itemId` before the restart; `itemId` assignment does not start from the beginning for the new items. - When the whole cluster is restarted, the same behavior explained in the above consideration applies if your queue has a persistent data store (`QueueStore`). If the queue has `QueueStore`, the `itemId` for the new items are given starting from the highest `itemId` found in the IDs returned by the method `loadAllKeys`. If the method `loadAllKeys` does not return anything, the `itemId`s will started from the beginning after a cluster restart. - The above two considerations mean there will be no duplicated `itemId`s in the memory or in the persistent data store.           "
});

documentTitles["index.html#setting-a-bounded-queue"] = "Setting a Bounded Queue";
index.add({
    url: "index.html#setting-a-bounded-queue",
    title: "Setting a Bounded Queue",
    body: "### Setting a Bounded Queue  A bounded queue is a queue with a limited capacity. When the bounded queue is full, no more items can be put into the queue until some items are taken out.  To turn a Hazelcast distributed queue into a bounded queue, set the capacity limit with the `max-size` property. You can set the `max-size` property in the configuration, as shown below. `max-size` specifies the maximum size of the queue. Once the queue size reaches this value, `put` operations will be blocked until the queue size goes below `max-size`, which happens when a consumer removes items from the queue.  Let's set **10** as the maximum size of our example queue in [Creating an Example Queue](#creating-an-example-queue).   ```xml &lt;hazelcast&gt;   ...   &lt;queue name=\&quot;queue\&quot;&gt;     &lt;max-size&gt;10&lt;/max-size&gt;   &lt;/queue&gt;   ... &lt;/hazelcast&gt; ```  When the producer is started, 10 items are put into the queue and then the queue will not allow more `put` operations. When the consumer is started, it will remove items from the queue. This means that the producer can `put` more items into the queue until there are 10 items in the queue again, at which point `put` operation again become blocked.  But in this example code, the producer is 5 times faster than the consumer. It will effectively always be waiting for the consumer to remove items before it can put more on the queue. For this example code, if maximum throughput was the goal, it would be a good option to start multiple consumers to prevent the queue from filling up.       "
});

documentTitles["index.html#queueing-with-persistent-datastore"] = "Queueing with Persistent Datastore";
index.add({
    url: "index.html#queueing-with-persistent-datastore",
    title: "Queueing with Persistent Datastore",
    body: "### Queueing with Persistent Datastore   Hazelcast allows you to load and store the distributed queue items from/to a persistent datastore using the interface `QueueStore`. If queue store is enabled, each item added to the queue will also be stored at the configured queue store. When the number of items in the queue exceeds the memory limit, the subsequent items are persisted in the queue store, they are not stored in the queue memory.  The `QueueStore` interface enables you to store, load, and delete queue items with methods like `store`, `storeAll`, `load` and `delete`. The following example class includes all of the `QueueStore` methods.  ```java public class TheQueueStore implements QueueStore&lt;Item&gt; {     @Override     public void delete(Long key) {         System.out.println(\&quot;delete\&quot;);     }      @Override     public void store(Long key, Item value) {         System.out.println(\&quot;store\&quot;);     }      @Override     public void storeAll(Map&lt;Long, Item&gt; map) {         System.out.println(\&quot;store all\&quot;);     }      @Override     public void deleteAll(Collection&lt;Long&gt; keys) {         System.out.println(\&quot;deleteAll\&quot;);     }      @Override     public Item load(Long key) {         System.out.println(\&quot;load\&quot;);         return null;     }      @Override     public Map&lt;Long, Item&gt; loadAll(Collection&lt;Long&gt; keys) {         System.out.println(\&quot;loadAll\&quot;);         return null;     }      @Override     public Set&lt;Long&gt; loadAllKeys() {         System.out.println(\&quot;loadAllKeys\&quot;);         return null;     } ```   `Item` must be serializable. Following is an example queue store configuration.   ```xml &lt;queue-store&gt;   &lt;class-name&gt;com.hazelcast.QueueStoreImpl&lt;/class-name&gt;   &lt;properties&gt;     &lt;property name=\&quot;binary\&quot;&gt;false&lt;/property&gt;     &lt;property name=\&quot;memory-limit\&quot;&gt;1000&lt;/property&gt;     &lt;property name=\&quot;bulk-load\&quot;&gt;500&lt;/property&gt;   &lt;/properties&gt; &lt;/queue-store&gt; ```  Let's explain the queue store properties.  - **Binary**: By default, Hazelcast stores the queue items in serialized form, and before it inserts the queue items into datastore, it deserializes them. But if you will not reach the queue store from an external application, you might prefer that the items be inserted in binary form. Do this by setting the `binary` property to true: then you can get rid of the deserialization step, which is a performance optimization. The `binary` property is false by default.      - **Memory Limit**: This is the number of items after which Hazelcast will store items only to datastore. For example, if the memory limit is 1000, then the 1001st item will be put only to datastore. This feature is useful when you want to avoid out-of-memory conditions. If you want to always use memory, you can set it to `Integer.MAX_VALUE`. The default number for `memory-limit` is 1000.      - **Bulk Load**: When the queue is initialized, items are loaded from `QueueStore` in bulks. Bulk load is the size of these bulks. The default value of `bulk-load` is 250.      "
});

documentTitles["index.html#configuring-queue"] = "Configuring Queue";
index.add({
    url: "index.html#configuring-queue",
    title: "Configuring Queue",
    body: "### Configuring Queue  The following are example queue configurations including the `QueueStore` configuration which is explained in the [Queueing with Persistent Datastore](#queueing-with-persistent-datastore) section.   **Declarative:**  ```xml &lt;queue name=\&quot;default\&quot;&gt;     &lt;max-size&gt;0&lt;/max-size&gt;     &lt;backup-count&gt;1&lt;/backup-count&gt;     &lt;async-backup-count&gt;0&lt;/async-backup-count&gt;     &lt;empty-queue-ttl&gt;-1&lt;/empty-queue-ttl&gt;     &lt;item-listeners&gt;        &lt;item-listener&gt;           com.hazelcast.examples.ItemListener        &lt;/item-listener&gt;     &lt;item-listeners&gt; &lt;/queue&gt; &lt;queue-store&gt;     &lt;class-name&gt;com.hazelcast.QueueStoreImpl&lt;/class-name&gt;     &lt;properties&gt;        &lt;property name=\&quot;binary\&quot;&gt;false&lt;/property&gt;        &lt;property name=\&quot;memory-limit\&quot;&gt;10000&lt;/property&gt;        &lt;property name=\&quot;bulk-load\&quot;&gt;500&lt;/property&gt;     &lt;/properties&gt; &lt;/queue-store&gt;    ```  **Programmatic:**  ```java Config config = new Config(); QueueConfig queueConfig = config.getQueueConfig(); queueConfig.setName( \&quot;MyQueue\&quot; ).setBackupCount( \&quot;1\&quot; )         .setMaxSize( \&quot;0\&quot; ).setStatisticsEnabled( \&quot;true\&quot; ); queueConfig.getQueueStoreConfig()         .setEnabled ( \&quot;true\&quot; )         .setClassName( \&quot;com.hazelcast.QueueStoreImpl\&quot; )         .setProperty( \&quot;binary\&quot;, \&quot;false\&quot; ); ```   Hazelcast distributed queue has one synchronous backup by default. By having this backup, when a cluster member with a queue goes down, another member having the backup of that queue will continue. Therefore, no items are lost. You can define the number of synchronous backups for a queue using the `backup-count` element in the declarative configuration. A queue can also have asynchronous backups: you can define the number of asynchronous backups using the `async-backup-count` element.   To set the maximum size of the queue, use the `max-size` element. To purge unused or empty queues after a period of time, use the `empty-queue-ttl` element. If you define a value (time in seconds) for the `empty-queue-ttl` element, then your queue will be destroyed if it stays empty or unused for the time you give.  The following are the full list of elements with their descriptions.  - `max-size`: Maximum number of items in the Queue. - `backup-count`: Number of synchronous backups. Queue is a non-partitioned data structure, so all entries of a Queue resides in one partition. When this parameter is '1', it means there will be 1 backup of that Queue in another member in the cluster. When it is '2', 2 members will have the backup. - `async-backup-count`: Number of asynchronous backups. - `empty-queue-ttl`: Used to purge unused or empty queues. If you define a value (time in seconds) for this element, then your queue will be destroyed if it stays empty or unused for that time. - `item-listeners`: Lets you add listeners (listener classes) for the queue items. You can also set the attribute `include-value` to `true` if you want the item event to contain the item values, and you can set `local` to `true` if you want to listen to the items on the local node (member). - `queue-store`: Includes the queue store factory class name and the properties  *binary*, *memory limit* and *bulk load*. Please refer to [Queueing with Persistent Datastore](#queueing-with-persistent-datastore). - `statistics-enabled`: If set to `true`, you can retrieve statistics for this Queue using the method `getLocalQueueStats()`.         "
});

documentTitles["index.html#multimap"] = "MultiMap";
index.add({
    url: "index.html#multimap",
    title: "MultiMap",
    body: "## MultiMap  Hazelcast `MultiMap` is a specialized map where you can store multiple values under a single key. Just like any other distributed data structure implementation in Hazelcast, `MultiMap` is distributed and thread-safe.  Hazelcast `MultiMap` is not an implementation of `java.util.Map` due to the difference in method signatures. It supports most features of Hazelcast Map except for indexing, predicates and MapLoader/MapStore. Yet, like Hazelcast Map, entries are almost evenly distributed onto all cluster members. When a new member joins the cluster, the same ownership logic used in the distributed map applies.   "
});

documentTitles["index.html#getting-a-multimap-and-putting-an-entry"] = "Getting a MultiMap and Putting an Entry";
index.add({
    url: "index.html#getting-a-multimap-and-putting-an-entry",
    title: "Getting a MultiMap and Putting an Entry",
    body: "### Getting a MultiMap and Putting an Entry  The following example creates a MultiMap and puts items into it. Use the HazelcastInstance `getMultiMap` method to get the MultiMap, then use the MultiMap `put` method to put an entry into the MultiMap.   ```java public class PutMember {   public static void main( String[] args ) {     HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance();     MultiMap &lt;String , String &gt; map = hazelcastInstance.getMultiMap( \&quot;map\&quot; );      map.put( \&quot;a\&quot;, \&quot;1\&quot; );     map.put( \&quot;a\&quot;, \&quot;2\&quot; );     map.put( \&quot;b\&quot;, \&quot;3\&quot; );      System.out.println( \&quot;PutMember:Done\&quot; );   } } ```  Now let's print the entries in this MultiMap.  ```java public class PrintMember {   public static void main( String[] args ) {      HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance();     MultiMap &lt;String, String &gt; map = hazelcastInstance.getMultiMap( \&quot;map\&quot; );     for ( String key : map.keySet() ){       Collection &lt;String &gt; values = map.get( key );       System.out.println( \&quot;%s -&gt; %s\n\&quot;,key, values );     }   } } ```  After you run the first code sample, run the `PrintMember` sample. You will see the key **`a`** has two values, as shown below.  `b -&gt; [3]`  `a -&gt; [2, 1]`  Hazelcast MultiMap uses `EntryListener` to listen to events which occur when entries are added to, updated in or removed from the MultiMap. Please refer to the [Listening for MultiMap Events section](#listening-for-multimap-events) for information on how to create an entry listener class and register it.  "
});

documentTitles["index.html#configuring-multimap"] = "Configuring MultiMap";
index.add({
    url: "index.html#configuring-multimap",
    title: "Configuring MultiMap",
    body: "### Configuring MultiMap  When using MultiMap, the collection type of the values can be either **Set** or **List**. You configure the collection type with the `valueCollectionType` parameter. If you choose `Set`, duplicate and null values are not allowed in your collection and ordering is irrelevant. If you choose `List`, ordering is relevant and your collection can include duplicate and null values.  You can also enable statistics for your MultiMap with the `statisticsEnabled` parameter. If you enable `statisticsEnabled`, statistics can be retrieved with `getLocalMultiMapStats()` method.   ![image](images/NoteSmall.jpg) ***NOTE:*** *Currently, eviction is not supported for the MultiMap data structure.* &lt;br&gt;&lt;/br&gt;  The following are the example MultiMap configurations.  **Declarative:**  ```xml &lt;hazelcast&gt;   &lt;multimap name=\&quot;default\&quot;&gt;     &lt;backup-count&gt;0&lt;/backup-count&gt;     &lt;async-backup-count&gt;1&lt;/async-backup-count&gt;     &lt;value-collection-type&gt;SET&lt;/value-collection-type&gt;     &lt;entry-listeners&gt;         &lt;entry-listener include-value=\&quot;false\&quot; local=\&quot;false\&quot;&gt;            com.hazelcast.examples.EntryListener         &lt;/entry-listener&gt;     &lt;/entry-listeners&gt;      &lt;/map&gt; &lt;/hazelcast&gt; ```  **Programmatic:**  ```java MultiMapConfig mmConfig = new MultiMapConfig(); mmConfig.setName( \&quot;default\&quot; );  mmConfig.setBackupCount( \&quot;0\&quot; ).setAsyncBackupCount( \&quot;1\&quot; );           mmConfig.setValueCollectionType( \&quot;SET\&quot; ); ```  The following are the configuration elements and their descriptions:  - `backup-count`: Defines the number of asynchronous backups. For example, if it is set to 1, backup of a partition will be placed on 1 other member. If it is 2, it will be placed on 2 other members. - `async-backup-count`: The number of synchronous backups. Behavior is the same as that of the `backup-count` element. - `statistics-enabled`: You can retrieve some statistics like owned entry count, backup entry count, last update time, locked entry count by setting this parameter's value as \&quot;true\&quot;. The method for retrieving the statistics is `getLocalMultiMapStats()`. - `value-collection-type`: Type of the value collection. It can be `Set` or `List`. - `entry-listeners`: Lets you add listeners (listener classes) for the map entries. You can also set the attribute include-value to true if you want the item event to contain the entry values, and you can set local to true if you want to listen to the entries on the local node.               "
});

documentTitles["index.html#set"] = "Set";
index.add({
    url: "index.html#set",
    title: "Set",
    body: "## Set  Hazelcast Set is a distributed and concurrent implementation of `java.util.Set`.  * Hazelcast Set does not allow duplicate elements. * Hazelcast Set does not preserve the order of elements. * Hazelcast Set is a non-partitioned data structure: all the data that belongs to a set will live on one single partition in that member. * Hazelcast Set cannot be scaled beyond the capacity of a single machine. Since the whole set lives on a single partition, storing large amount of data on a single set may cause memory pressure. Therefore, you should use multiple sets to store large amount of data; this way, all the sets will be spread across the cluster, hence sharing the load. * A backup of Hazelcast Set is stored on a partition of another member in the cluster so that data is not lost in the event of a primary member failure. * All items are copied to the local member and iteration occurs locally. * The equals method implemented in Hazelcast Set uses a serialized byte version of objects, as opposed to `java.util.HashSet`.  "
});

documentTitles["index.html#getting-a-set-and-putting-items"] = "Getting a Set and Putting Items";
index.add({
    url: "index.html#getting-a-set-and-putting-items",
    title: "Getting a Set and Putting Items",
    body: "### Getting a Set and Putting Items  Use the HazelcastInstance `getSet` method to get the Set, then use the set `put` method to put items into the Set.  ```java import com.hazelcast.core.Hazelcast; import java.util.Set; import java.util.Iterator;  HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance();  Set&lt;Price&gt; set = hazelcastInstance.getSet( \&quot;IBM-Quote-History\&quot; ); set.add( new Price( 10, time1 ) ); set.add( new Price( 11, time2 ) ); set.add( new Price( 12, time3 ) ); set.add( new Price( 11, time4 ) ); //.... Iterator&lt;Price&gt; iterator = set.iterator(); while ( iterator.hasNext() ) {    Price price = iterator.next();    //analyze } ```  Hazelcast Set uses `ItemListener` to listen to events that occur when items are added to and removed from the Set. Please refer to the [Listening for Item Events section](#listening-for-item-events) for information on how to create an item listener class and register it.  "
});

documentTitles["index.html#configuring-set"] = "Configuring Set";
index.add({
    url: "index.html#configuring-set",
    title: "Configuring Set",
    body: "### Configuring Set  The following are the example set configurations.   **Declarative:**  ```xml &lt;set name=\&quot;default\&quot;&gt;    &lt;backup-count&gt;1&lt;/backup-count&gt;    &lt;async-backup-count&gt;0&lt;/async-backup-count&gt;    &lt;max-size&gt;10&lt;/max-size&gt;    &lt;item-listeners&gt;       &lt;item-listener&gt;           com.hazelcast.examples.ItemListener       &lt;/item-listener&gt;    &lt;item-listeners&gt; &lt;/set&gt; ```  **Programmatic:**  ```java Config config = new Config(); CollectionConfig collectionSet = config.getCollectionConfig(); collectionSet.setName( \&quot;MySet\&quot; ).setBackupCount( \&quot;1\&quot; )         .setMaxSize( \&quot;10\&quot; ); ```      Set configuration has the following elements.   - `statistics-enabled`: True (default) if statistics gathering is enabled on the set, false otherwise. - `backup-count`: Count of synchronous backups. Set is a non-partitioned data structure, so all entries of a Set reside in one partition. When this parameter is '1', it means there will be 1 backup of that Set in another member in the cluster. When it is '2', 2 members will have the backup. - `async-backup-count`: Count of asynchronous backups. - `max-size`: The maximum number of entries for this Set. - `item-listeners`: Lets you add listeners (listener classes) for the list items. You can also set the attributes `include-value` to `true` if you want the item event to contain the item values, and you can set `local` to `true` if you want to listen to the items on the local member.        "
});

documentTitles["index.html#list"] = "List";
index.add({
    url: "index.html#list",
    title: "List",
    body: "## List  Hazelcast List is similar to Hazelcast Set, but Hazelcast List also allows duplicate elements.  * Besides allowing duplicate elements, Hazelcast List preserves the order of elements. * Hazelcast List is a non-partitioned data structure where values and each backup are represented by their own single partition. * Hazelcast List cannot be scaled beyond the capacity of a single machine. * All items are copied to local and iteration occurs locally.  "
});

documentTitles["index.html#getting-a-list-and-putting-items"] = "Getting a List and Putting Items";
index.add({
    url: "index.html#getting-a-list-and-putting-items",
    title: "Getting a List and Putting Items",
    body: "### Getting a List and Putting Items  Use the HazelcastInstance `getList` method to get the list, then use the list `put` method to put items into the List.  ```java import com.hazelcast.core.Hazelcast; import java.util.List; import java.util.Iterator;  HazelcastInstance hz = Hazelcast.newHazelcastInstance();  List&lt;Price&gt; list = hz.getList( \&quot;IBM-Quote-Frequency\&quot; ); list.add( new Price( 10 ) ); list.add( new Price( 11 ) ); list.add( new Price( 12 ) ); list.add( new Price( 11 ) ); list.add( new Price( 12 ) );          //.... Iterator&lt;Price&gt; iterator = list.iterator(); while ( iterator.hasNext() ) {    Price price = iterator.next();    //analyze } ```   Hazelcast List uses `ItemListener` to listen to events which occur when items are added to and removed from the List. Please refer to the [Listening for Item Events section](#listening-for-item-events) for information on how to create an item listener class and register it.  "
});

documentTitles["index.html#configuring-list"] = "Configuring List";
index.add({
    url: "index.html#configuring-list",
    title: "Configuring List",
    body: "### Configuring List   The following are example list configurations.  **Declarative:**  ```xml &lt;list name=\&quot;default\&quot;&gt;    &lt;backup-count&gt;1&lt;/backup-count&gt;    &lt;async-backup-count&gt;0&lt;/async-backup-count&gt;    &lt;max-size&gt;10&lt;/max-size&gt;    &lt;item-listeners&gt;       &lt;item-listener&gt;           com.hazelcast.examples.ItemListener       &lt;/item-listener&gt;    &lt;/item-listeners&gt; &lt;/list&gt; ```  **Programmatic:**  ```java Config config = new Config(); CollectionConfig collectionList = config.getCollectionConfig(); collectionList.setName( \&quot;MyList\&quot; ).setBackupCount( \&quot;1\&quot; )         .setMaxSize( \&quot;10\&quot; ); ```      List configuration has the following elements.   - `statistics-enabled`: True (default) if statistics gathering is enabled on the list, false otherwise. - `backup-count`: Number of synchronous backups. List is a non-partitioned data structure, so all entries of a List reside in one partition. When this parameter is '1', there will be 1 backup of that List in another member in the cluster. When it is '2', 2 members will have the backup. - `async-backup-count`: Number of asynchronous backups. - `max-size`: The maximum number of entries for this List. - `item-listeners`: Lets you add listeners (listener classes) for the list items. You can also set the attribute `include-value` to `true` if you want the item event to contain the item values, and you can set the attribute `local` to `true` if you want to listen the items on the local member.        "
});

documentTitles["index.html#ringbuffer"] = "Ringbuffer";
index.add({
    url: "index.html#ringbuffer",
    title: "Ringbuffer",
    body: "## Ringbuffer  Hazelcast Ringbuffer is a distributed data structure that stores its data in a ring-like structure. You can think of it as a circular array with a  given capacity. Each Ringbuffer has a tail and a head. The tail is where the items are added and the head is where the items are overwritten  or expired. You can reach each element in a Ringbuffer using a sequence ID, which is mapped to the elements between the head  and tail (inclusive) of the Ringbuffer.   "
});

documentTitles["index.html#getting-a-ringbuffer-and-reading-items"] = "Getting a Ringbuffer and Reading Items";
index.add({
    url: "index.html#getting-a-ringbuffer-and-reading-items",
    title: "Getting a Ringbuffer and Reading Items",
    body: "### Getting a Ringbuffer and Reading Items  Reading from Ringbuffer is simple: get the Ringbuffer with the HazelcastInstance `getRingbuffer` method, get its current head with the `headSequence` method, and start reading. Use the method `readOne` to return the item at the  given sequence; `readOne` blocks if no item is available. To read the next item, increment the sequence by one.  ```java Ringbuffer&lt;String&gt; ringbuffer = hz.getRingbuffer(\&quot;rb\&quot;); long sequence = ringbuffer.headSequence(); while(true){     String item = ringbuffer.readOne(sequence);     sequence++;     ... process item }   ```  By exposing the sequence, you can now move the item from the Ringbuffer as long as the item is still available. If the item is not available any longer, `StaleSequenceException` is thrown.  "
});

documentTitles["index.html#adding-items-to-a-ringbuffer"] = "Adding Items to a Ringbuffer";
index.add({
    url: "index.html#adding-items-to-a-ringbuffer",
    title: "Adding Items to a Ringbuffer",
    body: "### Adding Items to a Ringbuffer  Adding an item to a Ringbuffer is also easy with the Ringbuffer `add` method:  ```java Ringbuffer&lt;String&gt; ringbuffer = hz.getRingbuffer(\&quot;rb\&quot;); ringbuffer.add(\&quot;someitem\&quot;) ```  Use the method `add` to return the sequence of the inserted item; the sequence value will always be unique. You can use this as a  very cheap way of generating unique IDs if you are already using Ringbuffer.   "
});

documentTitles["index.html#iqueue-vs-ringbuffer"] = "IQueue vs. Ringbuffer";
index.add({
    url: "index.html#iqueue-vs-ringbuffer",
    title: "IQueue vs. Ringbuffer",
    body: "### IQueue vs. Ringbuffer  Hazelcast Ringbuffer can sometimes be a better alternative than an Hazelcast IQueue. Unlike IQueue, Ringbuffer does not remove the items, it only reads items using a certain position. There are many advantages to this approach:  * The same item can be read multiple times by the same thread; this is useful for realizing semantics of read-at-least-once or  read-at-most-once. * The same item can be read by multiple threads. Normally you could use an IQueue per thread for the same semantic, but this is  less efficient because of the increased remoting. A take from an IQueue is destructive, so the change needs to be applied for backup  also, which is why a `queue.take()` is more expensive than a `ringBuffer.read(...)`. * Reads are extremely cheap since there is no change in the Ringbuffer, therefore no replication is required.  * Reads and writes can be batched to speed up performance. Batching can dramatically improve the performance of Ringbuffer.    "
});

documentTitles["index.html#configuring-ringbuffer-capacity"] = "Configuring Ringbuffer Capacity";
index.add({
    url: "index.html#configuring-ringbuffer-capacity",
    title: "Configuring Ringbuffer Capacity",
    body: "### Configuring Ringbuffer Capacity  By default, a Ringbuffer is configured with a `capacity` of 10000 items. This creates an array with a size of 10000. If  a `time-to-live` is configured, then an array of longs is also created that stores the expiration time for every item.  In a lot of cases, you may want to change this `capacity` number to something that better fits your needs.   Below is a declarative configuration example of a Ringbuffer with a `capacity` of 2000 items.  ```xml &lt;ringbuffer name=\&quot;rb\&quot;&gt;     &lt;capacity&gt;2000&lt;/capacity&gt; &lt;/ringbuffer&gt; ```  Currently, Hazelcast Ringbuffer is not a partitioned data structure; its data is stored in a single partition and the replicas  are stored in another partition. Therefore, create a Ringbuffer that can safely fit in a single cluster member.    "
});

documentTitles["index.html#backing-up-ringbuffer"] = "Backing Up Ringbuffer";
index.add({
    url: "index.html#backing-up-ringbuffer",
    title: "Backing Up Ringbuffer",
    body: "### Backing Up Ringbuffer  Hazelcast Ringbuffer has 1 single synchronous backup by default. You can control the Ringbuffer backup just like most of the other Hazelcast  distributed data structures by setting the synchronous and asynchronous backups: `backup-count` and `async-backup-count`. In the example below, a Ringbuffer is configured with 0 synchronous backups and 1 asynchronous backup:  ```xml &lt;ringbuffer name=\&quot;rb\&quot;&gt;     &lt;backup-count&gt;0&lt;/backup-count&gt;     &lt;async-backup-count&gt;1&lt;/async-backup-count&gt; &lt;/ringbuffer&gt; ```  An asynchronous backup will probably give you better performance. However, there is a chance that the item added will be lost  when the member owning the primary crashes before the backup could complete. You may want to consider batching methods if you need high performance but do not want to give up on consistency.   "
});

documentTitles["index.html#configuring-ringbuffer-time-to-live"] = "Configuring Ringbuffer Time To Live";
index.add({
    url: "index.html#configuring-ringbuffer-time-to-live",
    title: "Configuring Ringbuffer Time To Live",
    body: "### Configuring Ringbuffer Time To Live  You can configure Hazelcast Ringbuffer with a time to live in seconds. Using this setting, you can control how long the items remain in  the Ringbuffer before they are expired. By default, the time to live is set to 0, meaning that unless the item is overwritten,  it will remain in the Ringbuffer indefinitely. If you set a time to live and an item is added, then depending on the Overflow Policy,  either the oldest item is overwritten, or the call is rejected.   In the example below, a Ringbuffer is configured with a time to live of 180 seconds.  ```xml &lt;ringbuffer name=\&quot;rb\&quot;&gt;     &lt;time-to-live-seconds&gt;180&lt;/time-to-live-seconds&gt; &lt;/ringbuffer&gt; ```   "
});

documentTitles["index.html#setting-ringbuffer-overflow-policy"] = "Setting Ringbuffer Overflow Policy";
index.add({
    url: "index.html#setting-ringbuffer-overflow-policy",
    title: "Setting Ringbuffer Overflow Policy",
    body: "### Setting Ringbuffer Overflow Policy  Using the overflow policy, you can determine what to do if the oldest item in the Ringbuffer is not old enough to expire when  more items than the configured Ringbuffer capacity are being added. The below options are currently available.   * `OverflowPolicy.OVERWRITE`: The oldest item is overwritten.  * `OverflowPolicy.FAIL`: The call is aborted. The methods that make use of the OverflowPolicy return `-1` to indicate that adding the item has failed.   Overflow policy gives you fine control on what to do if the Ringbuffer is full. You can also use the overflow policy to apply  a back pressure mechanism. The following example code shows the usage of an exponential backoff.  ```java long sleepMs = 100; for (; ; ) {     long result = ringbuffer.addAsync(item, OverflowPolicy.FAIL).get();     if (result != -1) {         break;     }          TimeUnit.MILLISECONDS.sleep(sleepMs);     sleepMs = min(5000, sleepMs * 2); } ```   "
});

documentTitles["index.html#configuring-ringbuffer-in-memory-format"] = "Configuring Ringbuffer In-Memory Format";
index.add({
    url: "index.html#configuring-ringbuffer-in-memory-format",
    title: "Configuring Ringbuffer In-Memory Format",
    body: "### Configuring Ringbuffer In-Memory Format  You can configure Hazelcast Ringbuffer with an in-memory format which controls the format of the Ringbuffer's stored items. By default, `BINARY` in-memory format is used,  meaning that the object is stored in a serialized form. You can select the `OBJECT` in-memory format, which is useful when filtering is  applied or when the `OBJECT` in-memory format has a smaller memory footprint than `BINARY`.   In the declarative configuration example below, a Ringbuffer is configured with the `OBJECT` in-memory format:  ```xml &lt;ringbuffer name=\&quot;rb\&quot;&gt;     &lt;in-memory-format&gt;BINARY&lt;/in-memory-format&gt; &lt;/ringbuffer&gt; ```   "
});

documentTitles["index.html#adding-batched-items"] = "Adding Batched Items";
index.add({
    url: "index.html#adding-batched-items",
    title: "Adding Batched Items",
    body: "### Adding Batched Items  In the previous examples, the method `ringBuffer.add()` is used to add an item to the Ringbuffer. The problem with this method  is that it always overwrites and that it does not support batching. Batching can have a huge impact on the performance. You can use the method `addAllAsync` to support batching.   Please see the following example code.  ```java List&lt;String&gt; items = Arrays.asList(\&quot;1\&quot;,\&quot;2\&quot;,\&quot;3\&quot;); ICompletableFuture&lt;Long&gt; f = rb.addAllAsync(items, OverflowPolicy.OVERWRITE); f.get() ```          In the above case, three strings are added to the Ringbuffer using the policy `OverflowPolicy.OVERWRITE`. Please see the [Overflow Policy section](#setting-ringbuffer-overflow-policy)  for more information.  "
});

documentTitles["index.html#reading-batched-items"] = "Reading Batched Items";
index.add({
    url: "index.html#reading-batched-items",
    title: "Reading Batched Items",
    body: "### Reading Batched Items  In the previous example, the `readOne` method read items from the Ringbuffer. `readOne` is simple but not very efficient for the following reasons:  * `readOne` does not use batching. * `readOne` cannot filter items at the source; the items need to be retrieved before being filtered.  The method `readManyAsync` can read a batch of items and can filter items at the source.   Please see the following example code.  ```java ICompletableFuture&lt;ReadResultSet&lt;E&gt;&gt; readManyAsync(    long startSequence,     int minCount,                                                  int maxCount,     IFunction&lt;E, Boolean&gt; filter); ```  The meanings of the `readManyAsync` arguments are given below.  * `startSequence`: Sequence of the first item to read. * `minCount`: Minimum number of items to read. If you do not want to block, set it to 0. If you want to block for at least one item, set it to 1. * `maxCount`: Maximum number of the items to retrieve. Its value cannot exceed 1000. * `filter`: A function that accepts an item and checks if it should be returned. If no filtering should be applied, set it to null.  A full example is given below.  ```java long sequence = rb.headSequence(); for(;;) {     ICompletableFuture&lt;ReadResultSet&lt;String&gt;&gt; f = rb.readManyAsync(sequence, 1, 10, null);     ReadResultSet&lt;String&gt; rs = f.get();     for (String s : rs) {         System.out.println(s);     }     sequence+=rs.readCount(); } ```          Please take a careful look at how your sequence is being incremented. You cannot always rely on the number of items being returned if the items are filtered out.   "
});

documentTitles["index.html#using-async-methods"] = "Using Async Methods";
index.add({
    url: "index.html#using-async-methods",
    title: "Using Async Methods",
    body: "### Using Async Methods  Hazelcast Ringbuffer provides asynchronous methods for more powerful operations like batched writing or batched reading with filtering.  To make these methods synchronous, just call the method `get()` on the returned future.  Please see the following example code.  ```java ICompletableFuture f = ringbuffer.addAsync(item, OverflowPolicy.FAIL); f.get(); ```  However, you can also use `ICompletableFuture` to get notified when the operation has completed. The advantage of `ICompletableFuture` is that the thread used for the call is not blocked till the response is returned.  Please see the below code as an example of when you want to  get notified when a batch of reads has completed.  ```java ICompletableFuture&lt;ReadResultSet&lt;String&gt;&gt; f = rb.readManyAsync(sequence, min, max, someFilter); f.andThen(new ExecutionCallback&lt;ReadResultSet&lt;String&gt;&gt;() {    @Override    public void onResponse(ReadResultSet&lt;String&gt; response) {         for (String s : response) {             System.out.println(\&quot;Received:\&quot; + s);         }    }     @Override    public void onFailure(Throwable t) {         t.printStackTrace();    } }); ```   "
});

documentTitles["index.html#ringbuffer-configuration-examples"] = "Ringbuffer Configuration Examples";
index.add({
    url: "index.html#ringbuffer-configuration-examples",
    title: "Ringbuffer Configuration Examples",
    body: "### Ringbuffer Configuration Examples  The following shows the declarative configuration of a Ringbuffer called `rb`. The configuration is modeled after the Ringbuffer defaults.  ```xml &lt;ringbuffer name=\&quot;rb\&quot;&gt;     &lt;capacity&gt;10000&lt;/capacity&gt;     &lt;backup-count&gt;1&lt;/backup-count&gt;     &lt;async-backup-count&gt;0&lt;/async-backup-count&gt;     &lt;time-to-live-seconds&gt;0&lt;/time-to-live-seconds&gt;     &lt;in-memory-format&gt;BINARY&lt;/in-memory-format&gt; &lt;/ringbuffer&gt; ```  You can also configure a Ringbuffer programmatically. The following is a programmatic version of the above declarative configuration.  ```java RingbufferConfig rbConfig = new RingbufferConfig(\&quot;rb\&quot;)     .setCapacity(10000)     .setBackupCount(1)     .setAsyncBackupCount(0)     .setTimeToLiveSeconds(0)     .setInMemoryFormat(InMemoryFormat.BINARY); Config config = new Config(); config.addRingbufferConfig(rbConfig); ```             "
});

documentTitles["index.html#topic"] = "Topic";
index.add({
    url: "index.html#topic",
    title: "Topic",
    body: "## Topic  Hazelcast provides a distribution mechanism for publishing messages that are delivered to multiple subscribers. This is also known as a publish/subscribe (pub/sub) messaging model. Publishing and subscribing operations are cluster wide. When a member subscribes to a topic, it is actually registering for messages published by any member in the cluster, including the new members that joined after you add the listener.  ![image](images/NoteSmall.jpg) ***NOTE:*** *Publish operation is async. It does not wait for operations to run in remote members, it works as fire and forget.*  "
});

documentTitles["index.html#getting-a-topic-and-publishing-messages"] = "Getting a Topic and Publishing Messages";
index.add({
    url: "index.html#getting-a-topic-and-publishing-messages",
    title: "Getting a Topic and Publishing Messages",
    body: "### Getting a Topic and Publishing Messages  Use the HazelcastInstance `getTopic` method to get the Topic, then use the topic `publish` method to publish your messages (`messageObject`).  ```java import com.hazelcast.core.Topic; import com.hazelcast.core.Hazelcast; import com.hazelcast.core.MessageListener;  public class Sample implements MessageListener&lt;MyEvent&gt; {    public static void main( String[] args ) {     Sample sample = new Sample();     HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance();     ITopic topic = hazelcastInstance.getTopic( \&quot;default\&quot; );     topic.addMessageListener( sample );     topic.publish( new MyEvent() );   }    public void onMessage( Message&lt;MyEvent&gt; message ) {     MyEvent myEvent = message.getMessageObject();     System.out.println( \&quot;Message received = \&quot; + myEvent.toString() );     if ( myEvent.isHeavyweight() ) {       messageExecutor.execute( new Runnable() {           public void run() {             doHeavyweightStuff( myEvent );           }       } );     }   }    // ...    private final Executor messageExecutor = Executors.newSingleThreadExecutor(); } ```  Hazelcast Topic uses the `MessageListener` interface to listen for events that occur when a message is received. Please refer to the [Listening for Topic Messages section](#listening-for-topic-messages) for information on how to create a message listener class and register it.         "
});

documentTitles["index.html#getting-topic-statistics"] = "Getting Topic Statistics";
index.add({
    url: "index.html#getting-topic-statistics",
    title: "Getting Topic Statistics",
    body: "### Getting Topic Statistics  Topic has two statistic variables that you can query. These values are incremental and local to the member.  ```java HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance(); ITopic&lt;Object&gt; myTopic = hazelcastInstance.getTopic( \&quot;myTopicName\&quot; );  myTopic.getLocalTopicStats().getPublishOperationCount(); myTopic.getLocalTopicStats().getReceiveOperationCount(); ```   `getPublishOperationCount` and `getReceiveOperationCount` returns the total number of published and received messages since the start of this node, respectively. Please note that these values are not backed up, so if the node goes down, these values will be lost.  You can disable this feature with topic configuration. Please see the [Configuring Topic section](#configuring-topic).  ![image](images/NoteSmall.jpg) ***NOTE:*** *These statistics values can be also viewed in Management Center. Please see [Monitoring Topics](#monitoring-topics)*.          "
});

documentTitles["index.html#understanding-topic-behavior"] = "Understanding Topic Behavior";
index.add({
    url: "index.html#understanding-topic-behavior",
    title: "Understanding Topic Behavior",
    body: "### Understanding Topic Behavior  Each cluster member has a list of all registrations in the cluster. When a new member is registered for a topic, it sends a registration message to all members in the cluster. Also, when a new member joins the cluster, it will receive all registrations made so far in the cluster.  The behavior of a topic varies depending on the value of the configuration parameter `globalOrderEnabled`.  "
});

documentTitles["index.html#ordering-messages-as-published"] = "Ordering Messages as Published";
index.add({
    url: "index.html#ordering-messages-as-published",
    title: "Ordering Messages as Published",
    body: "#### Ordering Messages as Published  If `globalOrderEnabled` is disabled, messages are ordered: listeners (subscribers) process the messages in the order that the messages are published. If cluster member M publishes messages *m1, m2, m3, ..., mn* to a topic **T**, then Hazelcast makes sure that all of the subscribers of topic **T** will receive and process *m1, m2, m3, ..., mn* in the given order.  Here is how it works. Let's say that we have three members (*member1*, *member2* and *member3*) and that *member1* and *member2* are registered to a topic named `news`. Note that all three members know that *member1* and *member2* are registered to `news`. 	 In this example, *member1* publishes two messages: `a1` and `a2`, and *member3* publishes two messages: `c1` and `c2`. When *member1* and *member3* publish a message, they will check their local list for registered members, and they will discover that *member1* and *member2* are in their lists, then they will fire messages to those members. One possible order of the messages received can be the following.  *member1* -&gt; `c1`, `b1`, `a2`, `c2`  *member2* -&gt; `c1`, `c2`, `a1`, `a2`  "
});

documentTitles["index.html#ordering-messages-for-members"] = "Ordering Messages for Members";
index.add({
    url: "index.html#ordering-messages-for-members",
    title: "Ordering Messages for Members",
    body: "#### Ordering Messages for Members  If `globalOrderEnabled` is enabled, all members listening to the same topic will get its messages in the same order.  Here is how it works. Let's say that we have three members (*member1*, *member2* and *member3*) and that *member1* and *member2* are registered to a topic named `news`. Note that all three members know that *member1* and *member2* are registered to `news`.  In this example, *member1* publishes two messages: `a1` and `a2`, and *member3* publishes two messages: `c1` and `c2`. When a member publishes messages over the topic `news`, it first calculates which partition the `news` ID corresponds to. Then it sends an operation to the owner of the partition for that member to publish messages. Let's assume that `news` corresponds to a partition that *member2* owns. *member1* and *member3* first sends all messages to *member2*. Assume that the messages are published in the following order:  *member1* -&gt; `a1`, `c1`, `a2`, `c2`  *member2* then publishes these messages by looking at registrations in its local list. It sends these messages to *member1* and *member2* (it makes a local dispatch for itself).  *member1* -&gt; `a1`, `c1`, `a2`, `c2`  *member2* -&gt; `a1`, `c1`, `a2`, `c2`  This way, we guarantee that all members will see the events in the same order.  "
});

documentTitles["index.html#keeping-generated-and-published-order-the-same"] = "Keeping Generated and Published Order the Same";
index.add({
    url: "index.html#keeping-generated-and-published-order-the-same",
    title: "Keeping Generated and Published Order the Same",
    body: "#### Keeping Generated and Published Order the Same  In both cases, there is a `StripedExecutor` in EventService that is responsible for dispatching the received message. For all events in Hazelcast, the order that events are generated and the order they are published to the user are guaranteed to be the same via this `StripedExecutor`.  In `StripedExecutor`, there are as many threads as are specified in the property  `hazelcast.event.thread.count` (default is 5). For a specific event source (for a particular topic name), *hash of that source's name % 5* gives the ID of the responsible thread. Note that there can be another event source (entry listener of a map, item listener of a collection, etc.) corresponding to the same thread. In order not to make other messages to block, heavy processing should not be done in this thread. If there is time consuming work that needs to be done, the work should be handed over to another thread. Please see the [Getting a Topic and Publishing Messages section](#getting-a-topic-and-publishing-messages).     "
});

documentTitles["index.html#configuring-topic"] = "Configuring Topic";
index.add({
    url: "index.html#configuring-topic",
    title: "Configuring Topic",
    body: "### Configuring Topic  To configure a topic, set the topic name, decide on statistics and global ordering, and set message listeners. Default values are:  - `global-ordering` is **false**, meaning that by default, there is no guarantee of global order. - `statistics` is **true**, meaning that by default, statistics are calculated.  You can see the example configuration snippets below.   **Declarative:**  ```xml &lt;hazelcast&gt;   ...   &lt;topic name=\&quot;yourTopicName\&quot;&gt;     &lt;global-ordering-enabled&gt;true&lt;/global-ordering-enabled&gt;     &lt;statistics-enabled&gt;true&lt;/statistics-enabled&gt;     &lt;message-listeners&gt;       &lt;message-listener&gt;MessageListenerImpl&lt;/message-listener&gt;     &lt;/message-listeners&gt;   &lt;/topic&gt;   ... &lt;/hazelcast&gt; ```  **Programmatic:**  ```java TopicConfig topicConfig = new TopicConfig(); topicConfig.setGlobalOrderingEnabled( true ); topicConfig.setStatisticsEnabled( true ); topicConfig.setName( \&quot;yourTopicName\&quot; ); MessageListener&lt;String&gt; implementation = new MessageListener&lt;String&gt;() {   @Override   public void onMessage( Message&lt;String&gt; message ) {     // process the message   } }; topicConfig.addMessageListenerConfig( new ListenerConfig( implementation ) ); HazelcastInstance instance = Hazelcast.newHazelcastInstance() ```  Topic configuration has the following elements.  - `statistics-enabled`: Default is `true`, meaning statistics are calculated. - `global-ordering-enabled`: Default is `false`, meaning there is no global order guarantee. - `message-listeners`: Lets you add listeners (listener classes) for the topic messages.    Besides the above elements, there are the following system properties that are topic related but not topic specific:     - `hazelcast.event.queue.capacity` with a default value of 1,000,000    - `hazelcast.event.queue.timeout.millis` with a default value of 250    - `hazelcast.event.thread.count` with a default value of 5  For a description of these parameters, please see the [Global Event Configuration section](#global-event-configuration).      "
});

documentTitles["index.html#reliable-topic"] = "Reliable Topic";
index.add({
    url: "index.html#reliable-topic",
    title: "Reliable Topic",
    body: "## Reliable Topic  The Reliable Topic data structure has been introduced with the release of Hazelcast 3.5. The Reliable Topic uses the same `ITopic` interface as a regular topic. The main difference is that Reliable Topic is backed up by the Ringbuffer (also introduced with Hazelcast  3.5) data structure. The following are the advantages of this approach:  * Events are not lost since the Ringbuffer is configured with 1 synchronous backup by default. * Each Reliable `ITopic` gets its own Ringbuffer; if there is a topic with a very fast producer, it will not lead to problems at the topic that runs at a slower pace. * Since the event system behind a regular `ITopic` is shared with other data structures (e.g. collection listeners),    you can run into isolation problems. This does not happen with the Reliable `ITopic`.  "
});

documentTitles["index.html#sample-reliable-itopic-code"] = "Sample Reliable ITopic Code";
index.add({
    url: "index.html#sample-reliable-itopic-code",
    title: "Sample Reliable ITopic Code",
    body: "### Sample Reliable ITopic Code  ```java import com.hazelcast.core.Topic; import com.hazelcast.core.Hazelcast; import com.hazelcast.core.MessageListener;  public class Sample implements MessageListener&lt;MyEvent&gt; {    public static void main( String[] args ) {     Sample sample = new Sample();     HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance();     ITopic topic = hazelcastInstance.getReliableTopic( \&quot;default\&quot; );     topic.addMessageListener( sample );     topic.publish( new MyEvent() );   }    public void onMessage( Message&lt;MyEvent&gt; message ) {     MyEvent myEvent = message.getMessageObject();     System.out.println( \&quot;Message received = \&quot; + myEvent.toString() );   } } ```  You can configure the Reliable `ITopic` using its Ringbuffer. If there is a Reliable Topic with the name `Foo`, then you can configure this topic by adding a `ReliableTopicConfig` for a Ringbuffer with the name `Foo`. By default, a Ringbuffer does not have any TTL (time to live) and it has a limited capacity; you may want to change that configuration.  By default, the Reliable `ITopic` uses a shared thread pool. If you need better isolation, you can configure a custom executor on the  `ReliableTopicConfig`.   Because the reads on a Ringbuffer are not destructive, it is easy to apply batching. `ITopic` uses read batching and reads 10 items at a time (if available) by default.  "
});

documentTitles["index.html#slow-consumers"] = "Slow Consumers";
index.add({
    url: "index.html#slow-consumers",
    title: "Slow Consumers",
    body: "### Slow Consumers  The Reliable `ITopic` provides control and a way to deal with slow consumers. It is unwise to keep events for a slow consumer in memory  indefinitely since you do not know when it is going to catch up. You can control the size of the Ringbuffer by using its capacity. For the cases when a Ringbuffer runs out of its capacity, you can specify the following policies for the `TopicOverloadPolicy` configuration:  * `DISCARD_OLDEST`: Overwrite the oldest item, no matter if a TTL is set. In this case the fast producer supersedes a slow consumer * `DISCARD_NEWEST`: Discard the newest item. * `BLOCK`: Wait until the items are expired in the Ringbuffer. * `FAIL`: Immediately throw `TopicOverloadException` if there is no space in the Ringbuffer.  "
});

documentTitles["index.html#configuring-reliable-topic"] = "Configuring Reliable Topic";
index.add({
    url: "index.html#configuring-reliable-topic",
    title: "Configuring Reliable Topic",
    body: "### Configuring Reliable Topic  The following are example Reliable Topic configurations.   **Declarative:**  ```xml &lt;reliable-topic name=\&quot;default\&quot;&gt;     &lt;statistics-enabled&gt;true&lt;/statistics-enabled&gt;     &lt;message-listeners&gt;         &lt;message-listener&gt;         ...         &lt;/message-listener&gt;     &lt;/message-listeners&gt;     &lt;read-batch-size&gt;10&lt;/read-batch-size&gt;     &lt;topic-overload-policy&gt;BLOCK&lt;/topic-overload-policy&gt; &lt;/reliable-topic&gt; ```  **Programmatic:**  ```java Config config = new Config(); ReliableTopicConfig rtConfig = config.getReliableTopicConfig(); rtConfig.setTopicOverloadPolicy( TopicOverloadPolicy.BLOCK )         .setReadBatchSize( 10 )         .setStatisticsEnabled( true ); ```  Reliable Topic configuration has the following elements.  - `statistics-enabled`: Enables or disables the statistics collection for the Reliable Topic. The default value is `true`. - `message-listener`: Message listener class that listens to the messages when they are added or removed. - `read-batch-size`: Minimum number of messages that Reliable Topic will try to read in batches. The default value is 10. - `topic-overload-policy`: Policy to handle an overloaded topic. Available values are `DISCARD_OLDEST`, `DISCARD_NEWEST`, `BLOCK` and `ERROR`. The default value is `BLOCK.         "
});

documentTitles["index.html#lock"] = "Lock";
index.add({
    url: "index.html#lock",
    title: "Lock",
    body: "## Lock  ILock is the distributed implementation of `java.util.concurrent.locks.Lock`. Meaning if you lock using an ILock, the critical section that it guards is guaranteed to be executed by only one thread in the entire cluster. Even though locks are great for synchronization, they can lead to problems if not used properly. Also note that Hazelcast Lock does not support fairness.  "
});

documentTitles["index.html#using-try-catch-blocks-with-locks"] = "Using Try-Catch Blocks with Locks";
index.add({
    url: "index.html#using-try-catch-blocks-with-locks",
    title: "Using Try-Catch Blocks with Locks",
    body: "### Using Try-Catch Blocks with Locks  Always use locks with *try*-*catch* blocks. It will ensure that locks will be released if an exception is thrown from the code in a critical section. Also note that the `lock` method is outside the *try*-*catch* block, because we do not want to unlock if the lock operation itself fails.  ```java import com.hazelcast.core.Hazelcast; import java.util.concurrent.locks.Lock;  HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance(); Lock lock = hazelcastInstance.getLock( \&quot;myLock\&quot; ); lock.lock(); try {   // do something here } finally {   lock.unlock(); } ```  "
});

documentTitles["index.html#releasing-locks-with-trylock-timeout"] = "Releasing Locks with tryLock Timeout";
index.add({
    url: "index.html#releasing-locks-with-trylock-timeout",
    title: "Releasing Locks with tryLock Timeout",
    body: "### Releasing Locks with tryLock Timeout  If a lock is not released in the cluster, another thread that is trying to get the lock can wait forever. To avoid this, use `tryLock` with a timeout value. You can set a high value (normally it should not take that long) for `tryLock`. You can check the return value of `tryLock` as follows:  ```java if ( lock.tryLock ( 10, TimeUnit.SECONDS ) ) {   try {       // do some stuff here..     } finally {       lock.unlock();     }    } else {   // warning } ```  "
});

documentTitles["index.html#avoiding-waiting-threads-with-lease-time"] = "Avoiding Waiting Threads with Lease Time";
index.add({
    url: "index.html#avoiding-waiting-threads-with-lease-time",
    title: "Avoiding Waiting Threads with Lease Time",
    body: "### Avoiding Waiting Threads with Lease Time  You can also avoid indefinitely waiting threads by using lock with lease time: the lock will be released in the given lease time. Lock can be safely unlocked before the lease time expires. Note that the unlock operation can throw an `IllegalMonitorStateException` if the lock is released because the lease time expires. If that is the case, critical section guarantee is broken.  Please see the below example.  ```java lock.lock( 5, TimeUnit.SECONDS ) try {   // do some stuff here.. } finally {   try {     lock.unlock();   } catch ( IllegalMonitorStateException ex ){     // WARNING Critical section guarantee can be broken   } } ```  You can also specify a lease time when trying to acquire a lock: `tryLock(time, unit, leaseTime, leaseUnit)`. In that case, it tries to acquire the lock within the specified lease time. If the lock is not available, the current thread becomes disabled for thread scheduling purposes until either it acquires the lock or the specified waiting time elapses.  "
});

documentTitles["index.html#understanding-lock-behavior"] = "Understanding Lock Behavior";
index.add({
    url: "index.html#understanding-lock-behavior",
    title: "Understanding Lock Behavior",
    body: "### Understanding Lock Behavior  - Locks are fail-safe. If a member holds a lock and some other members go down, the cluster will keep your locks safe and available. Moreover, when a member leaves the cluster, all the locks acquired by that dead member will be removed so that those locks are immediately available for live members.  - Locks are re-entrant: the same thread can lock multiple times on the same lock. Note that for other threads to be  able to require this lock, the owner of the lock must call `unlock` as many times as the owner called `lock`.  - In the split-brain scenario, the cluster behaves as if it were two different clusters. Since two separate clusters are not aware of each other, two nodes from different clusters can acquire the same lock. For more information on places where split brain syndrome can be handled, please see [split brain syndrome](#network-partitioning-split-brain-syndrome).  - Locks are not automatically removed. If a lock is not used anymore, Hazelcast will not automatically garbage collect the lock.  This can lead to an `OutOfMemoryError`. If you create locks on the fly, make sure they are destroyed.  - Hazelcast IMap also provides locking support on the entry level with the method `IMap.lock(key)`. Although the same infrastructure  is used, `IMap.lock(key)` is not an ILock and it is not possible to expose it directly.       "
});

documentTitles["index.html#synchronizing-threads-with-icondition"] = "Synchronizing Threads with ICondition";
index.add({
    url: "index.html#synchronizing-threads-with-icondition",
    title: "Synchronizing Threads with ICondition",
    body: "### Synchronizing Threads with ICondition  `ICondition` is the distributed implementation of the `notify`, `notifyAll` and `wait` operations on the Java object. You can use it to synchronize threads across the cluster. More specifically, you use `ICondition` when a thread's work depends on another thread's output. A good example can be producer/consumer methodology.   Please see the below code examples for a producer/consumer implementation.  **Producer thread:**  ```java HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance(); Lock lock = hazelcastInstance.getLock( \&quot;myLockId\&quot; ); ICondition condition = lock.newCondition( \&quot;myConditionId\&quot; );  lock.lock(); try {   while ( !shouldProduce() ) {     condition.await(); // frees the lock and waits for signal                        // when it wakes up it re-acquires the lock                        // if available or waits for it to become                        // available   }   produce();   condition.signalAll(); } finally {   lock.unlock(); } ```  ![image](images/NoteSmall.jpg) ***NOTE:*** *The method `await()` takes time value and time unit as arguments. If you specify a negative value for the time, it is interpreted as infinite.*  **Consumer thread:**         ```java        HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance(); Lock lock = hazelcastInstance.getLock( \&quot;myLockId\&quot; ); ICondition condition = lock.newCondition( \&quot;myConditionId\&quot; );  lock.lock(); try {   while ( !canConsume() ) {     condition.await(); // frees the lock and waits for signal                        // when it wakes up it re-acquires the lock if                         // available or waits for it to become                        // available   }   consume();   condition.signalAll(); } finally {   lock.unlock(); } ```      "
});

documentTitles["index.html#iatomiclong"] = "IAtomicLong";
index.add({
    url: "index.html#iatomiclong",
    title: "IAtomicLong",
    body: "## IAtomicLong  Hazelcast `IAtomicLong` is the distributed implementation of `java.util.concurrent.atomic.AtomicLong`. It offers most of AtomicLong's operations such as `get`, `set`, `getAndSet`, `compareAndSet` and `incrementAndGet`. Since IAtomicLong is a distributed implementation, these operations involve remote calls and hence their performances differ from AtomicLong.   The following example code creates an instance, increments it by a million, and prints the count.  ```java public class Member {   public static void main( String[] args ) {     HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance(); 	     IAtomicLong counter = hazelcastInstance.getAtomicLong( \&quot;counter\&quot; );     for ( int k = 0; k &lt; 1000 * 1000; k++ ) { 	  if ( k % 500000 == 0 ) { 	    System.out.println( \&quot;At: \&quot; + k );       }       counter.incrementAndGet();     }     System.out.printf( \&quot;Count is %s\n\&quot;, counter.get() );   } } ```  When you start other instances with the code above, you will see the count as *member count* times *a million*.  "
});

documentTitles["index.html#sending-functions-to-iatomiclong"] = "Sending Functions to IAtomicLong";
index.add({
    url: "index.html#sending-functions-to-iatomiclong",
    title: "Sending Functions to IAtomicLong",
    body: "### Sending Functions to IAtomicLong  You can send functions to an IAtomicLong. `IFunction` is a Hazelcast owned, single method interface. The following sample `IFunction` implementation adds two to the original value.  ```java private static class Add2Function implements IFunction &lt;Long, Long&gt; {    @Override   public Long apply( Long input ) {      return input + 2;   } } ```  "
});

documentTitles["index.html#executing-functions-on-iatomiclong"] = "Executing Functions on IAtomicLong";
index.add({
    url: "index.html#executing-functions-on-iatomiclong",
    title: "Executing Functions on IAtomicLong",
    body: "### Executing Functions on IAtomicLong  You can use the following methods to execute functions on IAtomicLong.  - `apply`: It applies the function to the value in IAtomicLong without changing the actual value and returning the result. - `alter`: It alters the value stored in the IAtomicLong by applying the function. It will not send back a result. - `alterAndGet`: It alters the value stored in the IAtomicLong by applying the function, storing the result in the IAtomicLong and returning the result. - `getAndAlter`: It alters the value stored in the IAtomicLong by applying the function and returning the original value.  The following sample code includes these methods.  ```java public class Member {   public static void main( String[] args ) {     HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance(); 		     IAtomicLong atomicLong = hazelcastInstance.getAtomicLong( \&quot;counter\&quot; );      atomicLong.set( 1 );     long result = atomicLong.apply( new Add2Function() ); 		     System.out.println( \&quot;apply.result: \&quot; + result); 		     System.out.println( \&quot;apply.value: \&quot; + atomicLong.get() );      atomicLong.set( 1 );     atomicLong.alter( new Add2Function() ); 			     System.out.println( \&quot;alter.value: \&quot; + atomicLong.get() );      atomicLong.set( 1 );     result = atomicLong.alterAndGet( new Add2Function() ); 		     System.out.println( \&quot;alterAndGet.result: \&quot; + result ); 		     System.out.println( \&quot;alterAndGet.value: \&quot; + atomicLong.get() );      atomicLong.set( 1 );     result = atomicLong.getAndAlter( new Add2Function() ); 		     System.out.println( \&quot;getAndAlter.result: \&quot; + result ); 		     System.out.println( \&quot;getAndAlter.value: \&quot; + atomicLong.get() );   } } ```  "
});

documentTitles["index.html#reasons-to-use-functions-with-iatomic"] = "Reasons to Use Functions with IAtomic";
index.add({
    url: "index.html#reasons-to-use-functions-with-iatomic",
    title: "Reasons to Use Functions with IAtomic",
    body: "### Reasons to Use Functions with IAtomic  The reason for using a function instead of a simple code line like `atomicLong.set(atomicLong.get() + 2));` is that the IAtomicLong read and write operations are not atomic. Since `IAtomicLong` is a distributed implementation, those operations can be remote ones, which may lead to race problems. By using functions, the data is not pulled into the code, but the code is sent to the data. This makes it more scalable.  ![image](images/NoteSmall.jpg) ***NOTE:*** *IAtomicLong has 1 synchronous backup and no asynchronous backups. Its backup count is not configurable.*       "
});

documentTitles["index.html#isemaphore"] = "ISemaphore";
index.add({
    url: "index.html#isemaphore",
    title: "ISemaphore",
    body: "## ISemaphore  Hazelcast ISemaphore is the distributed implementation of `java.util.concurrent.Semaphore`.   "
});

documentTitles["index.html#controlling-thread-counts-with-semaphore-permits"] = "Controlling Thread Counts with Semaphore Permits";
index.add({
    url: "index.html#controlling-thread-counts-with-semaphore-permits",
    title: "Controlling Thread Counts with Semaphore Permits",
    body: "### Controlling Thread Counts with Semaphore Permits  Semaphores offer **permit**s to control the thread counts in the case of performing concurrent activities. To execute a concurrent activity, a thread grants a permit or waits until a permit becomes available. When the execution is completed, the permit is released.  ![image](images/NoteSmall.jpg) ***NOTE:*** *Semaphore with a single permit may be considered as a lock. But unlike the locks, when semaphores are used, any thread can release the permit and semaphores can have multiple permits.*  ![image](images/NoteSmall.jpg) ***NOTE:*** *Hazelcast Semaphore does not support fairness.*  When a permit is acquired on ISemaphore:  -	if there are permits, the number of permits in the semaphore is decreased by one and the calling thread performs its activity. If there is contention, the longest waiting thread will acquire the permit before all other threads. -	if no permits are available, the calling thread blocks until a permit becomes available. When a timeout happens during this block, the thread is interrupted. In the case where the semaphore is destroyed, an `InstanceDestroyedException` is thrown.  "
});

documentTitles["index.html#example-semaphore-code"] = "Example Semaphore Code";
index.add({
    url: "index.html#example-semaphore-code",
    title: "Example Semaphore Code",
    body: "### Example Semaphore Code  The following example code uses an `IAtomicLong` resource 1000 times, increments the resource when a thread starts to use it, and decrements it when the thread completes.  ```java public class SemaphoreMember {   public static void main( String[] args ) throws Exception{     HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance();      ISemaphore semaphore = hazelcastInstance.getSemaphore( \&quot;semaphore\&quot; );      IAtomicLong resource = hazelcastInstance.getAtomicLong( \&quot;resource\&quot; );      for ( int k = 0 ; k &lt; 1000 ; k++ ) {       System.out.println( \&quot;At iteration: \&quot; + k + \&quot;, Active Threads: \&quot; + resource.get() );       semaphore.acquire();       try {         resource.incrementAndGet();         Thread.sleep( 1000 );         resource.decrementAndGet();       } finally {          semaphore.release();       }     }     System.out.println(\&quot;Finished\&quot;);   } } ```  Let's limit the concurrent access to this resource by allowing at most 3 threads. You can configure it declaratively by setting the `initial-permits` property, as shown below.  ```xml &lt;semaphore name=\&quot;semaphore\&quot;&gt;    &lt;initial-permits&gt;3&lt;/initial-permits&gt; &lt;/semaphore&gt; ```  ![image](images/NoteSmall.jpg) ***NOTE:*** *If there is a shortage of permits while the semaphore is being created, value of this property can be set to a negative number.*  If you execute the above `SemaphoreMember` class 5 times, the output will be similar to the following:  `At iteration: 0, Active Threads: 1`  `At iteration: 1, Active Threads: 2`  `At iteration: 2, Active Threads: 3`  `At iteration: 3, Active Threads: 3`  `At iteration: 4, Active Threads: 3`  As can be seen, the maximum count of concurrent threads is equal or smaller than 3. If you remove the semaphore acquire/release statements in `SemaphoreMember`, you will see that there is no limitation on the number of concurrent usages.  Hazelcast also provides backup support for `ISemaphore`. When a member goes down, another member can take over the semaphore with the permit information (permits are automatically released when a member goes down). To enable this, configure synchronous or asynchronous backup with the properties `backup-count` and `async-backup-count` (by default, synchronous backup is already enabled).  "
});

documentTitles["index.html#configuring-semaphore"] = "Configuring Semaphore";
index.add({
    url: "index.html#configuring-semaphore",
    title: "Configuring Semaphore",
    body: "### Configuring Semaphore  The following are example semaphore configurations.  **Declarative:**  ```xml &lt;semaphore name=\&quot;semaphore\&quot;&gt;    &lt;backup-count&gt;1&lt;/backup-count&gt;    &lt;async-backup-count&gt;0&lt;/async-backup-count&gt;    &lt;initial-permits&gt;3&lt;/initial-permits&gt; &lt;/semaphore&gt; ```  **Programmatic:**  ```java Config config = new Config(); SemaphoreConfig semaphoreConfig = config.getSemaphoreConfig(); semaphoreConfig.setName( \&quot;semaphore\&quot; ).setBackupCount( \&quot;1\&quot; )         .setInitialPermits( \&quot;3\&quot; ); ```  Semaphore configuration has the below elements.  - `initial-permits`: the thread count to which the concurrent access is limited. For example, if you set it to \&quot;3\&quot;, concurrent access to the object is limited to 3 threads. - `backup-count`: Number of synchronous backups. - `async-backup-count`: Number of asynchronous backups.  ![image](images/NoteSmall.jpg) ***NOTE:*** *If high performance is more important (than not losing the permit information), you can disable the backups by setting `backup-count` to 0.*  &lt;br&gt;&lt;/br&gt;         "
});

documentTitles["index.html#iatomicreference"] = "IAtomicReference";
index.add({
    url: "index.html#iatomicreference",
    title: "IAtomicReference",
    body: "## IAtomicReference  The `IAtomicLong` is very useful if you need to deal with a long, but in some cases you need to deal with a reference. That is why Hazelcast also supports the `IAtomicReference` which is the distributed version of the `java.util.concurrent.atomic.AtomicReference`.  Here is an IAtomicReference example.  ```java public class Member {     public static void main(String[] args) {         Config config = new Config();          HazelcastInstance hz = Hazelcast.newHazelcastInstance(config);          IAtomicReference&lt;String&gt; ref = hz.getAtomicReference(\&quot;reference\&quot;);         ref.set(\&quot;foo\&quot;);         System.out.println(ref.get());         System.exit(0);     }  } ```  When you execute the above example, you will see the following output.  `foo`  "
});

documentTitles["index.html#sending-functions-to-iatomicreference"] = "Sending Functions to IAtomicReference";
index.add({
    url: "index.html#sending-functions-to-iatomicreference",
    title: "Sending Functions to IAtomicReference",
    body: "### Sending Functions to IAtomicReference  Just like `IAtomicLong`, `IAtomicReference` has methods that accept a 'function' as an argument, such as `alter`, `alterAndGet`, `getAndAlter` and `apply`. There are two big advantages of using these methods:  -	From a performance point of view, it is better to send the function to the data then the data to the function. Often the function is a lot smaller than the data and therefore cheaper to send over the line. Also the function only needs to be transferred once to the target machine, and the data needs to be transferred twice. -	You do not need to deal with concurrency control. If you would perform a load, transform, store, you could run into a data race since another thread might have updated the value you are about to overwrite.   "
});

documentTitles["index.html#using-iatomicreference"] = "Using IAtomicReference";
index.add({
    url: "index.html#using-iatomicreference",
    title: "Using IAtomicReference",
    body: "### Using IAtomicReference  Below are some issues you need to know when you use IAtomicReference.  -	`IAtomicReference` works based on the byte-content and not on the object-reference. If you use the `compareAndSet` method, do not change to original value because its serialized content will then be different.  It is also important to know that if you rely on Java serialization, sometimes (especially with hashmaps) the same object can result in different binary content. -	`IAtomicReference` will always have 1 synchronous backup. -	All methods returning an object will return a private copy. You can modify the private copy, but the rest of the world will be shielded from your changes. If you want these changes to be visible to the rest of the world, you need to write the change back to the `IAtomicReference`; but be careful about introducing a data-race.  -	The 'in-memory format' of an `IAtomicReference` is `binary`. The receiving side does not need to have the class definition available, unless it needs to be deserialized on the other side (e.g. because a method like 'alter' is executed). This deserialization is done for every call that needs to have the object instead of the binary content, so be careful with expensive object graphs that need to be deserialized. -	If you have an object with many fields or an object graph, and you only need to calculate some information or need a subset of fields, you can use the `apply` method. With the `apply` method, the whole object does not need to be sent over the line, only the information that is relevant.      "
});

documentTitles["index.html#icountdownlatch"] = "ICountDownLatch";
index.add({
    url: "index.html#icountdownlatch",
    title: "ICountDownLatch",
    body: "## ICountDownLatch  Hazelcast `ICountDownLatch` is the distributed implementation of `java.util.concurrent.CountDownLatch`.  "
});

documentTitles["index.html#gate-keeping-concurrent-activities"] = "Gate-Keeping Concurrent Activities";
index.add({
    url: "index.html#gate-keeping-concurrent-activities",
    title: "Gate-Keeping Concurrent Activities",
    body: "### Gate-Keeping Concurrent Activities  `CountDownLatch` is considered to be a gate keeper for concurrent activities. It enables the threads to wait for other threads to complete their operations.  The following code samples describe the mechanism of `ICountDownLatch`. Assume that there is a leader process and there are follower processes that will wait until the leader completes. Here is the leader:  ```java public class Leader {   public static void main( String[] args ) throws Exception {     HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance();     ICountDownLatch latch = hazelcastInstance.getCountDownLatch( \&quot;countDownLatch\&quot; );     System.out.println( \&quot;Starting\&quot; );     latch.trySetCount( 1 );     Thread.sleep( 30000 );     latch.countDown();     System.out.println( \&quot;Leader finished\&quot; );     latch.destroy();   } } ```  Since only a single step is needed to be completed as a sample, the above code initializes the latch with 1. Then, the code sleeps for a while to simulate a process and starts the countdown. Finally, it clears up the latch. Let's write a follower:   ```java public class Follower {   public static void main( String[] args ) throws Exception {     HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance();     ICountDownLatch latch = hazelcastInstance.getCountDownLatch( \&quot;countDownLatch\&quot; );     System.out.println( \&quot;Waiting\&quot; );     boolean success = latch.await( 10, TimeUnit.SECONDS );     System.out.println( \&quot;Complete: \&quot; + success );   } }  ```  The follower class above first retrieves `ICountDownLatch` and then calls the `await` method to enable the thread to listen for the latch. The method `await` has a timeout value as a parameter. This is useful when the `countDown` method fails. To see `ICountDownLatch` in action, start the leader first and then start one or more followers. You will see that the followers will wait until the leader completes.  "
});

documentTitles["index.html#recovering-from-failure"] = "Recovering From Failure";
index.add({
    url: "index.html#recovering-from-failure",
    title: "Recovering From Failure",
    body: "### Recovering From Failure  In a distributed environment, the counting down cluster member may go down. In this case, all listeners are notified immediately and automatically by Hazelcast. The state of the current process just before the failure should be verified and 'how to continue now' should be decided (e.g. restart all process operations, continue with the first failed process operation, throw an exception, etc.).  "
});

documentTitles["index.html#using-icountdownlatch"] = "Using ICountDownLatch";
index.add({
    url: "index.html#using-icountdownlatch",
    title: "Using ICountDownLatch",
    body: "### Using ICountDownLatch  Although the `ICountDownLatch` is a very useful synchronization aid, you will probably not use it on a daily basis. Unlike Java’s implementation, Hazelcast’s `ICountDownLatch` count can be re-set after a countdown has finished but not during an active count.  ![image](images/NoteSmall.jpg) ***NOTE:*** *ICountDownLatch has 1 synchronous backup and no asynchronous backups. Its backup count is not configurable. Also, the count cannot be re-set during an active count, it should be re-set after the countdown is finished.*       "
});

documentTitles["index.html#idgenerator"] = "IdGenerator";
index.add({
    url: "index.html#idgenerator",
    title: "IdGenerator",
    body: "## IdGenerator  Hazelcast IdGenerator is used to generate cluster-wide unique identifiers. Generated identifiers are long type primitive values between 0 and `Long.MAX_VALUE`.  "
});

documentTitles["index.html#generating-cluster-wide-ids"] = "Generating Cluster-Wide IDs";
index.add({
    url: "index.html#generating-cluster-wide-ids",
    title: "Generating Cluster-Wide IDs",
    body: "### Generating Cluster-Wide IDs  ID generation occurs almost at the speed of `AtomicLong.incrementAndGet()`. A group of 1 million identifiers is allocated for each cluster member. In the background, this allocation takes place with an `IAtomicLong` incremented by 1 million. Once a cluster member generates IDs (allocation is done), `IdGenerator` increments a local counter. If a cluster member uses all IDs in the group, it will get another 1 million IDs. By this way, only one time of network traffic is needed, meaning that 999,999 identifiers are generated in memory instead of over the network. This is fast.  Let's write a sample identifier generator.  ```java public class IdGeneratorExample {   public static void main( String[] args ) throws Exception {     HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance();     IdGenerator idGen = hazelcastInstance.getIdGenerator( \&quot;newId\&quot; );     while (true) {       Long id = idGen.newId();       System.err.println( \&quot;Id: \&quot; + id );       Thread.sleep( 1000 );     }   } } ```  Let's run the above code two times. The output will be similar to the following.  ```plain Members [1] {   Member [127.0.0.1]:5701 this } Id: 1 Id: 2 Id: 3 ```   ```plain Members [2] {   Member [127.0.0.1]:5701   Member [127.0.0.1]:5702 this } Id: 1000001 Id: 1000002 Id: 1000003 ```  "
});

documentTitles["index.html#unique-ids-and-duplicate-ids"] = "Unique IDs and Duplicate IDs";
index.add({
    url: "index.html#unique-ids-and-duplicate-ids",
    title: "Unique IDs and Duplicate IDs",
    body: "### Unique IDs and Duplicate IDs  You can see that the generated IDs are unique and counting upwards. If you see duplicated identifiers, it means your instances could not form a cluster.    ![image](images/NoteSmall.jpg) ***NOTE:*** *Generated IDs are unique during the life cycle of the cluster. If the entire cluster is restarted, IDs start from 0 again or you can initialize to a value using the `init()` method of IdGenerator.*  ![image](images/NoteSmall.jpg) ***NOTE:*** *IdGenerator has 1 synchronous backup and no asynchronous backups. Its backup count is not configurable.*       "
});

documentTitles["index.html#replicated-map"] = "Replicated Map";
index.add({
    url: "index.html#replicated-map",
    title: "Replicated Map",
    body: "## Replicated Map  A replicated map is a distributed key-value data structure where the data is replicated to all members in the cluster. It provides full replication of entries to all members for high speed access. The following are its features:  - When you have a replicated map in the  cluster, your clients can communicate with any cluster member. - All cluster members are able to perform write operations. - It supports all methods of the interface `java.util.Map`. - It supports automatic initial fill up when a new member is started. - It provides statistics for entry access, write and update so that you can monitor it using Hazelcast Management Center. - New members joining to the cluster pull all the data from the existing members. - You can listen to entry events using listeners. Please refer to [Using EntryListener on Replicated Map](#using-entrylistener-on-replicated-map).   "
});

documentTitles["index.html#replicating-instead-of-partitioning"] = "Replicating Instead of Partitioning";
index.add({
    url: "index.html#replicating-instead-of-partitioning",
    title: "Replicating Instead of Partitioning",
    body: "### Replicating Instead of Partitioning  All other data structures are partitioned in design. A replicated map does not partition data (it does not spread data to different cluster members); instead, it replicates the data to all members.  This leads to higher memory consumption. However, a replicated map has faster read and write access since the data are available on all members.  Writes could take place on local/remote members in order to provide write-order, eventually being replicated to all other members.  Replicated map is suitable for objects, catalogue data, or idempotent calculable data (like HTML pages). It fully implements the `java.util.Map` interface, but it lacks the methods from `java.util.concurrent.ConcurrentMap` since there are no atomic guarantees to writes or reads.  ![image](images/NoteSmall.jpg) ***NOTE:*** *If replicated map is used from a dummy client and this dummy client is connected to a lite member, the entry listeners cannot be registered/de-registered.*  ![image](images/NoteSmall.jpg) ***NOTE:*** *You cannot use replicated map from a lite member. A `com.hazelcast.replicatedmap.ReplicatedMapCantBeCreatedOnLiteMemberException` is thrown if `com.hazelcast.core.HazelcastInstance#getReplicatedMap(name)` is invoked on a lite member.*   "
});

documentTitles["index.html#example-replicated-map-code"] = "Example Replicated Map Code";
index.add({
    url: "index.html#example-replicated-map-code",
    title: "Example Replicated Map Code",
    body: "### Example Replicated Map Code  Here is an example of replicated map code. The HazelcastInstance's `getReplicatedMap` method gets the replicated map, and the replicated map's `put` method creates map entries.  ```java import com.hazelcast.core.Hazelcast; import com.hazelcast.core.HazelcastInstance; import java.util.Collection; import java.util.Map;  HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance(); Map&lt;String, Customer&gt; customers = hazelcastInstance.getReplicatedMap(\&quot;customers\&quot;); customers.put( \&quot;1\&quot;, new Customer( \&quot;Joe\&quot;, \&quot;Smith\&quot; ) ); customers.put( \&quot;2\&quot;, new Customer( \&quot;Ali\&quot;, \&quot;Selam\&quot; ) ); customers.put( \&quot;3\&quot;, new Customer( \&quot;Avi\&quot;, \&quot;Noyan\&quot; ) );  Collection&lt;Customer&gt; colCustomers = customers.values(); for ( Customer customer : colCustomers ) {   // process customer } ```  `HazelcastInstance::getReplicatedMap` returns `com.hazelcast.core.ReplicatedMap` which, as stated above, extends the `java.util.Map` interface.  The `com.hazelcast.core.ReplicatedMap` interface has some additional methods for registering entry listeners or retrieving values in an expected order.    "
});

documentTitles["index.html#considerations-for-replicated-map"] = "Considerations for Replicated Map";
index.add({
    url: "index.html#considerations-for-replicated-map",
    title: "Considerations for Replicated Map",
    body: "### Considerations for Replicated Map  If you have a large cluster or very high occurrences of updates, the replicated map may not scale linearly as expected since it has to replicate update operations to all members in the cluster.  Since the replication of updates is performed in an asynchronous manner, we recommend you to enable back pressure in case your system has high occurrences of updates. Please refer to the [Back Pressure](#back-pressure) section to learn how to enable it.  Replicated map has an anti-entropy system, which will converge values to a common one if some of the members are missing replication updates.  Replicated map does not guarantee eventual consistency because there are some edge cases which fails to provide consistency.  Replicated map uses internal partition system of Hazelcast in order to serialize updates happening on the same key at the same time. This happens by sending updates of the same key to the same Hazelcast member in the cluster.  Due to asynchronous nature of replication, a Hazelcast member could die before successfully replicating a \&quot;write\&quot; operation to other members, after sending the \&quot;write completed\&quot; response to it's caller during the write process. In this scenario, Hazelcast's internal partition system will promote one of the replicas of the partition as the primary one. The new primary partition will not have the latest \&quot;write\&quot; since the died member could not successfully replicate the update. This will leave the system in a state that the caller is the only one that has the update and the rest of the cluster have not. In this case even the anti-entropy system simply could not converge the value since the source of true information is lost for the update. This leads to a break in the eventual consistency because different values can be read from the system for the same key.  Other than the aforementioned scenario, it will behave like an eventually consistent system with read-your-writes consistency.   "
});

documentTitles["index.html#configuration-design-for-replicated-map"] = "Configuration Design for Replicated Map";
index.add({
    url: "index.html#configuration-design-for-replicated-map",
    title: "Configuration Design for Replicated Map",
    body: "### Configuration Design for Replicated Map  There are several technical design decisions you should consider when you configure a replicated map.  **Initial provisioning**  If a new member joins, there are two ways you can handle the initial provisioning that is executed to replicate all existing values to the new member. Each involves how you configure the async fill up.  First, you can configure async fill up to true, which does not block reads while the fill up operation is underway. That way, you have immediate access on the new member, but it will take time until all values are eventually accessible. Not yet replicated values are returned as non-existing (null).  Second, you can configure for a synchronous initial fill up (by configuring the async fill up to false), which blocks every read or write access to the map until the fill up operation is finished. Use this with caution since it might block your application from operating.    "
});

documentTitles["index.html#configuring-replicated-map"] = "Configuring Replicated Map";
index.add({
    url: "index.html#configuring-replicated-map",
    title: "Configuring Replicated Map",
    body: "### Configuring Replicated Map  Replicated map can be configured programmatically or declaratively.  "
});

documentTitles["index.html#replicated-map-declarative-configuration"] = "Replicated Map Declarative Configuration";
index.add({
    url: "index.html#replicated-map-declarative-configuration",
    title: "Replicated Map Declarative Configuration",
    body: "#### Replicated Map Declarative Configuration  You can declare your replicated map configuration in the Hazelcast configuration file `hazelcast.xml`. Please see the following example.  ```xml &lt;replicatedmap name=\&quot;default\&quot;&gt;   &lt;in-memory-format&gt;BINARY&lt;/in-memory-format&gt;   &lt;async-fillup&gt;true&lt;/async-fillup&gt;   &lt;statistics-enabled&gt;true&lt;/statistics-enabled&gt;   &lt;entry-listeners&gt;     &lt;entry-listener include-value=\&quot;true\&quot;&gt;       com.hazelcast.examples.EntryListener     &lt;/entry-listener&gt;   &lt;/entry-listeners&gt; &lt;/replicatedmap&gt; ```  - `in-memory-format`: Internal storage format.  Please see the [In-Memory Format section](#in-memory-format-on-replicated-map). The default value is `OBJECT`. - `async-fillup`: Specifies if the replicated map is available for reads before the initial replication is completed. The default value is `true`. If set to `false` (i.e. synchronous initial fill up), no exception will be thrown when the replicated map is not yet ready, but `null` values can be seen until the initial replication is completed. - `statistics-enabled`: If set to `true`, the statistics such as cache hits and misses are collected. The default value is `false`. - `entry-listener`: Full canonical classname of the `EntryListener` implementation.   - `entry-listener#include-value`: Specifies whether the event includes the value or not. Sometimes the key is enough to react on an event. In those situations, setting this value to `false` will save a deserialization cycle. The default value is `true`.   - `entry-listener#local`: Not used for Replicated Map since listeners are always local.  "
});

documentTitles["index.html#replicated-map-programmatic-configuration"] = "Replicated Map Programmatic Configuration";
index.add({
    url: "index.html#replicated-map-programmatic-configuration",
    title: "Replicated Map Programmatic Configuration",
    body: "#### Replicated Map Programmatic Configuration  You can configure a replicated map programmatically, as you can do for all other data structures in Hazelcast. You must create the configuration upfront, when you instantiate the `HazelcastInstance`.  A basic example on how to configure the replicated map using the programmatic approach is shown in the following snippet.  ```java Config config = new Config();  ReplicatedMapConfig replicatedMapConfig =     config.getReplicatedMapConfig( \&quot;default\&quot; );  replicatedMapConfig.setInMemoryFormat( InMemoryFormat.BINARY ); ```  All properties that can be configured using the declarative configuration are also available using programmatic configuration by transforming the tag names into getter or setter names.  "
});

documentTitles["index.html#in-memory-format-on-replicated-map"] = "In-Memory Format on Replicated Map";
index.add({
    url: "index.html#in-memory-format-on-replicated-map",
    title: "In-Memory Format on Replicated Map",
    body: "#### In-Memory Format on Replicated Map  Currently, two `in-memory-format` values are usable with the replicated map.  - `OBJECT` (default): The data will be stored in deserialized form. This configuration is the default choice since the data replication is mostly used for high speed access. Please be aware that changing the values without a `Map::put` is not reflected on the other nodes but is visible on the changing nodes for later value accesses.  - `BINARY`: The data is stored in serialized binary format and has to be deserialized on every request. This option offers higher encapsulation since changes to values are always discarded as long as the newly changed object is not explicitly `Map::put` into the map again.    "
});

documentTitles["index.html#using-entrylistener-on-replicated-map"] = "Using EntryListener on Replicated Map";
index.add({
    url: "index.html#using-entrylistener-on-replicated-map",
    title: "Using EntryListener on Replicated Map",
    body: "### Using EntryListener on Replicated Map  A `com.hazelcast.core.EntryListener` used on a replicated map serves the same purpose as it would on other data structures in Hazelcast. You can use it to react on add, update, and remove operations. Replicated maps do not yet support eviction.  "
});

documentTitles["index.html#difference-in-entrylistener-on-replicated-map"] = "Difference in EntryListener on Replicated Map";
index.add({
    url: "index.html#difference-in-entrylistener-on-replicated-map",
    title: "Difference in EntryListener on Replicated Map",
    body: "#### Difference in EntryListener on Replicated Map  The fundamental difference in replicated map behavior, compared to the other data structures, is that an EntryListener only reflects changes on local data. Since replication is asynchronous, all listener events are fired only when an operation is finished on a local node. Events can fire at different times on different nodes.  "
});

documentTitles["index.html#example-of-replicated-map-entrylistener"] = "Example of Replicated Map EntryListener";
index.add({
    url: "index.html#example-of-replicated-map-entrylistener",
    title: "Example of Replicated Map EntryListener",
    body: "#### Example of Replicated Map EntryListener  Here is a code example for using EntryListener on a replicated map.  The `HazelcastInstance`'s `getReplicatedMap` method gets a replicated map (customers), and the `ReplicatedMap`'s `addEntryListener` method adds an entry listener to the replicated map. Then, the `ReplicatedMap`'s `put` method adds a replicated map entry and updates it. The method `remove` removes the entry.  ```java import com.hazelcast.core.EntryEvent; import com.hazelcast.core.EntryListener; import com.hazelcast.core.Hazelcast; import com.hazelcast.core.HazelcastInstance; import com.hazelcast.core.ReplicatedMap;  HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance(); ReplicatedMap&lt;String, Customer&gt; customers =     hazelcastInstance.getReplicatedMap( \&quot;customers\&quot; );  customers.addEntryListener( new EntryListener&lt;String, Customer&gt;() {   @Override   public void entryAdded( EntryEvent&lt;String, Customer&gt; event ) {     log( \&quot;Entry added: \&quot; + event );   }    @Override   public void entryUpdated( EntryEvent&lt;String, Customer&gt; event ) {     log( \&quot;Entry updated: \&quot; + event );   }    @Override   public void entryRemoved( EntryEvent&lt;String, Customer&gt; event ) {     log( \&quot;Entry removed: \&quot; + event );   }    @Override   public void entryEvicted( EntryEvent&lt;String, Customer&gt; event ) {     // Currently not supported, will never fire   } });  customers.put( \&quot;1\&quot;, new Customer( \&quot;Joe\&quot;, \&quot;Smith\&quot; ) ); // add event customers.put( \&quot;1\&quot;, new Customer( \&quot;Ali\&quot;, \&quot;Selam\&quot; ) ); // update event customers.remove( \&quot;1\&quot; ); // remove event ```     "
});

documentTitles["index.html#distributed-events"] = "Distributed Events";
index.add({
    url: "index.html#distributed-events",
    title: "Distributed Events",
    body: "# Distributed Events  You can register for Hazelcast entry events so you will be notified when those events occur. Event Listeners are cluster-wide: when a listener is registered in one member of cluster, it is actually registered for events that originated at any member in the cluster. When a new member joins, events originated at the new member will also be delivered.  An Event is created only if you registered an event listener. If no listener is registered, then no event will be created. If you provided a predicate when you registered the event listener, pass the predicate before sending the event to the listener (member/client).  As a rule of thumb, your event listener should not implement heavy processes in its event methods which block the thread for a long time. If needed, you can use `ExecutorService` to transfer long running processes to another thread and thus offload the current listener thread.  ![image](images/NoteSmall.jpg) ***NOTE:*** *In a failover scenario, events are not highly available and may get lost. Eventing mechanism is being improved for failover scenarios.*   "
});

documentTitles["index.html#event-listeners-for-hazelcast-members"] = "Event Listeners for Hazelcast Members";
index.add({
    url: "index.html#event-listeners-for-hazelcast-members",
    title: "Event Listeners for Hazelcast Members",
    body: "## Event Listeners for Hazelcast Members  Hazelcast offers the following event listeners:  - **Membership Listener** for cluster membership events. - **Distributed Object Listener** for distributed object creation and destroy events. - **Migration Listener** for partition migration start and complete events. - **Partition Lost Listener** for partition lost events. - **Lifecycle Listener** for `HazelcastInstance` lifecycle events. - **Entry Listener** for `IMap` and `MultiMap` entry events. - **Item Listener** for `IQueue`, `ISet` and `IList` item events. - **Message Listener** for `ITopic` message events. - **Client Listener** for client connection events.        "
});

documentTitles["index.html#listening-for-member-events"] = "Listening for Member Events";
index.add({
    url: "index.html#listening-for-member-events",
    title: "Listening for Member Events",
    body: "### Listening for Member Events  The Membership Listener interface has methods that are invoked for the following events.  - `memberAdded`: A new member is added to the cluster. - `memberRemoved`: An existing member leaves the cluster. - `memberAttributeChanged`: An attribute of a member is changed. Please refer to [Defining Member Attributes](#defining-member-attributes) to learn about member attributes.  To write a Membership Listener class, you implement the MembershipListener interface and its methods.  The following is an example Membership Listener class.  ```java public class ClusterMembershipListener      implements MembershipListener {       public void memberAdded(MembershipEvent membershipEvent) {   System.err.println(\&quot;Added: \&quot; + membershipEvent); }  public void memberRemoved(MembershipEvent membershipEvent) {        System.err.println(\&quot;Removed: \&quot; + membershipEvent);      }  public void memberAttributeChanged(MemberAttributeEvent memberAttributeEvent) {        System.err.println(\&quot;Member attribute changed: \&quot; + memberAttributeEvent);      }       } ```  When a respective event is fired, the membership listener outputs the addresses of the members that joined and left, and also which attribute changed on which member.  "
});

documentTitles["index.html#registering-membership-listeners"] = "Registering Membership Listeners";
index.add({
    url: "index.html#registering-membership-listeners",
    title: "Registering Membership Listeners",
    body: "#### Registering Membership Listeners  After you create your class, you can configure your cluster to include the membership listener. Below is an example using the method `addMembershipListener`.  ```java HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance(); hazelcastInstance.getCluster().addMembershipListener( new ClusterMembershipListener() ); ```  With the above approach, there is a possibility of missing events between the creation of the instance and registering the listener. To overcome this race condition, Hazelcast allows you to register listeners in configuration. You can register listeners using declarative, programmatic, or Spring configuration, as shown below.  The following is an example programmatic configuration.  ```java Config config = new Config(); config.addListenerConfig( new ListenerConfig( \&quot;com.your-package.ClusterMembershipListener\&quot; ) ); ```   The following is an example of the equivalent declarative configuration.   ```xml &lt;hazelcast&gt;    ...    &lt;listeners&gt;       &lt;listener type=\&quot;membership-listener\&quot;&gt;          com.your-package.ClusterMembershipListener       &lt;/listener&gt;    &lt;/listeners&gt;    ... &lt;/hazelcast&gt; ```  And, the following is an example of the equivalent Spring configuration.  ``` &lt;hz:listeners&gt;  &lt;hz:listener class-name=\&quot;com.your-package.ClusterMembershipListener\&quot;/&gt;  &lt;hz:listener implementation=\&quot;MembershipListener\&quot;/&gt; &lt;/hz:listeners&gt; ```       "
});

documentTitles["index.html#listening-for-distributed-object-events"] = "Listening for Distributed Object Events";
index.add({
    url: "index.html#listening-for-distributed-object-events",
    title: "Listening for Distributed Object Events",
    body: "### Listening for Distributed Object Events  The Distributed Object Listener methods `distributedObjectCreated` and `distributedObjectDestroyed` are invoked when a distributed object is created and destroyed throughout the cluster. To write a Distributed Object Listener class, you implement the DistributedObjectListener interface and its methods.  The following is an example Distributed Object Listener class.   ```java public class SampleDistObjListener implements DistributedObjectListener {   public static void main(String[] args) {     SampleDistObjListener sample = new SampleDistObjListener();      Config config = new Config();     HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance(config);     hazelcastInstance.addDistributedObjectListener(sample);      Collection&lt;DistributedObject&gt; distributedObjects = hazelcastInstance.getDistributedObjects();     for (DistributedObject distributedObject : distributedObjects) {       System.out.println(distributedObject.getName() + \&quot;,\&quot; + distributedObject.getId());     }   }    @Override   public void distributedObjectCreated(DistributedObjectEvent event) {     DistributedObject instance = event.getDistributedObject();     System.out.println(\&quot;Created \&quot; + instance.getName() + \&quot;,\&quot; + instance.getId());   }    @Override   public void distributedObjectDestroyed(DistributedObjectEvent event) {     DistributedObject instance = event.getDistributedObject();     System.out.println(\&quot;Destroyed \&quot; + instance.getName() + \&quot;,\&quot; + instance.getId());   } } ```  When a respective event is fired, the distributed object listener outputs the event type, and the name, service (for example, if a Map service provides the distributed object, than it is a Map object), and ID of the object.  "
});

documentTitles["index.html#registering-distributed-object-listeners"] = "Registering Distributed Object Listeners";
index.add({
    url: "index.html#registering-distributed-object-listeners",
    title: "Registering Distributed Object Listeners",
    body: "#### Registering Distributed Object Listeners   After you create your class, you can configure your cluster to include distributed object listeners. Below is an example using the method `addDistributedObjectListener`. You can also see this portion in the above class creation.  ```java HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance(); SampleDistObjListener sample = new SampleDistObjListener();  hazelcastInstance.addDistributedObjectListener( sample ); ```  With the above approach, there is a possibility of missing events between the creation of the instance and registering the listener. To overcome this race condition, Hazelcast allows you to register the listeners in configuration. You can register listeners using declarative, programmatic, or Spring configuration, as shown below.  The following is an example programmatic configuration.  ```java config.addListenerConfig( new ListenerConfig( \&quot;com.your-package.SampleDistObjListener\&quot; ) ); ```   The following is an example of the equivalent declarative configuration.   ```xml &lt;hazelcast&gt;    ...    &lt;listeners&gt; 	  &lt;listener&gt; 	  com.your-package.SampleDistObjListener       &lt;/listener&gt;    &lt;/listeners&gt;    ... &lt;/hazelcast&gt; ```  And, the following is an example of the equivalent Spring configuration.  ``` &lt;hz:listeners&gt;    &lt;hz:listener class-name=\&quot;com.your-package.SampleDistObjListener\&quot;/&gt;    &lt;hz:listener implementation=\&quot;DistributedObjectListener\&quot;/&gt; &lt;/hz:listeners&gt; ```           "
});

documentTitles["index.html#listening-for-migration-events"] = "Listening for Migration Events";
index.add({
    url: "index.html#listening-for-migration-events",
    title: "Listening for Migration Events",
    body: "### Listening for Migration Events  The Migration Listener interface has methods that are invoked for the following events:  - `migrationStarted`: A partition migration is started. - `migrationCompleted`: A partition migration is completed. - `migrationFailed`: A partition migration failed.  To write a Migration Listener class, you implement the DistributedObjectListener interface and its methods.  The following is an example Migration Listener class.   ```java public class ClusterMigrationListener implements MigrationListener {      @Override      public void migrationStarted(MigrationEvent migrationEvent) {        System.err.println(\&quot;Started: \&quot; + migrationEvent);      }     @Override      public void migrationCompleted(MigrationEvent migrationEvent) {        System.err.println(\&quot;Completed: \&quot; + migrationEvent);      }      @Override      public void migrationFailed(MigrationEvent migrationEvent) {        System.err.println(\&quot;Failed: \&quot; + migrationEvent);      } }      ```  When a respective event is fired, the migration listener outputs the partition ID, status of the migration, the old member and the new member. The following is an example output.  ``` Started: MigrationEvent{partitionId=98, oldOwner=Member [127.0.0.1]:5701, newOwner=Member [127.0.0.1]:5702 this}  ```  "
});

documentTitles["index.html#registering-migration-listeners"] = "Registering Migration Listeners";
index.add({
    url: "index.html#registering-migration-listeners",
    title: "Registering Migration Listeners",
    body: "#### Registering Migration Listeners  After you create your class, you can configure your cluster to include migration listeners. Below is an example using the method `addMigrationListener`.  ```java HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance();  PartitionService partitionService = hazelcastInstance.getPartitionService(); partitionService.addMigrationListener( new ClusterMigrationListener ); ```  With the above approach, there is a possibility of missing events between the creation of the instance and registering the listener. To overcome this race condition, Hazelcast allows you to register the listeners in configuration. You can register listeners using declarative, programmatic, or Spring configuration, as shown below.  The following is an example programmatic configuration.  ```java config.addListenerConfig(  new ListenerConfig( \&quot;com.your-package.ClusterMigrationListener\&quot; ) ); ```   The following is an example of the equivalent declarative configuration.   ```xml &lt;hazelcast&gt;    ...    &lt;listeners&gt; 	  &lt;listener&gt; 	  com.your-package.ClusterMigrationListener       &lt;/listener&gt;    &lt;/listeners&gt;    ... &lt;/hazelcast&gt; ```  And, the following is an example of the equivalent Spring configuration.  ``` &lt;hz:listeners&gt;    &lt;hz:listener class-name=\&quot;com.your-package.ClusterMigrationListener\&quot;/&gt;    &lt;hz:listener implementation=\&quot;MigrationListener\&quot;/&gt; &lt;/hz:listeners&gt; ```      "
});

documentTitles["index.html#listening-for-partition-lost-events"] = "Listening for Partition Lost Events";
index.add({
    url: "index.html#listening-for-partition-lost-events",
    title: "Listening for Partition Lost Events",
    body: "### Listening for Partition Lost Events  Hazelcast provides fault-tolerance by keeping multiple copies of your data. For each partition, one of your cluster members become owner and some of the other members become replica members based on your configuration. Nevertheless, data loss may occur if a few members crash simultaneously.  Let`s consider the following example with three members: N1, N2, N3 for a given partition-0. N1 is owner of partition-0, N2 and N3 are the first and second replicas respectively. If N1 and N2 crash simultaneously, partition-0 loses its data that is configured with less than 2 backups. For instance, if we configure a map with 1 backup, that map loses its data in partition-0 since both owner and first replica of partition-0 have crashed. However, if we configure our map with 2 backups, it does not lose any data since a copy of partition-0's data for the given map also resides in N3.   The Partition Lost Listener notifies for possible data loss occurrences with the information of how many replicas are lost for a partition. It listens to `PartitionLostEvent` instances. Partition lost events are dispatched per partition.   Partition loss detection is done after a member crash is detected by the other members and the crashed member is removed from the cluster. Please note that false-positive `PartitionLostEvent` instances may be fired on the network split errors.   "
});

documentTitles["index.html#writing-a-partition-lost-listener-class"] = "Writing a Partition Lost Listener Class";
index.add({
    url: "index.html#writing-a-partition-lost-listener-class",
    title: "Writing a Partition Lost Listener Class",
    body: "#### Writing a Partition Lost Listener Class  To write a Partition Lost Listener, you implement the PartitionLostListener interface and its `partitionLost` method, which is invoked when a partition loses its owner and all backups.  The following is an example Partition Lost Listener class.   ```java     public class ConsoleLoggingPartitionLostListener implements PartitionLostListener {         @Override         public void partitionLost(PartitionLostEvent event) {             System.out.println(event);         }     }  ```  When a `PartitionLostEvent` is fired, the partition lost listener given above outputs the partition ID, the replica index that is lost and the member that has detected the partition loss. The following is an example output.  ``` com.hazelcast.partition.PartitionLostEvent{partitionId=242, lostBackupCount=0,  eventSource=Address[192.168.2.49]:5701} ```  "
});

documentTitles["index.html#registering-partition-lost-listeners"] = "Registering Partition Lost Listeners";
index.add({
    url: "index.html#registering-partition-lost-listeners",
    title: "Registering Partition Lost Listeners",
    body: "#### Registering Partition Lost Listeners  After you create your class, you can configure your cluster programmatically or declaratively to include the partition lost listener. Below is an example of its programmatic configuration.  ```java HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance(); hazelcastInstance.getPartitionService().addPartitionLostListener( new ConsoleLoggingPartitionLostListener() ); ```  The following is an example of the equivalent declarative configuration.   ```xml &lt;hazelcast&gt;    ...   &lt;partition-lost-listeners&gt;      &lt;partition-lost-listener&gt;         com.your-package.ConsoleLoggingPartitionLostListener      &lt;/partition-lost-listener&gt;  &lt;/partition-lost-listeners&gt;    ... &lt;/hazelcast&gt; ```       "
});

documentTitles["index.html#listening-for-lifecycle-events"] = "Listening for Lifecycle Events";
index.add({
    url: "index.html#listening-for-lifecycle-events",
    title: "Listening for Lifecycle Events",
    body: "### Listening for Lifecycle Events  The Lifecycle Listener notifies for the following events:  - `STARTING`: A member is starting. - `STARTED`: A member started. - `SHUTTING_DOWN`: A member is shutting down. - `SHUTDOWN`: A member's shutdown has completed. - `MERGING`: A member is merging with the cluster. - `MERGED`: A member's merge operation has completed. - `CLIENT_CONNECTED`: A Hazelcast Client connected to the cluster. - `CLINET_DISCONNECTED`: A Hazelcast Client disconnected from the cluster.   The following is an example Lifecycle Listener class.   ```java public class NodeLifecycleListener implements LifecycleListener {      @Override      public void stateChanged(LifecycleEvent event) {        System.err.println(event);      } } ```  This listener is local to an individual member (node). It notifies the application that uses Hazelcast about the events mentioned above for a particular member.   "
});

documentTitles["index.html#registering-lifecycle-listeners"] = "Registering Lifecycle Listeners";
index.add({
    url: "index.html#registering-lifecycle-listeners",
    title: "Registering Lifecycle Listeners",
    body: "#### Registering Lifecycle Listeners   After you create your class, you can configure your cluster to include lifecycle listeners. Below is an example using the method `addLifecycleListener`.  ```java HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance(); hazelcastInstance.getLifecycleService().addLifecycleListener( new NodeLifecycleListener() ); ```  With the above approach, there is a possibility of missing events between the creation of the instance and registering the listener. To overcome this race condition, Hazelcast allows you to register the listeners in configuration. You can register listeners using declarative, programmatic, or Spring configuration, as shown below.  The following is an example programmatic configuration.  ```java config.addListenerConfig( new ListenerConfig( \&quot;com.your-package.NodeLifecycleListener\&quot; ) ); ```   The following is an example of the equivalent declarative configuration.   ```xml &lt;hazelcast&gt;    ...    &lt;listeners&gt; 	  &lt;listener&gt; 	  com.your-package.NodeLifecycleListener       &lt;/listener&gt;    &lt;/listeners&gt;    ... &lt;/hazelcast&gt; ```  And, the following is an example of the equivalent Spring configuration.  ``` &lt;hz:listeners&gt;    &lt;hz:listener class-name=\&quot;com.your-package.NodeLifecycleListener\&quot;/&gt;    &lt;hz:listener implementation=\&quot;LifecycleListener\&quot;/&gt; &lt;/hz:listeners&gt; ```         "
});

documentTitles["index.html#listening-for-map-events"] = "Listening for Map Events";
index.add({
    url: "index.html#listening-for-map-events",
    title: "Listening for Map Events",
    body: "### Listening for Map Events  You can listen to map-wide or entry-based events using the listeners provided by the Hazelcast's eventing framework. To listen to these events, implement a `MapListener` sub-interface.  A map-wide event is fired as a result of a map-wide operation: for  example, `IMap#clear` or `IMap#evictAll`. An entry-based event is fired after the operations that affect a  specific entry: for example, `IMap#remove` or `IMap#evict`.  "
});

documentTitles["index.html#catching-a-map-event"] = "Catching a Map Event";
index.add({
    url: "index.html#catching-a-map-event",
    title: "Catching a Map Event",
    body: "#### Catching a Map Event  To catch an event, you should explicitly  implement a corresponding sub-interface of a `MapListener`,  such as `EntryAddedListener` or `MapClearedListener`.   &lt;br&gt;&lt;/br&gt; ![image](images/NoteSmall.jpg) ***NOTE:*** *`EntryListener` interface still can be implemented,  we kept that for backward compatibility reasons. However, if you need to listen to a  different event which is not available in the `EntryListener` interface, you should also  implement a relevant `MapListener` sub-interface.* &lt;br&gt;&lt;/br&gt;  Let's take a look at the following class example.    ```java public class Listen {    public static void main( String[] args ) {     HazelcastInstance hz = Hazelcast.newHazelcastInstance();     IMap&lt;String, String&gt; map = hz.getMap( \&quot;somemap\&quot; );     map.addEntryListener( new MyEntryListener(), true );      System.out.println( \&quot;EntryListener registered\&quot; );   }    static class MyEntryListener implements EntryAddedListener&lt;String, String&gt;,                                            EntryRemovedListener&lt;String, String&gt;,                                            EntryUpdatedListener&lt;String, String&gt;,                                            EntryEvictedListener&lt;String, String&gt; ,                                            MapEvictedListener,                                            MapClearedListener   {     @Override     public void entryAdded( EntryEvent&lt;String, String&gt; event ) {       System.out.println( \&quot;Entry Added:\&quot; + event );     }      @Override     public void entryRemoved( EntryEvent&lt;String, String&gt; event ) {       System.out.println( \&quot;Entry Removed:\&quot; + event );     }      @Override     public void entryUpdated( EntryEvent&lt;String, String&gt; event ) {       System.out.println( \&quot;Entry Updated:\&quot; + event );     }      @Override     public void entryEvicted( EntryEvent&lt;String, String&gt; event ) {       System.out.println( \&quot;Entry Evicted:\&quot; + event );     }      @Override     public void mapEvicted( MapEvent event ) {       System.out.println( \&quot;Map Evicted:\&quot; + event );     }         @Override     public void mapCleared( MapEvent event ) {       System.out.println( \&quot;Map Cleared:\&quot; + event );     }    } } ```  Now, let's perform some modifications on the map entries using the following example code.  ```java public class Modify {    public static void main( String[] args ) {     HazelcastInstance hz = Hazelcast.newHazelcastInstance();     IMap&lt;String, String&gt; map = hz.getMap( \&quot;somemap\&quot;);     String key = \&quot;\&quot; + System.nanoTime();     String value = \&quot;1\&quot;;     map.put( key, value );     map.put( key, \&quot;2\&quot; );     map.delete( key );   } } ```  If you execute the `Listen` class and then the `Modify` class, you get the following output  produced by the `Listen` class.   ``` entryAdded:EntryEvent {Address[192.168.1.100]:5702} key=251359212222282,     oldValue=null, value=1, event=ADDED, by Member [192.168.1.100]:5702  entryUpdated:EntryEvent {Address[192.168.1.100]:5702} key=251359212222282,     oldValue=1, value=2, event=UPDATED, by Member [192.168.1.100]:5702  entryRemoved:EntryEvent {Address[192.168.1.100]:5702} key=251359212222282,     oldValue=2, value=2, event=REMOVED, by Member [192.168.1.100]:5702 ```   ```java public class MyEntryListener implements EntryListener{      private Executor executor = Executors.newFixedThreadPool(5);      @Override     public void entryAdded(EntryEvent event) {         executor.execute(new DoSomethingWithEvent(event));     } ... ```  "
});

documentTitles["index.html#partitions-and-entry-listeners"] = "Partitions and Entry Listeners";
index.add({
    url: "index.html#partitions-and-entry-listeners",
    title: "Partitions and Entry Listeners",
    body: "#### Partitions and Entry Listeners  A map listener runs on the event threads that are also used by the other listeners: for  example, the collection listeners and pub/sub message listeners. This means that the entry  listeners can access other partitions. Consider this when you run long tasks, since listening  to those tasks may cause the other map/event listeners to starve.  "
});

documentTitles["index.html#listening-for-lost-map-partitions"] = "Listening for Lost Map Partitions";
index.add({
    url: "index.html#listening-for-lost-map-partitions",
    title: "Listening for Lost Map Partitions",
    body: "#### Listening for Lost Map Partitions  You can listen to `MapPartitionLostEvent` instances by registering an implementation  of `MapPartitionLostListener`, which is also a sub-interface of `MapListener`.  Let`s consider the following example code:  ```java   public static void main(String[] args) {     Config config = new Config();     config.getMapConfig(\&quot;map\&quot;).setBackupCount(1); // might lose data if any member crashes      HazelcastInstance instance = HazelcastInstanceFactory.newHazelcastInstance(config);      IMap&lt;Object, Object&gt; map = instance1.getMap(\&quot;map\&quot;);     map.put(0, 0);      map.addPartitionLostListener(new MapPartitionLostListener() {       @Override       public void partitionLost(MapPartitionLostEvent event) {         System.out.println(event);       }     });   } ```  Within this example code, a `MapPartitionLostListener` implementation is registered to a map  that is configured with 1 backup. For this particular map and any of the partitions in the  system, if the partition owner member and its first backup member crash simultaneously, the  given `MapPartitionLostListener` receives a  corresponding `MapPartitionLostEvent`. If only a single member crashes in the cluster,  there will be no `MapPartitionLostEvent` fired for this map since backups for the partitions  owned by the crashed member are kept on other members.   Please refer to [Listening for Partition Lost Events](#listening-for-partition-lost-events) for more  information about partition lost detection and partition lost events.    "
});

documentTitles["index.html#registering-map-listeners"] = "Registering Map Listeners";
index.add({
    url: "index.html#registering-map-listeners",
    title: "Registering Map Listeners",
    body: "#### Registering Map Listeners  After you create your listener class, you can configure your cluster to include map listeners using the method `addEntryListener` (as you can see in the example `Listen` class above). Below is the related portion from this code, showing how to register a map listener.  ```java HazelcastInstance hz = Hazelcast.newHazelcastInstance(); IMap&lt;String, String&gt; map = hz.getMap( \&quot;somemap\&quot; ); map.addEntryListener( new MyEntryListener(), true ); ```  With the above approach, there is a possibility of missing events between the creation of the instance and registering the listener. To overcome this race condition, Hazelcast allows you to register listeners in configuration. You can register listeners using declarative, programmatic, or Spring configuration, as shown below.  The following is an example programmatic configuration.  ```java mapConfig.addEntryListenerConfig( new EntryListenerConfig( \&quot;com.yourpackage.MyEntryListener\&quot;,  		                             false, false ) ); ```   The following is an example of the equivalent declarative configuration.   ```xml &lt;hazelcast&gt;    ...    &lt;map name=\&quot;somemap\&quot;&gt;    ...       &lt;entry-listeners&gt; 	     &lt;entry-listener include-value=\&quot;false\&quot; local=\&quot;false\&quot;&gt; 		 com.your-package.MyEntryListener 		 &lt;/entry-listener&gt; 	  &lt;/entry-listeners&gt;    &lt;/map&gt;    ... &lt;/hazelcast&gt; ```  And, the following is an example of the equivalent Spring configuration.  ``` &lt;hz:map name=\&quot;somemap\&quot;&gt;    &lt;hz:entry-listeners&gt;       &lt;hz:entry-listener include-value=\&quot;true\&quot;       class-name=\&quot;com.hazelcast.spring.DummyEntryListener\&quot;/&gt;       &lt;hz:entry-listener implementation=\&quot;dummyEntryListener\&quot; local=\&quot;true\&quot;/&gt;    &lt;/hz:entry-listeners&gt; &lt;/hz:map&gt; ```  "
});

documentTitles["index.html#map-listener-attributes"] = "Map Listener Attributes";
index.add({
    url: "index.html#map-listener-attributes",
    title: "Map Listener Attributes",
    body: "#### Map Listener Attributes  As you see, there are attributes of the map listeners in the above examples: `include-value` and `local`. The attribute `include-value` is a boolean attribute which is optional to use and if you set it to `true`, the map event will contain the map value. Its default value is `true`.  The attribute `local` is also a boolean attribute which is optional to use and if you set it to `true`, you can listen to the map on the local member. Its default value is `false`.    "
});

documentTitles["index.html#listening-for-multimap-events"] = "Listening for MultiMap Events";
index.add({
    url: "index.html#listening-for-multimap-events",
    title: "Listening for MultiMap Events",
    body: "### Listening for MultiMap Events  You can listen to entry-based events in the MultiMap using `EntryListener`. The following is an example listener class for MultiMap.  ```java public class Listen {    public static void main( String[] args ) {     HazelcastInstance hz = Hazelcast.newHazelcastInstance();     MultiMap&lt;String, String&gt; map = hz.getMultiMap( \&quot;somemap\&quot; );     map.addEntryListener( new MyEntryListener(), true );     System.out.println( \&quot;EntryListener registered\&quot; );   }    static class SampleEntryListener implements EntryListener&lt;String, String&gt;{     @Override     public void entryAdded( EntryEvent&lt;String, String&gt; event ) {       System.out.println( \&quot;Entry Added:\&quot; + event );     }      @Override     public void entryRemoved( EntryEvent&lt;String, String&gt; event ) {       System.out.println( \&quot;Entry Removed:\&quot; + event );     }   } } ```  "
});

documentTitles["index.html#registering-multimap-listeners"] = "Registering MultiMap Listeners";
index.add({
    url: "index.html#registering-multimap-listeners",
    title: "Registering MultiMap Listeners",
    body: "#### Registering MultiMap Listeners  After you create your listener class, you can configure your cluster to include MultiMap listeners using the method `addEntryListener` (as you can see in the example `Listen` class above). Below is the related portion from this code, showing how to register a map listener.  ```java HazelcastInstance hz = Hazelcast.newHazelcastInstance(); MultiMap&lt;String, String&gt; map = hz.getMultiMap( \&quot;somemap\&quot; ); map.addEntryListener( new MyEntryListener(), true ); ```  With the above approach, there is a possibility of missing events between the creation of the instance and registering the listener. To overcome this race condition, Hazelcast allows you to register listeners in configuration. You can register listeners using declarative, programmatic, or Spring configuration, as shown below.  The following is an example programmatic configuration.  ```java multiMapConfig.addEntryListenerConfig( new EntryListenerConfig( \&quot;com.your-package.SampleEntryListener\&quot;, 		                             false, false ) ); ```   The following is an example of the equivalent declarative configuration.   ```xml &lt;hazelcast&gt;    ...    &lt;multimap name=\&quot;somemap\&quot;&gt;       &lt;value-collection-type&gt;SET&lt;/value-collection-type&gt;       &lt;entry-listeners&gt;          &lt;entry-listener include-value=\&quot;false\&quot; local=\&quot;false\&quot;&gt;             com.your-package.SampleEntryListener          &lt;/entry-listener&gt;       &lt;/entry-listeners&gt;    &lt;/multimap&gt;    ... &lt;/hazelcast&gt; ```  And, the following is an example of the equivalent Spring configuration.  ``` &lt;hz:multimap name=\&quot;default\&quot; value-collection-type=\&quot;LIST\&quot;&gt;    &lt;hz:entry-listeners&gt;       &lt;hz:entry-listener include-value=\&quot;false\&quot;          class-name=\&quot;com.your-package.SampleEntryListener\&quot;/&gt;       &lt;hz:entry-listener implementation=\&quot;EntryListener\&quot; local=\&quot;false\&quot;/&gt;    &lt;/hz:entry-listeners&gt; &lt;/hz:multimap&gt; ```  "
});

documentTitles["index.html#multimap-listener-attributes"] = "MultiMap Listener Attributes";
index.add({
    url: "index.html#multimap-listener-attributes",
    title: "MultiMap Listener Attributes",
    body: "#### MultiMap Listener Attributes  As you see, there are attributes of the MultiMap listeners in the above examples: `include-value` and `local`. The attribute `include-value` is a boolean attribute which is optional to use and if you set it to `true`, the MultiMap event will contain the map value. Its default value is `true`.  The attribute `local` is also a boolean attribute which is optional to use and if you set it to `true`, you can listen to the MultiMap on the local member. Its default value is `false`.      "
});

documentTitles["index.html#listening-for-item-events"] = "Listening for Item Events";
index.add({
    url: "index.html#listening-for-item-events",
    title: "Listening for Item Events",
    body: "### Listening for Item Events  The Item Listener is used by the Hazelcast `IQueue`, `ISet` and `IList` interfaces.  To write an Item Listener class, you implement the ItemListener interface and its methods `itemAdded` and `itemRemoved`. These methods are invoked when an item is added or removed.  The following is an example Item Listener class for an `ISet` structure.   ```java public class SampleItemListener implements ItemListener {    public static void main( String[] args ) {      SampleItemListener sampleItemListener = new SampleItemListener();     HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance();     ICollection&lt;Price&gt; set = hazelcastInstance.getSet( \&quot;default\&quot; );     set.addItemListener( sampleItemListener, true );       Price price = new Price( 10, time1 )     set.add( price );     set.remove( price );   }     public void itemAdded( Object item ) {     System.out.println( \&quot;Item added = \&quot; + item );   }    public void itemRemoved( Object item ) {     System.out.println( \&quot;Item removed = \&quot; + item );   }      } ```  &lt;br&gt;&lt;/br&gt; ![image](images/NoteSmall.jpg) ***NOTE:*** *You can use `ICollection` when creating any of the collection (queue, set and list) data structures, as shown above. You can also use `IQueue`, `ISet` or `IList` instead of `ICollection`.* &lt;br&gt;&lt;/br&gt;   "
});

documentTitles["index.html#registering-item-listeners"] = "Registering Item Listeners";
index.add({
    url: "index.html#registering-item-listeners",
    title: "Registering Item Listeners",
    body: "#### Registering Item Listeners  After you create your class, you can configure your cluster to include item listeners. Below is an example using the method `addItemListener` for `ISet` (it applies also to `IQueue` and `IList`). You can also see this portion in the above class creation.  ```java HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance();  ICollection&lt;Price&gt; set = hazelcastInstance.getSet( \&quot;default\&quot; ); // or ISet&lt;Prices&gt; set = hazelcastInstance.getSet( \&quot;default\&quot; ); default.addItemListener( sampleItemListener, true ); ```  With the above approach, there is a possibility of missing events between the creation of the instance and registering the listener. To overcome this race condition, Hazelcast allows you to register listeners in configuration. You can register listeners using declarative, programmatic, or Spring configuration, as shown below.  The following is an example programmatic configuration.  ```java setConfig.addItemListenerConfig( new ItemListenerConfig( \&quot;com.your-package.SampleItemListener\&quot;, true ) ); ```   The following is an example of the equivalent declarative configuration.   ```xml &lt;hazelcast&gt;    ...    &lt;item-listeners&gt;      &lt;item-listener include-value=\&quot;true\&quot;&gt;        com.your-package.SampleItemListener      &lt;/item-listener&gt;    &lt;/item-listeners&gt;    ... &lt;/hazelcast&gt; ```  And, the following is an example of the equivalent Spring configuration.  ``` &lt;hz:set name=\&quot;default\&quot; &gt;   &lt;hz:item-listeners&gt;     &lt;hz:item-listener include-value=\&quot;true\&quot;       class-name=\&quot;com.your-package.SampleItemListener\&quot;/&gt;   &lt;/hz:item-listeners&gt; &lt;/hz:set&gt; ```  "
});

documentTitles["index.html#item-listener-attributes"] = "Item Listener Attributes";
index.add({
    url: "index.html#item-listener-attributes",
    title: "Item Listener Attributes",
    body: "#### Item Listener Attributes  As you see, there is an attribute in the above examples: `include-value`. It is a boolean attribute which is optional to use and if you set it to `true`, the item event will contain the item value. Its default value is `true`.  There is also another attribute called `local`, which is not shown in the above examples. It is also a boolean attribute which is optional to use and if you set it to `true`, you can listen to the items on the local member. Its default value is `false`.    "
});

documentTitles["index.html#listening-for-topic-messages"] = "Listening for Topic Messages";
index.add({
    url: "index.html#listening-for-topic-messages",
    title: "Listening for Topic Messages",
    body: "### Listening for Topic Messages  The Message Listener is used by the `ITopic` interface. It notifies when a message is received for the registered topic.  To write a Message Listener class, you implement the MessageListener interface and its method `onMessage`, which is invoked when a message is received for the registered topic.  The following is an example Message Listener class.   ```java public class SampleMessageListener implements MessageListener&lt;MyEvent&gt; {    public static void main( String[] args ) {     SampleMessageListener sample = new SampleMessageListener();     HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance();     ITopic topic = hazelcastInstance.getTopic( \&quot;default\&quot; );     topic.addMessageListener( sample );     topic.publish( new MyEvent() );   }    public void onMessage( Message&lt;MyEvent&gt; message ) {     MyEvent myEvent = message.getMessageObject();     System.out.println( \&quot;Message received = \&quot; + myEvent.toString() );     if ( myEvent.isHeavyweight() ) {       messageExecutor.execute( new Runnable() {           public void run() {             doHeavyweightStuff( myEvent );           }       } );     }   } ```  "
});

documentTitles["index.html#registering-message-listeners"] = "Registering Message Listeners";
index.add({
    url: "index.html#registering-message-listeners",
    title: "Registering Message Listeners",
    body: "#### Registering Message Listeners  After you create your class, you can configure your cluster to include message listeners. Below is an example using the method `addMessageListener`. You can also see this portion in the above class creation.  ```java HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance();  ITopic topic = hazelcastInstance.getTopic( \&quot;default\&quot; ); topic.addMessageListener( sample ); ```  With the above approach, there is a possibility of missing messaging events between the creation of the instance and registering the listener. To overcome this race condition, Hazelcast allows you to register this listener in configuration. You can register it using declarative, programmatic, or Spring configuration, as shown below.  The following is an example programmatic configuration.  ```java topicConfig.addMessageListenerConfig( new ListenerConfig( \&quot;com.your-package.SampleMessageListener\&quot; ) ); ```   The following is an example of the equivalent declarative configuration.   ```xml &lt;hazelcast&gt;    ...    &lt;topic name=\&quot;default\&quot;&gt;       &lt;message-listeners&gt;          &lt;message-listener&gt;          com.your-package.SampleMessageListener          &lt;/message-listener&gt;       &lt;/message-listeners&gt;    &lt;/topic&gt;       ... &lt;/hazelcast&gt; ```  And, the following is an example of the equivalent Spring configuration.  ``` &lt;hz:topic name=\&quot;default\&quot;&gt;   &lt;hz:message-listeners&gt;     &lt;hz:message-listener         class-name=\&quot;com.your-package.SampleMessageListener\&quot;/&gt;   &lt;/hz:message-listeners&gt; &lt;/hz:topic&gt; ```      "
});

documentTitles["index.html#listening-for-clients"] = "Listening for Clients";
index.add({
    url: "index.html#listening-for-clients",
    title: "Listening for Clients",
    body: "### Listening for Clients  The Client Listener is used by the Hazelcast cluster members. It notifies the cluster members when a client is connected to or disconnected from the cluster.  To write a client listener class, you implement the `ClientListener` interface and its methods `clientConnected` and `clientDisconnected`, which are invoked when a client is connected to or disconnected from the cluster. You can add your client listener as shown below.  ``` hazelcast.getClientService().addClientListener(SampleClientListener); ```  The following is the equivalent declarative configuration.  ```xml &lt;listeners&gt;    &lt;listener&gt;       com.your-package.SampleClientListener    &lt;/listener&gt; &lt;/listeners&gt; ```  And, the following is the equivalent configuration in the Spring context.  ```xml &lt;hz:listeners&gt;    &lt;hz:listener class-name=\&quot;com.your-package.SampleClientListener\&quot;/&gt;    &lt;hz:listener implementation=\&quot;com.your-package.SampleClientListener\&quot;/&gt; &lt;/hz:listeners&gt; ```    &lt;br&gt;&lt;/br&gt; ![image](images/NoteSmall.jpg) ***NOTE:*** *You can also add event listeners to a Hazelcast client. Please refer to [Client Listenerconfig](#configuring-client-listeners) for the related information.*       "
});

documentTitles["index.html#event-listeners-for-hazelcast-clients"] = "Event Listeners for Hazelcast Clients";
index.add({
    url: "index.html#event-listeners-for-hazelcast-clients",
    title: "Event Listeners for Hazelcast Clients",
    body: "## Event Listeners for Hazelcast Clients  You can add event listeners to a Hazelcast Java client. You can configure the following listeners to listen to the events on the client side. Please see the respective sections under the [Event Listeners for Hazelcast Members section](#event-listeners-for-hazelcast-members) for example code.  - [Lifecycle Listener](#listening-for-lifecycle-events): Notifies when the client is starting, started, shutting down, and shutdown. - [Membership Listener](#listening-for-member-events): Notifies when a member joins to/leaves the cluster to which the client is connected, or when an attribute is changed in a member. - [DistributedObject Listener](#listening-for-distributed-object-events): Notifies when a distributed object is created or destroyed throughout the cluster to which the client is connected.  &lt;br&gt;&lt;/br&gt; ***RELATED INFORMATION***  *Please refer to the [Client Listenerconfig section](#client-listener-configuration) for more information.* &lt;br&gt;&lt;/br&gt;      "
});

documentTitles["index.html#global-event-configuration"] = "Global Event Configuration";
index.add({
    url: "index.html#global-event-configuration",
    title: "Global Event Configuration",
    body: "## Global Event Configuration  - `hazelcast.event.queue.capacity`: default value is 1000000 - `hazelcast.event.queue.timeout.millis`: default value is 250 - `hazelcast.event.thread.count`: default value is 5  A striped executor in each cluster member controls and dispatches the received events. This striped executor also guarantees the event order. For all events in Hazelcast, the order in which events are generated and the order in which they are published are guaranteed for given keys. For map and multimap, the order is preserved for the operations on the same key of the entry. For list, set, topic and queue, the order is preserved for events on that instance of the distributed data structure.  To achieve the order guarantee, you make only one thread responsible for a particular set of events (entry events of a key in a map, item events of a collection, etc.) in `StripedExecutor` (within `com.hazelcast.util.executor`).  If the event queue reaches its capacity (`hazelcast.event.queue.capacity`) and the last item cannot be put into the event queue for the period specified in `hazelcast.event.queue.timeout.millis`, these events will be dropped with a warning message, such as \&quot;EventQueue overloaded\&quot;.  If event listeners perform a computation that takes a long time, the event queue can reach its maximum capacity and lose events. For map and multimap, you can configure `hazelcast.event.thread.count` to a higher value so that fewer collisions occur for keys, and therefore worker threads will not block each other in `StripedExecutor`. For list, set, topic and queue, you should offload heavy work to another thread. To preserve order guarantee, you should implement similar logic with `StripedExecutor` in the offloaded thread pool. &lt;br&gt; &lt;/br&gt;       "
});

documentTitles["index.html#distributed-computing"] = "Distributed Computing";
index.add({
    url: "index.html#distributed-computing",
    title: "Distributed Computing",
    body: "# Distributed Computing  From Wikipedia: Distributed computing refers to the use of distributed systems to solve computational problems. In distributed computing, a problem is divided into many tasks, each of which is solved by one or more computers.  "
});

documentTitles["index.html#executor-service"] = "Executor Service";
index.add({
    url: "index.html#executor-service",
    title: "Executor Service",
    body: "## Executor Service  One of the coolest features of Java 1.5 is the Executor framework, which allows you to asynchronously execute your tasks (logical units of work), such as database query, complex calculation, and image rendering.  The default implementation of this framework (`ThreadPoolExecutor`) is designed to run within a single JVM. In distributed systems, this implementation is not desired since you may want a task submitted in one JVM and processed in another one. Hazelcast offers `IExecutorService` for you to use in distributed environments: it implements `java.util.concurrent.ExecutorService` to serve the applications requiring computational and data processing power.  With `IExecutorService`, you can execute tasks asynchronously and perform other useful tasks. If your task execution takes longer than expected, you can cancel the task execution. Tasks should be `Serializable` since they will be distributed.  In the Java Executor framework, you implement tasks two ways: Callable or Runnable.  * Callable: If you need to return a value and submit to Executor, implement the task as `java.util.concurrent.Callable`. * Runnable: If you do not need to return a value, implement the task as `java.util.concurrent.Runnable`.  "
});

documentTitles["index.html#implementing-a-callable-task"] = "Implementing a Callable Task";
index.add({
    url: "index.html#implementing-a-callable-task",
    title: "Implementing a Callable Task",
    body: "### Implementing a Callable Task  In Hazelcast, when you implement a task as `java.util.concurrent.Callable` (a task that returns a value), you implement Callable and Serializable.  Below is an example of a Callable task. SumTask prints out map keys and returns the summed map values.  ```java import com.hazelcast.core.HazelcastInstance; import com.hazelcast.core.HazelcastInstanceAware; import com.hazelcast.core.IMap;  import java.io.Serializable; import java.util.concurrent.Callable;  public class SumTask     implements Callable&lt;Integer&gt;, Serializable, HazelcastInstanceAware {            private transient HazelcastInstance hazelcastInstance;    public void setHazelcastInstance( HazelcastInstance hazelcastInstance ) {     this.hazelcastInstance = hazelcastInstance;   }    public Integer call() throws Exception {     IMap&lt;String, Integer&gt; map = hazelcastInstance.getMap( \&quot;map\&quot; );     int result = 0;     for ( String key : map.localKeySet() ) {       System.out.println( \&quot;Calculating for key: \&quot; + key );       result += map.get( key );     }     System.out.println( \&quot;Local Result: \&quot; + result );     return result;   } } ```  Another example is the Echo callable below. In its call() method, it returns the local member and the input passed in. Remember that `instance.getCluster().getLocalMember()` returns the local member and `toString()` returns the member's address (IP + port) in String form, just to see which member actually executed the code for our example. Of course, the `call()` method can do and return anything you like.   ```java import java.util.concurrent.Callable; import java.io.Serializable;  public class Echo implements Callable&lt;String&gt;, Serializable {     String input = null;      public Echo() {     }      public Echo(String input) {         this.input = input;     }      public String call() {         Config cfg = new Config();         HazelcastInstance instance = Hazelcast.newHazelcastInstance(cfg);         return instance.getCluster().getLocalMember().toString() + \&quot;:\&quot; + input;     } } ```  "
});

documentTitles["index.html#executing-a-callable-task"] = "Executing a Callable Task";
index.add({
    url: "index.html#executing-a-callable-task",
    title: "Executing a Callable Task",
    body: "#### Executing a Callable Task  To execute a callable task with the executor framework:  * Obtain an `ExecutorService` instance (generally via `Executors`). * Submit a task which returns a `Future`.  * After executing the task, you do not have to wait for the execution to complete, you can process other things.  * When ready, use the `Future` object to retrieve the result as shown in the code example below.  Below, the Echo task is executed.  ```java ExecutorService executorService = Executors.newSingleThreadExecutor(); Future&lt;String&gt; future = executorService.submit( new Echo( \&quot;myinput\&quot;) ); //while it is executing, do some useful stuff //when ready, get the result of your execution String result = future.get(); ```  Please note that the Echo callable in the above code sample also implements a Serializable interface, since it may be sent to another JVM to be processed.  ![image](images/NoteSmall.jpg) ***NOTE:*** *When a task is deserialized, HazelcastInstance needs to be accessed. To do this, the task should implement `HazelcastInstanceAware` interface. Please see the [HazelcastInstanceAware Interface section](#implementing-hazelcastinstanceaware) for more information.* &lt;br&gt;&lt;/br&gt;   "
});

documentTitles["index.html#implementing-a-runnable-task"] = "Implementing a Runnable Task";
index.add({
    url: "index.html#implementing-a-runnable-task",
    title: "Implementing a Runnable Task",
    body: "### Implementing a Runnable Task  In Hazelcast, when you implement a task as `java.util.concurrent.runnable` (a task that does not return a value), you implement Runnable and Serializable.  Below is Runnable example code. It is a task that waits for some time and echoes a message.  ```java public class EchoTask implements Runnable, Serializable {   private final String msg;    public EchoTask( String msg ) {     this.msg = msg;   }    @Override   public void run() {     try {       Thread.sleep( 5000 );     } catch ( InterruptedException e ) {     }     System.out.println( \&quot;echo:\&quot; + msg );   } } ```  "
});

documentTitles["index.html#executing-a-runnable-task"] = "Executing a Runnable Task";
index.add({
    url: "index.html#executing-a-runnable-task",
    title: "Executing a Runnable Task",
    body: "#### Executing a Runnable Task  To execute the runnable task:  * Retrieve the Executor from `HazelcastInstance`. * Submit the tasks to the Executor.  Now let's write a class that submits and executes these echo messages. Executor is retrieved from `HazelcastInstance` and 1000 echo tasks are submitted.  ```java public class MasterMember {   public static void main( String[] args ) throws Exception {     HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance();     IExecutorService executor = hazelcastInstance.getExecutorService( \&quot;exec\&quot; );     for ( int k = 1; k &lt;= 1000; k++ ) {       Thread.sleep( 1000 );       System.out.println( \&quot;Producing echo task: \&quot; + k );       executor.execute( new EchoTask( String.valueOf( k ) ) );     }     System.out.println( \&quot;EchoTaskMain finished!\&quot; );   } } ```   "
});

documentTitles["index.html#scaling-the-executor-service"] = "Scaling The Executor Service";
index.add({
    url: "index.html#scaling-the-executor-service",
    title: "Scaling The Executor Service",
    body: "### Scaling The Executor Service   You can scale the Executor service both vertically (scale up) and horizontally (scale out).   To scale up, you should improve the processing capacity of the JVM. You can do this by increasing the `pool-size` property mentioned in [Configuring Executor Service](#configuring-executor-service) (i.e., increasing the thread count). However, please be aware of your JVM's capacity. If you think it cannot handle such an additional load caused by increasing the thread count, you may want to consider improving the JVM's resources (CPU, memory, etc.). As an example, set the `pool-size` to 5 and run the above `MasterMember`. You will see that `EchoTask` is run as soon as it is produced.   To scale out, more JVMs should be added instead of increasing only one JVM's capacity. In reality, you may want to expand your cluster by adding more physical or virtual machines. For example, in the EchoTask example in the [Runnable section](#implementing-a-runnable-task), you can create another Hazelcast instance. That instance will automatically get involved in the executions started in `MasterMember` and start processing.      "
});

documentTitles["index.html#executing-code-in-the-cluster"] = "Executing Code in the Cluster";
index.add({
    url: "index.html#executing-code-in-the-cluster",
    title: "Executing Code in the Cluster",
    body: "### Executing Code in the Cluster  The distributed executor service is a distributed implementation of `java.util.concurrent.ExecutorService`. It allows you to execute your code in the cluster. In this section, the code examples are based on the [Echo class above](#implementing-a-callable-task) (please note that the Echo class is `Serializable`). The code examples show how Hazelcast can execute your code (`Runnable, Callable`):  - `echoOnTheMember`: On a specific cluster member you choose with the `IExecutorService` `submitToMember` method. - `echoOnTheMemberOwningTheKey`: On the member owning the key you choose with the `IExecutorService` `submitToKeyOwner` method. - `echoOnSomewhere`: On the member Hazelcast picks with the `IExecutorService` `submit` method. - `echoOnMembers`: On all or a subset of the cluster members with the `IExecutorService` `submitToMembers` method.  ```java import com.hazelcast.core.Member; import com.hazelcast.core.Hazelcast; import com.hazelcast.core.IExecutorService; import java.util.concurrent.Callable; import java.util.concurrent.Future;    import java.util.Set;  public void echoOnTheMember( String input, Member member ) throws Exception {   Callable&lt;String&gt; task = new Echo( input );   HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance();   IExecutorService executorService =        hazelcastInstance.getExecutorService( \&quot;default\&quot; );          Future&lt;String&gt; future = executorService.submitToMember( task, member );   String echoResult = future.get(); }  public void echoOnTheMemberOwningTheKey( String input, Object key ) throws Exception {   Callable&lt;String&gt; task = new Echo( input );   HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance();   IExecutorService executorService =       hazelcastInstance.getExecutorService( \&quot;default\&quot; );          Future&lt;String&gt; future = executorService.submitToKeyOwner( task, key );   String echoResult = future.get(); }  public void echoOnSomewhere( String input ) throws Exception {    HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance();   IExecutorService executorService =       hazelcastInstance.getExecutorService( \&quot;default\&quot; );          Future&lt;String&gt; future = executorService.submit( new Echo( input ) );   String echoResult = future.get(); }  public void echoOnMembers( String input, Set&lt;Member&gt; members ) throws Exception {   HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance();   IExecutorService executorService =        hazelcastInstance.getExecutorService( \&quot;default\&quot; );          Map&lt;Member, Future&lt;String&gt;&gt; futures = executorService       .submitToMembers( new Echo( input ), members );          for ( Future&lt;String&gt; future : futures.values() ) {     String echoResult = future.get();     // ...   } } ```   ![image](images/NoteSmall.jpg) ***NOTE:*** *You can obtain the set of cluster members via `HazelcastInstance#getCluster().getMembers()` call.*         "
});

documentTitles["index.html#canceling-an-executing-task"] = "Canceling an Executing Task";
index.add({
    url: "index.html#canceling-an-executing-task",
    title: "Canceling an Executing Task",
    body: "### Canceling an Executing Task  A task in the code that you execute in a cluster might take longer than expected. If you cannot stop/cancel that task, it will keep eating your resources.   To cancel a task, you can use the standard Java executor framework's `cancel()` API. This framework encourages us to code and design for cancellations, a highly ignored part of software development.  "
});

documentTitles["index.html#example-task-to-cancel"] = "Example Task to Cancel";
index.add({
    url: "index.html#example-task-to-cancel",
    title: "Example Task to Cancel",
    body: "#### Example Task to Cancel  The Fibonacci callable class below calculates the Fibonacci number for a given number. In the `calculate` method, we check if the current thread is interrupted so that the code can respond to cancellations once the execution is started.   ```java public class Fibonacci&lt;Long&gt; implements Callable&lt;Long&gt;, Serializable {   int input = 0;     public Fibonacci() {    }     public Fibonacci( int input ) {      this.input = input;   }     public Long call() {     return calculate( input );   }    private long calculate( int n ) {     if ( Thread.currentThread().isInterrupted() ) {       return 0;     }     if ( n &lt;= 1 ) {       return n;     } else {       return calculate( n - 1 ) + calculate( n - 2 );     }   } } ```  "
});

documentTitles["index.html#example-method-to-execute-and-cancel-the-task"] = "Example Method to Execute and Cancel the Task";
index.add({
    url: "index.html#example-method-to-execute-and-cancel-the-task",
    title: "Example Method to Execute and Cancel the Task",
    body: "#### Example Method to Execute and Cancel the Task  The `fib()` method below submits the Fibonacci calculation task above for number 'n' and waits a maximum of 3 seconds for the result. If the execution does not completed in 3 seconds, `future.get()` will throw a `TimeoutException` and upon catching it, we cancel the execution, saving some CPU cycles.  ```java long fib( int n ) throws Exception {   HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance();   IExecutorService es = hazelcastInstance.getExecutorService();   Future future = es.submit( new Fibonacci( n ) );     try {     return future.get( 3, TimeUnit.SECONDS );   } catch ( TimeoutException e ) {     future.cancel( true );               }   return -1; } ```  `fib(20)` will probably take less than 3 seconds. However, `fib(50)` will take much longer. (This is not an example for writing better Fibonacci calculation code, but for showing how to cancel a running execution that takes too long.) The method `future.cancel(false)` can only cancel execution before it is running (executing), but `future.cancel(true)` can interrupt running executions if your code is able to handle the interruption. If you are willing to cancel an already running task, then your task should be designed to handle interruptions. If the `calculate (int n)` method did not have the `(Thread.currentThread().isInterrupted())` line, then you would not be able to cancel the execution after it is started.         "
});

documentTitles["index.html#callback-when-task-completes"] = "Callback When Task Completes";
index.add({
    url: "index.html#callback-when-task-completes",
    title: "Callback When Task Completes",
    body: "### Callback When Task Completes  You can use the `ExecutionCallback` offered by Hazelcast to asynchronously be notified when the execution is done.  - To be notified when your task completes without an error, implement the `onResponse` method. - To be notified when your task completes with an error, implement the `onFailure` method.  "
});

documentTitles["index.html#example-task-to-callback"] = "Example Task to Callback";
index.add({
    url: "index.html#example-task-to-callback",
    title: "Example Task to Callback",
    body: "#### Example Task to Callback  Let's use the Fibonacci series to explain this. The example code below is the calculation that will be executed. Note that it is Callable and Serializable.  ```java public class Fibonacci&lt;Long&gt; implements Callable&lt;Long&gt;, Serializable {   int input = 0;    public Fibonacci() {   }    public Fibonacci( int input ) {     this.input = input;   }    public Long call() {     return calculate( input );   }    private long calculate( int n ) {     if (n &lt;= 1) {       return n;     } else {       return calculate( n - 1 ) + calculate( n - 2 );     }   } } ```  "
});

documentTitles["index.html#example-method-to-callback-the-task"] = "Example Method to Callback the Task";
index.add({
    url: "index.html#example-method-to-callback-the-task",
    title: "Example Method to Callback the Task",
    body: "#### Example Method to Callback the Task  The example code below submits the Fibonacci calculation to `ExecutionCallback` and prints the result asynchronously. `ExecutionCallback` has the methods `onResponse` and `onFailure`. In this example code, `onResponse` is called upon a valid response and prints the calculation result, whereas `onFailure` is called upon a failure and prints the stacktrace.   ```java import com.hazelcast.core.Hazelcast; import com.hazelcast.core.ExecutionCallback; import com.hazelcast.core.IExecutorService; import java.util.concurrent.Future;  HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance(); IExecutorService es = hazelcastInstance.getExecutorService(); Callable&lt;Long&gt; task = new Fibonacci( 10 );  es.submit(task, new ExecutionCallback&lt;Long&gt; () {    @Override   public void onResponse( Long response ) {     System.out.println( \&quot;Fibonacci calculation result = \&quot; + response );   }    @Override   public void onFailure( Throwable t ) {     t.printStackTrace();   } }; ```       "
});

documentTitles["index.html#selecting-members-for-task-execution"] = "Selecting Members for Task Execution";
index.add({
    url: "index.html#selecting-members-for-task-execution",
    title: "Selecting Members for Task Execution",
    body: "### Selecting Members for Task Execution  As previously mentioned, it is possible to indicate where in the Hazelcast cluster the `Runnable` or `Callable` is executed. Usually, you will execute these in the cluster based on the location of a key, set of keys, or you will just allow Hazelcast to select a member.  If you want more control over where your code runs, use the `MemberSelector` interface. For example, you may want certain tasks to run only on certain members, or you may wish to implement some form of custom load balancing regime.  The `MemberSelector` is an interface that you can implement and then provide to the `IExecutorService` when you submit or execute.  The `select(Member)` method is called for every available member in the cluster. Implement this method to decide if the member is going to be used or not.  In a simple example shown below, we select the cluster members based on the presence of an attribute.  ```java public class MyMemberSelector implements MemberSelector {      public boolean select(Member member) {          return Boolean.TRUE.equals(member.getAttribute(\&quot;my.special.executor\&quot;));      }  } ```  You can use `MemberSelector` instances provided via `com.hazelcast.cluster.memberselector.MemberSelectors` class. For example, you can select a lite member for running a task using `com.hazelcast.cluster.memberselector.MemberSelectors#LITE_MEMBER_SELECTOR`.    "
});

documentTitles["index.html#configuring-executor-service"] = "Configuring Executor Service";
index.add({
    url: "index.html#configuring-executor-service",
    title: "Configuring Executor Service",
    body: "### Configuring Executor Service  The following are example configurations for executor service.  **Declarative:**  ```xml &lt;executor-service name=\&quot;exec\&quot;&gt;    &lt;pool-size&gt;1&lt;/pool-size&gt;    &lt;queue-capacity&gt;10&lt;/queue-capacity&gt;    &lt;statistics-enabled&gt;true&lt;/statistics-enabled&gt; &lt;/executor-service&gt; ```  **Programmatic:**  ```java Config config = new Config(); ExecutorConfig executorConfig = config.getExecutorConfig(\&quot;exec\&quot;); executorConfig.setPoolSize( \&quot;1\&quot; ).setQueueCapacity( \&quot;10\&quot; )           .setStatisticsEnabled( true ); ```  Executor service configuration has the following elements.  - `pool-size`: The number of executor threads per Member for the Executor. By default, Executor is configured to have 8 threads in the pool. You can change that with this element. - `queue-capacity`: Executor's task queue capacity. - `statistics-enabled`: Some statistics like pending operations count, started operations count, completed operations count, cancelled operations count can be retrieved by setting this parameter's value as `true`. The method for retrieving the statistics is `getLocalExecutorStats()`.            "
});

documentTitles["index.html#entry-processor"] = "Entry Processor";
index.add({
    url: "index.html#entry-processor",
    title: "Entry Processor",
    body: "## Entry Processor  Hazelcast supports entry processing. An entry processor is a function that executes your code on a map entry in an atomic way.   An entry processor is a good option if you perform bulk processing on an `IMap`. Usually, you perform a loop of keys: executing `IMap.get(key)`, mutating the value, and finally putting the entry back in the map using `IMap.put(key,value)`.  If you perform this process from a client or from a member where the keys do not exist, you effectively perform 2 network hops for each update: the first to retrieve the data and the second to update the mutated value.  If you are doing the process described above, you should consider using entry processors. An entry processor executes a read and updates upon the member where the data resides.  This eliminates the costly network hops described previously.  "
});

documentTitles["index.html#performing-fast-in-memory-map-operations"] = "Performing Fast In-Memory Map Operations";
index.add({
    url: "index.html#performing-fast-in-memory-map-operations",
    title: "Performing Fast In-Memory Map Operations",
    body: "### Performing Fast In-Memory Map Operations  An entry processor enables fast in-memory operations on your map without you having to worry about locks or concurrency issues. You can apply it to a single map entry or to all map entries. It supports choosing target entries using predicates. You do not need any explicit lock on entry thanks to the isolated threading model: Hazelcast runs the EntryProcessor for all entries on a `partitionThread` so there will NOT be any interleaving of the EntryProcessor and other mutations.  Hazelcast sends the entry processor to each cluster member and these members apply it to map entries. Therefore, if you add more members, your processing completes faster.  "
});

documentTitles["index.html#using-object-in-memory-format"] = "Using OBJECT In-Memory Format";
index.add({
    url: "index.html#using-object-in-memory-format",
    title: "Using OBJECT In-Memory Format",
    body: "#### Using OBJECT In-Memory Format  If entry processing is the major operation for a map and if the map consists of complex objects, you should use `OBJECT` as the `in-memory-format` to minimize serialization cost. By default, the entry value is stored as a byte array (`BINARY` format). When it is stored as an object (`OBJECT` format), then the entry processor is applied directly on the object. In that case, no serialization or deserialization is performed. But if there is a defined event listener, a new entry value will be serialized when passing to the event publisher service.  ![image](images/NoteSmall.jpg) ***NOTE***: *When `in-memory-format` is `OBJECT`, old value of the updated entry will be null.*  "
});

documentTitles["index.html#entry-processing-with-imap-methods"] = "Entry Processing with IMap Methods";
index.add({
    url: "index.html#entry-processing-with-imap-methods",
    title: "Entry Processing with IMap Methods",
    body: "#### Entry Processing with IMap Methods  The methods below are in the IMap interface for entry processing.  * `executeOnKey` processes an entry mapped by a key. * `executeOnKeys` processes entries mapped by a collection of keys. * `submitToKey` processes an entry mapped by a key while listening to event status. * `executeOnEntries` processes all entries in a map. * `executeOnEntries` can also process all entries in a map with a defined predicate.  ```java /**  * Applies the user defined EntryProcessor to the entry mapped by the key.  * Returns the object which is the result of the process() method of EntryProcessor.  */ Object executeOnKey( K key, EntryProcessor entryProcessor );  /**  * Applies the user defined EntryProcessor to the entries mapped by the collection of keys.  * Returns the results mapped by each key in the collection.  */ Map&lt;K, Object&gt; executeOnKeys( Set&lt;K&gt; keys, EntryProcessor entryProcessor );  /**  * Applies the user defined EntryProcessor to the entry mapped by the key with  * specified ExecutionCallback to listen to event status and return immediately.  */ void submitToKey( K key, EntryProcessor entryProcessor, ExecutionCallback callback );   /**  * Applies the user defined EntryProcessor to all entries in the map.  * Returns the results mapped by each key in the map.  */ Map&lt;K, Object&gt; executeOnEntries( EntryProcessor entryProcessor ); 	    /**  * Applies the user defined EntryProcessor to the entries in the map which satisfies   provided predicate.  * Returns the results mapped by each key in the map.  */ Map&lt;K, Object&gt; executeOnEntries( EntryProcessor entryProcessor, Predicate predicate ); ```  ![image](images/NoteSmall.jpg) ***NOTE***: *Entry Processors run via Operation Threads that are dedicated to specific partitions.  Therefore, with long running Entry Processor executions, other partition operations such as `map.put(key)` cannot be processed. With this in mind, it is a good practice to make your Entry Processor executions as quick as possible.*   "
});

documentTitles["index.html#entryprocessor-interface"] = "`EntryProcessor` Interface";
index.add({
    url: "index.html#entryprocessor-interface",
    title: "`EntryProcessor` Interface",
    body: "#### `EntryProcessor` Interface  The following is the `EntryProcessor` interface:  ```java public interface EntryProcessor&lt;K, V&gt; extends Serializable {   Object process( Map.Entry&lt;K, V&gt; entry );    EntryBackupProcessor&lt;K, V&gt; getBackupProcessor(); } ```  ![image](images/NoteSmall.jpg) ***NOTE***: *If you want to execute a task on a single key, you can also use `executeOnKeyOwner` provided by Executor Service. But, in this case, you need to perform a lock and serialization.*  When using the `executeOnEntries` method, if the number of entries is high and you do need the results, then returning null in `process()` method is a good practice. By returning null, results of the processing is not stored in the map and hence out of memory errors are eliminated.  "
});

documentTitles["index.html#processing-backup-entries"] = "Processing Backup Entries";
index.add({
    url: "index.html#processing-backup-entries",
    title: "Processing Backup Entries",
    body: "#### Processing Backup Entries  If your code modifies the data, then you should also provide a processor for backup entries. This is required to prevent the primary map entries from having different values than the backups; it causes the entry processor to be applied both on the primary and backup entries.  ```java public interface EntryBackupProcessor&lt;K, V&gt; extends Serializable {     void processBackup( Map.Entry&lt;K, V&gt; entry ); } ```  ![image](images/NoteSmall.jpg) ***NOTE***: *It is possible that an Entry Processor can see that a key exists but its backup processor may not find it at the run time due to an unsent backup of a previous operation (e.g. a previous put operation). In those situations, Hazelcast internally/eventually will synchronize those owner and backup partitions so you will not lose any data. When coding an `EntryBackupProcessor`, you should take that case into account, otherwise `NullPointerException` can be seen since `Map.Entry.getValue()` may return `null`.*      "
});

documentTitles["index.html#creating-an-entry-processor"] = "Creating an Entry Processor";
index.add({
    url: "index.html#creating-an-entry-processor",
    title: "Creating an Entry Processor",
    body: "### Creating an Entry Processor  The EntryProcessorTest class has the following methods.  * `testMapEntryProcessor` puts one map entry and calls `executeOnKey` to process that map entry. * `testMapEntryProcessor` puts all the entries in a map and calls `executeOnEntries` to process     all the entries.  The static class `IncrementingEntryProcessor` creates an entry processor to process the map  entries in the EntryProcessorTest class. It creates the entry processor class by:  - implementing the map interfaces `EntryProcessor` and `EntryBackupProcessor`. - implementing the `java.io.Serializable` interface. - implementing the `EntryProcessor` methods `process` and `getBackupProcessor`. - implementing the `EntryBackupProcessor` method `processBackup`.  ```java public class EntryProcessorTest {    @Test   public void testMapEntryProcessor() throws InterruptedException {     Config config = new Config().getMapConfig( \&quot;default\&quot; )         .setInMemoryFormat( MapConfig.InMemoryFormat.OBJECT );              HazelcastInstance hazelcastInstance1 = Hazelcast.newHazelcastInstance( config );     HazelcastInstance hazelcastInstance2 = Hazelcast.newHazelcastInstance( config );     IMap&lt;Integer, Integer&gt; map = hazelcastInstance1.getMap( \&quot;mapEntryProcessor\&quot; );     map.put( 1, 1 );     EntryProcessor entryProcessor = new IncrementingEntryProcessor();     map.executeOnKey( 1, entryProcessor );     assertEquals( map.get( 1 ), (Object) 2 );     hazelcastInstance1.getLifecycleService().shutdown();     hazelcastInstance2.getLifecycleService().shutdown();   }    @Test   public void testMapEntryProcessorAllKeys() throws InterruptedException {     StaticNodeFactory factory = new StaticNodeFactory( 2 );     Config config = new Config().getMapConfig( \&quot;default\&quot; )         .setInMemoryFormat( MapConfig.InMemoryFormat.OBJECT );              HazelcastInstance hazelcastInstance1 = factory.newHazelcastInstance( config );     HazelcastInstance hazelcastInstance2 = factory.newHazelcastInstance( config );     IMap&lt;Integer, Integer&gt; map = hazelcastInstance1         .getMap( \&quot;mapEntryProcessorAllKeys\&quot; );              int size = 100;     for ( int i = 0; i &lt; size; i++ ) {       map.put( i, i );     }     EntryProcessor entryProcessor = new IncrementingEntryProcessor();     Map&lt;Integer, Object&gt; res = map.executeOnEntries( entryProcessor );     for ( int i = 0; i &lt; size; i++ ) {       assertEquals( map.get( i ), (Object) (i + 1) );     }     for ( int i = 0; i &lt; size; i++ ) {       assertEquals( map.get( i ) + 1, res.get( i ) );     }     hazelcastInstance1.getLifecycleService().shutdown();     hazelcastInstance2.getLifecycleService().shutdown();   }    static class IncrementingEntryProcessor       implements EntryProcessor, EntryBackupProcessor, Serializable {            public Object process( Map.Entry entry ) {       Integer value = (Integer) entry.getValue();       entry.setValue( value + 1 );       return value + 1;     }      public EntryBackupProcessor getBackupProcessor() {       return IncrementingEntryProcessor.this;     }      public void processBackup( Map.Entry entry ) {       entry.setValue( (Integer) entry.getValue() + 1 );     }   } } ```  ![image](images/NoteSmall.jpg) ***NOTE***: *You should explicitly call `setValue` method of `Map.Entry` when modifying data in Entry Processor. Otherwise, Entry Processor will be accepted as read-only.*  ![image](images/NoteSmall.jpg) ***NOTE***: *An Entry Processor instance is not thread safe. If you are storing partition specific state between invocations, be sure to register this in a thread-local.  An Entry Processor instance can be used by multiple partition threads.*      "
});

documentTitles["index.html#abstract-entry-processor"] = "Abstract Entry Processor";
index.add({
    url: "index.html#abstract-entry-processor",
    title: "Abstract Entry Processor",
    body: "### Abstract Entry Processor  You can use the `AbstractEntryProcessor` class when the same processing will be performed both on the primary and backup map entries (i.e. the same logic applies to them). If you use Entry Processor, you need to apply the same logic to the backup entries separately. The `AbstractEntryProcessor` class makes this primary/backup processing easier.  The code below shows the Hazelcast `AbstractEntryProcessor` class. You can use it to create your own Abstract Entry Processor.  ```java public abstract class AbstractEntryProcessor &lt;K, V&gt;     implements EntryProcessor &lt;K, V&gt; {        private final EntryBackupProcessor &lt;K,V&gt; entryBackupProcessor;   public AbstractEntryProcessor() {     this(true);   }    public AbstractEntryProcessor(boolean applyOnBackup) {     if ( applyOnBackup ) {       entryBackupProcessor = new EntryBackupProcessorImpl();     } else {       entryBackupProcessor = null;     }   }     @Override   public abstract Object process(Map.Entry&lt;K, V&gt; entry);    @Override   public final EntryBackupProcessor &lt;K, V&gt; getBackupProcessor() {     return entryBackupProcessor;   }    private class EntryBackupProcessorImpl implements EntryBackupProcessor &lt;K,V&gt;{     @Override     public void processBackup(Map.Entry&lt;K, V&gt; entry) {       process(entry);      }   }	 } ```  In the above code, the method `getBackupProcessor` returns an `EntryBackupProcessor` instance. This means the same processing will be applied to both the primary and backup entries. If you want to apply the processing only upon the primary entries, then make the `getBackupProcessor` method return null.   ![image](images/NoteSmall.jpg) ***NOTE***: *Beware of the null issue described at the note in the [Processing Backup Entries section](#processing-backup-entries). Due to a yet unsent backup from a previous operation, an `EntryBackupProcessor` may temporarily receive `null` from `Map.Entry.getValue()` even though the value actually exists in the map. If you decide to use `AbstractEntryProcessor`, make sure your code logic is not sensitive to null values, or you may encounter `NullPointerException` during runtime.*      "
});

documentTitles["index.html#distributed-query"] = "Distributed Query";
index.add({
    url: "index.html#distributed-query",
    title: "Distributed Query",
    body: "# Distributed Query  Distributed queries access data from multiple data sources stored on either the same or different members.  Hazelcast partitions your data and spreads it across cluster of members. You can iterate over the map entries and look for certain entries (specified by predicates) you are interested in. However, this is not very efficient because you will have to bring the entire entry set and iterate locally. Instead, Hazelcast allows you to run distributed queries on your distributed map.   "
});

documentTitles["index.html#how-distributed-query-works"] = "How Distributed Query Works";
index.add({
    url: "index.html#how-distributed-query-works",
    title: "How Distributed Query Works",
    body: "## How Distributed Query Works  1. The requested predicate is sent to each member in the cluster. 2. Each member looks at its own local entries and filters them according to the predicate. At this stage, key/value pairs of the entries are deserialized and then passed to the predicate. 3. The predicate requester merges all the results coming from each member into a single set.  If you add new members to the cluster, the partition count for each member is reduced and hence the time spent by each member on iterating its entries is reduced. Therefore, the above querying approach is highly scalable. Another reason it is highly scalable is the pool of partition threads that evaluates the entries concurrently in each member. The network traffic is also reduced since only filtered data is sent to the requester.  Hazelcast offers the following APIs for distributed query purposes:  - Criteria API - Distributed SQL Query &lt;br&gt;&lt;/br&gt;   "
});

documentTitles["index.html#employee-map-query-example"] = "Employee Map Query Example";
index.add({
    url: "index.html#employee-map-query-example",
    title: "Employee Map Query Example",
    body: "### Employee Map Query Example  Assume that you have an \&quot;employee\&quot; map containing values of `Employee` objects, as coded below.  ```java import java.io.Serializable;  public class Employee implements Serializable { private String name; private int age; private boolean active; private double salary;  public Employee(String name, int age, boolean live, double price) {     this.name = name;     this.age = age;     this.active = live;     this.salary = price; }  public Employee() { }  public String getName() {     return name; }  public int getAge() {     return age; }  public double getSalary() {     return salary; }  public boolean isActive() {     return active; } } ```  Now, let's look for the employees who are active and have an age less than 30 using the aforementioned APIs (Criteria API and Distributed SQL Query). The following subsections describe each query mechanism for this example.  ![image](images/NoteSmall.jpg)***NOTE:*** *When using Portable objects, if one field of an object exists on one node but does not exist on another one, Hazelcast does not throw an unknown field exception. Instead, Hazelcast treats that predicate, which tries to perform a query on an unknown field, as an always false predicate.*         "
});

documentTitles["index.html#querying-with-criteria-api"] = "Querying with Criteria API";
index.add({
    url: "index.html#querying-with-criteria-api",
    title: "Querying with Criteria API",
    body: "### Querying with Criteria API  Criteria API is a programming interface offered by Hazelcast that is similar to the Java Persistence Query Language (JPQL). Below is the code for the [above example query](#employee-map-query-example).  ```java import com.hazelcast.core.IMap; import com.hazelcast.query.Predicate; import com.hazelcast.query.PredicateBuilder; import com.hazelcast.query.EntryObject; import com.hazelcast.config.Config;  IMap&lt;String, Employee&gt; map = hazelcastInstance.getMap( \&quot;employee\&quot; );  EntryObject e = new PredicateBuilder().getEntryObject(); Predicate predicate = e.is( \&quot;active\&quot; ).and( e.get( \&quot;age\&quot; ).lessThan( 30 ) );  Set&lt;Employee&gt; employees = map.values( predicate ); ```  In the above example code, `predicate` verifies whether the entry is active and its `age` value is less than 30. This `predicate` is applied to the `employee` map using the `map.values(predicate)` method. This method sends the predicate to all cluster members and merges the results coming from them. Since the predicate is communicated between the members, it needs to be serializable.  ![image](images/NoteSmall.jpg)***NOTE:*** *Predicates can also be applied to `keySet`, `entrySet` and `localKeySet` of Hazelcast distributed  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;map.*  "
});

documentTitles["index.html#predicates-class-operators"] = "Predicates Class Operators";
index.add({
    url: "index.html#predicates-class-operators",
    title: "Predicates Class Operators",
    body: "#### Predicates Class Operators  The `Predicates` class offered by Hazelcast includes many operators for your query requirements. Some of them are explained below.  - `equal`: Checks if the result of an expression is equal to a given value. - `notEqual`: Checks if the result of an expression is not equal to a given value. - `instanceOf`: Checks if the result of an expression has a certain type. - `like`: Checks if the result of an expression matches some string pattern. % (percentage sign) is placeholder for many characters,  (underscore) is placeholder for only one character. - `greaterThan`: Checks if the result of an expression is greater than a certain value. - `greaterEqual`: Checks if the result of an expression is greater than or equal to a certain value. - `lessThan`: Checks if the result of an expression is less than a certain value. - `lessEqual`: Checks if the result of an expression is less than or equal to a certain value. - `between`: Checks if the result of an expression is between 2 values (this is inclusive). - `in`: Checks if the result of an expression is an element of a certain collection. - `isNot`: Checks if the result of an expression is false. - `regex`: Checks if the result of an expression matches some regular expression. &lt;br&gt;&lt;/br&gt;  ***RELATED INFORMATION***   *Please see the &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/blob/master/hazelcast/src/main/java/com/hazelcast/query/Predicates.java\&quot; target=\&quot;_blank\&quot;&gt; Predicates class&lt;/a&gt; for all predicates provided.*   "
});

documentTitles["index.html#joining-predicates-with-and-or-not"] = "Joining Predicates with AND, OR, NOT";
index.add({
    url: "index.html#joining-predicates-with-and-or-not",
    title: "Joining Predicates with AND, OR, NOT",
    body: "#### Joining Predicates with AND, OR, NOT  You can join predicates using the `and`, `or` and `not` operators, as shown in the below examples.  ```java public Set&lt;Person&gt; getWithNameAndAge( String name, int age ) {   Predicate namePredicate = Predicates.equal( \&quot;name\&quot;, name );   Predicate agePredicate = Predicates.equal( \&quot;age\&quot;, age );   Predicate predicate = Predicates.and( namePredicate, agePredicate );   return personMap.values( predicate ); } ```  ```java public Set&lt;Person&gt; getWithNameOrAge( String name, int age ) {   Predicate namePredicate = Predicates.equal( \&quot;name\&quot;, name );   Predicate agePredicate = Predicates.equal( \&quot;age\&quot;, age );   Predicate predicate = Predicates.or( namePredicate, agePredicate );   return personMap.values( predicate ); } ```  ```java public Set&lt;Person&gt; getNotWithName( String name ) {   Predicate namePredicate = Predicates.equal( \&quot;name\&quot;, name );   Predicate predicate = Predicates.not( namePredicate );   return personMap.values( predicate ); } ```   "
});

documentTitles["index.html#simplifying-with-predicatebuilder"] = "Simplifying with PredicateBuilder";
index.add({
    url: "index.html#simplifying-with-predicatebuilder",
    title: "Simplifying with PredicateBuilder",
    body: "#### Simplifying with PredicateBuilder  You can simplify predicate usage with the `PredicateBuilder` class, which offers simpler predicate building. Please see the below example code which selects all people with a certain name and age.  ```java public Set&lt;Person&gt; getWithNameAndAgeSimplified( String name, int age ) {   EntryObject e = new PredicateBuilder().getEntryObject();   Predicate agePredicate = e.get( \&quot;age\&quot; ).equal( age );   Predicate predicate = e.get( \&quot;name\&quot; ).equal( name ).and( agePredicate );   return personMap.values( predicate ); } ```        "
});

documentTitles["index.html#querying-with-sql"] = "Querying with SQL";
index.add({
    url: "index.html#querying-with-sql",
    title: "Querying with SQL",
    body: "### Querying with SQL  `com.hazelcast.query.SqlPredicate` takes the regular SQL `where` clause. Here is an example:  ```java IMap&lt;Employee&gt; map = hazelcastInstance.getMap( \&quot;employee\&quot; ); Set&lt;Employee&gt; employees = map.values( new SqlPredicate( \&quot;active AND age &lt; 30\&quot; ) ); ```  "
});

documentTitles["index.html#supported-sql-syntax"] = "Supported SQL Syntax";
index.add({
    url: "index.html#supported-sql-syntax",
    title: "Supported SQL Syntax",
    body: "#### Supported SQL Syntax  **AND/OR:** `&lt;expression&gt; AND &lt;expression&gt; AND &lt;expression&gt;... `  - `active AND age&gt;30` - `active=false OR age = 45 OR name = 'Joe' ` - `active AND ( age &gt; 20 OR salary &lt; 60000 ) ` &lt;br&gt;&lt;br&gt;  **Equality:** `=, !=, &lt;, &lt;=, &gt;, &gt;=`  - `&lt;expression&gt; = value` - `age &lt;= 30` - `name = \&quot;Joe\&quot;` - `salary != 50000` &lt;br&gt;&lt;br&gt;   **BETWEEN: ** `&lt;attribute&gt; [NOT] BETWEEN &lt;value1&gt; AND &lt;value2&gt;`  - `age BETWEEN 20 AND 33 ( same as age &gt;= 20  AND age &lt;= 33 )` - `age NOT BETWEEN 30 AND 40 ( same as age &lt; 30 OR age &gt; 40 )` &lt;br&gt;&lt;br&gt;   **IN:** `&lt;attribute&gt; [NOT] IN (val1, val2,...)`  - `age IN ( 20, 30, 40 )` - `age NOT IN ( 60, 70 )` - `active AND ( salary &gt;= 50000 OR ( age NOT BETWEEN 20 AND 30 ) )` - `age IN ( 20, 30, 40 ) AND salary BETWEEN ( 50000, 80000 )` &lt;br&gt;&lt;br&gt;  **LIKE:** `&lt;attribute&gt; [NOT] LIKE 'expression'`  The `%` (percentage sign) is placeholder for multiple characters, an `_` (underscore) is placeholder for only one character.  - `name LIKE 'Jo%'` (true for 'Joe', 'Josh', 'Joseph' etc.) - `name LIKE 'Jo_'` (true for 'Joe'; false for 'Josh') - `name NOT LIKE 'Jo_'` (true for 'Josh'; false for 'Joe') - `name LIKE 'J_s%'` (true for 'Josh', 'Joseph'; false 'John', 'Joe') &lt;br&gt;&lt;br&gt;     **ILIKE:** `&lt;attribute&gt; [NOT] ILIKE ‘expression’ `  Similar to LIKE predicate but in a case-insensitive manner.  - `name ILIKE 'Jo%'` (true for 'Joe', 'joe', 'jOe','Josh','joSH', etc.) - `name ILIKE 'Jo_'` (true for 'Joe' or 'jOE'; false for 'Josh') &lt;br&gt;&lt;br&gt;    **REGEX**: `&lt;attribute&gt; [NOT] REGEX ‘expression’`   - `name REGEX  'abc-.*’` (true for 'abc-123'; false for 'abx-123')     "
});

documentTitles["index.html#filtering-with-paging-predicates"] = "Filtering with Paging Predicates";
index.add({
    url: "index.html#filtering-with-paging-predicates",
    title: "Filtering with Paging Predicates",
    body: "### Filtering with Paging Predicates  Hazelcast provides paging for defined predicates. With its `PagingPredicate` class, you can get a collection of keys, values, or entries page by page by filtering them with predicates and giving the size of the pages. Also, you can sort the entries by specifying comparators.  In the example code below:  - The `greaterEqual` predicate gets values from the \&quot;students\&quot; map. This predicate has a filter to retrieve the objects with a \&quot;age\&quot; greater than or equal to 18.  - Then a `PagingPredicate` is constructed in which the page size is 5, so there will be 5 objects in each page.  The first time the values are called creates the first page.  - It gets subsequent pages with the `nextPage()` method of `PagingPredicate` and querying the map again with the updated `PagingPredicate`.   ```java IMap&lt;Integer, Student&gt; map = hazelcastInstance.getMap( \&quot;students\&quot; ); Predicate greaterEqual = Predicates.greaterEqual( \&quot;age\&quot;, 18 ); PagingPredicate pagingPredicate = new PagingPredicate( greaterEqual, 5 ); // Retrieve the first page Collection&lt;Student&gt; values = map.values( pagingPredicate ); ... // Set up next page pagingPredicate.nextPage(); // Retrieve next page values = map.values( pagingPredicate ); ... ```  If a comparator is not specified for `PagingPredicate`, but you want to get a collection of keys or values page by page, this collection must be an instance of `Comparable` (i.e. it must implement `java.lang.Comparable`). Otherwise, the `java.lang.IllegalArgument` exception is thrown.  Starting with Hazelcast 3.6, you can also access to a specific page more easily with the help of the method `setPage()`. By this way, if you make a query for 100th page, for example, it will get all the 100 pages at once instead of reaching the 100th page one by one using the method `nextPage()`. Please note that this feature tires the memory and refer to the [PagingPredicate class](https://github.com/hazelcast/hazelcast/blob/66263987a7bf4bec20217f3c555381a51712d017/hazelcast/src/main/java/com/hazelcast/query/PagingPredicate.java).  Paging Predicate, also known as Order &amp; Limit, is not supported in Transactional Context. &lt;br&gt;&lt;/br&gt;  ***RELATED INFORMATION***  *Please see the &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/blob/master/hazelcast/src/main/java/com/hazelcast/query/Predicates.java\&quot; target=\&quot;_blank\&quot;&gt; Predicates class&lt;/a&gt; for all predicates provided.*       "
});

documentTitles["index.html#indexing-queries"] = "Indexing Queries";
index.add({
    url: "index.html#indexing-queries",
    title: "Indexing Queries",
    body: "### Indexing Queries  Hazelcast distributed queries will run on each member in parallel and will return only the results to the caller. Then, on the caller side, the results will be merged.  When a query runs on a member, Hazelcast will iterate through the entire owned entries and find the matching ones. This can be made faster by indexing the mostly queried fields, just like you would do for your database. Indexing will add overhead for each `write` operation but queries will be a lot faster. If you query your map a lot, make sure to add indexes for the most frequently queried fields. For example, if you do an `active and age &lt; 30` query, make sure you add an index for the `active` and `age` fields. The following example code does that by:  - getting the map from the Hazelcast instance, and - adding indexes to the map with the IMap `addIndex` method.  ```java IMap map = hazelcastInstance.getMap( \&quot;employees\&quot; ); // ordered, since we have ranged queries for this field map.addIndex( \&quot;age\&quot;, true ); // not ordered, because boolean field cannot have range map.addIndex( \&quot;active\&quot;, false ); ```  "
});

documentTitles["index.html#indexing-ranged-queries"] = "Indexing Ranged Queries";
index.add({
    url: "index.html#indexing-ranged-queries",
    title: "Indexing Ranged Queries",
    body: "#### Indexing Ranged Queries  `IMap.addIndex(fieldName, ordered)` is used for adding index. For each indexed field, if you have ranged queries such as `age&gt;30`, `age BETWEEN 40 AND 60`, then you should set the `ordered` parameter to `true`. Otherwise, set it to `false`.  "
});

documentTitles["index.html#configuring-imap-indexes"] = "Configuring IMap Indexes";
index.add({
    url: "index.html#configuring-imap-indexes",
    title: "Configuring IMap Indexes",
    body: "#### Configuring IMap Indexes  Also, you can define `IMap` indexes in configuration. An example is shown below.  ```xml &lt;map name=\&quot;default\&quot;&gt;   ...   &lt;indexes&gt;     &lt;index ordered=\&quot;false\&quot;&gt;name&lt;/index&gt;     &lt;index ordered=\&quot;true\&quot;&gt;age&lt;/index&gt;   &lt;/indexes&gt; &lt;/map&gt; ```  You can also define `IMap` indexes using programmatic configuration, as in the example below.  ```java mapConfig.addMapIndexConfig( new MapIndexConfig( \&quot;name\&quot;, false ) ); mapConfig.addMapIndexConfig( new MapIndexConfig( \&quot;age\&quot;, true ) ); ```  The following is the Spring declarative configuration for the same sample.  ```xml &lt;hz:map name=\&quot;default\&quot;&gt;   &lt;hz:indexes&gt;     &lt;hz:index attribute=\&quot;name\&quot;/&gt;     &lt;hz:index attribute=\&quot;age\&quot; ordered=\&quot;true\&quot;/&gt;   &lt;/hz:indexes&gt; &lt;/hz:map&gt; ``` &lt;br&gt;&lt;/br&gt; ![image](images/NoteSmall.jpg) ***NOTE:*** *Non-primitive types to be indexed should implement *`Comparable`*.*      "
});

documentTitles["index.html#configuring-query-thread-pool"] = "Configuring Query Thread Pool";
index.add({
    url: "index.html#configuring-query-thread-pool",
    title: "Configuring Query Thread Pool",
    body: "### Configuring Query Thread Pool  You can change the size of the thread pool dedicated to query operations using the `pool-size` property. Below is an example of that declarative configuration.  ```xml &lt;executor-service name=\&quot;hz:query\&quot;&gt;   &lt;pool-size&gt;100&lt;/pool-size&gt; &lt;/executor-service&gt; ```  Below is an example of the equivalent programmatic configuration.  ```java Config cfg = new Config(); cfg.getExecutorConfig(\&quot;hz:query\&quot;).setPoolSize(100); ```     "
});

documentTitles["index.html#querying-in-collections-and-arrays"] = "Querying in Collections and Arrays";
index.add({
    url: "index.html#querying-in-collections-and-arrays",
    title: "Querying in Collections and Arrays",
    body: "## Querying in Collections and Arrays  Hazelcast allows querying in collections and arrays. Querying in Collections and Arrays is compatible all Hazelcast serialisation methods, including the Portable serialisation.   Let's have a look at the following data structure expressed in pseudo-code:  ```java class Motorbike {     Wheel wheels[2]; }  class Wheel {    String name;  } ```  In order to query a single element of a collection / array, you can execute the following query:  ```java // it matches all motorbikes where the zero wheel's name is 'front-wheel' Predicate p = Predicates.equals('wheels[0].name', 'front-wheel'); Collection&lt;Motorbike&gt; result = map.values(p); ```  It is also possible to query a collection / array using the `any` semantic as shown below:  ```java // it matches all motorbikes where any wheel's name is 'front-wheel' Predicate p = Predicates.equals('wheels[any].name', 'front'); Collection&lt;Motorbike&gt; result = map.values(p); ```  The exact same query may be executed using the `SQLPredicate` as shown below:  ``` Predicate p = new SQLPredicate('wheels[any].name', 'front'); Collection&lt;Motorbike&gt; result = map.values(p); ```  `[]` notation applies to both collections and arrays.  "
});

documentTitles["index.html#indexing-in-collections-and-arrays"] = "Indexing in Collections and Arrays";
index.add({
    url: "index.html#indexing-in-collections-and-arrays",
    title: "Indexing in Collections and Arrays",
    body: "### Indexing in Collections and Arrays  You can also create an index using a query in collections / arrays.  Please note that in order to leverage the index, the attribute name used in the query has to be the same as the one used in the index definition.  Let's assume you have the following index definition:  ```xml &lt;indexes&gt;   &lt;index ordered=\&quot;false\&quot;&gt;wheels[any].name&lt;/index&gt; &lt;/indexes&gt; ```  The following query will use the index:  ```java Predicate p = Predicates.equals('wheels[any].name', 'front-wheel'); ```   The following query, however, will NOT leverage the index, since it does not use exactly the same attribute name that was used in the index:  ```java Predicates.equals('wheels[0].name', 'front-wheel') ```  In order to use the index in the above mentioned case you have to create another index as shown below:  ```xml &lt;indexes&gt;   &lt;index ordered=\&quot;false\&quot;&gt;wheels[0].name&lt;/index&gt; &lt;/indexes&gt; ```  "
});

documentTitles["index.html#corner-cases"] = "Corner cases";
index.add({
    url: "index.html#corner-cases",
    title: "Corner cases",
    body: "### Corner cases  Handling of corner cases may be a bit different than the one used in programming language, like `Java`.  Let's have a look at the following examples in order to understand the differences. To make the analysis simpler let's assume that there is only one `Motorbike` object stored in an IMap.  | Id  | Query                                                 | Data state                          | Extraction Result | Match | | --- | ----------------------------------------------------- | ----------------------------------- | ----------------- | ----- | |  1  | Predicates.equals('wheels[7].name', 'front-wheel')    | wheels.size() == 1                  | null              | No    | |  2  | Predicates.equals('wheels[7].name', null)             | wheels.size() == 1                  | null              | Yes   | |  3  | Predicates.equals('wheels[0].name', 'front-wheel')    | wheels[0].name == null              | null              | No    | |  4  | Predicates.equals('wheels[0].name', null)             | wheels[0].name == null              | null              | Yes   | |  5  | Predicates.equals('wheels[0].name', 'front-wheel')    | wheels[0] == null                   | null              | No    | |  6  | Predicates.equals('wheels[0].name', null)             | wheels[0] == null                   | null              | Yes   | |  7  | Predicates.equals('wheels[0].name', 'front-wheel')    | wheels == null                      | null              | No    | |  8  | Predicates.equals('wheels[0].name', null)             | wheels == null                      | null              | Yes   |   As you can see **no** `NullPointerException`s or `IndexOutOfBoundException`s are thrown in the extraction process even though parts of the expression are `null`.  Looking at examples 4, 6 and 8 we can also easily notice that it is impossible to distinguish which part of the expression was null. If we execute the following query `wheels[1].name = null` it may be evaluated to true because:  * `wheels` collection / array is null * `index == 1` is out of bound * `name` attribute of the wheels[1] object is `null`  In order to make the query unambiguous extra conditions would have to be added, e.g. `wheels != null AND wheels[1].name = null`     "
});

documentTitles["index.html#custom-attributes"] = "Custom Attributes";
index.add({
    url: "index.html#custom-attributes",
    title: "Custom Attributes",
    body: "## Custom Attributes  It is possible to define a custom attribute that may be referenced in predicates, queries and indexes.  A custom attribute is a \&quot;synthetic\&quot; attribute which does not exist as a `field` or a `getter` in the object that it is extracted from. Thus, it is required to define the policy how the attribute is supposed to be extracted. Currently, the only way to extract a custom attribute is to implement a `com.hazelcast.query.extractor.ValueExtractor` which encompasses the extraction logic.  Custom Attributes are compatible with all Hazelcast serialisation methods, including the Portable serialisation.  "
});

documentTitles["index.html#implementing-a-valueextractor"] = "Implementing a ValueExtractor";
index.add({
    url: "index.html#implementing-a-valueextractor",
    title: "Implementing a ValueExtractor",
    body: "### Implementing a ValueExtractor  In order to implement a `ValueExtractor` just extend the abstract `com.hazelcast.query.extractor.ValueExtractor` class and implement the `extract()` method.  The `ValueExtractor` interface looks as follows:  ```java /***  * Common superclass for all extractors.  *  * @param &lt;T&gt; type of the target object to extract the value from  * @param &lt;A&gt; type of the extraction argument object passed to the extract() method  *  */ public abstract class ValueExtractor&lt;T, A&gt; {      /**      * Extracts custom attribute's value from the given target object.      *      * @param target    object to extract the value from      * @param argument  extraction argument      * @param collector collector of the extracted value(s)      *      */     public abstract void extract(T target, A argument, ValueCollector collector);  } ```  The `extract()` method does not return any value since the extracted value is collected by the ValueCollector. In order to return multiple results from a single extraction just invoke the `ValueCollector.collect()` method multiple times, so that the collector collects all results.  Here's the `ValueCollector` contract:  ```java /**  * Enables collecting values extracted by a {@see com.hazelcast.query.extractor.ValueExtractor}  */ public abstract class ValueCollector {      /**      * Collects a value extracted by a ValueExtractor.      * &lt;p/&gt;      * More than one value may be collected in a single extraction      *      * @param value value to be collected      */     public abstract void addObject(Object value);  } ```  "
});

documentTitles["index.html#valueextractor-with-portable-serialisation"] = "ValueExtractor with Portable serialisation";
index.add({
    url: "index.html#valueextractor-with-portable-serialisation",
    title: "ValueExtractor with Portable serialisation",
    body: "#### ValueExtractor with Portable serialisation  Portable serialisation is a special kind of serialisation where there is no need to have the Class of the serialised object on the classpath in order to read its attributes. That is the reason why the target object passed to the `ValueExtractor.extract()` method will not be of the exact type that has been stored. Instead, an instance of a `com.hazelcast.query.extractor.ValueReader` will be passed. `ValueReader` enables reading the attributes of a Portable object in a generic and type-agnostic way. It contains two methods:   * `read(String path, ValueCollector&lt;T&gt; collector)` - enables passing all results directly to the `ValueCollector`.  * `read(String path, ValueCallback&lt;T&gt; callback)` - enables filtering, transforming and grouping the result of the read operation and manually passing it to the ValueCollector.  Here's the `ValueReader` contract:  ```java /**  * Enables reading the value of the attribute specified by the path  * &lt;p&gt;  * The path may be:  * - simple -&gt; it includes a single attribute only, like \&quot;name\&quot;  * - nested -&gt; it includes more then a single attribute separated with a dot (.), e.g. person.address.city  * &lt;p&gt;  * The path may also includes array cells:  * - specific quantifier, like person.leg[1] -&gt; returns the leg with index 1  * - wildcard quantifier, like person.leg[any] -&gt; returns all legs  * &lt;p&gt;  * The wildcard quantifier may be used a couple of times, like person.leg[any].finger[any] which returns all fingers  * from all legs.  */ public abstract class ValueReader {      /**      * Read the value of the attribute specified by the path and returns the result via the callback.      *      */     public abstract &lt;T&gt; void read(String path, ValueCallback&lt;T&gt; callback) throws ValueReadingException;      /**      * Read the value of the attribute specified by the path and returns the result directly to the collector.      *      */     public abstract &lt;T&gt; void read(String path, ValueCollector&lt;T&gt; collector) throws ValueReadingException;  }  ```  "
});

documentTitles["index.html#returning-multiple-values-from-a-single-extraction"] = "Returning Multiple Values from a Single Extraction";
index.add({
    url: "index.html#returning-multiple-values-from-a-single-extraction",
    title: "Returning Multiple Values from a Single Extraction",
    body: "#### Returning Multiple Values from a Single Extraction  It sounds counter-intuitive, but a single extraction may return multiple values when arrays or collections are involved. Let's have a look at the following data structure in pseudo-code:  ```java class Motorbike {     Wheel wheel[2]; }  class Wheel {     String name; } ```  Let's assume that we want to extract the names of all wheels from a single motorbike object. Each motorbike has two wheels so there are two names too. In order to return both values from the extraction operation just collect them separately using the `ValueCollector`. Collecting multiple values in such a way allows operating on these multiple values as if they were single-values during the evaluation of the predicates.  Let's assume that we registered a custom extractor with the name `wheelName` and executed the following query: `wheelName = front-wheel`.  The extraction may return up to two wheel names for each Motorbike since each Motorbike has up to two wheels. In such a case, it is enough if a single value evaluates the predicate's condition to true to return a match, so it will return a Motorbike if \&quot;any\&quot; of the wheels matches the expression.   "
});

documentTitles["index.html#extraction-arguments"] = "Extraction Arguments";
index.add({
    url: "index.html#extraction-arguments",
    title: "Extraction Arguments",
    body: "### Extraction Arguments  A `ValueExtractor` may use a custom argument if it is specified in the query. The custom argument may be passed within the square brackets located after the name of the custom attribute, e.g. `customAttribute[argument]`.  Let's have a look at the following query: `currency[incoming] == EUR` The `currency` is a custom attribute that uses a `com.test.CurrencyExtractor` for extraction.  The string `incoming` is an argument that will be passed to the `ArgumentParser` during the extraction. The parser will parse the string according to the parser's custom logic and it will return a parsed object. The parsed object may be a single object, array, collection, or any arbitrary object. It's up to the `ValueExtractor`'s implementor to understand the semantics of the parsed argument object.  For now, it's **not** possible to register a custom `ArgumentParser`, thus a default parser is used. It follows a `pass-through` semantic, which means that the string located in the square-brackets is passed `as-is` to the `ValueExtractor.extract()` method.  Please note that it is not allowed to use square brackets within the argument string.  "
});

documentTitles["index.html#configuring-a-custom-attribute-programmatically"] = "Configuring a Custom Attribute Programmatically";
index.add({
    url: "index.html#configuring-a-custom-attribute-programmatically",
    title: "Configuring a Custom Attribute Programmatically",
    body: "### Configuring a Custom Attribute Programmatically  The following snippet demonstrates how to define a custom attribute using a `ValueExtractor`.  ```java MapAttributeConfig attributeConfig = new MapAttributeConfig(); attributeConfig.setName(\&quot;currency\&quot;); attributeConfig.setExtractor(\&quot;com.bank.CurrencyExtractor\&quot;);  MapConfig mapConfig = new MapConfig(); mapConfig.addMapAttributeConfig(attributeConfig); ```  `currency` is the name of the custom attribute that will be extracted using the `CurrencyExtractor` class.  Please, bear in mind that an extractor may not be added after the map has been instantiated. All extractors have to be defined upfront in the map's initial configuration.  "
});

documentTitles["index.html#configuring-a-custom-attribute-declaratively"] = "Configuring a Custom Attribute Declaratively";
index.add({
    url: "index.html#configuring-a-custom-attribute-declaratively",
    title: "Configuring a Custom Attribute Declaratively",
    body: "### Configuring a Custom Attribute Declaratively  The following snippet demonstrates how to define a custom attribute in the Hazelcast XML Configuration.  ```xml &lt;map name=\&quot;trades\&quot;&gt;    &lt;attributes&gt;        &lt;attribute extractor=\&quot;com.bank.CurrencyExtractor\&quot;&gt;currency&lt;/attribute&gt;    &lt;/attributes&gt; &lt;/map&gt; ```  Analogously to the example above, `currency` is the name of the custom attribute that will be extracted using the `CurrencyExtractor` class.  Please note that an attribute name may begin with an ascii letter [A-Za-z] or digit [0-9] and may contain ascii letters [A-Za-z], digits [0-9] or underscores later on.  "
});

documentTitles["index.html#indexing-custom-attributes"] = "Indexing Custom Attributes";
index.add({
    url: "index.html#indexing-custom-attributes",
    title: "Indexing Custom Attributes",
    body: "### Indexing Custom Attributes  You can create an index using a custom attribute.  The name of the attribute used in the index definition has to match the one used in the attributes configuration.  It is allowed to define indexes with extraction arguments, as shown in the example below:  ```xml &lt;indexes&gt;     &lt;!-- custom attribute without an extraction argument --&gt;     &lt;index ordered=\&quot;true\&quot;&gt;currency&lt;/index&gt;      &lt;!-- custom attribute using an extraction argument --&gt;     &lt;index ordered=\&quot;true\&quot;&gt;currency[EUR]&lt;/index&gt; &lt;/indexes&gt; ```      "
});

documentTitles["index.html#mapreduce"] = "MapReduce";
index.add({
    url: "index.html#mapreduce",
    title: "MapReduce",
    body: "## MapReduce  You have likely heard about MapReduce ever since Google released its &lt;a href=\&quot;http://research.google.com/archive/mapreduce.html\&quot; target=\&quot;_blank\&quot;&gt;research white paper&lt;/a&gt;  on this concept. With Hadoop as the most common and well known implementation, MapReduce gained a broad audience and made it into all kinds of business applications dominated by data warehouses.  MapReduce is a software framework for processing large amounts of data in a distributed way. Therefore, the processing is normally spread over several machines. The basic idea behind MapReduce is to map your source data into a collection of key-value pairs and reducing those pairs, grouped by key, in a second step towards the final result.  The main idea can be summarized with the following steps.    1. Read the source data.   2. Map the data to one or multiple key-value pairs.   3. Reduce all pairs with the same key.  **Use Cases**  The best known examples for MapReduce algorithms are text processing tools, such as counting the word frequency in large texts or websites. Apart from that, there are more interesting examples of use cases listed below.   - Log Analysis  - Data Querying  - Aggregation and summing  - Distributed Sort  - ETL (Extract Transform Load)  - Credit and Risk management  - Fraud detection  - and more.         "
});

documentTitles["index.html#understanding-mapreduce"] = "Understanding MapReduce";
index.add({
    url: "index.html#understanding-mapreduce",
    title: "Understanding MapReduce",
    body: "### Understanding MapReduce  This section will give a deeper insight on the MapReduce pattern and helps you understand the semantics behind the different MapReduce phases and how they are implemented in Hazelcast.  In addition to this, the following sections compare Hadoop and Hazelcast MapReduce implementations to help adopters with Hadoop backgrounds to quickly get familiar with Hazelcast MapReduce.  "
});

documentTitles["index.html#mapreduce-workflow-example"] = "MapReduce Workflow Example";
index.add({
    url: "index.html#mapreduce-workflow-example",
    title: "MapReduce Workflow Example",
    body: "#### MapReduce Workflow Example  The flowchart below demonstrates the basic workflow of the word count example (distributed occurrences analysis) mentioned in the [MapReduce section](#mapreduce) introduction. From left to right, it iterates over all the entries of a data structure (in this case an IMap). In the mapping phase, it splits the sentence into single words and emits a key-value pair per word: the word is the key, 1 is the value. In the next phase, values are collected (grouped) and transported to their corresponding reducers, where they are eventually reduced to a single key-value pair, the value being the number of occurrences of the word. At the last step, the different reducer results are grouped up to the final result and returned to the requester.  ![MapReduce Workflow](images/Workflow.png)  In pseudo code, the corresponding map and reduce function would look like the following. A Hazelcast code example will be shown in the next section.  ```plain map( key:String, document:String ):Void -&gt;   for each w:word in document:     emit( w, 1 )  reduce( word:String, counts:List[Int] ):Int -&gt;   return sum( counts ) ```  "
});

documentTitles["index.html#mapreduce-phases"] = "MapReduce Phases";
index.add({
    url: "index.html#mapreduce-phases",
    title: "MapReduce Phases",
    body: "#### MapReduce Phases  As seen in the workflow example, a MapReduce process consists of multiple phases. The original MapReduce pattern describes two phases (map, reduce) and one optional phase (combine). In Hazelcast, these phases are either only existing virtually to explain the data flow or are executed in parallel during the real operation while the general idea is still persisting.  (K x V)\* -&gt; (L x W)*  [(k*1*, v*1*), ..., (k*n*, v*n*)] -&gt; [(l*1*, w*1*), ..., (l*m*, w*m*)]  **Mapping Phase**  The mapping phase iterates all key-value pairs of any kind of legal input source. The mapper then analyzes the input pairs and emits zero or more new key-value pairs.  K x V -&gt; (L x W)*  (k, v) -&gt; [(l*1*, w*1*), ..., (l*n*, w*n*)]  **Combine Phase**  In the combine phase, multiple key-value pairs with the same key are collected and combined to an intermediate result before being send to the reducers. **Combine phase is also optional in Hazelcast, but is highly recommended to lower the traffic.**  In terms of the word count example, this can be explained using the sentences \&quot;Saturn is a planet but the Earth is a planet, too\&quot;. As shown above, we would send two key-value pairs (planet, 1). The registered combiner now collects those two pairs and combines them into an intermediate result of (planet, 2). Instead of two key-value pairs sent through the wire, there is now only one for the key \&quot;planet\&quot;.  The pseudo code for a combiner is similar to the reducer.  ```text combine( word:String, counts:List[Int] ):Void -&gt;   emit( word, sum( counts ) ) ```  **Grouping / Shuffling Phase**  The grouping or shuffling phase only exists virtually in Hazelcast since it is not a real phase; emitted key-value pairs with the same key are always transferred to the same reducer in the same job. They are grouped together, which is equivalent to the shuffling phase.  **Reducing Phase**  In the reducing phase, the collected intermediate key-value pairs are reduced by their keys to build the final by-key result. This value can be a sum of all the emitted values of the same key, an average value, or something completely different, depending on the use case.  Here is a reduced representation of this phase.  L x W\* -&gt; X*  (l, [w*1*, ..., w*n*]) -&gt; [x*1*, ..., x*n*]  **Producing the Final Result**  This is not a real MapReduce phase, but it is the final step in Hazelcast after all reducers are notified that reducing has finished. The original job initiator then requests all reduced results and builds the final result.   "
});

documentTitles["index.html#additional-mapreduce-resources"] = "Additional MapReduce Resources";
index.add({
    url: "index.html#additional-mapreduce-resources",
    title: "Additional MapReduce Resources",
    body: "#### Additional MapReduce Resources  The Internet is full of useful resources to find deeper information on MapReduce. Below is a short collection of more introduction material. In addition, there are books written about all kinds of MapReduce patterns and how to write a MapReduce function for your use case. To name them all is out of scope of this documentation.   - &lt;a href=\&quot;http://research.google.com/archive/mapreduce.html\&quot; target=\&quot;_blank\&quot;&gt;http://research.google.com/archive/mapreduce.html&lt;/a&gt;  - &lt;a href=\&quot;http://en.wikipedia.org/wiki/MapReduce\&quot; target=\&quot;_blank\&quot;&gt;http://en.wikipedia.org/wiki/MapReduce&lt;/a&gt;  - &lt;a href=\&quot;http://hci.stanford.edu/courses/cs448g/a2/files/map_reduce_tutorial.pdf\&quot; target=\&quot;_blank\&quot;&gt;http://hci.stanford.edu/courses/cs448g/a2/files/map_reduce_tutorial.pdf&lt;/a&gt;  - &lt;a href=\&quot;http://ksat.me/map-reduce-a-really-simple-introduction-kloudo/\&quot; target=\&quot;_blank\&quot;&gt;http://ksat.me/map-reduce-a-really-simple-introduction-kloudo/&lt;/a&gt;  - &lt;a href=\&quot;http://www.slideshare.net/franebandov/an-introduction-to-mapreduce-6789635\&quot; target=\&quot;_blank\&quot;&gt;http://www.slideshare.net/franebandov/an-introduction-to-mapreduce-6789635&lt;/a&gt;        "
});

documentTitles["index.html#using-the-mapreduce-api"] = "Using the MapReduce API";
index.add({
    url: "index.html#using-the-mapreduce-api",
    title: "Using the MapReduce API",
    body: "### Using the MapReduce API  This section explains the basics of the Hazelcast MapReduce framework. While walking through the different API classes, we will build the [word count example that was discussed earlier](#understanding-mapreduce) and create it step by step.  The Hazelcast API for MapReduce operations consists of a fluent DSL-like configuration syntax to build and submit jobs. `JobTracker` is the basic entry point to all MapReduce operations and is retrieved from `com.hazelcast.core.HazelcastInstance` by calling `getJobTracker` and supplying the name of the required `JobTracker` configuration. The configuration for `JobTracker`s will be discussed later, for now we focus on the API itself. In addition, the complete submission part of the API is built to support a fully reactive way of programming.  To give an easy introduction to people used to Hadoop, we created the class names to be as familiar as possible to their counterparts on Hadoop. That means while most users will recognize a lot of similar sounding classes, the way to configure the jobs is more fluent due to the DSL-like styled API.  While building the example, we will go through as many options as possible, e.g. we create a specialized `JobTracker` configuration (at the end). Special `JobTracker` configuration is not required, because for all other Hazelcast features you can use \&quot;default\&quot; as the configuration name. However, special configurations offer better options to predict behavior of the framework execution.  The full example is available &lt;a href=\&quot;http://github.com/noctarius/hz-map-reduce\&quot; target=\&quot;_blank\&quot;&gt;here&lt;/a&gt; as a ready to run Maven project.  "
});

documentTitles["index.html#retrieving-a-jobtracker-instance"] = "Retrieving a JobTracker Instance";
index.add({
    url: "index.html#retrieving-a-jobtracker-instance",
    title: "Retrieving a JobTracker Instance",
    body: "#### Retrieving a JobTracker Instance  `JobTracker` creates Job instances, whereas every instance of `com.hazelcast.mapreduce.Job` defines a single MapReduce configuration. The same Job can be submitted multiple times, no matter if it is executed in parallel or after the previous execution is finished.  ![image](images/NoteSmall.jpg) ***NOTE:*** *After retrieving the `JobTracker`, be aware that it should only be used with data structures derived from the same HazelcastInstance. Otherwise, you can get unexpected behavior.*  To retrieve a `JobTracker` from Hazelcast, we will start by using the \&quot;default\&quot; configuration for convenience reasons to show the basic way.  ```java import com.hazelcast.mapreduce.*;  JobTracker jobTracker = hazelcastInstance.getJobTracker( \&quot;default\&quot; ); ```  `JobTracker` is retrieved using the same kind of entry point as most other Hazelcast features. After building the cluster connection, you use the created HazelcastInstance to request the configured (or default) `JobTracker` from Hazelcast.  The next step will be to create a new `Job` and configure it to execute our first MapReduce request against cluster data.  "
});

documentTitles["index.html#creating-a-job"] = "Creating a Job";
index.add({
    url: "index.html#creating-a-job",
    title: "Creating a Job",
    body: "#### Creating a Job  As mentioned in [Retrieving a JobTracker Instance](#retrieving-a-jobtracker-instance), you create a Job using the retrieved `JobTracker` instance. A Job defines exactly one configuration of a MapReduce task. Mapper, combiner and reducers will be defined per job. However, since the Job instance is only a configuration, it can be submitted multiple times, no matter if executions happen in parallel or one after the other.  A submitted job is always identified using a unique combination of the `JobTracker`'s name and a jobId generated on submit-time. The way to retrieve the jobId will be shown in one of the later sections.  To create a Job, a second class `com.hazelcast.mapreduce.KeyValueSource` is necessary. We will have a deeper look at the `KeyValueSource` class in the next section. `KeyValueSource` is used to wrap any kind of data or data structure into a well defined set of key-value pairs.  The example code below is a direct follow up of the example in [Retrieving a JobTracker Instance](#retrieving-a-jobTracker-instance). The example reuses the already created HazelcastInstance and `JobTracker` instances.  The example starts by retrieving an instance of our data map, and then it creates the Job instance. Implementations used to configure the Job will be discussed while walking further through the API documentation.  ![image](images/NoteSmall.jpg) ***NOTE:*** *Since the Job class is highly dependent upon generics to support type safety, the generics change over time and may not be assignment compatible to old variable types. To make use of the full potential of the fluent API, we recommend you use fluent method chaining as shown in this example to prevent the need for too many variables.*  ```java IMap&lt;String, String&gt; map = hazelcastInstance.getMap( \&quot;articles\&quot; ); KeyValueSource&lt;String, String&gt; source = KeyValueSource.fromMap( map ); Job&lt;String, String&gt; job = jobTracker.newJob( source );  ICompletableFuture&lt;Map&lt;String, Long&gt;&gt; future = job     .mapper( new TokenizerMapper() )     .combiner( new WordCountCombinerFactory() )     .reducer( new WordCountReducerFactory() )     .submit();  // Attach a callback listener future.andThen( buildCallback() );  // Wait and retrieve the result Map&lt;String, Long&gt; result = future.get(); ```  As seen above, we create the Job instance and define a mapper, combiner, reducer. Then we submit the request to the cluster. The `submit` method returns an ICompletableFuture that can be used to attach our callbacks or to wait for the result to be processed in a blocking fashion.  There are more options available for job configurations, such as defining a general chunk size or on what keys the operation will operate. For more information, please refer to the [Hazelcast source code for Job.java](https://github.com/hazelcast/hazelcast/blob/master/hazelcast/src/main/java/com/hazelcast/mapreduce/Job.java).  "
});

documentTitles["index.html#creating-key-value-input-sources-with-keyvaluesource"] = "Creating Key-Value Input Sources with KeyValueSource";
index.add({
    url: "index.html#creating-key-value-input-sources-with-keyvaluesource",
    title: "Creating Key-Value Input Sources with KeyValueSource",
    body: "#### Creating Key-Value Input Sources with KeyValueSource  `KeyValueSource` can either wrap Hazelcast data structures (like IMap, MultiMap, IList, ISet) into key-value pair input sources, or build your own custom key-value input source. The latter option makes it possible to feed Hazelcast MapReduce with all kinds of data, such as just-in-time downloaded web page contents or data files. People familiar with Hadoop will recognize similarities with the Input class.  You can imagine a `KeyValueSource` as a bigger `java.util.Iterator` implementation. Whereas most methods are required to be implemented, the `getAllKeys` method is optional to implement. If implementation is able to gather all keys upfront, it should be implemented and `isAllKeysSupported` must return `true`. That way, Job configured KeyPredicates are able to evaluate keys upfront before sending them to the cluster. Otherwise, they are serialized and transferred as well, to be evaluated at execution time.  As shown in the example above, the abstract `KeyValueSource` class provides a number of static methods to easily wrap Hazelcast data structures into `KeyValueSource` implementations already provided by Hazelcast. The data structures' generics are inherited into the resulting `KeyValueSource` instance. For data structures like IList or ISet, the key type is always String. While mapping, the key is the data structure's name whereas the value type and value itself are inherited from the IList or ISet itself.  ```java // KeyValueSource from com.hazelcast.core.IMap IMap&lt;String, String&gt; map = hazelcastInstance.getMap( \&quot;my-map\&quot; ); KeyValueSource&lt;String, String&gt; source = KeyValueSource.fromMap( map ); ```  ```java // KeyValueSource from com.hazelcast.core.MultiMap MultiMap&lt;String, String&gt; multiMap = hazelcastInstance.getMultiMap( \&quot;my-multimap\&quot; ); KeyValueSource&lt;String, String&gt; source = KeyValueSource.fromMultiMap( multiMap ); ```  ```java // KeyValueSource from com.hazelcast.core.IList IList&lt;String&gt; list = hazelcastInstance.getList( \&quot;my-list\&quot; ); KeyValueSource&lt;String, String&gt; source = KeyValueSource.fromList( list ); ```  ```java // KeyValueSource from com.hazelcast.core.ISet ISet&lt;String&gt; set = hazelcastInstance.getSet( \&quot;my-set\&quot; ); KeyValueSource&lt;String, String&gt; source = KeyValueSource.fromSet( set ); ```  **PartitionIdAware**  The `com.hazelcast.mapreduce.PartitionIdAware` interface can be implemented by the `KeyValueSource` implementation if the underlying data set is aware of the Hazelcast partitioning schema (as it is for all internal data structures). If this interface is implemented, the same `KeyValueSource` instance is reused multiple times for all partitions on the cluster member. As a consequence, the `close` and `open` methods are also executed multiple times but once per partitionId.  "
});

documentTitles["index.html#implementing-mapping-logic-with-mapper"] = "Implementing Mapping Logic with Mapper";
index.add({
    url: "index.html#implementing-mapping-logic-with-mapper",
    title: "Implementing Mapping Logic with Mapper",
    body: "#### Implementing Mapping Logic with Mapper  Using the `Mapper` interface, you will implement the mapping logic. Mappers can transform, split, calculate, and aggregate data from data sources. In Hazelcast, you can also integrate data from more than the KeyValueSource data source by implementing `com.hazelcast.core.HazelcastInstanceAware` and requesting additional maps, multimaps, list, and/or sets.  The mappers `map` function is called once per available entry in the data structure. If you work on distributed data structures that operate in a partition based fashion, then multiple mappers work in parallel on the different cluster members, on the members' assigned partitions. Mappers then prepare and maybe transform the input key-value pair and emit zero or more key-value pairs for reducing phase.  For our word count example, we retrieve an input document (a text document) and we transform it by splitting the text into the available words. After that, as discussed in the [pseudo code](#mapreduce-workflow-example), we emit every single word with a key-value pair with the word as the key and 1 as the value.  A common implementation of that `Mapper` might look like the following example:  ```java public class TokenizerMapper implements Mapper&lt;String, String, String, Long&gt; {   private static final Long ONE = Long.valueOf( 1L );    @Override   public void map(String key, String document, Context&lt;String, Long&gt; context) {     StringTokenizer tokenizer = new StringTokenizer( document.toLowerCase() );     while ( tokenizer.hasMoreTokens() ) {       context.emit( tokenizer.nextToken(), ONE );     }   } } ```  The code splits the mapped texts into their tokens, iterates over the tokenizer as long as there are more tokens, and emits a pair per word. Note that we're not yet collecting multiple occurrences of the same word, we just fire every word on its own.  **LifecycleMapper / LifecycleMapperAdapter**  The LifecycleMapper interface or its adapter class LifecycleMapperAdapter can be used to make the Mapper implementation lifecycle aware. That means it will be notified when mapping of a partition or set of data begins and when the last entry was mapped.  Only special algorithms might need those additional lifecycle events to prepare, clean up, or emit additional values.  "
});

documentTitles["index.html#minimizing-cluster-traffic-with-combiner"] = "Minimizing Cluster Traffic with Combiner";
index.add({
    url: "index.html#minimizing-cluster-traffic-with-combiner",
    title: "Minimizing Cluster Traffic with Combiner",
    body: "#### Minimizing Cluster Traffic with Combiner  As stated in the introduction, a Combiner is used to minimize traffic between the different cluster members when transmitting mapped values from mappers to the reducers. It does this by aggregating multiple values for the same emitted key. This is a fully optional operation, but using it is highly recommended.  Combiners can be seen as an intermediate reducer. The calculated value is always assigned back to the key for which the combiner initially was created. Since combiners are created per emitted key, the Combiner implementation itself is not defined in the jobs configuration; instead, a CombinerFactory is created that is able to create the expected Combiner instance.  Because Hazelcast MapReduce is executing mapping and reducing phase in parallel, the Combiner implementation must be able to deal with chunked data. Therefore, you must reset its internal state whenever you call `finalizeChunk`. Calling the `finalizeChunk` method creates a chunk of intermediate data to be grouped (shuffled) and sent to the reducers.  Combiners can override `beginCombine` and `finalizeCombine` to perform preparation or cleanup work.  For our word count example, we are going to have a simple CombinerFactory and Combiner implementation similar to the following example.  ```java public class WordCountCombinerFactory     implements CombinerFactory&lt;String, Long, Long&gt; {    @Override   public Combiner&lt;Long, Long&gt; newCombiner( String key ) {     return new WordCountCombiner();   }    private class WordCountCombiner extends Combiner&lt;Long, Long&gt; {     private long sum = 0;      @Override     public void combine( Long value ) {       sum++;     }      @Override     public Long finalizeChunk() {       return sum;     }              @Override     public void reset() {       sum = 0;     }   } } ```  The Combiner must be able to return its current value as a chunk and reset the internal state by setting `sum` back to 0. Since combiners are always called from a single thread, no synchronization or volatility of the variables is necessary.  "
});

documentTitles["index.html#doing-algorithm-work-with-reducer"] = "Doing Algorithm Work with Reducer";
index.add({
    url: "index.html#doing-algorithm-work-with-reducer",
    title: "Doing Algorithm Work with Reducer",
    body: "#### Doing Algorithm Work with Reducer  Reducers do the last bit of algorithm work. This can be aggregating values, calculating averages, or any other work that is expected from the algorithm.  Since values arrive in chunks, the `reduce` method is called multiple times for every emitted value of the creation key. This also can happen multiple times per chunk if no Combiner implementation was configured for a job configuration.  Different from combiners, a reducers `finalizeReduce` method is only called once per reducer (which means once per key). Therefore, a reducer does not need to reset its internal state at any time.  Reducers can override `beginReduce` to perform preparation work.  For our word count example, the implementation will look similar to the following code example.  ```java public class WordCountReducerFactory implements ReducerFactory&lt;String, Long, Long&gt; {    @Override   public Reducer&lt;Long, Long&gt; newReducer( String key ) {     return new WordCountReducer();   }    private class WordCountReducer extends Reducer&lt;Long, Long&gt; {     private volatile long sum = 0;      @Override     public void reduce( Long value ) {       sum += value.longValue();     }      @Override     public Long finalizeReduce() {       return sum;     }   } } ```  "
});

documentTitles["index.html#reducers-switching-threads"] = "Reducers Switching Threads";
index.add({
    url: "index.html#reducers-switching-threads",
    title: "Reducers Switching Threads",
    body: "##### Reducers Switching Threads  Different from combiners, reducers tend to switch threads if running out of data to prevent blocking threads from the `JobTracker` configuration. They are rescheduled at a later point when new data to be processed arrives but are unlikely to be executed on the same thread as before. As of Hazelcast version 3.3.3 the guarantee for memory visibility on the new thread is ensured by the framework. This means the previous requirement for making fields volatile is dropped.  "
});

documentTitles["index.html#modifying-the-result-with-collator"] = "Modifying the Result with Collator";
index.add({
    url: "index.html#modifying-the-result-with-collator",
    title: "Modifying the Result with Collator",
    body: "#### Modifying the Result with Collator  A Collator is an optional operation that is executed on the job emitting member and is able to modify the finally reduced result before returned to the user's codebase. Only special use cases are likely to use collators.  For an imaginary use case, we might want to know how many words were all over in the documents we analyzed. For this case, a Collator implementation can be given to the `submit` method of the Job instance.  A collator would look like the following snippet:  ```java public class WordCountCollator implements Collator&lt;Map.Entry&lt;String, Long&gt;, Long&gt; {    @Override   public Long collate( Iterable&lt;Map.Entry&lt;String, Long&gt;&gt; values ) {     long sum = 0;      for ( Map.Entry&lt;String, Long&gt; entry : values ) {       sum += entry.getValue().longValue();     }     return sum;   } } ```  The definition of the input type is a bit strange, but because Combiner and Reducer implementations are optional, the input type heavily depends on the state of the data. As stated above, collators are non-typical use cases and the generics of the framework always help in finding the correct signature.  "
});

documentTitles["index.html#preselecting-keys-with-keypredicate"] = "Preselecting Keys with KeyPredicate";
index.add({
    url: "index.html#preselecting-keys-with-keypredicate",
    title: "Preselecting Keys with KeyPredicate",
    body: "#### Preselecting Keys with KeyPredicate  You can use `KeyPredicate` to pre-select whether or not a key should be selected for mapping in the mapping phase. If the `KeyValueSource` implementation is able to know all keys prior to execution, the keys are filtered before the operations are divided among the different cluster members.  A `KeyPredicate` can also be used to select only a special range of data (e.g. a time-frame) or similar use cases.  A basic `KeyPredicate` implementation that only maps keys containing the word \&quot;hazelcast\&quot; might look like the following code example:  ```java public class WordCountKeyPredicate implements KeyPredicate&lt;String&gt; {    @Override   public boolean evaluate( String s ) {     return s != null &amp;&amp; s.toLowerCase().contains( \&quot;hazelcast\&quot; );   } } ```  "
});

documentTitles["index.html#job-monitoring-with-trackablejob"] = "Job Monitoring with TrackableJob";
index.add({
    url: "index.html#job-monitoring-with-trackablejob",
    title: "Job Monitoring with TrackableJob",
    body: "#### Job Monitoring with TrackableJob  You can retrieve a `TrackableJob` instance after submitting a job. It is requested from the `JobTracker` using the unique jobId (per `JobTracker`). You can use it get runtime statistics of the job. The information available is limited to the number of processed (mapped) records and the processing state of the different partitions or members (if `KeyValueSource` is not PartitionIdAware).  To retrieve the jobId after submission of the job, use `com.hazelcast.mapreduce.JobCompletableFuture` instead of the `com.hazelcast.core.ICompletableFuture` as the variable type for the returned future.  The example code below gives a quick introduction on how to retrieve the instance and the runtime data. For more information, please have a look at the Javadoc corresponding your running Hazelcast version.  The example performs the following steps to get the job instance.  - It gets the map with the hazelcastInstance `getMap` method. - From the map, it gets the source with the KeyValueSource `fromMap` method. - From the source, it gets a job with the JobTracker `newJob` method.  ```java IMap&lt;String, String&gt; map = hazelcastInstance.getMap( \&quot;articles\&quot; ); KeyValueSource&lt;String, String&gt; source = KeyValueSource.fromMap( map ); Job&lt;String, String&gt; job = jobTracker.newJob( source );  JobCompletableFuture&lt;Map&lt;String, Long&gt;&gt; future = job     .mapper( new TokenizerMapper() )     .combiner( new WordCountCombinerFactory() )     .reducer( new WordCountReducerFactory() )     .submit();  String jobId = future.getJobId(); TrackableJob trackableJob = jobTracker.getTrackableJob(jobId);  JobProcessInformation stats = trackableJob.getJobProcessInformation(); int processedRecords = stats.getProcessedRecords(); log( \&quot;ProcessedRecords: \&quot; + processedRecords );  JobPartitionState[] partitionStates = stats.getPartitionStates(); for ( JobPartitionState partitionState : partitionStates ) {   log( \&quot;PartitionOwner: \&quot; + partitionState.getOwner()           + \&quot;, Processing state: \&quot; + partitionState.getState().name() ); }  ```   ![image](images/NoteSmall.jpg) ***NOTE:*** *Caching of the JobProcessInformation does not work on Java native clients since current values are retrieved while retrieving the instance to minimize traffic between executing member and client.*   "
});

documentTitles["index.html#configuring-jobtracker"] = "Configuring JobTracker";
index.add({
    url: "index.html#configuring-jobtracker",
    title: "Configuring JobTracker",
    body: "#### Configuring JobTracker  You configure `JobTracker` configuration to set up behavior of the Hazelcast MapReduce framework.  Every `JobTracker` is capable of running multiple MapReduce jobs at once; one configuration is meant as a shared resource for all jobs created by the same `JobTracker`. The configuration gives full control over the expected load behavior and thread counts to be used.  The following snippet shows a typical `JobTracker` configuration. The configuration properties are discussed below the example.  ```xml &lt;jobtracker name=\&quot;default\&quot;&gt;   &lt;max-thread-size&gt;0&lt;/max-thread-size&gt;   &lt;!-- Queue size 0 means number of partitions * 2 --&gt;   &lt;queue-size&gt;0&lt;/queue-size&gt;   &lt;retry-count&gt;0&lt;/retry-count&gt;   &lt;chunk-size&gt;1000&lt;/chunk-size&gt;   &lt;communicate-stats&gt;true&lt;/communicate-stats&gt;   &lt;topology-changed-strategy&gt;CANCEL_RUNNING_OPERATION&lt;/topology-changed-strategy&gt; &lt;/jobtracker&gt; ```  - **max-thread-size:** Maximum thread pool size of the JobTracker. - **queue-size:** Maximum number of tasks that are able to wait to be processed. A value of 0 means an unbounded queue. Very low numbers can prevent successful execution since job might not be correctly scheduled or intermediate chunks might be lost. - **retry-count:** Currently not used. Reserved for later use where the framework will automatically try to restart / retry operations from an available save point. - **chunk-size:** Number of emitted values before a chunk is sent to the reducers. If your emitted values are big or you want to better balance your work, you might want to change this to a lower or higher value. A value of 0 means immediate transmission, but remember that low values mean higher traffic costs. A very high value might cause an OutOfMemoryError to occur if the emitted values do not fit into heap memory before being sent to the reducers. To prevent this, you might want to use a combiner to pre-reduce values on mapping members. - **communicate-stats:** Specifies whether the statistics (for example, statistics about processed entries) are transmitted to the job emitter. This can show progress to a user inside of an UI system, but it produces additional traffic. If not needed, you might want to deactivate this. - **topology-changed-strategy:** Specifies how the MapReduce framework reacts on topology changes while executing a job. Currently, only CANCEL_RUNNING_OPERATION is fully supported, which throws an exception to the job emitter (will throw a `com.hazelcast.mapreduce.TopologyChangedException`).         "
});

documentTitles["index.html#hazelcast-mapreduce-architecture"] = "Hazelcast MapReduce Architecture";
index.add({
    url: "index.html#hazelcast-mapreduce-architecture",
    title: "Hazelcast MapReduce Architecture",
    body: "### Hazelcast MapReduce Architecture  This section explains some of the internals of the MapReduce framework. This is more advanced information. If you're not interested in how it works internally, you might want to skip this section.  "
});

documentTitles["index.html#node-interoperation-example"] = "Node Interoperation Example";
index.add({
    url: "index.html#node-interoperation-example",
    title: "Node Interoperation Example",
    body: "#### Node Interoperation Example  To understand the following technical internals, we first have a short look at what happens in terms of an example workflow.  As a simple example, think of an `IMap&lt;String, Integer&gt;` and emitted keys having the same types. Imagine you have a three node cluster (a cluster with three members) and you initiate the MapReduce job on the first node. After you requested the JobTracker from your running / connected Hazelcast, we submit the task and retrieve the ICompletableFuture which gives us a chance to wait for the result to be calculated or to add a callback (and being more reactive).  The example expects that the chunk size is 0 or 1, so an emitted value is directly sent to the reducers. Internally, the job is prepared, started, and executed on all nodes as shown below. The first node acts as the job owner (job emitter).  ```plain Node1 starts MapReduce job Node1 emits key=Foo, value=1 Node1 does PartitionService::getKeyOwner(Foo) =&gt; results in Node3  Node2 emits key=Foo, value=14 Node2 asks jobOwner (Node1) for keyOwner of Foo =&gt; results in Node3  Node1 sends chunk for key=Foo to Node3  Node3 receives chunk for key=Foo and looks if there is already a Reducer,       if not creates one for key=Foo Node3 processes chunk for key=Foo  Node2 sends chunk for key=Foo to Node3  Node3 receives chunk for key=Foo and looks if there is already a Reducer and uses       the previous one Node3 processes chunk for key=Foo  Node1 send LastChunk information to Node3 because processing local values finished  Node2 emits key=Foo, value=27 Node2 has cached keyOwner of Foo =&gt; results in Node3 Node2 sends chunk for key=Foo to Node3  Node3 receives chunk for key=Foo and looks if there is already a Reducer and uses       the previous one Node3 processes chunk for key=Foo  Node2 send LastChunk information to Node3 because processing local values finished  Node3 finishes reducing for key=Foo  Node1 registers its local partitions are processed Node2 registers its local partitions are processed  Node1 sees all partitions processed and requests reducing from all nodes  Node1 merges all reduced results together in a final structure and returns it ```  The flow is quite complex but extremely powerful since everything is executed in parallel. Reducers do not wait until all values are emitted, but they immediately begin to reduce (when first chunk for an emitted key arrives).  "
});

documentTitles["index.html#internal-mapreduce-packages"] = "Internal MapReduce Packages";
index.add({
    url: "index.html#internal-mapreduce-packages",
    title: "Internal MapReduce Packages",
    body: "#### Internal MapReduce Packages  Beginning with the package level, there is one basic package: `com.hazelcast.mapreduce`. This includes the external API and the **impl** package which itself contains the internal implementation.   - The **impl** package contains all the default `KeyValueSource` implementations and abstract base and support classes for the exposed API.  - The **client** package contains all classes that are needed on client and member side when a client offers a MapReduce job.  - The **notification** package contains all \&quot;notification\&quot; or event classes that notify other members about progress on operations.  - The **operation** package contains all operations that are used by the workers or job owner to coordinate work and sync partition or reducer processing.  - The **task** package contains all classes that execute the actual MapReduce operation. It features the supervisor, mapping phase implementation and mapping and reducing tasks.  "
});

documentTitles["index.html#mapreduce-job-walk-through"] = "MapReduce Job Walk-Through";
index.add({
    url: "index.html#mapreduce-job-walk-through",
    title: "MapReduce Job Walk-Through",
    body: "#### MapReduce Job Walk-Through  And now to the technical walk-through: a MapReduce Job is always retrieved from a named `JobTracker`, which is implemented in `NodeJobTracker` (extends `AbstractJobTracker`) and is configured using the configuration DSL. All of the internal implementation is completely ICompletableFuture-driven and mostly non-blocking in design.  On submit, the Job creates a unique UUID which afterwards acts as a jobId and is combined with the JobTracker's name to be uniquely identifiable inside the cluster. Then, the preparation is sent around the cluster and every member prepares its execution by creating a JobSupervisor, MapCombineTask, and ReducerTask. The job-emitting JobSupervisor gains special capabilities to synchronize and control JobSupervisors on other nodes for the same job.  If preparation is finished on all nodes, the job itself is started by executing a StartProcessingJobOperation on every node. This initiates a MappingPhase implementation (defaults to KeyValueSourceMappingPhase) and starts the actual mapping on the nodes.  The mapping process is currently a single threaded operation per node, but will be extended to run in parallel on multiple partitions (configurable per Job) in future versions. The Mapper is now called on every available value on the partition and eventually emits values. For every emitted value, either a configured CombinerFactory is called to create a Combiner or a cached one is used (or the default CollectingCombinerFactory is used to create Combiners). When the chunk limit is reached on a node, a IntermediateChunkNotification is prepared by collecting emitted keys to their corresponding nodes. This is either done by asking the job owner to assign members or by an already cached assignment. In later versions, a PartitionStrategy might also be configurable.  The IntermediateChunkNotification is then sent to the reducers (containing only values for this node) and is offered to the ReducerTask. On every offer, the ReducerTask checks if it is already running and if not, it submits itself to the configured ExecutorService (from the JobTracker configuration).  If reducer queue runs out of work, the ReducerTask is removed from the ExecutorService to not block threads but eventually will be resubmitted on next chunk of work.  On every phase, the partition state is changed to keep track of the currently running operations. A JobPartitionState can be in one of the following states with self-explanatory titles: `[WAITING, MAPPING, REDUCING, PROCESSED, CANCELLED]`. If you have a deeper interest of these states, look at the Javadoc.  - Node asks for new partition to process: WAITING =&gt; MAPPING - Node emits first chunk to a reducer: MAPPING =&gt; REDUCING - All nodes signal that they finished mapping phase and reducing is finished, too: REDUCING =&gt; PROCESSED  Eventually (or hopefully), all JobPartitionStates reach the state of PROCESSED. Then, the job emitter's JobSupervisor asks all nodes for their reduced results and executes a potentially offered Collator. With this Collator, the overall result is calculated before it removes itself from the JobTracker, doing some final cleanup and returning the result to the requester (using the internal TrackableJobFuture).  If a job is cancelled while execution, all partitions are immediately set to the CANCELLED state and a CancelJobSupervisorOperation is executed on all nodes to kill the running processes.  While the operation is running in addition to the default operations, some more operations like ProcessStatsUpdateOperation (updates processed records statistics) or NotifyRemoteExceptionOperation (notifies the nodes that the sending node encountered an unrecoverable situation and the Job needs to be cancelled - e.g. NullPointerException inside of a Mapper) are executed against the job owner to keep track of the process.        "
});

documentTitles["index.html#aggregators"] = "Aggregators";
index.add({
    url: "index.html#aggregators",
    title: "Aggregators",
    body: "## Aggregators  Based on the Hazelcast MapReduce framework, Aggregators are ready-to-use data aggregations. These are typical operations like sum up values, finding minimum or maximum values, calculating averages, and other operations that you would expect  in the relational database world.    Aggregation operations are implemented, as mentioned above, on top of the MapReduce framework and all operations can be achieved using pure MapReduce calls. However, using the Aggregation feature is more convenient for a big set of standard operations.  "
});

documentTitles["index.html#aggregations-basics"] = "Aggregations Basics";
index.add({
    url: "index.html#aggregations-basics",
    title: "Aggregations Basics",
    body: "### Aggregations Basics  This section will quickly guide you through the basics of the Aggregations framework and some of its available classes. We also will implement a first base example.  "
});

documentTitles["index.html#aggregations-and-map-interfaces"] = "Aggregations and Map Interfaces";
index.add({
    url: "index.html#aggregations-and-map-interfaces",
    title: "Aggregations and Map Interfaces",
    body: "#### Aggregations and Map Interfaces  Aggregations are available on both types of map interfaces, `com.hazelcast.core.IMap` and `com.hazelcast .core.MultiMap`, using the `aggregate` methods. Two overloaded methods are available that customize resource management of the underlying MapReduce framework by supplying a custom configured  `com.hazelcast.mapreduce.JobTracker` instance. To find out how to configure the MapReduce framework, please see [Configuring JobTracker](#configuring-jobtracker). We will later see another way to configure the automatically used MapReduce framework if no special `JobTracker` is supplied.  "
});

documentTitles["index.html#aggregations-and-java"] = "Aggregations and Java";
index.add({
    url: "index.html#aggregations-and-java",
    title: "Aggregations and Java",
    body: "#### Aggregations and Java  To make Aggregations more convenient to use and future proof, the API is heavily optimized for Java 8 and future versions. The API is still fully compatible with any Java version Hazelcast supports (Java 6 and Java 7). The biggest difference is how you work with the Java generics: on Java 6 and 7, the process to resolve generics is not as strong as on Java 8 and upcoming Java versions. In addition, the whole Aggregations API has full Java 8 Project Lambda (or Closure,  &lt;a href=\&quot;https://jcp.org/en/jsr/detail?id=335\&quot; target=\&quot;_blank\&quot;&gt;JSR 335&lt;/a&gt;) support.  For illustration of the differences in Java 6 and 7 in comparison to Java 8, we will have a quick look at code examples for both. After that, we will focus on using Java 8 syntax to keep examples short and easy to understand, and we will see some hints as to what the code looks like in Java 6 or 7.  The first example will produce the sum of some `int` values stored in a Hazelcast IMap. This example does not use much of the functionality of the Aggregations framework, but it will show the main difference.  ```java IMap&lt;String, Integer&gt; personAgeMapping = hazelcastInstance.getMap( \&quot;person-age\&quot; ); for ( int i = 0; i &lt; 1000; i++ ) {   String lastName = RandomUtil.randomLastName();   int age = RandomUtil.randomAgeBetween( 20, 80 );   personAgeMapping.put( lastName, Integer.valueOf( age ) ); } ```  With our demo data prepared, we can see how to produce the sums in different Java versions.  "
});

documentTitles["index.html#aggregations-and-java-6-or-java-7"] = "Aggregations and Java 6 or Java 7";
index.add({
    url: "index.html#aggregations-and-java-6-or-java-7",
    title: "Aggregations and Java 6 or Java 7",
    body: "#### Aggregations and Java 6 or Java 7  Since Java 6 and 7 are not as strong on resolving generics as Java 8, you need to be a bit more verbose with the code you write. You might also consider using raw types, but breaking the type safety to ease this process.  For a short introduction on what the following code example means, look at the source code comments. We will later dig deeper into the different options.   ```java // No filter applied, select all entries Supplier&lt;String, Integer, Integer&gt; supplier = Supplier.all(); // Choose the sum aggregation Aggregation&lt;String, Integer, Integer&gt; aggregation = Aggregations.integerSum(); // Execute the aggregation int sum = personAgeMapping.aggregate( supplier, aggregation ); ```  "
});

documentTitles["index.html#aggregations-and-java-8"] = "Aggregations and Java 8";
index.add({
    url: "index.html#aggregations-and-java-8",
    title: "Aggregations and Java 8",
    body: "#### Aggregations and Java 8  With Java 8, the Aggregations API looks simpler because Java 8 can resolve the generic parameters for us. That means the above lines of Java 6/7 example code will end up in just one easy line on Java 8.  ``` int sum = personAgeMapping.aggregate( Supplier.all(), Aggregations.integerSum() ); ```   "
});

documentTitles["index.html#aggregations-and-the-mapreduce-framework"] = "Aggregations and the MapReduce Framework";
index.add({
    url: "index.html#aggregations-and-the-mapreduce-framework",
    title: "Aggregations and the MapReduce Framework",
    body: "#### Aggregations and the MapReduce Framework  As mentioned before, the Aggregations implementation is based on the Hazelcast MapReduce framework and therefore you might find overlaps in their APIs. One overload of the `aggregate` method can be supplied with a `JobTracker` which is part of the MapReduce framework.  If you implement your own aggregations, you will use a mixture of the Aggregations and the MapReduce API. If you will implement your own aggregation, e.g. to make the life of colleagues easier, please read the [Implementing Aggregations section](#implementing-aggregations).  For the full MapReduce documentation please see the [MapReduce section](#mapreduce).        "
});

documentTitles["index.html#using-the-aggregations-api"] = "Using the Aggregations API";
index.add({
    url: "index.html#using-the-aggregations-api",
    title: "Using the Aggregations API",
    body: "### Using the Aggregations API  We now look into the possible options of what can be achieved using the Aggregations API. To work on some deeper examples, let's quickly have a look at the available classes and interfaces and discuss their usage.  "
});

documentTitles["index.html#supplier"] = "Supplier";
index.add({
    url: "index.html#supplier",
    title: "Supplier",
    body: "#### Supplier  The `com.hazelcast.mapreduce.aggregation.Supplier` provides filtering and data extraction to the aggregation operation. This class already provides a few different static methods to achieve the most common cases. `Supplier.all()` accepts all incoming values and does not apply any data extraction or transformation upon them before supplying them to the aggregation function itself.  For filtering data sets, you have two different options by default. - You can either supply a `com.hazelcast.query.Predicate` if you want to filter on values and / or keys, or - you can supply a `com.hazelcast.mapreduce.KeyPredicate` if you can decide directly on the data key without the need to deserialize the value.  As mentioned above, all APIs are fully Java 8 and Lambda compatible. Let's have a look on how we can do basic filtering using those two options.  "
});

documentTitles["index.html#basic-filtering-with-keypredicate"] = "Basic Filtering with KeyPredicate";
index.add({
    url: "index.html#basic-filtering-with-keypredicate",
    title: "Basic Filtering with KeyPredicate",
    body: "##### Basic Filtering with KeyPredicate  First, we have a look at a `KeyPredicate` and we only accept people whose last name is \&quot;Jones\&quot;.  ```java Supplier&lt;...&gt; supplier = Supplier.fromKeyPredicate(     lastName -&gt; \&quot;Jones\&quot;.equalsIgnoreCase( lastName ) ); ```  ```java class JonesKeyPredicate implements KeyPredicate&lt;String&gt; {   public boolean evaluate( String key ) {     return \&quot;Jones\&quot;.equalsIgnoreCase( key );   } } ```  "
});

documentTitles["index.html#filtering-on-values-with-predicate"] = "Filtering on Values with Predicate";
index.add({
    url: "index.html#filtering-on-values-with-predicate",
    title: "Filtering on Values with Predicate",
    body: "##### Filtering on Values with Predicate  Using the standard Hazelcast `Predicate` interface, we can also filter based on the value of a data entry. In the following example, you can only select values which are divisible by 4 without a remainder.   ```java Supplier&lt;...&gt; supplier = Supplier.fromPredicate(     entry -&gt; entry.getValue() % 4 == 0 ); ```  ```java class DivisiblePredicate implements Predicate&lt;String, Integer&gt; {   public boolean apply( Map.Entry&lt;String, Integer&gt; entry ) {     return entry.getValue() % 4 == 0;   } } ```  "
});

documentTitles["index.html#extracting-and-transforming-data"] = "Extracting and Transforming Data";
index.add({
    url: "index.html#extracting-and-transforming-data",
    title: "Extracting and Transforming Data",
    body: "##### Extracting and Transforming Data  As well as filtering, `Supplier` can also extract or transform data before providing it to the aggregation operation itself. The following example shows how to transform an input value to a string.   ```java Supplier&lt;String, Integer, String&gt; supplier = Supplier.all(     value -&gt; Integer.toString(value) ); ```  You can see a Java 6 / 7 example in the [Aggregations Examples section](#aggregations-examples).  Apart from the fact we transformed the input value of type `int` (or Integer) to a string, we can see that the generic information of the resulting `Supplier` has changed as well. This indicates that we now have an aggregation working on string values.  "
});

documentTitles["index.html#chaining-multiple-filtering-rules"] = "Chaining Multiple Filtering Rules";
index.add({
    url: "index.html#chaining-multiple-filtering-rules",
    title: "Chaining Multiple Filtering Rules",
    body: "##### Chaining Multiple Filtering Rules  Another feature of `Supplier` is its ability to chain multiple filtering rules. Let's combine all of the above examples into one rule set:  ```java Supplier&lt;String, Integer, String&gt; supplier =     Supplier.fromKeyPredicate(         lastName -&gt; \&quot;Jones\&quot;.equalsIgnoreCase( lastName ),         Supplier.fromPredicate(             entry -&gt; entry.getValue() % 4 == 0,               Supplier.all( value -&gt; Integer.toString(value) )         )     ); ```  "
});

documentTitles["index.html#implementing-supplier-with-special-requirements"] = "Implementing Supplier with Special Requirements";
index.add({
    url: "index.html#implementing-supplier-with-special-requirements",
    title: "Implementing Supplier with Special Requirements",
    body: "##### Implementing Supplier with Special Requirements  You might prefer or need to implement your `Supplier` based on special requirements. This is a very basic task. The `Supplier` abstract class has just one method: the `apply` method. &lt;br&gt;&lt;/br&gt;  ![image](images/NoteSmall.jpg) ***NOTE:*** *Due to a limitation of the Java Lambda API, you cannot implement abstract classes using Lambdas. Instead it is recommended that you create a standard named class.*   ```java class MyCustomSupplier extends Supplier&lt;String, Integer, String&gt; {   public String apply( Map.Entry&lt;String, Integer&gt; entry ) {     Integer value = entry.getValue();     if (value == null) {       return null;     }     return value % 4 == 0 ? String.valueOf( value ) : null;   } } ```  The `Supplier` `apply` methods are expected to return null whenever the input value should not be mapped to the aggregation process. This can be used, as in the example above, to implement filter rules directly. Implementing filters using the `KeyPredicate` and `Predicate` interfaces might be more convenient.  To use your own `Supplier`, just pass it to the aggregate method or use it in combination with other `Supplier`s.  ```java int sum = personAgeMapping.aggregate( new MyCustomSupplier(), Aggregations.count() ); ```  ```java Supplier&lt;String, Integer, String&gt; supplier =     Supplier.fromKeyPredicate(         lastName -&gt; \&quot;Jones\&quot;.equalsIgnoreCase( lastName ),         new MyCustomSupplier()      ); int sum = personAgeMapping.aggregate( supplier, Aggregations.count() ); ```  "
});

documentTitles["index.html#defining-the-aggregation-operation"] = "Defining the Aggregation Operation";
index.add({
    url: "index.html#defining-the-aggregation-operation",
    title: "Defining the Aggregation Operation",
    body: "#### Defining the Aggregation Operation  The `com.hazelcast.mapreduce.aggregation.Aggregation` interface defines the aggregation operation itself. It contains a set of MapReduce API implementations like `Mapper`, `Combiner`, `Reducer`, and `Collator`. These implementations are normally unique to the chosen `Aggregation`. This interface can also be implemented with your aggregation operations based on MapReduce calls. For more information, refer to [Implementing Aggregations section](#implementing-aggregations).  The `com.hazelcast.mapreduce.aggregation.Aggregations` class provides a common predefined set of aggregations. This class contains type safe aggregations of the following types:   - Average (Integer, Long, Double, BigInteger, BigDecimal)  - Sum (Integer, Long, Double, BigInteger, BigDecimal)  - Min (Integer, Long, Double, BigInteger, BigDecimal, Comparable)  - Max (Integer, Long, Double, BigInteger, BigDecimal, Comparable)  - DistinctValues  - Count  Those aggregations are similar to their counterparts on relational databases and can be equated to SQL statements as set out below.   "
});

documentTitles["index.html#average"] = "Average";
index.add({
    url: "index.html#average",
    title: "Average",
    body: "##### Average #####  Calculates an average value based on all selected values.  ```java map.aggregate( Supplier.all( person -&gt; person.getAge() ),                Aggregations.integerAvg() ); ```  ```sql SELECT AVG(person.age) FROM person; ```  "
});

documentTitles["index.html#sum"] = "Sum";
index.add({
    url: "index.html#sum",
    title: "Sum",
    body: "##### Sum #####  Calculates a sum based on all selected values.  ```java map.aggregate( Supplier.all( person -&gt; person.getAge() ),                Aggregations.integerSum() ); ```  ```sql SELECT SUM(person.age) FROM person; ```  "
});

documentTitles["index.html#minimum-min"] = "Minimum (Min)";
index.add({
    url: "index.html#minimum-min",
    title: "Minimum (Min)",
    body: "##### Minimum (Min) #####  Finds the minimal value over all selected values.  ```java map.aggregate( Supplier.all( person -&gt; person.getAge() ),                Aggregations.integerMin() ); ```  ```sql SELECT MIN(person.age) FROM person; ```  "
});

documentTitles["index.html#maximum-max"] = "Maximum (Max)";
index.add({
    url: "index.html#maximum-max",
    title: "Maximum (Max)",
    body: "##### Maximum (Max) #####  Finds the maximal value over all selected values.  ```java map.aggregate( Supplier.all( person -&gt; person.getAge() ),                Aggregations.integerMax() ); ```  ```sql SELECT MAX(person.age) FROM person; ```  "
});

documentTitles["index.html#distinct-values"] = "Distinct Values";
index.add({
    url: "index.html#distinct-values",
    title: "Distinct Values",
    body: "##### Distinct Values #####     Returns a collection of distinct values over the selected values  ```java map.aggregate( Supplier.all( person -&gt; person.getAge() ),                Aggregations.distinctValues() ); ```  ```sql SELECT DISTINCT person.age FROM person; ```  "
});

documentTitles["index.html#count"] = "Count";
index.add({
    url: "index.html#count",
    title: "Count",
    body: "##### Count #####      Returns the element count over all selected values   ```java map.aggregate( Supplier.all(), Aggregations.count() ); ```  ```sql SELECT COUNT(*) FROM person; ```   "
});

documentTitles["index.html#extracting-attribute-values-with-propertyextractor"] = "Extracting Attribute Values with PropertyExtractor";
index.add({
    url: "index.html#extracting-attribute-values-with-propertyextractor",
    title: "Extracting Attribute Values with PropertyExtractor",
    body: "#### Extracting Attribute Values with PropertyExtractor  We used the `com.hazelcast.mapreduce.aggregation.PropertyExtractor` interface before when we had a look at the example on how to use a `Supplier` to [transform a value to another type](#extracting-and-transforming-data). It can also be used to extract attributes from values.  ```java class Person {   private String firstName;   private String lastName;   private int age;      // getters and setters }  PropertyExtractor&lt;Person, Integer&gt; propertyExtractor = (person) -&gt; person.getAge(); ```  ```java class AgeExtractor implements PropertyExtractor&lt;Person, Integer&gt; {   public Integer extract( Person value ) {     return value.getAge();   } } ```  In this example, we extract the value from the person's age attribute. The value type changes from Person to `Integer` which is reflected in the generics information to stay type safe.  You can use `PropertyExtractor`s for any kind of transformation of data. You might even want to have multiple transformation steps chained one after another.  "
});

documentTitles["index.html#configuring-aggregations"] = "Configuring Aggregations";
index.add({
    url: "index.html#configuring-aggregations",
    title: "Configuring Aggregations",
    body: "#### Configuring Aggregations  As stated before, the easiest way to configure the resources used by the underlying MapReduce framework is to supply a `JobTracker` to the aggregation call itself by passing it to either `IMap::aggregate` or `MultiMap::aggregate`.  There is another way to implicitly configure the underlying used `JobTracker`. If no specific `JobTracker` was passed for the aggregation call, internally one will be created using the following naming specifications:  For `IMap` aggregation calls the naming specification is created as:  - `hz::aggregation-map-` and the concatenated name of the map.  For `MultiMap` it is very similar:  - `hz::aggregation-multimap-` and the concatenated name of the MultiMap.  Knowing that (the specification of the name), we can configure the `JobTracker` as expected  (as described in [Retrieving a JobTracker Instance](#retrieving-a-jobtracker-instance)) using the naming spec we just learned. For more information on configuration of the  `JobTracker`, please see [Configuring Jobtracker](#configuring-jobtracker).   To finish this section, let's have a quick example for the above naming specs:  ```java IMap&lt;String, Integer&gt; map = hazelcastInstance.getMap( \&quot;mymap\&quot; );  // The internal JobTracker name resolves to 'hz::aggregation-map-mymap'  map.aggregate( ... ); ```  ```java MultiMap&lt;String, Integer&gt; multimap = hazelcastInstance.getMultiMap( \&quot;mymultimap\&quot; );  // The internal JobTracker name resolves to 'hz::aggregation-multimap-mymultimap'  multimap.aggregate( ... ); ```      "
});

documentTitles["index.html#aggregations-examples"] = "Aggregations Examples";
index.add({
    url: "index.html#aggregations-examples",
    title: "Aggregations Examples",
    body: "### Aggregations Examples  For the final example, imagine you are working for an international company and you have an employee database stored in Hazelcast `IMap` with all employees worldwide and a `MultiMap` for assigning employees to their certain locations or offices. In addition, there is another `IMap` which holds the salary per employee.  "
});

documentTitles["index.html#setting-up-the-data-model"] = "Setting up the Data Model";
index.add({
    url: "index.html#setting-up-the-data-model",
    title: "Setting up the Data Model",
    body: "#### Setting up the Data Model  Let's have a look at our data model.  ```java class Employee implements Serializable {   private String firstName;   private String lastName;   private String companyName;   private String address;   private String city;   private String county;   private String state;   private int zip;   private String phone1;   private String phone2;   private String email;   private String web;    // getters and setters }  class SalaryMonth implements Serializable {   private Month month;   private int salary;      // getters and setters }  class SalaryYear implements Serializable {   private String email;   private int year;   private List&lt;SalaryMonth&gt; months;      // getters and setters      public int getAnnualSalary() {     int sum = 0;     for ( SalaryMonth salaryMonth : getMonths() ) {       sum += salaryMonth.getSalary();     }     return sum;   } } ```  The two `IMap`s and the `MultiMap` are keyed by the string of email. They are defined as follows:  ```java IMap&lt;String, Employee&gt; employees = hz.getMap( \&quot;employees\&quot; ); IMap&lt;String, SalaryYear&gt; salaries = hz.getMap( \&quot;salaries\&quot; ); MultiMap&lt;String, String&gt; officeAssignment = hz.getMultiMap( \&quot;office-employee\&quot; ); ```  So far, we know all the important information to work out some example aggregations. We will look into some deeper implementation details and how we can work around some current limitations that will be eliminated in future versions of the API.  "
});

documentTitles["index.html#average-aggregation-example"] = "Average Aggregation Example";
index.add({
    url: "index.html#average-aggregation-example",
    title: "Average Aggregation Example",
    body: "#### Average Aggregation Example  Let's start with a very basic example. We want to know the average salary of all of our employees. To do this, we need a `PropertyExtractor` and the average aggregation for type `Integer`.  ```java IMap&lt;String, SalaryYear&gt; salaries = hazelcastInstance.getMap( \&quot;salaries\&quot; ); PropertyExtractor&lt;SalaryYear, Integer&gt; extractor =     (salaryYear) -&gt; salaryYear.getAnnualSalary(); int avgSalary = salaries.aggregate( Supplier.all( extractor ),                                     Aggregations.integerAvg() ); ```  That's it. Internally, we created a MapReduce task based on the predefined aggregation and fired it up immediately. Currently, all aggregation calls are blocking operations, so it is not yet possible to execute the aggregation in a reactive way (using `com.hazelcast.core.ICompletableFuture`) but this will be part of an upcoming version.  "
});

documentTitles["index.html#map-join-example"] = "Map Join Example";
index.add({
    url: "index.html#map-join-example",
    title: "Map Join Example",
    body: "#### Map Join Example  The following example is a little more complex. We only want to have our US based employees selected into the average salary calculation, so we need to execute some kind of a join operation between the employees and salaries maps.  ```java class USEmployeeFilter implements KeyPredicate&lt;String&gt;, HazelcastInstanceAware {   private transient HazelcastInstance hazelcastInstance;      public void setHazelcastInstance( HazelcastInstance hazelcastInstance ) {     this.hazelcastInstance = hazelcastInstance;   }      public boolean evaluate( String email ) {     IMap&lt;String, Employee&gt; employees = hazelcastInstance.getMap( \&quot;employees\&quot; );     Employee employee = employees.get( email );     return \&quot;US\&quot;.equals( employee.getCountry() );   } } ```  Using the `HazelcastInstanceAware` interface, we get the current instance of Hazelcast injected into our filter and we can perform data joins on other data structures of the cluster. We now only select employees that work as part of our US offices into the aggregation.  ```java IMap&lt;String, SalaryYear&gt; salaries = hazelcastInstance.getMap( \&quot;salaries\&quot; ); PropertyExtractor&lt;SalaryYear, Integer&gt; extractor =     (salaryYear) -&gt; salaryYear.getAnnualSalary(); int avgSalary = salaries.aggregate( Supplier.fromKeyPredicate(                                         new USEmployeeFilter(), extractor                                     ), Aggregations.integerAvg() ); ```  "
});

documentTitles["index.html#grouping-example"] = "Grouping Example";
index.add({
    url: "index.html#grouping-example",
    title: "Grouping Example",
    body: "#### Grouping Example  For our next example, we will do some grouping based on the different worldwide offices. Currently, a group aggregator is not yet  available, so we need a small workaround to achieve this goal. (In later versions of the Aggregations API this will not be  required because it will be available out of the box in a much more convenient way.)  Again, let's start with our filter. This time, we want to filter based on an office name and we need to do some data joins to achieve this kind of filtering.   **A short tip:** to minimize the data transmission on the aggregation we can use [Data Affinity](#data-affinity) rules to influence the partitioning of data. Be aware that this is an expert feature of Hazelcast.  ```java class OfficeEmployeeFilter implements KeyPredicate&lt;String&gt;, HazelcastInstanceAware {   private transient HazelcastInstance hazelcastInstance;   private String office;      // Deserialization Constructor   public OfficeEmployeeFilter() {   }       public OfficeEmployeeFilter( String office ) {     this.office = office;   }      public void setHazelcastInstance( HazelcastInstance hazelcastInstance ) {     this.hazelcastInstance = hazelcastInstance;   }      public boolean evaluate( String email ) {     MultiMap&lt;String, String&gt; officeAssignment = hazelcastInstance         .getMultiMap( \&quot;office-employee\&quot; );      return officeAssignment.containsEntry( office, email );       } } ```  Now we can execute our aggregations. As mentioned before, we currently need to do the grouping on our own by executing multiple aggregations in a row.  ```java Map&lt;String, Integer&gt; avgSalariesPerOffice = new HashMap&lt;String, Integer&gt;();  IMap&lt;String, SalaryYear&gt; salaries = hazelcastInstance.getMap( \&quot;salaries\&quot; ); MultiMap&lt;String, String&gt; officeAssignment =     hazelcastInstance.getMultiMap( \&quot;office-employee\&quot; );  PropertyExtractor&lt;SalaryYear, Integer&gt; extractor =     (salaryYear) -&gt; salaryYear.getAnnualSalary();  for ( String office : officeAssignment.keySet() ) {   OfficeEmployeeFilter filter = new OfficeEmployeeFilter( office );   int avgSalary = salaries.aggregate( Supplier.fromKeyPredicate( filter, extractor ),                                       Aggregations.integerAvg() );                                          avgSalariesPerOffice.put( office, avgSalary ); } ```  "
});

documentTitles["index.html#simple-count-example"] = "Simple Count Example";
index.add({
    url: "index.html#simple-count-example",
    title: "Simple Count Example",
    body: "#### Simple Count Example  After the previous example, we want to end this section by executing one final and easy aggregation. We want to know how many employees we currently have on a worldwide basis. Before reading the next lines of example code, you can try to do it on your own to see if you understood how to execute aggregations.  ```java IMap&lt;String, Employee&gt; employees = hazelcastInstance.getMap( \&quot;employees\&quot; ); int count = employees.size(); ```  Ok, after the quick joke of the previous two code lines, we look at the real two code lines:  ```java IMap&lt;String, Employee&gt; employees = hazelcastInstance.getMap( \&quot;employees\&quot; ); int count = employees.aggregate( Supplier.all(), Aggregations.count() ); ```  We now have an overview of how to use aggregations in real life situations. If you want to do your colleagues a favor, you might want to write your own additional set of aggregations. If so, then read the next section, [Implementing Aggregations](#implementing-aggregations).      "
});

documentTitles["index.html#implementing-aggregations"] = "Implementing Aggregations";
index.add({
    url: "index.html#implementing-aggregations",
    title: "Implementing Aggregations",
    body: "### Implementing Aggregations  This section explains how to implement your own aggregations in your own application. It is an advanced section, so if you do not intend to implement your own aggregation, you might want to stop reading here and come back later when you need to know how to implement your own aggregation.  An `Aggregation` implementation is defining a MapReduce task, but with a small difference: the `Mapper` is always expected to work on a `Supplier` that filters and / or transforms the mapped input value to some output value.  "
});

documentTitles["index.html#aggregation-methods"] = "Aggregation Methods";
index.add({
    url: "index.html#aggregation-methods",
    title: "Aggregation Methods",
    body: "#### Aggregation Methods  The main interface for making your own aggregation is `com.hazelcast.mapreduce.aggregation.Aggregation`. It consists of four methods.   ```java interface Aggregation&lt;Key, Supplied, Result&gt; {   Mapper getMapper(Supplier&lt;Key, ?, Supplied&gt; supplier);   CombinerFactory getCombinerFactory();   ReducerFactory getReducerFactory();   Collator&lt;Map.Entry, Result&gt; getCollator(); } ```  The `getMapper` and `getReducerFactory` methods should return non-null values. `getCombinerFactory` and `getCollator` are optional operations and you do not need to implement them. You can decide to implement them depending on the use case you want to achieve.  "
});

documentTitles["index.html#aggregation-tips"] = "Aggregation Tips";
index.add({
    url: "index.html#aggregation-tips",
    title: "Aggregation Tips",
    body: "#### Aggregation Tips  For more information on how you implement mappers, combiners, reducers, and collators, refer to the [MapReduce section](#mapreduce).  For best speed and traffic usage, as mentioned in the [MapReduce section](#mapreduce), you should add a `Combiner` to your aggregation whenever it is possible to do some kind of pre-reduction step.  Your implementation also should use `DataSerializable` or `IdentifiedDataSerializable` for best compatibility and speed / stream-size reasons.  &lt;br&gt;&lt;/br&gt;   "
});

documentTitles["index.html#continuous-query-cache"] = "Continuous Query Cache";
index.add({
    url: "index.html#continuous-query-cache",
    title: "Continuous Query Cache",
    body: "## Continuous Query Cache  &lt;font color=\&quot;#3981DB\&quot;&gt;**Hazelcast Enterprise**&lt;/font&gt;  &lt;br&gt;&lt;/br&gt;  A continuous query cache is used to cache the result of a continuous query. After the construction of a continuous query cache, all changes on the underlying `IMap` are immediately reflected to this cache as a stream of events. Therefore, this cache will be an always up-to-date view of the `IMap`. You can create a continuous query cache either on the client or member.  "
});

documentTitles["index.html#keeping-query-results-local-and-ready"] = "Keeping Query Results Local and Ready";
index.add({
    url: "index.html#keeping-query-results-local-and-ready",
    title: "Keeping Query Results Local and Ready",
    body: "### Keeping Query Results Local and Ready  A continuous query cache is beneficial when you need to query the distributed `IMap` data in a very frequent and fast way. By using a continuous query cache, the result of the query will always be ready and local to the application.  "
});

documentTitles["index.html#accessing-continuous-query-cache-from-member"] = "Accessing Continuous Query Cache from Member";
index.add({
    url: "index.html#accessing-continuous-query-cache-from-member",
    title: "Accessing Continuous Query Cache from Member",
    body: "### Accessing Continuous Query Cache from Member  The following code snippet shows how you can access a continuous query cache from a member.       ```java  QueryCacheConfig queryCacheConfig = new QueryCacheConfig(\&quot;cache-name\&quot;); queryCacheConfig.getPredicateConfig().setImplementation(new OddKeysPredicate());         MapConfig mapConfig = new MapConfig(\&quot;map-name\&quot;); mapConfig.addQueryCacheConfig(queryCacheConfig);         Config config = new Config(); config.addMapConfig(mapConfig);        HazelcastInstance node = Hazelcast.newHazelcastInstance(config); IEnterpriseMap&lt;Integer, String&gt; map = (IEnterpriseMap) node.getMap(\&quot;map-name\&quot;);         QueryCache&lt;Integer, String&gt; cache = map.getQueryCache(\&quot;cache-name\&quot;);  ```       "
});

documentTitles["index.html#accessing-continuous-query-cache-from-client-side"] = "Accessing Continuous Query Cache from Client Side";
index.add({
    url: "index.html#accessing-continuous-query-cache-from-client-side",
    title: "Accessing Continuous Query Cache from Client Side",
    body: "### Accessing Continuous Query Cache from Client Side  The following code snippet shows how you can access a continuous query cache from the client side. The difference in this code from the member side code above is that you configure and instantiate a client instance instead of a member instance.        ```java  QueryCacheConfig queryCacheConfig = new QueryCacheConfig(\&quot;cache-name\&quot;); queryCacheConfig.getPredicateConfig().setImplementation(new OddKeysPredicate());         ClientConfig clientConfig = new ClientConfig(); clientConfig.addQueryCacheConfig(\&quot;map-name\&quot;, queryCacheConfig);        HazelcastInstance client = HazelcastClient.newHazelcastClient(clientConfig); IEnterpriseMap&lt;Integer, Integer&gt; clientMap = (IEnterpriseMap) client.getMap(\&quot;map-name\&quot;);         QueryCache&lt;Integer, Integer&gt; cache = clientMap.getQueryCache(\&quot;cache-name\&quot;);  ```  "
});

documentTitles["index.html#features-of-continuous-query-cache"] = "Features of Continuous Query Cache";
index.add({
    url: "index.html#features-of-continuous-query-cache",
    title: "Features of Continuous Query Cache",
    body: "### Features of Continuous Query Cache  The following features of continuous query cache are valid for both the member and client.  * The initial query that is run on the existing `IMap` data during the continuous query cache construction can be enabled/disabled according to the supplied predicate via `QueryCacheConfig#setPopulate`. * Continuous query cache allows you to run queries with indexes, and perform event batching and coalescing. * A continuous query cache is evictable. Note that a continuous query cache has a default maximum capacity of 10000. If you need a non-evictable cache, you should configure the eviction via `QueryCacheConfig#setEvictionConfig`. * A listener can be added to a continuous query cache using `QueryCache#addEntryListener`. * `IMap` events are reflected in continuous query cache in the same order as they were generated on map entries. Since events are created on entries stored in partitions, ordering of events is maintained based on the ordering within the partition. You can add listeners to capture lost events using `EventLostListener` and you can recover lost events with the method `QueryCache#tryRecover`. Recovery of lost events largely depends on the size of the buffer on Hazelcast members. Default buffer size is 16 per partition; i.e. 16 events per partition can be maintained in the buffer. If the event generation is high, setting the buffer size to a higher number will provide better chances of recovering lost events. You can set buffer size with `QueryCacheConfig#setBufferSize`. You can use the following example code for a recovery case.      ```java                QueryCache queryCache = map.getQueryCache(\&quot;cache-name\&quot;, new SqlPredicate(\&quot;this &gt; 20\&quot;), true);        queryCache.addEntryListener(new EventLostListener() {            @Override            public void eventLost(EventLostEvent event) {                queryCache.tryRecover();            }        }, false);     ```     * You can configure continuous query cache declaratively or programmatically. * You can populate a continuous query cache with only the keys of its entries and retrieve the subsequent values directly via `QueryCache#get` from the underlying `IMap`. This helps to decrease the initial population time when the values are very large. &lt;br&gt;&lt;/br&gt;           "
});

documentTitles["index.html#transactions"] = "Transactions";
index.add({
    url: "index.html#transactions",
    title: "Transactions",
    body: "# Transactions  This chapter explains the usage of Hazelcast in transactional context. It describes the Hazelcast transaction types and how they work, how to provide XA (e**X**tended **A**rchiteture) transactions, and how to integrate Hazelcast with J2EE containers.  "
});

documentTitles["index.html#creating-a-transaction-interface"] = "Creating a Transaction Interface";
index.add({
    url: "index.html#creating-a-transaction-interface",
    title: "Creating a Transaction Interface",
    body: "## Creating a Transaction Interface  You create a `TransactionContext` object to begin, commit, and rollback a transaction. You can obtain transaction-aware instances of queues, maps, sets, lists, multimaps via `TransactionContext`, work with them, and commit/rollback in one shot. You can see the [TransactionContext source code here](https://github.com/hazelcast/hazelcast/blob/master/hazelcast/src/main/java/com/hazelcast/transaction/TransactionContext.java).  Hazelcast supports two types of transactions: ONE_PHASE and TWO_PHASE. With the type, you have influence over how much guarantee you get when a member crashes while a transaction is committing. The default behavior is TWO_PHASE. &lt;br&gt;&lt;br&gt; ![image](images/NoteSmall.jpg) ***NOTE:*** *Starting with Hazelcast 3.6, the transaction type `LOCAL` has been deprecated. Please use `ONE_PHASE` for the Hazelcast releases 3.6 and higher.* &lt;br&gt;&lt;br&gt;  - **ONE_PHASE**: By selecting this transaction type, you execute the transactions with a single phase, that is committing the changes. Since a preparing phase does not exist, the conflicts are not detected. When a conflict happens during committing the changes (e.g. due to a member crash), it means not all the changes are written and this leaves the system in an inconsistent state.  - **TWO_PHASE**: When you select this transaction type, it first tries to execute the prepare phase. This phase fails if there are any conflicts. Once the prepare phase is successful, then it executes the commit phase (writing the changes). Before TWO_PHASE commits, it copies the commit log to other members, so in case of a member failure, another member can complete the commit.  ```java import java.util.Queue; import java.util.Map; import java.util.Set; import com.hazelcast.core.Hazelcast; import com.hazelcast.core.Transaction;  HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance();  TransactionOptions options = new TransactionOptions()     .setTransactionType( TransactionType.ONE_PHASE );      TransactionContext context = hazelcastInstance.newTransactionContext( options ); context.beginTransaction();  TransactionalQueue queue = context.getQueue( \&quot;myqueue\&quot; ); TransactionalMap map = context.getMap( \&quot;mymap\&quot; ); TransactionalSet set = context.getSet( \&quot;myset\&quot; );  try {   Object obj = queue.poll();   //process obj   map.put( \&quot;1\&quot;, \&quot;value1\&quot; );   set.add( \&quot;value\&quot; );   //do other things..   context.commitTransaction(); } catch ( Throwable t ) {   context.rollbackTransaction(); } ```  In a transaction, operations will not be executed immediately. Their changes will be local to the `TransactionContext` until committed. However, they will ensure the changes via locks.   For the above example, when `map.put` is executed, no data will be put in the map but the key will be locked against changes. While committing, operations will be executed, the value will be put to the map, and the key will be unlocked.  Isolation level in Hazelcast Transactions is `READ_COMMITTED`. If you are in a transaction, you can read the data in your transaction and the data that is already committed. If you are not in a transaction, you can only read the committed data.  ![image](images/NoteSmall.jpg) ***NOTE:*** *The REPEATABLE_READ isolation level can also be exercised using the method `getForUpdate()` of `TransactionalMap`.*  "
});

documentTitles["index.html#queuesetlist-vs-mapmultimap"] = "Queue/Set/List vs. Map/Multimap";
index.add({
    url: "index.html#queuesetlist-vs-mapmultimap",
    title: "Queue/Set/List vs. Map/Multimap",
    body: "### Queue/Set/List vs. Map/Multimap  Hazelcast implements queue/set/list operations differently than map/multimap operations. For queue operations (offer, poll), offered and/or polled objects are copied to the owner member in order to safely commit/rollback. For map/multimap, Hazelcast first acquires the locks for the write operations (put, remove) and holds the differences (what is added/removed/updated) locally for each transaction. When the transaction is set to commit, Hazelcast will release the locks and apply the differences. When rolling back, Hazelcast will release the locks and discard the differences.  `MapStore` and `QueueStore` do not participate in transactions. Hazelcast will suppress exceptions thrown by store in a transaction. Please refer to the [XA Transactions section](#providing-xa-transactions) for further information.  "
});

documentTitles["index.html#one-phase-vs-two-phase"] = "ONE_PHASE vs. TWO_PHASE";
index.add({
    url: "index.html#one-phase-vs-two-phase",
    title: "ONE_PHASE vs. TWO_PHASE",
    body: "### ONE_PHASE vs. TWO_PHASE  As discussed in [Creating a Transaction Interface](#creating-a-transaction-interface), when you choose ONE_PHASE as the transaction type, Hazelcast tracks all changes you make locally in a commit log, i.e. a list of changes. In this case, all the other members are asked to agree that the commit can succeed and once they agree, Hazelcast starts to write the changes.  However, if the member that initiates the commit crashes after it has written to at least one member (but has not completed writing to all other members), your system may be left in an inconsistent state.  On the other hand, if you choose TWO_PHASE as the transaction type, the commit log is again tracked locally but it is copied to another cluster member. Therefore, when a failure happens (e.g. the member initiating the commit crashes), you still have the commit log in another member and that member can complete the commit. However, copying the commit log to another member makes the TWO_PHASE approach slow.  Consequently, it is recommended that you choose ONE_PHASE as the transaction type if you want a better performance, and that you choose TWO_PHASE if reliability of your system is more important than the performance.         "
});

documentTitles["index.html#providing-xa-transactions"] = "Providing XA Transactions";
index.add({
    url: "index.html#providing-xa-transactions",
    title: "Providing XA Transactions",
    body: "## Providing XA Transactions  XA describes the interface between the global transaction manager and the local resource manager. XA allows multiple resources (such as databases, application servers, message queues, transactional caches, etc.) to be accessed within the same transaction, thereby preserving the ACID properties across applications. XA uses a two-phase commit to ensure that all resources either commit or rollback any particular transaction consistently (all do the same).  When you implement the `XAResource` interface, Hazelcast provides XA transactions. You can obtain the `HazelcastXAResource` instance via the `HazelcastInstance getXAResource` method. You can see the [HazelcastXAResource source code here](https://github.com/hazelcast/hazelcast/blob/master/hazelcast/src/main/java/com/hazelcast/transaction/HazelcastXAResource.java).  Below is example code that uses Atomikos for transaction management.    ```java UserTransactionManager tm = new UserTransactionManager(); tm.setTransactionTimeout(60); tm.begin();  HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance(); HazelcastXAResource xaResource = hazelcastInstance.getXAResource();  Transaction transaction = tm.getTransaction(); transaction.enlistResource(xaResource); // other resources (database, app server etc...) can be enlisted  try {   TransactionContext context = xaResource.getTransactionContext();   TransactionalMap map = context.getMap(\&quot;m\&quot;);   map.put(\&quot;key\&quot;, \&quot;value\&quot;);   // other resource operations      transaction.delistResource(xaResource, XAResource.TMSUCCESS);   tm.commit(); } catch (Exception e) {   tm.rollback(); } ```     "
});

documentTitles["index.html#integrating-into-j2ee"] = "Integrating into J2EE";
index.add({
    url: "index.html#integrating-into-j2ee",
    title: "Integrating into J2EE",
    body: "## Integrating into J2EE  You can integrate Hazelcast into J2EE containers via the Hazelcast Resource Adapter (`hazelcast-jca-rar-`*version*`.rar`). After proper configuration, Hazelcast can participate in standard J2EE transactions.  ```java &lt;%@page import=\&quot;javax.resource.ResourceException\&quot; %&gt; &lt;%@page import=\&quot;javax.transaction.*\&quot; %&gt; &lt;%@page import=\&quot;javax.naming.*\&quot; %&gt; &lt;%@page import=\&quot;javax.resource.cci.*\&quot; %&gt; &lt;%@page import=\&quot;java.util.*\&quot; %&gt; &lt;%@page import=\&quot;com.hazelcast.core.*\&quot; %&gt; &lt;%@page import=\&quot;com.hazelcast.jca.*\&quot; %&gt;  &lt;% UserTransaction txn = null; HazelcastConnection conn = null; HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance();  try {   Context context = new InitialContext();   txn = (UserTransaction) context.lookup( \&quot;java:comp/UserTransaction\&quot; );   txn.begin();    HazelcastConnectionFactory cf = (HazelcastConnectionFactory)       context.lookup ( \&quot;java:comp/env/HazelcastCF\&quot; );            conn = cf.getConnection();    TransactionalMap&lt;String, String&gt; txMap = conn.getTransactionalMap( \&quot;default\&quot; );   txMap.put( \&quot;key\&quot;, \&quot;value\&quot; );    txn.commit();      } catch ( Throwable e ) {   if ( txn != null ) {     try {       txn.rollback();     } catch ( Exception ix ) {       ix.printStackTrace();     };   }   e.printStackTrace(); } finally {   if ( conn != null ) {     try {       conn.close();     } catch (Exception ignored) {};   } } %&gt; ```  Sometimes Hazelcast class loader might not be able to find the classes you provide, i.e. your class loader might be different than that of Hazelcast. In this case, you need to specify the class loader through `Config` to be used internally by Hazelcast.  Assume that Hazelcast is embedded in a container and you want to run your own `Runnable` through `IExecutorService`. Here, Hazelcast class loader and your class loader are different. Therefore, Hazelcast class loader does not know your `Runnable` class. You need to tell Hazelcast to use a specified class loader to lookup classes internally. A sample code line for this could be `config.setClassLoader(getClass().getClassLoader())`.   "
});

documentTitles["index.html#sample-code-for-j2ee-integration"] = "Sample Code for J2EE Integration";
index.add({
    url: "index.html#sample-code-for-j2ee-integration",
    title: "Sample Code for J2EE Integration",
    body: "### Sample Code for J2EE Integration  Please see our sample application for &lt;a href=\&quot;https://github.com/hazelcast/hazelcast-code-samples/tree/master/hazelcast-integration/jca-ra\&quot; target=\&quot;_blank\&quot;&gt;J2EE Integration&lt;/a&gt;.        "
});

documentTitles["index.html#configuring-resource-adapter"] = "Configuring Resource Adapter";
index.add({
    url: "index.html#configuring-resource-adapter",
    title: "Configuring Resource Adapter",
    body: "### Configuring Resource Adapter  Deploying and configuring the Hazelcast resource adapter is no different than configuring any other resource adapter since the Hazelcast resource adapter is a standard JCA one. However, resource adapter installation and configuration is container specific, so please consult your J2EE vendor documentation for details. The most common steps are:  1. Add the `hazelcast-`*version*`.jar` and `hazelcast-jca-`*version*`.jar` to the container's classpath. Usually there is a lib directory that is loaded automatically by the container on startup. 2. Deploy `hazelcast-jca-rar-`*version*`.rar`. Usually there is some kind of a deploy directory. The name of the directory varies by container. 3. Make container specific configurations when/after deploying `hazelcast-jca-rar-`*version*`.rar`. In addition to container specific configurations, set the JNDI name for the Hazelcast resource. 4. Configure your application to use the Hazelcast resource. Update `web.xml` and/or `ejb-jar.xml` to let the container know that your application will use the Hazelcast resource, and define the resource reference. 5. Make the container specific application configuration to specify the JNDI name used for the resource in the application.        "
});

documentTitles["index.html#configuring-a-glassfish-v3-web-application"] = "Configuring a Glassfish v3 Web Application";
index.add({
    url: "index.html#configuring-a-glassfish-v3-web-application",
    title: "Configuring a Glassfish v3 Web Application",
    body: "### Configuring a Glassfish v3 Web Application  To configure an example Glassfish v3 web application:  1. Place the `hazelcast-`*version*`.jar` and `hazelcast-jca-`*version*`.jar` into the `GLASSFISH_HOME/glassfish/ domains/domain1/lib/ext/` folder. 2. Place the `hazelcast-jca-rar-`*version*`.rar` into `GLASSFISH_HOME/glassfish/domains/domain1/autodeploy/` folder. 3. Add the following lines to the `web.xml` file.  ```xml &lt;resource-ref&gt;   &lt;res-ref-name&gt;HazelcastCF&lt;/res-ref-name&gt;   &lt;res-type&gt;com.hazelcast.jca.ConnectionFactoryImpl&lt;/res-type&gt;   &lt;res-auth&gt;Container&lt;/res-auth&gt; &lt;/resource-ref&gt; ```  Notice that we did not have to put `sun-ra.xml` into the RAR file since it already comes with the `hazelcast-ra-`*version*`.rar` file.  If the Hazelcast resource is used from EJBs, you should configure `ejb-jar.xml` for resource reference and JNDI definitions, just like for the `web.xml` file.       "
});

documentTitles["index.html#configuring-a-jboss-as-5-web-application"] = "Configuring a JBoss AS 5 Web Application";
index.add({
    url: "index.html#configuring-a-jboss-as-5-web-application",
    title: "Configuring a JBoss AS 5 Web Application",
    body: "### Configuring a JBoss AS 5 Web Application  To configure a JBoss AS 5 web application:  - Place the `hazelcast-`*version*`.jar` and `hazelcast-jca-`*version*`.jar` into the `JBOSS_HOME/server/deploy/ default/lib` folder. - Place the `hazelcast-jca-rar-`*version*`.rar` into the `JBOSS_HOME/server/deploy/default/deploy` folder. - Create a `hazelcast-ds.xml` file containing the following content in the `JBOSS_HOME/server/deploy/default/deploy` folder. Make sure to set the `rar-name` element to `hazelcast-ra-`*version*`.rar`.  ```xml &lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt; &lt;!DOCTYPE connection-factories   PUBLIC \&quot;-//JBoss//DTD JBOSS JCA Config 1.5//EN\&quot;   \&quot;http://www.jboss.org/j2ee/dtd/jboss-ds_1_5.dtd\&quot;&gt;  &lt;connection-factories&gt;   &lt;tx-connection-factory&gt;     &lt;local-transaction/&gt;     &lt;track-connection-by-tx&gt;true&lt;/track-connection-by-tx&gt;     &lt;jndi-name&gt;HazelcastCF&lt;/jndi-name&gt;     &lt;rar-name&gt;hazelcast-jca-rar-&lt;version&gt;.rar&lt;/rar-name&gt;     &lt;connection-definition&gt;        javax.resource.cci.ConnectionFactory     &lt;/connection-definition&gt;   &lt;/tx-connection-factory&gt; &lt;/connection-factories&gt; ```  - Add the following lines to the `web.xml` file.  ```xml &lt;resource-ref&gt;   &lt;res-ref-name&gt;HazelcastCF&lt;/res-ref-name&gt;   &lt;res-type&gt;com.hazelcast.jca.ConnectionFactoryImpl&lt;/res-type&gt;   &lt;res-auth&gt;Container&lt;/res-auth&gt; &lt;/resource-ref&gt; ```  - Add the following lines to the `jboss-web.xml` file.  ```xml &lt;resource-ref&gt;   &lt;res-ref-name&gt;HazelcastCF&lt;/res-ref-name&gt;   &lt;jndi-name&gt;java:HazelcastCF&lt;/jndi-name&gt; &lt;/resource-ref&gt; ```  If the Hazelcast resource is used from EJBs, you should configure `ejb-jar.xml` and `jboss.xml` for resource reference and JNDI definitions.  &lt;br&gt; &lt;/br&gt;        "
});

documentTitles["index.html#configuring-a-jboss-as-7-eap-6-web-application"] = "Configuring a JBoss AS 7 / EAP 6 Web Application";
index.add({
    url: "index.html#configuring-a-jboss-as-7-eap-6-web-application",
    title: "Configuring a JBoss AS 7 / EAP 6 Web Application",
    body: "### Configuring a JBoss AS 7 / EAP 6 Web Application  Deploying on JBoss AS 7 or JBoss EAP 6 is a straightforward process. The steps you perform are shown below. The only non-trivial step is the creation of a new JBoss module with Hazelcast libraries.       - Create the folder `&lt;jboss_home&gt;/modules/system/layers/base/com/hazelcast/main`. - Place the `hazelcast-`&lt;*version*&gt;`.jar` and `hazelcast-jca-`&lt;*version*&gt;`.jar` into the folder you created in the previous step. - Create the file `module.xml` and place it in the same folder. This file should have the following content.    ```xml &lt;module xmlns=\&quot;urn:jboss:module:1.0\&quot; name=\&quot;com.hazelcast\&quot;&gt;   &lt;resources&gt;     &lt;resource-root path=\&quot;.\&quot;/&gt;     &lt;resource-root path=\&quot;hazelcast-&lt;version&gt;.jar\&quot;/&gt;     &lt;resource-root path=\&quot;hazelcast-jca-&lt;version&gt;.jar\&quot;/&gt;   &lt;/resources&gt;   &lt;dependencies&gt;     &lt;module name=\&quot;sun.jdk\&quot;/&gt;     &lt;module name=\&quot;javax.api\&quot;/&gt;     &lt;module name=\&quot;javax.resource.api\&quot;/&gt;     &lt;module name=\&quot;javax.validation.api\&quot;/&gt;     &lt;module name=\&quot;org.jboss.ironjacamar.api\&quot;/&gt;   &lt;/dependencies&gt; &lt;/module&gt; ```  "
});

documentTitles["index.html#starting-jboss"] = "Starting JBoss";
index.add({
    url: "index.html#starting-jboss",
    title: "Starting JBoss",
    body: "#### Starting JBoss  At this point, you have a new JBoss module with Hazelcast in it. You can now start JBoss and deploy the `hazelcast-jca-rar-`&lt;*version*&gt;`.rar` file via JBoss CLI or Administration Console.  "
});

documentTitles["index.html#using-the-resource-adapter"] = "Using the Resource Adapter";
index.add({
    url: "index.html#using-the-resource-adapter",
    title: "Using the Resource Adapter",
    body: "#### Using the Resource Adapter  Once the Hazelcast Resource Adapter is deployed, you can start using it. The easiest way is to let a container inject `ConnectionFactory` into your beans.       ```java package com.hazelcast.examples.rar;  import com.hazelcast.core.TransactionalMap; import com.hazelcast.jca.HazelcastConnection;  import javax.annotation.Resource; import javax.resource.ResourceException; import javax.resource.cci.ConnectionFactory; import java.util.logging.Level; import java.util.logging.Logger;  @javax.ejb.Stateless public class ExampleBean implements ExampleInterface {     private final static Logger log = Logger.getLogger(ExampleBean.class.getName());      @Resource(mappedName = \&quot;java:/HazelcastCF\&quot;)     protected ConnectionFactory connectionFactory;      public void insert(String key, String value) {         HazelcastConnection hzConn = null;         try {             hzConn = getConnection();             TransactionalMap&lt;String,String&gt; txmap = hzConn.getTransactionalMap(\&quot;txmap\&quot;);             txmap.put(key, value);         } finally {             closeConnection(hzConn);         }     }      private HazelcastConnection getConnection() {         try {             return (HazelcastConnection) connectionFactory.getConnection();         } catch (ResourceException e) {             throw new RuntimeException(\&quot;Error while getting Hazelcast connection\&quot;, e);         }     }      private void closeConnection(HazelcastConnection hzConn) {         if (hzConn != null) {             try {                 hzConn.close();             } catch (ResourceException e) {                 log.log(Level.WARNING, \&quot;Error while closing Hazelcast connection.\&quot;, e);             }         }     } } ```  "
});

documentTitles["index.html#known-issues"] = "Known Issues";
index.add({
    url: "index.html#known-issues",
    title: "Known Issues",
    body: "#### Known Issues  - There is a regression in JBoss EAP 6.1.0 causing failure during Hazelcast Resource Adapter deployment. The issue is fixed in JBoss EAP 6.1.1. Please see &lt;a href=\&quot;https://bugzilla.redhat.com/show_bug.cgi?id=976294\&quot; target=\&quot;_blank\&quot;&gt;this&lt;/a&gt; for additional details.       "
});

documentTitles["index.html#hazelcast-jcache"] = "Hazelcast JCache";
index.add({
    url: "index.html#hazelcast-jcache",
    title: "Hazelcast JCache",
    body: "# Hazelcast JCache  This chapter describes the basics of JCache: the standardized Java caching layer API. The JCache caching API is specified by the Java Community Process (JCP) as Java Specification Request (JSR) 107.  Caching keeps data in memory that either are slow to calculate/process or originate from another underlying backend system. Caching is used to prevent additional request round trips for frequently used data. In both cases, caching could be used to gain performance or decrease application latencies.  "
});

documentTitles["index.html#jcache-overview"] = "JCache Overview";
index.add({
    url: "index.html#jcache-overview",
    title: "JCache Overview",
    body: "## JCache Overview  Starting with Hazelcast release 3.3.1, Hazelcast offers a specification compliant JCache implementation. To show our commitment to this important specification that the Java world was waiting for over a decade, we do not just provide a simple wrapper around our existing APIs; we implemented a caching structure from the ground up to optimize the behavior to the needs of JCache. The Hazelcast JCache implementation is 100% TCK (Technology Compatibility Kit) compliant and therefore passes all specification requirements.  In addition to the given specification, we added some features like asynchronous versions of almost all operations to give the user extra power.    This chapter gives a basic understanding of how to configure your application and how to setup Hazelcast to be your JCache provider. It also shows examples of basic JCache usage as well as the additionally offered features that are not part of JSR-107. To gain a full understanding of the JCache functionality and provided guarantees of different operations, read the specification document (which is also the main documentation for functionality) at the specification page of &lt;a href=\&quot;https://www.jcp.org/en/jsr/detail?id=107\&quot; target=\&quot;_blank\&quot;&gt;JSR-107&lt;/a&gt;.           "
});

documentTitles["index.html#jcache-setup-and-configuration"] = "JCache Setup and Configuration";
index.add({
    url: "index.html#jcache-setup-and-configuration",
    title: "JCache Setup and Configuration",
    body: "## JCache Setup and Configuration  This sub-chapter shows what is necessary to provide the JCache API and the Hazelcast JCache implementation for your application. In addition, it demonstrates the different configuration options as well as a description of the configuration properties.  "
});

documentTitles["index.html#setting-up-your-application"] = "Setting up Your Application";
index.add({
    url: "index.html#setting-up-your-application",
    title: "Setting up Your Application",
    body: "### Setting up Your Application  To provide your application with this JCache functionality, your application needs the JCache API inside its classpath. This API is the bridge between the specified JCache standard and the implementation provided by Hazelcast.  The way to integrate the JCache API JAR into the application classpath depends on the build system used. For Maven, Gradle, SBT, Ivy and many other build systems, all using Maven based dependency repositories, perform the integration by adding the Maven coordinates to the build descriptor.  As already mentioned, next to the default Hazelcast coordinates that might be already part of the application, you have to add JCache coordinates.  For Maven users, the coordinates look like the following code:  ```xml &lt;dependency&gt;   &lt;groupId&gt;javax.cache&lt;/groupId&gt;   &lt;artifactId&gt;cache-api&lt;/artifactId&gt;   &lt;version&gt;1.0.0&lt;/version&gt; &lt;/dependency&gt; ``` With other build systems, you might need to describe the coordinates in a different way.  "
});

documentTitles["index.html#activating-hazelcast-as-jcache-provider"] = "Activating Hazelcast as JCache Provider";
index.add({
    url: "index.html#activating-hazelcast-as-jcache-provider",
    title: "Activating Hazelcast as JCache Provider",
    body: "#### Activating Hazelcast as JCache Provider  To activate Hazelcast as the JCache provider implementation, add either `hazelcast-all.jar` or `hazelcast.jar` to the classpath (if not already available) by either one of the following Maven snippets.  If you use `hazelcast-all.jar`:  ```xml &lt;dependency&gt;   &lt;groupId&gt;com.hazelcast&lt;/groupId&gt;   &lt;artifactId&gt;hazelcast-all&lt;/artifactId&gt;   &lt;version&gt;\&quot;your Hazelcast version, e.g. 3.6.2\&quot;&lt;/version&gt; &lt;/dependency&gt; ```  If you use `hazelcast.jar`:  ```xml &lt;dependency&gt;   &lt;groupId&gt;com.hazelcast&lt;/groupId&gt;   &lt;artifactId&gt;hazelcast&lt;/artifactId&gt;   &lt;version&gt;\&quot;your Hazelcast version, e.g. 3.6.2\&quot;&lt;/version&gt; &lt;/dependency&gt; ``` The users of other build systems have to adjust the way of defining the dependency to their needs.  "
});

documentTitles["index.html#connecting-clients-to-remote-member"] = "Connecting Clients to Remote Member";
index.add({
    url: "index.html#connecting-clients-to-remote-member",
    title: "Connecting Clients to Remote Member",
    body: "#### Connecting Clients to Remote Member  When the users want to use Hazelcast clients to connect to a remote cluster, the `hazelcast-client.jar` dependency is also required on the client side applications. This JAR is already included in `hazelcast-all.jar`. Or, you can add it to the classpath using the following Maven snippet:  ```xml &lt;dependency&gt;   &lt;groupId&gt;com.hazelcast&lt;/groupId&gt;   &lt;artifactId&gt;hazelcast-client&lt;/artifactId&gt;   &lt;version&gt;\&quot;your Hazelcast version, e.g. 3.6.2\&quot;&lt;/version&gt; &lt;/dependency&gt; ```  For other build systems, e.g. ANT, the users have to download these dependencies from either the JSR-107 specification and Hazelcast community website (&lt;a href=\&quot;http://www.hazelcast.org\&quot; target=\&quot;_blank\&quot;&gt;http://www.hazelcast.org&lt;/a&gt;) or from the Maven repository search page (&lt;a href=\&quot;http://search.maven.org\&quot; target=\&quot;_blank\&quot;&gt;http://search.maven.org&lt;/a&gt;).       "
});

documentTitles["index.html#example-jcache-application"] = "Example JCache Application";
index.add({
    url: "index.html#example-jcache-application",
    title: "Example JCache Application",
    body: "### Example JCache Application  Before moving on to configuration, let's have a look at a basic introductory example. The following code shows how to use the Hazelcast JCache integration inside an application in an easy but typesafe way.  ```java // Retrieve the CachingProvider which is automatically backed by // the chosen Hazelcast member or client provider CachingProvider cachingProvider = Caching.getCachingProvider();  // Create a CacheManager CacheManager cacheManager = cachingProvider.getCacheManager();  // Create a simple but typesafe configuration for the cache CompleteConfiguration&lt;String, String&gt; config =     new MutableConfiguration&lt;String, String&gt;()         .setTypes( String.class, String.class );  // Create and get the cache Cache&lt;String, String&gt; cache = cacheManager.createCache( \&quot;example\&quot;, config ); // Alternatively to request an already existing cache // Cache&lt;String, String&gt; cache = cacheManager //     .getCache( name, String.class, String.class );  // Put a value into the cache cache.put( \&quot;world\&quot;, \&quot;Hello World\&quot; );  // Retrieve the value again from the cache String value = cache.get( \&quot;world\&quot; );  // Print the value 'Hello World' System.out.println( value ); ```  Although the example is simple, let's go through the code lines one by one.  "
});

documentTitles["index.html#getting-the-hazelcast-jcache-implementation"] = "Getting the Hazelcast JCache Implementation";
index.add({
    url: "index.html#getting-the-hazelcast-jcache-implementation",
    title: "Getting the Hazelcast JCache Implementation",
    body: "#### Getting the Hazelcast JCache Implementation  First of all, we retrieve the `javax.cache.spi.CachingProvider` using the static method from `javax.cache.Caching:: getCachingManager` which automatically picks up Hazelcast as the underlying JCache implementation, if available in the classpath. This way, the Hazelcast implementation of a `CachingProvider` will automatically start a new Hazelcast node or client (depending on the chosen provider type) and pick up the configuration from either the command line parameter or from the classpath. We will show how to use an existing `HazelcastInstance` later in this chapter, for now we keep it simple.  "
});

documentTitles["index.html#setting-up-the-jcache-entry-point"] = "Setting up the JCache Entry Point";
index.add({
    url: "index.html#setting-up-the-jcache-entry-point",
    title: "Setting up the JCache Entry Point",
    body: "#### Setting up the JCache Entry Point  In the next line, we ask the `CachingProvider` to return a `javax.cache.CacheManager`. This is the general application's entry point into JCache. The `CachingProvider` creates and manages named caches.  "
});

documentTitles["index.html#configuring-the-cache-before-creating-it"] = "Configuring the Cache Before Creating It";
index.add({
    url: "index.html#configuring-the-cache-before-creating-it",
    title: "Configuring the Cache Before Creating It",
    body: "#### Configuring the Cache Before Creating It  The next few lines create a simple `javax.cache.configuration.MutableConfiguration` to configure the cache before actually creating it. In this case, we only configure the key and value types to make the cache typesafe which is highly recommended and checked on retrieval of the cache.  "
});

documentTitles["index.html#creating-the-cache"] = "Creating the Cache";
index.add({
    url: "index.html#creating-the-cache",
    title: "Creating the Cache",
    body: "#### Creating the Cache  To create the cache, we call `javax.cache.CacheManager::createCache` with a name for the cache and the previously created configuration; the call returns the created cache. If you need to retrieve a previously created cache, you can use the corresponding method overload `javax.cache.CacheManager::getCache`. If the cache was created using type parameters, you must retrieve the cache afterward using the type checking version of `getCache`.  "
});

documentTitles["index.html#get-put-and-getandput"] = "get, put, and getAndPut";
index.add({
    url: "index.html#get-put-and-getandput",
    title: "get, put, and getAndPut",
    body: "#### get, put, and getAndPut  The following lines are simple `put` and `get` calls from the `java.util.Map` interface. The `javax.cache.Cache::put` has a `void` return type and does not return the previously assigned value of the key. To imitate the `java.util.Map::put` method, the JCache cache has a method called `getAndPut`.       "
});

documentTitles["index.html#configuring-for-jcache"] = "Configuring for JCache";
index.add({
    url: "index.html#configuring-for-jcache",
    title: "Configuring for JCache",
    body: "### Configuring for JCache  Hazelcast JCache provides two different ways for you to perform cache configuration:  - programmatically: the typical Hazelcast way, using the Config API seen above, - and declaratively: using `hazelcast.xml` or `hazelcast-client.xml`.  "
});

documentTitles["index.html#jcache-declarative-configuration"] = "JCache Declarative Configuration";
index.add({
    url: "index.html#jcache-declarative-configuration",
    title: "JCache Declarative Configuration",
    body: "#### JCache Declarative Configuration  You can declare your JCache cache configuration using the `hazelcast.xml` or `hazelcast-client.xml` configuration files. Using this declarative configuration makes creating the `javax.cache.Cache` fully transparent and automatically ensures internal thread safety. You do not need a call to `javax.cache.Cache::createCache` in this case: you can retrieve the cache using `javax.cache.Cache::getCache` overloads and by passing in the name defined in the configuration for the cache.  To retrieve the cache that you defined in the declaration files, you need only perform a simple call (example below) because the cache is created automatically by the implementation.  ```java CachingProvider cachingProvider = Caching.getCachingProvider(); CacheManager cacheManager = cachingProvider.getCacheManager(); Cache&lt;Object, Object&gt; cache = cacheManager     .getCache( \&quot;default\&quot;, Object.class, Object.class ); ```  Note that this section only describes the JCache provided standard properties. For the Hazelcast specific properties, please see the [ICache Configuration section](#icache-configuration).  ```xml &lt;cache name=\&quot;default\&quot;&gt;   &lt;key-type class-name=\&quot;java.lang.Object\&quot; /&gt;   &lt;value-type class-name=\&quot;java.lang.Object\&quot; /&gt;   &lt;statistics-enabled&gt;false&lt;/statistics-enabled&gt;   &lt;management-enabled&gt;false&lt;/management-enabled&gt;    &lt;read-through&gt;true&lt;/read-through&gt;   &lt;write-through&gt;true&lt;/write-through&gt;   &lt;cache-loader-factory      class-name=\&quot;com.example.cache.MyCacheLoaderFactory\&quot; /&gt;   &lt;cache-writer-factory      class-name=\&quot;com.example.cache.MyCacheWriterFactory\&quot; /&gt;   &lt;expiry-policy-factory      class-name=\&quot;com.example.cache.MyExpirePolicyFactory\&quot; /&gt;    &lt;cache-entry-listeners&gt;     &lt;cache-entry-listener old-value-required=\&quot;false\&quot; synchronous=\&quot;false\&quot;&gt;       &lt;cache-entry-listener-factory          class-name=\&quot;com.example.cache.MyEntryListenerFactory\&quot; /&gt;       &lt;cache-entry-event-filter-factory          class-name=\&quot;com.example.cache.MyEntryEventFilterFactory\&quot; /&gt;     &lt;/cache-entry-listener&gt;     ...   &lt;/cache-entry-listeners&gt; &lt;/cache&gt; ```  - `key-type#class-name`: Fully qualified class name of the cache key type. Its default value is `java.lang.Object`. - `value-type#class-name`: Fully qualified class name of the cache value type. Its default value is `java.lang.Object`. - `statistics-enabled`: If set to true, statistics like cache hits and misses are collected. Its default value is false. - `management-enabled`: If set to true, JMX beans are enabled and collected statistics are provided. It doesn't automatically enable statistics collection. Defaults to false. - `read-through`: If set to true, enables read-through behavior of the cache to an underlying configured `javax.cache.integration.CacheLoader` which is also known as lazy-loading. Its default value is false. - `write-through`: If set to true, enables write-through behavior of the cache to an underlying configured `javax.cache.integration.CacheWriter` which passes any changed value to the external backend resource. Its default value is false. - `cache-loader-factory#class-name`: Fully qualified class name of the `javax.cache.configuration.Factory` implementation providing a `javax.cache.integration.CacheLoader` instance to the cache. - `cache-writer-factory#class-name`: Fully qualified class name of the `javax.cache.configuration.Factory` implementation providing a `javax.cache.integration.CacheWriter` instance to the cache. - `expiry-policy-factory#-class-name`: Fully qualified class name of the `javax.cache.configuration.Factory` implementation providing a `javax.cache.expiry.ExpiryPolicy` instance to the cache. - `cache-entry-listener`: A set of attributes and elements, explained below, to describe a `javax.cache.event. CacheEntryListener`.   - `cache-entry-listener#old-value-required`: If set to true, previously assigned values for the affected keys will be sent to the `javax.cache.event.CacheEntryListener` implementation. Setting this attribute to true creates additional traffic. Its default value is false.   - `cache-entry-listener#synchronous`: If set to true, the `javax.cache.event.CacheEntryListener` implementation will be called in a synchronous manner. Its default value is false.   - `cache-entry-listener/entry-listener-factory#class-name`: Fully qualified class name of the `javax.cache.configuration.Factory` implementation providing a `javax.cache.event.CacheEntryListener` instance.   - `cache-entry-listener/entry-event-filter-factory#class-name`: Fully qualified class name of the `javax.cache.configuration.Factory` implementation providing a `javax.cache.event. CacheEntryEventFilter` instance.  &lt;br&gt;&lt;/br&gt; ![image](images/NoteSmall.jpg) ***NOTE:*** *The JMX MBeans provided by Hazelcast JCache show statistics of the local node only. To show the cluster-wide statistics, the user should collect statistic information from all nodes and accumulate them to the overall statistics.* &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#jcache-programmatic-configuration"] = "JCache Programmatic Configuration";
index.add({
    url: "index.html#jcache-programmatic-configuration",
    title: "JCache Programmatic Configuration",
    body: "#### JCache Programmatic Configuration  To configure the JCache programmatically:  - either instantiate `javax.cache.configuration.MutableConfiguration` if you will use only the JCache standard configuration, - or instantiate `com.hazelcast.config.CacheConfig` for a deeper Hazelcast integration.  `com.hazelcast.config.CacheConfig` offers additional options that are specific to Hazelcast, such as asynchronous and synchronous backup counts. Both classes share the same supertype interface `javax.cache.configuration. CompleteConfiguration` which is part of the JCache standard.  &lt;br&gt;&lt;/br&gt; ![image](images/NoteSmall.jpg) ***NOTE:*** *To stay vendor independent, try to keep your code as near as possible to the standard JCache API. We recommend that you use declarative configuration and that you use the `javax.cache.configuration.Configuration` or `javax.cache.configuration.CompleteConfiguration` interfaces in your code only when you need to pass the configuration instance throughout your code.* &lt;br&gt;&lt;/br&gt;  If you don't need to configure Hazelcast specific properties, we recommend that you instantiate `javax.cache.configuration.MutableConfiguration` and that you use the setters to configure Hazelcast as shown in the example in the [Example JCache Application section](#example-jcache-application). Since the configurable properties are the same as the ones explained in the [JCache Declarative Configuration section](#jcache-declarative-configuration), they are not mentioned here. For Hazelcast specific properties, please read the [ICache Configuration section](#icache-configuration) section.       "
});

documentTitles["index.html#jcache-providers"] = "JCache Providers";
index.add({
    url: "index.html#jcache-providers",
    title: "JCache Providers",
    body: "## JCache Providers  Use JCache providers to create caches for a specification compliant implementation. Those providers abstract the platform specific behavior and bindings, and provide the different JCache required features.  Hazelcast has two types of providers. Depending on your application setup and the cluster topology, you can use the Client Provider (used by Hazelcast clients) or the Server Provider (used by cluster members).  "
});

documentTitles["index.html#configuring-jcache-provider"] = "Configuring JCache Provider";
index.add({
    url: "index.html#configuring-jcache-provider",
    title: "Configuring JCache Provider",
    body: "### Configuring JCache Provider  You configure the JCache `javax.cache.spi.CachingProvider` by either specifying the provider at the command line or by declaring the provider inside the Hazelcast configuration XML file. For more information on setting properties in this XML configuration file, please see the [JCache Declarative Configuration section](#jcache-declarative-configuration).  Hazelcast implements a delegating `CachingProvider` that can automatically be configured for either client or member mode and that delegates to the real underlying implementation based on the user's choice. Hazelcast recommends that you use this `CachingProvider` implementation.  The delegating `CachingProvider`s fully qualified class name is:  ```plain com.hazelcast.cache.HazelcastCachingProvider ```  To configure the delegating provider at the command line, add the following parameter to the Java startup call, depending on the chosen provider:  ```plain -Dhazelcast.jcache.provider.type=[client|server] ```  By default, the delegating `CachingProvider` is automatically picked up by the JCache SPI and provided as shown above. In cases where multiple `javax.cache.spi.CachingProvider` implementations reside on the classpath (like in some Application Server scenarios), you can select a `CachingProvider` by explicitly calling `Caching::getCachingProvider` overloads and providing them using the canonical class name of the provider to be used. The class names of member and client providers provided by Hazelcast are mentioned in the following two subsections.  &lt;br&gt;&lt;/br&gt; ![image](images/NoteSmall.jpg) ***NOTE:*** *Hazelcast advises that you use the `Caching::getCachingProvider` overloads to select a `CachingProvider` explicitly. This ensures that uploading to later environments or Application Server versions doesn't result in unexpected behavior like choosing a wrong `CachingProvider`.* &lt;br&gt;&lt;/br&gt;  For more information on cluster topologies and Hazelcast clients, please see the [Hazelcast Topology section](#hazelcast-topology).       "
});

documentTitles["index.html#configuring-jcache-with-client-provider"] = "Configuring JCache with Client Provider";
index.add({
    url: "index.html#configuring-jcache-with-client-provider",
    title: "Configuring JCache with Client Provider",
    body: "### Configuring JCache with Client Provider  For cluster topologies where Hazelcast light clients are used to connect to a remote Hazelcast cluster, use the Client Provider to configure JCache.  The Client Provider provides the same features as the Server Provider. However, it does not hold data on its own but instead delegates requests and calls to the remotely connected cluster.  The Client Provider can connect to multiple clusters at the same time. This can be achieved by scoping the client side `CacheManager` with different Hazelcast configuration files. For more information, please see [Scoping to Join Clusters](#scoping-to-join-clusters).  To request this `CachingProvider` using `Caching#getCachingProvider( String )` or `Caching#getCachingProvider( String, ClassLoader )`, use the following fully qualified class name:  ```plain com.hazelcast.client.cache.impl.HazelcastClientCachingProvider ```       "
});

documentTitles["index.html#configuring-jcache-with-server-provider"] = "Configuring JCache with Server Provider";
index.add({
    url: "index.html#configuring-jcache-with-server-provider",
    title: "Configuring JCache with Server Provider",
    body: "### Configuring JCache with Server Provider  If a Hazelcast node is embedded into an application directly and the Hazelcast client is not used, the Server Provider is required. In this case, the node itself becomes a part of the distributed cache and requests and operations are distributed directly across the cluster by its given key.  The Server Provider provides the same features as the Client provider, but it keeps data in the local Hazelcast node and also distributes non-owned keys to other direct cluster members.  Like the Client Provider, the Server Provider can connect to multiple clusters at the same time. This can be achieved by scoping the client side `CacheManager` with different Hazelcast configuration files. For more information please see [Scoping to Join Clusters](#scoping-to-join-clusters).  To request this `CachingProvider` using `Caching#getCachingProvider( String )` or `Caching#getCachingProvider( String, ClassLoader )`, use the following fully qualified class name:  ```plain com.hazelcast.cache.impl.HazelcastServerCachingProvider ```      "
});

documentTitles["index.html#jcache-api"] = "JCache API";
index.add({
    url: "index.html#jcache-api",
    title: "JCache API",
    body: "## JCache API  This section explains the JCache API by providing simple examples and use cases. While walking through the examples, we will have a look at a couple of the standard API classes and see how these classes are used.  "
});

documentTitles["index.html#jcache-api-application-example"] = "JCache API Application Example";
index.add({
    url: "index.html#jcache-api-application-example",
    title: "JCache API Application Example",
    body: "### JCache API Application Example   The code in this subsection creates a small account application by providing a caching layer over an imagined database abstraction. The database layer will be simulated using single demo data in a simple DAO interface. To show the difference between the \&quot;database\&quot; access and retrieving values from the cache, a small waiting time is used in the DAO implementation to simulate network and database latency.  "
});

documentTitles["index.html#creating-user-class-example"] = "Creating User Class Example";
index.add({
    url: "index.html#creating-user-class-example",
    title: "Creating User Class Example",
    body: "#### Creating User Class Example  Before we implement the JCache caching layer, let's have a quick look at some basic classes we need for this example.  The `User` class is the representation of a user table in the database. To keep it simple, it has just two properties: `userId` and `username`.  ```java public class User {   private int userId;   private String username;    // Getters and setters } ``` "
});

documentTitles["index.html#creating-dao-interface-example"] = "Creating DAO Interface Example";
index.add({
    url: "index.html#creating-dao-interface-example",
    title: "Creating DAO Interface Example",
    body: "#### Creating DAO Interface Example  The DAO interface is also kept easy in this example. It provides a simple method to retrieve (find) a user by its `userId`.  ```java public interface UserDAO {   User findUserById( int userId );   boolean storeUser( int userId, User user );   boolean removeUser( int userId );   Collection&lt;Integer&gt; allUserIds(); } ``` "
});

documentTitles["index.html#configuring-jcache-example"] = "Configuring JCache Example";
index.add({
    url: "index.html#configuring-jcache-example",
    title: "Configuring JCache Example",
    body: "#### Configuring JCache Example  To show most of the standard features, the configuration example is a little more complex.  ```java // Create javax.cache.configuration.CompleteConfiguration subclass CompleteConfiguration&lt;Integer, User&gt; config =     new MutableConfiguration&lt;Integer, User&gt;()         // Configure the cache to be typesafe         .setTypes( Integer.class, User.class )         // Configure to expire entries 30 secs after creation in the cache         .setExpiryPolicyFactory( FactoryBuilder.factoryOf(             new AccessedExpiryPolicy( new Duration( TimeUnit.SECONDS, 30 ) )         ) )         // Configure read-through of the underlying store         .setReadThrough( true )         // Configure write-through to the underlying store         .setWriteThrough( true )         // Configure the javax.cache.integration.CacheLoader         .setCacheLoaderFactory( FactoryBuilder.factoryOf(             new UserCacheLoader( userDao )         ) )         // Configure the javax.cache.integration.CacheWriter         .setCacheWriterFactory( FactoryBuilder.factoryOf(             new UserCacheWriter( userDao )         ) )         // Configure the javax.cache.event.CacheEntryListener with no         // javax.cache.event.CacheEntryEventFilter, to include old value         // and to be executed synchronously         .addCacheEntryListenerConfiguration(             new MutableCacheEntryListenerConfiguration&lt;Integer, User&gt;(                 new UserCacheEntryListenerFactory(),                 null, true, true             )         ); ```  Let's go through this configuration line by line.  "
});

documentTitles["index.html#setting-the-cache-type-and-expire-policy"] = "Setting the Cache Type and Expire Policy";
index.add({
    url: "index.html#setting-the-cache-type-and-expire-policy",
    title: "Setting the Cache Type and Expire Policy",
    body: "##### Setting the Cache Type and Expire Policy  First, we set the expected types for the cache, which is already known from the previous example. On the next line, an `javax.cache.expiry.ExpirePolicy` is configured. Almost all integration `ExpirePolicy` implementations are configured using `javax.cache.configuration.Factory` instances. `Factory` and `FactoryBuilder` are explained later in this chapter.  "
});

documentTitles["index.html#configuring-read-through-and-write-through"] = "Configuring Read-Through and Write-Through";
index.add({
    url: "index.html#configuring-read-through-and-write-through",
    title: "Configuring Read-Through and Write-Through",
    body: "##### Configuring Read-Through and Write-Through  The next two lines configure the thread that will be read-through and write-through to the underlying backend resource that is configured over the next few lines. The JCache API offers `javax.cache.integration.CacheLoader` and `javax.cache.integration.CacheWriter` to implement adapter classes to any kind of backend resource, e.g. JPA, JDBC, or any other backend technology implementable in Java. The interfaces provides the typical CRUD operations like `create`, `get`, `update`, `delete` and some bulk operation versions of those common operations. We will look into the implementation of those implementations later.  "
});

documentTitles["index.html#configuring-entry-listeners"] = "Configuring Entry Listeners";
index.add({
    url: "index.html#configuring-entry-listeners",
    title: "Configuring Entry Listeners",
    body: "##### Configuring Entry Listeners  The last configuration setting defines entry listeners based on sub-interfaces of `javax.cache.event.CacheEntryListener`. This config does not use a `javax.cache.event.CacheEntryEventFilter` since the listener is meant to be fired on every change that happens on the cache. Again we will look in the implementation of the listener in later in this chapter.  "
});

documentTitles["index.html#full-example-code"] = "Full Example Code";
index.add({
    url: "index.html#full-example-code",
    title: "Full Example Code",
    body: "##### Full Example Code  A full running example that is presented in this subsection is available in the &lt;a href=\&quot;https://github.com/hazelcast/hazelcast-code-samples/tree/master/jcache/src/main/java/com/hazelcast/examples/application\&quot; target=\&quot;_blank\&quot;&gt;code samples repository&lt;/a&gt;. The application is built to be a command line app. It offers a small shell to accept different commands. After startup, you can enter `help` to see all available commands and their descriptions.      "
});

documentTitles["index.html#jcache-base-classes"] = "JCache Base Classes";
index.add({
    url: "index.html#jcache-base-classes",
    title: "JCache Base Classes",
    body: "### JCache Base Classes  In the [Example JCache Application section](#example-jcache-application), we have already seen a couple of the base classes and explained how those work. Following are quick descriptions of them.  **`javax.cache.Caching`**:  The access point into the JCache API. It retrieves the general `CachingProvider` backed by any compliant JCache implementation, such as Hazelcast JCache.  **`javax.cache.spi.CachingProvider`**:  The SPI that is implemented to bridge between the JCache API and the implementation itself. Hazelcast nodes and clients use different providers chosen as seen in the [Configuring JCache Provider section](#configuring-jcache-provider) which enable the JCache API to interact with Hazelcast clusters.  When a `javax.cache.spi.CachingProvider::getCacheManager` overload is used that takes a `java.lang.ClassLoader` argument, this classloader will be part of the scope of the created `java.cache.Cache` and it is not possible to retrieve it on other nodes. We advise not to use those overloads, those are not meant to be used in distributed environments!  **`javax.cache.CacheManager`**:  The `CacheManager` provides the capability to create new and manage existing JCache caches.  &lt;br&gt;&lt;/br&gt; ![image](images/NoteSmall.jpg) ***NOTE:*** *A `javax.cache.Cache` instance created with key and value types in the configuration provides a type checking of those types at retrieval of the cache. For that reason, all non-types retrieval methods like `getCache` throw an exception because types cannot be checked.* &lt;br&gt;&lt;/br&gt;  **`javax.cache.configuration.Configuration`**, **`javax.cache.configuration.MutableConfiguration`**:  These two classes are used to configure a cache prior to retrieving it from a `CacheManager`. The `Configuration` interface, therefore, acts as a common super type for all compatible configuration classes such as `MutableConfiguration`.  Hazelcast itself offers a special implementation (`com.hazelcast.config.CacheConfig`) of the `Configuration` interface which offers more options on the specific Hazelcast properties that can be set to configure features like synchronous and asynchronous backups counts or selecting the underlying [In Memory Format](#setting-in-memory-format) of the cache. For more information on this configuration class, please see the reference in [JCache Programmatic Configuration section](#jcache-programmatic-configuration).  **`javax.cache.Cache`**:  This interface represents the cache instance itself. It is comparable to `java.util.Map` but offers special operations dedicated to the caching use case. Therefore, for example `javax.cache.Cache::put`, unlike `java.util.Map::put`, does not return the old value previously assigned to the given key.  &lt;br&gt;&lt;/br&gt; ![image](images/NoteSmall.jpg) ***NOTE:*** *Bulk operations on the `Cache` interface guarantee atomicity per entry but not over all given keys in the same bulk operations since no transactional behavior is applied over the whole batch process.* &lt;br&gt;&lt;/br&gt;      "
});

documentTitles["index.html#implementing-factory-and-factorybuilder"] = "Implementing Factory and FactoryBuilder";
index.add({
    url: "index.html#implementing-factory-and-factorybuilder",
    title: "Implementing Factory and FactoryBuilder",
    body: "### Implementing Factory and FactoryBuilder  The `javax.cache.configuration.Factory` implementations configure features like `CacheEntryListener`, `ExpirePolicy` and `CacheLoader`s or `CacheWriter`s. These factory implementations are required to distribute the different features to nodes in a cluster environment like Hazelcast. Therefore, these factory implementations have to be serializable.  `Factory` implementations are easy to do: they follow the default Provider- or Factory-Pattern. The sample class `UserCacheEntryListenerFactory` shown below implements a custom JCache `Factory`.  ```java public class UserCacheEntryListenerFactory     implements Factory&lt;CacheEntryListener&lt;Integer, User&gt;&gt; {    @Override   public CacheEntryListener&lt;Integer, User&gt; create() {     // Just create a new listener instance     return new UserCacheEntryListener();   } } ```  To simplify the process for the users, JCache API offers a set of helper methods collected in `javax.cache. configuration.FactoryBuilder`. In the above configuration example, `FactoryBuilder::factoryOf` creates a singleton factory for the given instance.      "
});

documentTitles["index.html#implementing-cacheloader"] = "Implementing CacheLoader";
index.add({
    url: "index.html#implementing-cacheloader",
    title: "Implementing CacheLoader",
    body: "### Implementing CacheLoader  `javax.cache.integration.CacheLoader` loads cache entries from any external backend resource.   "
});

documentTitles["index.html#cache-read-through"] = "Cache read-through";
index.add({
    url: "index.html#cache-read-through",
    title: "Cache read-through",
    body: "#### Cache read-through   If the cache is configured to be `read-through`, then `CacheLoader::load` is called transparently from the cache when the key or the value is not yet found in the cache. If no value is found for a given key, it returns null.  If the cache is not configured to be `read-through`, nothing is loaded automatically. The user code must call `javax.cache.Cache::loadAll` to load data for the given set of keys into the cache.  For the bulk load operation (`loadAll()`), some keys may not be found in the returned result set. In this case, a `javax.cache.integration.CompletionListener` parameter can be used as an asynchronous callback after all the key-value pairs are loaded because loading many key-value pairs can take lots of time.  "
});

documentTitles["index.html#cacheloader-example"] = "CacheLoader Example";
index.add({
    url: "index.html#cacheloader-example",
    title: "CacheLoader Example",
    body: "#### CacheLoader Example  Let's look at the `UserCacheLoader` implementation. This implementation is quite straight forward.  - It implements `CacheLoader`. - It overrides the `load` method to compute or retrieve the value corresponding to `key`. - It overrides the `loadAll` method to compute or retrieve the values corresponding to `keys`.  An important note is that any kind of exception has to be wrapped into `javax.cache.integration.CacheLoaderException`.  ```java public class UserCacheLoader     implements CacheLoader&lt;Integer, User&gt;, Serializable {    private final UserDao userDao;    public UserCacheLoader( UserDao userDao ) {     // Store the dao instance created externally     this.userDao = userDao;   }    @Override   public User load( Integer key ) throws CacheLoaderException {     // Just call through into the dao     return userDao.findUserById( key );   }    @Override   public Map&lt;Integer, User&gt; loadAll( Iterable&lt;? extends Integer&gt; keys )       throws CacheLoaderException {      // Create the resulting map       Map&lt;Integer, User&gt; loaded = new HashMap&lt;Integer, User&gt;();     // For every key in the given set of keys     for ( Integer key : keys ) {       // Try to retrieve the user       User user = userDao.findUserById( key );       // If user is not found do not add the key to the result set       if ( user != null ) {         loaded.put( key, user );       }     }     return loaded;   } } ```     "
});

documentTitles["index.html#cachewriter"] = "CacheWriter";
index.add({
    url: "index.html#cachewriter",
    title: "CacheWriter",
    body: "### CacheWriter  You use a `javax.cache.integration.CacheWriter` to update an external backend resource. If the cache is configured to be `write-through`, this process is executed transparently to the users code. Otherwise, there is currently no way to trigger writing changed entries to the external resource to a user-defined point in time.  If bulk operations throw an exception, `java.util.Collection` has to be cleaned of all successfully written keys so the cache implementation can determine what keys are written and can be applied to the cache state.  The following example performs the following tasks.  - It implements `CacheWriter`. - It overrides the `write` method to write the specified entry to the underlying store. - It overrides the `writeAll` method to write the specified entires to the underlying store. - It overrides the `delete` method to delete the key entry from the store. - It overrides the `deleteAll` method to delete the data and keys from the underlying store for the given collection of keys, if present.  ```java public class UserCacheWriter     implements CacheWriter&lt;Integer, User&gt;, Serializable {    private final UserDao userDao;    public UserCacheWriter( UserDao userDao ) {     // Store the dao instance created externally     this.userDao = userDao;   }    @Override   public void write( Cache.Entry&lt;? extends Integer, ? extends User&gt; entry )       throws CacheWriterException {      // Store the user using the dao     userDao.storeUser( entry.getKey(), entry.getValue() );   }    @Override   public void writeAll( Collection&lt;Cache.Entry&lt;...&gt;&gt; entries )       throws CacheWriterException {      // Retrieve the iterator to clean up the collection from     // written keys in case of an exception     Iterator&lt;Cache.Entry&lt;...&gt;&gt; iterator = entries.iterator();     while ( iterator.hasNext() ) {       // Write entry using dao       write( iterator.next() );       // Remove from collection of keys       iterator.remove();     }   }    @Override   public void delete( Object key ) throws CacheWriterException {     // Test for key type     if ( !( key instanceof Integer ) ) {       throw new CacheWriterException( \&quot;Illegal key type\&quot; );     }     // Remove user using dao     userDao.removeUser( ( Integer ) key );   }    @Override   public void deleteAll( Collection&lt;?&gt; keys ) throws CacheWriterException {     // Retrieve the iterator to clean up the collection from     // written keys in case of an exception     Iterator&lt;?&gt; iterator = keys.iterator();     while ( iterator.hasNext() ) {       // Write entry using dao       delete( iterator.next() );       // Remove from collection of keys       iterator.remove();     }   } } ```  Again the implementation is pretty straight forward and also as above all exceptions thrown by the external resource, like `java.sql.SQLException` has to be wrapped into a `javax.cache.integration.CacheWriterException`. Note this is a different exception from the one thrown by `CacheLoader`.      "
});

documentTitles["index.html#implementing-entryprocessor"] = "Implementing EntryProcessor";
index.add({
    url: "index.html#implementing-entryprocessor",
    title: "Implementing EntryProcessor",
    body: "### Implementing EntryProcessor  With `javax.cache.processor.EntryProcessor`, you can apply an atomic function to a cache entry. In a distributed environment like Hazelcast, you can move the mutating function to the node that owns the key. If the value object is big, it might prevent traffic by sending the object to the mutator and sending it back to the owner to update it.  By default, Hazelcast JCache sends the complete changed value to the backup partition. Again, this can cause a lot of traffic if the object is big. Another option to prevent this is part of the Hazelcast ICache extension. Further information is available at [Implementing BackupAwareEntryProcessor](#implementing-backupawareentryprocessor).  An arbitrary number of arguments can be passed to the `Cache::invoke` and `Cache::invokeAll` methods. All of those arguments need to be fully serializable because in a distributed environment like Hazelcast, it is very likely that these arguments have to be passed around the cluster.  The following example performs the following tasks.  - It implements `EntryProcessor`. - It overrides the `process` method to process an entry.  ```java public class UserUpdateEntryProcessor     implements EntryProcessor&lt;Integer, User, User&gt; {    @Override   public User process( MutableEntry&lt;Integer, User&gt; entry, Object... arguments )       throws EntryProcessorException {      // Test arguments length     if ( arguments.length &lt; 1 ) {       throw new EntryProcessorException( \&quot;One argument needed: username\&quot; );     }      // Get first argument and test for String type     Object argument = arguments[0];     if ( !( argument instanceof String ) ) {       throw new EntryProcessorException(           \&quot;First argument has wrong type, required java.lang.String\&quot; );     }      // Retrieve the value from the MutableEntry     User user = entry.getValue();      // Retrieve the new username from the first argument     String newUsername = ( String ) arguments[0];      // Set the new username     user.setUsername( newUsername );      // Set the changed user to mark the entry as dirty     entry.setValue( user );      // Return the changed user to return it to the caller     return user;   } } ```  &lt;br&gt;&lt;/br&gt; ![image](images/NoteSmall.jpg) ***NOTE:*** *By executing the bulk `Cache::invokeAll` operation, atomicity is only guaranteed for a single cache entry. No transactional rules are applied to the bulk operation.*  ![image](images/NoteSmall.jpg) ***NOTE:*** *JCache `EntryProcessor` implementations are not allowed to call `javax.cache.Cache` methods; this prevents operations from deadlocking between different calls.* &lt;br&gt;&lt;/br&gt;  In addition, when using a `Cache::invokeAll` method, a `java.util.Map` is returned that maps the key to its `javax.cache.processor.EntryProcessorResult`, and which itself wraps the actual result or a thrown `javax.cache.processor.EntryProcessorException`.      "
});

documentTitles["index.html#cacheentrylistener"] = "CacheEntryListener";
index.add({
    url: "index.html#cacheentrylistener",
    title: "CacheEntryListener",
    body: "### CacheEntryListener  The `javax.cache.event.CacheEntryListener` implementation is straight forward. `CacheEntryListener` is a super-interface which is used as a marker for listener classes in JCache. The specification brings a set of sub-interfaces.  - `CacheEntryCreatedListener`: Fires after a cache entry is added (even on read-through by a `CacheLoader`) to the cache. - `CacheEntryUpdatedListener`: Fires after an already existing cache entry was updates. - `CacheEntryRemovedListener`: Fires after a cache entry was removed (not expired) from the cache. - `CacheEntryExpiredListener`: Fires after a cache entry has been expired. Expiry does not have to be parallel process, it is only required to be executed on the keys that are requested by `Cache::get` and some other operations. For a full table of expiry please see the &lt;a href=\&quot;https://www.jcp.org/en/jsr/detail?id=107\&quot; target=\&quot;_blank\&quot;&gt;https://www.jcp.org/en/jsr/detail?id=107&lt;/a&gt; point 6.    To configure `CacheEntryListener`, add a `javax.cache.configuration.CacheEntryListenerConfiguration` instance to the JCache configuration class, as seen in the above example configuration. In addition listeners can be configured to be executed synchronously (blocking the calling thread) or asynchronously (fully running in parallel).  In this example application, the listener is implemented to print event information on the console. That visualizes what is going on in the cache. This application performs the following tasks:  - It implements CacheEntryCreatedListener. - It implements the `onCreated` method to call after an entry is created. - It implements the `onUpdated` method to call after an entry is updated. - It implements the `onRemoved` method to call after an entry is removed. - It implements the `onExpired` method to call after an entry expires. - It implements `printEvents` to print event information on the console.  ```java public class UserCacheEntryListener     implements CacheEntryCreatedListener&lt;Integer, User&gt;,         CacheEntryUpdatedListener&lt;Integer, User&gt;,         CacheEntryRemovedListener&lt;Integer, User&gt;,         CacheEntryExpiredListener&lt;Integer, User&gt; {    @Override   public void onCreated( Iterable&lt;CacheEntryEvent&lt;...&gt;&gt; cacheEntryEvents )       throws CacheEntryListenerException {      printEvents( cacheEntryEvents );   }    @Override   public void onUpdated( Iterable&lt;CacheEntryEvent&lt;...&gt;&gt; cacheEntryEvents )       throws CacheEntryListenerException {      printEvents( cacheEntryEvents );   }    @Override   public void onRemoved( Iterable&lt;CacheEntryEvent&lt;...&gt;&gt; cacheEntryEvents )       throws CacheEntryListenerException {      printEvents( cacheEntryEvents );   }    @Override   public void onExpired( Iterable&lt;CacheEntryEvent&lt;...&gt;&gt; cacheEntryEvents )       throws CacheEntryListenerException {      printEvents( cacheEntryEvents );   }    private void printEvents( Iterable&lt;CacheEntryEvent&lt;...&gt;&gt; cacheEntryEvents ) {     Iterator&lt;CacheEntryEvent&lt;...&gt;&gt; iterator = cacheEntryEvents.iterator();     while ( iterator.hasNext() ) {       CacheEntryEvent&lt;...&gt; event = iterator.next();       System.out.println( event.getEventType() );     }   } } ```      "
});

documentTitles["index.html#expirepolicy"] = "ExpirePolicy";
index.add({
    url: "index.html#expirepolicy",
    title: "ExpirePolicy",
    body: "### ExpirePolicy  In JCache, `javax.cache.expiry.ExpirePolicy` implementations are used to automatically expire cache entries based on different rules.  Expiry timeouts are defined using `javax.cache.expiry.Duration`, which is a pair of `java.util.concurrent.TimeUnit`, which describes a time unit and a long, defining the timeout value. The minimum allowed `TimeUnit` is `TimeUnit.MILLISECONDS`. The long value `durationAmount` must be equal or greater than zero. A value of zero (or `Duration.ZERO`) indicates that the cache entry expires immediately.  By default, JCache delivers a set of predefined expiry strategies in the standard API.  - `AccessedExpiryPolicy`: Expires after a given set of time measured from creation of the cache entry, the expiry timeout is updated on accessing the key. - `CreatedExpiryPolicy`: Expires after a given set of time measured from creation of the cache entry, the expiry timeout is never updated. - `EternalExpiryPolicy`: Never expires, this is the default behavior, similar to `ExpiryPolicy` to be set to null. - `ModifiedExpiryPolicy`: Expires after a given set of time measured from creation of the cache entry, the expiry timeout is updated on updating the key. - `TouchedExpiryPolicy`: Expires after a given set of time measured from creation of the cache entry, the expiry timeout is updated on accessing or updating the key.  Because `EternalExpirePolicy` does not expire cache entries, it is still possible to evict values from memory if an underlying `CacheLoader` is defined.       "
});

documentTitles["index.html#hazelcast-jcache-extension-icache"] = "Hazelcast JCache Extension - ICache";
index.add({
    url: "index.html#hazelcast-jcache-extension-icache",
    title: "Hazelcast JCache Extension - ICache",
    body: "## Hazelcast JCache Extension - ICache  Hazelcast provides extension methods to Cache API through the interface `com.hazelcast.cache.ICache`.  It has two sets of extensions:  * Asynchronous version of all cache operations. See [Async Operations](#icache-async-methoods). * Cache operations with custom `ExpiryPolicy` parameter to apply on that specific operation. See [Custom ExpiryPolicy](#defining-a-custom-expirypolicy).  "
});

documentTitles["index.html#scoping-to-join-clusters"] = "Scoping to Join Clusters";
index.add({
    url: "index.html#scoping-to-join-clusters",
    title: "Scoping to Join Clusters",
    body: "### Scoping to Join Clusters  As mentioned before, you can scope a `CacheManager` in the case of client to connect to multiple clusters. In the case of an embedded node, you can scope a `CacheManager` to join different clusters at the same time. This process is called scoping. To apply scoping, request a `CacheManager` by passing a `java.net.URI` instance to `CachingProvider::getCacheManager`. The `java.net.URI` instance must point to either a Hazelcast configuration or to the name of a named `com.hazelcast.core.HazelcastInstance` instance.  &lt;br&gt;&lt;/br&gt; ![image](images/NoteSmall.jpg) ***NOTE:*** *Multiple requests for the same `java.net.URI` result in returning a `CacheManager` instance that shares the same `HazelcastInstance` as the `CacheManager` returned by the previous call.* &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#applying-configuration-scope"] = "Applying Configuration Scope";
index.add({
    url: "index.html#applying-configuration-scope",
    title: "Applying Configuration Scope",
    body: "#### Applying Configuration Scope  To connect or join different clusters, apply a configuration scope to the `CacheManager`. If the same `URI` is used to request a `CacheManager` that was created previously, those `CacheManager`s share the same underlying `HazelcastInstance`.  To apply a configuration scope, pass in the path of the configuration file using the location property `HazelcastCachingProvider#HAZELCAST_CONFIG_LOCATION` (which resolves to `hazelcast.config.location`) as a mapping inside a `java.util.Properties` instance to the `CachingProvider#getCacheManager(uri, classLoader, properties)` call.  Here is an example of using Configuration Scope.  ```java CachingProvider cachingProvider = Caching.getCachingProvider();  // Create Properties instance pointing to a Hazelcast config file Properties properties = new Properties(); properties.setProperty( HazelcastCachingProvider.HAZELCAST_CONFIG_LOCATION,     \&quot;classpath://my-configs/scoped-hazelcast.xml\&quot; );  URI cacheManagerName = new URI( \&quot;my-cache-manager\&quot; ); CacheManager cacheManager = cachingProvider     .getCacheManager( cacheManagerName, null, properties ); ```  Here is an example using `HazelcastCachingProvider::propertiesByLocation` helper method.  ```java CachingProvider cachingProvider = Caching.getCachingProvider();  // Create Properties instance pointing to a Hazelcast config file String configFile = \&quot;classpath://my-configs/scoped-hazelcast.xml\&quot;; Properties properties = HazelcastCachingProvider     .propertiesByLocation( configFile );  URI cacheManagerName = new URI( \&quot;my-cache-manager\&quot; ); CacheManager cacheManager = cachingProvider     .getCacheManager( cacheManagerName, null, properties ); ```  The retrieved `CacheManager` is scoped to use the `HazelcastInstance` that was just created and was configured using the given XML configuration file.  Available protocols for config file URL include `classpath://` to point to a classpath location, `file://` to point to a filesystem location, `http://` an `https://` for remote web locations. In addition, everything that does not specify a protocol is recognized as a placeholder that can be configured using a system property.  ```java String configFile = \&quot;my-placeholder\&quot;; Properties properties = HazelcastCachingProvider     .propertiesByLocation( configFile ); ```  You can set this on the command line.  ```plain -Dmy-placeholder=classpath://my-configs/scoped-hazelcast.xml ```  &lt;br&gt;&lt;/br&gt; ![image](images/NoteSmall.jpg) ***NOTE:*** *No check is performed to prevent creating multiple `CacheManager`s with the same cluster configuration on different configuration files. If the same cluster is referred from different configuration files, multiple cluster members or clients are created.*  ![image](images/NoteSmall.jpg) ***NOTE:*** *The configuration file location will not be a part of the resulting identity of the `CacheManager`. An attempt to create a `CacheManager` with a different set of properties but an already used name will result in undefined behavior.* &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#binding-to-a-named-instance"] = "Binding to a Named Instance";
index.add({
    url: "index.html#binding-to-a-named-instance",
    title: "Binding to a Named Instance",
    body: "#### Binding to a Named Instance  You can bind `CacheManager` to an existing and named `HazelcastInstance` instance. If the `instanceName` is specified in `com.hazelcast.config.Config`, it can be used directly by passing it to `CachingProvider` implementation. Otherwise (`instanceName` not set or instance is a client instance) you must get the instance name from `HazelcastInstance` instance via the `String getName()` method to pass the `CachingProvider` implementation. Please note that `instanceName` is not configurable for the client side `HazelcastInstance` instance and is auto-generated by using group name (if it is specified). In general, `String getName()` method over `HazelcastInstance` is safer and the preferable way to get the name of the instance. Multiple `CacheManager`s created using an equal `java.net.URI` will share the same `HazelcastInstance`.  A named scope is applied nearly the same way as the configuration scope: pass in the instance name using the `HazelcastCachingProvider#HAZELCAST_INSTANCE_NAME` (which resolves to `hazelcast.instance.name`) property as a mapping inside a `java.util.Properties` instance to the `CachingProvider#getCacheManager(uri, classLoader, properties)` call.  Here is an example of Named Instance Scope with specified name.  ```java Config config = new Config(); config.setInstanceName( \&quot;my-named-hazelcast-instance\&quot; ); // Create a named HazelcastInstance Hazelcast.newHazelcastInstance( config );  CachingProvider cachingProvider = Caching.getCachingProvider();  // Create Properties instance pointing to a named HazelcastInstance Properties properties = new Properties(); properties.setProperty( HazelcastCachingProvider.HAZELCAST_INSTANCE_NAME,      \&quot;my-named-hazelcast-instance\&quot; );  URI cacheManagerName = new URI( \&quot;my-cache-manager\&quot; ); CacheManager cacheManager = cachingProvider     .getCacheManager( cacheManagerName, null, properties ); ```  Here is an example of Named Instance Scope with auto-generated name.  ```java Config config = new Config(); // Create a auto-generated named HazelcastInstance HazelcastInstance instance = Hazelcast.newHazelcastInstance( config ); String instanceName = instance.getName();  CachingProvider cachingProvider = Caching.getCachingProvider();  // Create Properties instance pointing to a named HazelcastInstance Properties properties = new Properties(); properties.setProperty( HazelcastCachingProvider.HAZELCAST_INSTANCE_NAME,       instanceName );  URI cacheManagerName = new URI( \&quot;my-cache-manager\&quot; ); CacheManager cacheManager = cachingProvider     .getCacheManager( cacheManagerName, null, properties ); ```  Here is an example of Named Instance Scope with auto-generated name on client instance.  ```java ClientConfig clientConfig = new ClientConfig(); ClientNetworkConfig networkConfig = clientConfig.getNetworkConfig(); networkConfig.addAddress(\&quot;127.0.0.1\&quot;, \&quot;127.0.0.2\&quot;);  // Create a client side HazelcastInstance HazelcastInstance instance = HazelcastClient.newHazelcastClient( clientConfig ); String instanceName = instance.getName();  CachingProvider cachingProvider = Caching.getCachingProvider();  // Create Properties instance pointing to a named HazelcastInstance Properties properties = new Properties(); properties.setProperty( HazelcastCachingProvider.HAZELCAST_INSTANCE_NAME,       instanceName );  URI cacheManagerName = new URI( \&quot;my-cache-manager\&quot; ); CacheManager cacheManager = cachingProvider     .getCacheManager( cacheManagerName, null, properties ); ```  Here is an example using `HazelcastCachingProvider::propertiesByInstanceName` method.  ```java Config config = new Config(); config.setInstanceName( \&quot;my-named-hazelcast-instance\&quot; ); // Create a named HazelcastInstance Hazelcast.newHazelcastInstance( config );  CachingProvider cachingProvider = Caching.getCachingProvider();  // Create Properties instance pointing to a named HazelcastInstance Properties properties = HazelcastCachingProvider     .propertiesByInstanceName( \&quot;my-named-hazelcast-instance\&quot; );  URI cacheManagerName = new URI( \&quot;my-cache-manager\&quot; ); CacheManager cacheManager = cachingProvider     .getCacheManager( cacheManagerName, null, properties ); ```  &lt;br&gt;&lt;/br&gt; ![image](images/NoteSmall.jpg) ***NOTE:*** *The `instanceName` will not be a part of the resulting identity of the `CacheManager`. An attempt to create a `CacheManager` with a different set of properties but an already used name will result in undefined behavior.* &lt;br&gt;&lt;/br&gt;   "
});

documentTitles["index.html#namespacing"] = "Namespacing";
index.add({
    url: "index.html#namespacing",
    title: "Namespacing",
    body: "### Namespacing  The `java.net.URI`s that don't use the above mentioned Hazelcast specific schemes are recognized as namespacing. Those `CacheManager`s share the same underlying default `HazelcastInstance` created (or set) by the `CachingProvider`, but they cache with the same names and different namespaces on the `CacheManager` level, and therefore they won't share the same data. This is useful where multiple applications might share the same Hazelcast JCache implementation (e.g. on application or OSGi servers) but are developed by independent teams. To prevent interfering on caches using the same name, every application can use its own namespace when retrieving the `CacheManager`.  Here is an example of using namespacing.  ```java CachingProvider cachingProvider = Caching.getCachingProvider();  URI nsApp1 = new URI( \&quot;application-1\&quot; ); CacheManager cacheManagerApp1 = cachingProvider.getCacheManager( nsApp1, null );  URI nsApp2 = new URI( \&quot;application-2\&quot; ); CacheManager cacheManagerApp2 = cachingProvider.getCacheManager( nsApp2, null ); ```  That way both applications share the same `HazelcastInstance` instance but not the same caches.      "
});

documentTitles["index.html#retrieving-an-icache-instance"] = "Retrieving an ICache Instance";
index.add({
    url: "index.html#retrieving-an-icache-instance",
    title: "Retrieving an ICache Instance",
    body: "### Retrieving an ICache Instance  Besides [Scoping to Join Clusters](#scoping-to-join-clusters) and [Namespacing](#namespacing), which are implemented using the URI feature of the specification, all other extended operations are required to retrieve the `com.hazelcast.cache.ICache` interface instance from the JCache `javax.cache.Cache` instance. For Hazelcast, both interfaces are implemented on the same object instance. It is recommended that you stay with the specification way to retrieve the `ICache` version, since `ICache` might be subject to change without notification.  To retrieve or unwrap the `ICache` instance, you can execute the following code example:  ```java CachingProvider cachingProvider = Caching.getCachingProvider(); CacheManager cacheManager = cachingProvider.getCacheManager(); Cache&lt;Object, Object&gt; cache = cacheManager.getCache( ... );  ICache&lt;Object, Object&gt; unwrappedCache = cache.unwrap( ICache.class ); ```  After unwrapping the `Cache` instance into an `ICache` instance, you have access to all of the following operations, e.g. [ICache Async Methods](#icache-async-methods) and [ICache Convenience Methods](#icache-convenience-methods).     "
});

documentTitles["index.html#icache-configuration"] = "ICache Configuration";
index.add({
    url: "index.html#icache-configuration",
    title: "ICache Configuration",
    body: "### ICache Configuration  As mentioned in the [JCache Declarative Configuration section](#jcache-declarative-configuration), the Hazelcast ICache extension offers additional configuration properties over the default JCache configuration. These additional properties include internal storage format, backup counts, eviction policy and quorum reference.  The declarative configuration for ICache is a superset of the previously discussed JCache configuration:  ```xml &lt;cache&gt;   &lt;!-- ... default cache configuration goes here ... --&gt;   &lt;backup-count&gt;1&lt;/backup-count&gt;   &lt;async-backup-count&gt;1&lt;/async-backup-count&gt;   &lt;in-memory-format&gt;BINARY&lt;/in-memory-format&gt;   &lt;eviction size=\&quot;10000\&quot; max-size-policy=\&quot;ENTRY_COUNT\&quot; eviction-policy=\&quot;LRU\&quot; /&gt;   &lt;partition-lost-listeners&gt;      &lt;partition-lost-listener&gt;CachePartitionLostListenerImpl&lt;/partition-lost-listener&gt;  &lt;/partition-lost-listeners&gt;  &lt;quorum-ref&gt;quorum-name&lt;/quorum-ref&gt; &lt;/cache&gt; ```  - `backup-count`: Number of synchronous backups. Those backups are executed before the mutating cache operation is finished. The mutating operation is blocked. `backup-count` default value is 1. - `async-backup-count`: Number of asynchronous backups. Those backups are executed asynchronously so the mutating operation is not blocked and it will be done immediately. `async-backup-count` default value is 0.   - `in-memory-format`: Internal storage format. For more information, please see the [In Memory Format section](#setting-in-memory-format). Default is `BINARY`. - `eviction`: Defines the used eviction strategies and sizes for the cache. For more information on eviction, please see the [JCache Eviction](#jcache-eviction).   - `size`: Maximum number of records or maximum size in bytes depending on the `max-size-policy` property. Size can be any integer between `0` and `Integer.MAX_VALUE`. Default max-size-policy is `ENTRY_COUNT` and default size is `10.000`.   - `max-size-policy`: Maximum size. If maximum size is reached, the cache is evicted based on the eviction policy. Default max-size-policy is `ENTRY_COUNT` and default size is `10.000`. The following eviction policies are available:     - `ENTRY_COUNT`: Maximum number of cache entries in the cache. **Available on heap based cache record store only.**     - `USED_NATIVE_MEMORY_SIZE`: Maximum used native memory size in megabytes per cache for each Hazelcast instance. **Available on High-Density Memory cache record store only.**     - `USED_NATIVE_MEMORY_PERCENTAGE`: Maximum used native memory size percentage per cache for each Hazelcast instance. **Available on High-Density Memory cache record store only.**     - `FREE_NATIVE_MEMORY_SIZE`: Minimum free native memory size in megabytes for each Hazelcast instance. **Available on High-Density Memory cache record store only.**     - `FREE_NATIVE_MEMORY_PERCENTAGE`: Minimum free native memory size percentage for each Hazelcast instance. **Available on High-Density Memory cache record store only.**   - `eviction-policy`: Eviction policy which compares values to find the best matching eviction candidate. Default is `LRU`.     - `LRU`: Less Recently Used - finds the best eviction candidate based on the lastAccessTime.     - `LFU`: Less Frequently Used - finds the best eviction candidate based on the number of hits. - `partition-lost-listeners` : Defines listeners for dispatching partition lost events for the cache. For more information, please see the [ICache Partition Lost Listener section](#icache-partition-lost-listener). - `quorum-ref` : Name of quorum configuration that you want this cache to use.  Since `javax.cache.configuration.MutableConfiguration` misses the above additional configuration properties, Hazelcast ICache extension provides an extended configuration class called `com.hazelcast.config.CacheConfig`. This class is an implementation of `javax.cache.configuration.CompleteConfiguration` and all the properties shown above can be configured using its corresponding setter methods.   &lt;br&gt;&lt;/br&gt; ![image](images/NoteSmall.jpg) ***NOTE:*** *At the client side, ICache can be configured only programmatically.* &lt;br&gt;&lt;/br&gt;      "
});

documentTitles["index.html#icache-async-methods"] = "ICache Async Methods";
index.add({
    url: "index.html#icache-async-methods",
    title: "ICache Async Methods",
    body: "### ICache Async Methods  As another addition of Hazelcast ICache over the normal JCache specification, Hazelcast provides asynchronous versions of almost all methods, returning a `com.hazelcast.core.ICompletableFuture`. By using these methods and the returned future objects, you can use JCache in a reactive way by registering zero or more callbacks on the future to prevent blocking the current thread.   The asynchronous versions of the methods append the phrase `Async` to the method name. The example code below uses the method `putAsync()`.  ```java ICache&lt;Integer, String&gt; unwrappedCache = cache.unwrap( ICache.class ); ICompletableFuture&lt;String&gt; future = unwrappedCache.putAsync( 1, \&quot;value\&quot; ); future.andThen( new ExecutionCallback&lt;String&gt;() {   public void onResponse( String response ) {     System.out.println( \&quot;Previous value: \&quot; + response );   }    public void onFailure( Throwable t ) {     t.printStackTrace();   } } ); ```  Following methods are available in asynchronous versions:   - `get(key)`:   - `getAsync(key)`   - `getAsync(key, expiryPolicy)`  - `put(key, value)`:   - `putAsync(key, value)`   - `putAsync(key, value, expiryPolicy)`  - `putIfAbsent(key, value)`:   - `putIfAbsentAsync(key, value)`   - `putIfAbsentAsync(key, value, expiryPolicy)`  - `getAndPut(key, value)`:   - `getAndPutAsync(key, value)`   - `getAndPutAsync(key, value, expiryPolicy)`  - `remove(key)`:   - `removeAsync(key)`  - `remove(key, value)`:   - `removeAsync(key, value)`  - `getAndRemove(key)`:   - `getAndRemoveAsync(key)`  - `replace(key, value)`:   - `replaceAsync(key, value)`   - `replaceAsync(key, value, expiryPolicy)`  - `replace(key, oldValue, newValue)`:   - `replaceAsync(key, oldValue, newValue)`   - `replaceAsync(key, oldValue, newValue, expiryPolicy)`  - `getAndReplace(key, value)`:   - `getAndReplaceAsync(key, value)`   - `getAndReplaceAsync(key, value, expiryPolicy)`  The methods with a given `javax.cache.expiry.ExpiryPolicy` are further discussed in the [Defining a Custom ExpiryPolicy](#defining-a-custom-expirypolicy).  &lt;br&gt;&lt;/br&gt; ![image](images/NoteSmall.jpg) ***NOTE:*** *Asynchronous versions of the methods are not compatible with synchronous events.* &lt;br&gt;&lt;/br&gt;     "
});

documentTitles["index.html#defining-a-custom-expirypolicy"] = "Defining a Custom ExpiryPolicy";
index.add({
    url: "index.html#defining-a-custom-expirypolicy",
    title: "Defining a Custom ExpiryPolicy",
    body: "### Defining a Custom ExpiryPolicy  The JCache specification has an option to configure a single `ExpiryPolicy` per cache. Hazelcast ICache extension offers the possibility to define a custom `ExpiryPolicy` per key by providing a set of method overloads with an `expirePolicy` parameter, as in the list of asynchronous methods in the [Async Methods section](#icache-async-methods). This means that you can pass custom expiry policies to a cache operation.  Here is how an `ExpirePolicy` is set on JCache configuration:  ```java CompleteConfiguration&lt;String, String&gt; config =     new MutableConfiguration&lt;String, String&gt;()         setExpiryPolicyFactory(             AccessedExpiryPolicy.factoryOf( Duration.ONE_MINUTE )         ); ```  To pass a custom `ExpirePolicy`, a set of overloads is provided. You can use them as shown in the following code example.  ```java ICache&lt;Integer, String&gt; unwrappedCache = cache.unwrap( ICache.class ); unwrappedCache.put( 1, \&quot;value\&quot;, new AccessedExpiryPolicy( Duration.ONE_DAY ) ); ```  The `ExpirePolicy` instance can be pre-created, cached, and re-used, but only for each cache instance. This is because `ExpirePolicy` implementations can be marked as `java.io.Closeable`. The following list shows the provided method overloads over `javax.cache.Cache` by `com.hazelcast.cache.ICache` featuring the `ExpiryPolicy` parameter:   - `get(key)`:   - `get(key, expiryPolicy)`  - `getAll(keys)`:   - `getAll(keys, expirePolicy)`  - `put(key, value)`:   - `put(key, value, expirePolicy)`  - `getAndPut(key, value)`:   - `getAndPut(key, value, expirePolicy)`  - `putAll(map)`:   - `putAll(map, expirePolicy)`  - `putIfAbsent(key, value)`:   - `putIfAbsent(key, value, expirePolicy)`  - `replace(key, value)`:   - `replace(key, value, expirePolicy)`  - `replace(key, oldValue, newValue)`:   - `replace(key, oldValue, newValue, expirePolicy)`  - `getAndReplace(key, value)`:   - `getAndReplace(key, value, expirePolicy)`  Asynchronous method overloads are not listed here. Please see [ICache Async Methods](#icache-async-methods) for the list of asynchronous method overloads.      "
});

documentTitles["index.html#jcache-eviction"] = "JCache Eviction";
index.add({
    url: "index.html#jcache-eviction",
    title: "JCache Eviction",
    body: "### JCache Eviction  Caches are generally not expected to grow to an infinite size. Implementing an [expiry policy](#expirepolicy) is one way you can prevent the infinite growth, but sometimes it is hard to define a meaningful expiration timeout. Therefore, Hazelcast JCache provides the eviction feature. Eviction offers the possibility to remove entries based on the cache size or amount of used memory (Hazelcast Enterprise Only) and not based on timeouts.  "
});

documentTitles["index.html#eviction-and-runtime"] = "Eviction and Runtime";
index.add({
    url: "index.html#eviction-and-runtime",
    title: "Eviction and Runtime",
    body: "#### Eviction and Runtime  Since a cache is designed for high throughput and fast reads, Hazelcast put a lot of effort into designing the eviction system to be as predictable as possible. All built-in implementations provide an amortized O(1) runtime. The default operation runtime is rendered as O(1), but it can be faster than the normal runtime cost if the algorithm finds an expired entry while sampling.  "
});

documentTitles["index.html#cache-types"] = "Cache Types";
index.add({
    url: "index.html#cache-types",
    title: "Cache Types",
    body: "#### Cache Types  Most importantly, typical production systems have two common types of caches:  - **Reference Caches**: Caches for reference data are normally small and are used to speed up the de-referencing as a lookup table. Those caches are commonly tend to be small and contain a previously known, fixed number of elements (e.g. states of the USA or abbreviations of elements). - **Active DataSet Caches**:  The other type of caches normally caches an active data set. These caches run to their maximum size and evict the oldest or not frequently used entries to keep in memory bounds. They sit in front of a database or HTML generators to cache the latest requested data.  Hazelcast JCache eviction supports both types of caches using a slightly different approach based on the configured maximum size of the cache. For detailed information, please see the [Eviction Algorithm section](#eviction-algorithm).  "
});

documentTitles["index.html#configuring-eviction-policies"] = "Configuring Eviction Policies";
index.add({
    url: "index.html#configuring-eviction-policies",
    title: "Configuring Eviction Policies",
    body: "#### Configuring Eviction Policies  Hazelcast JCache provides two commonly known eviction policies, LRU and LFU, but loosens the rules for predictable runtime behavior. LRU, normally recognized as `Least Recently Used`, is implemented as `Less Recently Used`, and LFU known as `Least Frequently Used` is implemented as `Less Frequently Used`. The details about this difference is explained in the [Eviction Algorithm section](#eviction-algorithm).  Eviction Policies are configured by providing the corresponding abbreviation to the configuration as shown in the [ICache Configuration section](#icache-configuration). As already mentioned, two built-in policies are available:  To configure the use of the LRU (Less Recently Used) policy:  ```xml &lt;eviction size=\&quot;10000\&quot; max-size-policy=\&quot;ENTRY_COUNT\&quot; eviction-policy=\&quot;LRU\&quot; /&gt; ```  And to configure the use of the LFU (Less Frequently Used) policy:  ```xml &lt;eviction size=\&quot;10000\&quot; max-size-policy=\&quot;ENTRY_COUNT\&quot; eviction-policy=\&quot;LFU\&quot; /&gt; ```  The default eviction policy is LRU. Therefore, Hazelcast JCache does not offer the possibility to perform no eviction.  "
});

documentTitles["index.html#eviction-strategy"] = "Eviction Strategy";
index.add({
    url: "index.html#eviction-strategy",
    title: "Eviction Strategy",
    body: "#### Eviction Strategy  Eviction strategies implement the logic of selecting one or more eviction candidates from the underlying storage implementation and passing them to the eviction policies. Hazelcast JCache provides an amortized O(1) cost implementation for this strategy to select a fixed number of samples from the current partition that it is executed against.  The default implementation is `com.hazelcast.cache.impl.eviction.impl.strategy.sampling.SamplingBasedEvictionStrategy` which, as mentioned, samples random 15 elements. A detailed description of the algorithm will be explained in the next section.  "
});

documentTitles["index.html#eviction-algorithm"] = "Eviction Algorithm";
index.add({
    url: "index.html#eviction-algorithm",
    title: "Eviction Algorithm",
    body: "#### Eviction Algorithm  The Hazelcast JCache eviction algorithm is specially designed for the use case of high performance caches and with predictability in mind. The built-in implementations provide an amortized O(1) runtime and therefore provide a highly predictable runtime behavior which does not rely on any kind of background threads to handle the eviction. Therefore, the algorithm takes some assumptions into account to prevent network operations and concurrent accesses.  As an explanation of how the algorithm works, let's examine the following flowchart step by step.  ![Eviction Flowchart for Hazelcast JCache](images/eviction-flowchart.png)  1. A new cache is created. Without any special settings, the eviction is configured to kick in when the **cache** exceeds 10.000 elements and an LRU (Less Recently Used) policy is set up. 2. The user puts in a new entry (e.g. a key-value pair). 3. For every put, the eviction strategy evaluates the current cache size and decides if an eviction is necessary or not. If not the entry is stored in step 10. 4. If eviction is required, a new sampling is started. The built-in sampler is implemented as an lazy iterator. 5. The sampling algorithm selects a random sample from the underlying data storage. 6. The eviction strategy tests the sampled entry to already be expired (lazy expiration). If expired, the sampling stops and the entry is removed in step 9. 7. If not yet expired, the entry (eviction candidate) is compared to the last best matching candidate (based on the eviction policy) and the new best matching candidate is remembered. 8. The sampling is repeated for 15 times and then the best matching eviction candidate is returned to the eviction strategy. 9. The expired or best matching eviction candidate is removed from the underlying data storage. 10. The new put entry is stored. 11. The put operation returns to the user.  As seen by the flowchart, the general eviction operation is easy. As long as the cache does not reach its maximum capacity or you execute updates (put/replace), no eviction is executed.  To prevent network operations and concurrent access, as mentioned earlier, the cache size is estimated based on the size of the currently handled partition. Due to the imbalanced partitions, the single partitions might start to evict earlier than the other partitions.  As mentioned in the [Cache Types section](#cache-types), typically two types of caches are found in the production systems. For small caches, referred to as *Reference Caches*, the eviction algorithm has a special set of rules depending on the maximum configured cache size. Please see the [Reference Caches section](#reference-caches) for details. The other type of cache is referred to as *Active DataSet Cache*, which in most cases makes heavy use of the eviction to keep the most active data set in the memory. Those kinds of caches using a very simple but efficient way to estimate the cluster-wide cache size.  All of the following calculations have a well known set of fixed variables:  - `GlobalCapacity`: User defined maximum cache size (cluster-wide). - `PartitionCount`: Number of partitions in the cluster (defaults to 271). - `BalancedPartitionSize`: Number of elements in a balanced partition state, `BalancedPartitionSize := GlobalCapacity / PartitionCount`. - `Deviation`: An approximated standard deviation (tests proofed it to be pretty near), `Deviation := sqrt(BalancedPartitionSize)`.  "
});

documentTitles["index.html#reference-caches"] = "Reference Caches";
index.add({
    url: "index.html#reference-caches",
    title: "Reference Caches",
    body: "##### Reference Caches  A Reference Cache is typically small and the number of elements to store in the reference caches is normally  known prior to creating the cache. Typical examples of reference caches are lookup tables for abbreviations or the states of a country. They tend to have a fixed but small element number and the eviction is an unlikely event and rather undesirable behavior.  Since an imbalanced partition is the worst problem in the small and mid-sized caches than for the caches with millions of entries, the normal estimation rule (as discussed in a bit) is not applied to these kinds of caches. To prevent unwanted eviction on the small and mid-sized caches, Hazelcast implements a special set of rules to estimate the cluster size.  To adjust the imbalance of partitions as found in the typical runtime, the actual calculated maximum cache size (as known as the eviction threshold) is slightly higher than the user defined size. That means more elements can be stored into the cache than expected by the user. This needs to be taken into account especially for large objects, since those can easily exceed the expected memory consumption!  **Small caches:**  If a cache is configured with no more than `4.000` element, this cache is considered to be a small cache. The actual partition size is derived from the number of elements (`GlobalCapacity`) and the deviation using the following formula:  ```plain MaxPartitionSize := Deviation * 5 + BalancedPartitionSize ```  This formula ends up with big partition sizes which summed up exceed the expected maximum cache size (set by the user),  but since the small caches typically have a well known maximum number of elements, this is not a big issue. Only if the small caches are used for a use case other than using it as a reference cache, this needs to be taken into account.  **Mid-sized caches**  A mid-sized cache is defined as a cache with a maximum number of elements that is bigger than `4.000` but not bigger than `1.000.000` elements. The calculation of mid-sized caches is similar to that of the small caches but with a different multiplier. To calculate the maximum number of elements per partition, the following formula is used:  ```plain MaxPartitionSize := Deviation * 3 + BalancedPartitionSize ```  "
});

documentTitles["index.html#active-dataset-caches"] = "Active DataSet Caches";
index.add({
    url: "index.html#active-dataset-caches",
    title: "Active DataSet Caches",
    body: "##### Active DataSet Caches  For large caches, where the maximum cache size is bigger than `1.000.000` elements, there is no additional calculation needed. The maximum partition size is considered to be equal to `BalancedPartitionSize` since statistically big partitions are expected to almost balance themselves. Therefore, the formula is as easy as the following:  ```plain MaxPartitionSize := BalancedPartitionSize ```  "
});

documentTitles["index.html#cache-size-estimation"] = "Cache Size Estimation";
index.add({
    url: "index.html#cache-size-estimation",
    title: "Cache Size Estimation",
    body: "##### Cache Size Estimation  As mentioned earlier, Hazelcast JCache provides an estimation algorithm to prevent cluster-wide network operations, concurrent access to other partitions and background tasks. It also offers a highly predictable operation runtime when the eviction is necessary.  The estimation algorithm is based on the previously calculated maximum partition size (please see the [Reference Caches section](#reference-caches) and [Active DataSet Caches section](#active-dataset-caches)) and is calculated against the current partition only.  The algorithm to reckon the number of stored entries in the cache (cluster-wide) and if the eviction is necessary is shown in the following pseudo-code example:  ```plain RequiresEviction[Boolean] := CurrentPartitionSize &gt;= MaxPartitionSize ```    "
});

documentTitles["index.html#jcache-near-cache"] = "JCache Near Cache";
index.add({
    url: "index.html#jcache-near-cache",
    title: "JCache Near Cache",
    body: "### JCache Near Cache  Cache entries in Hazelcast are stored as partitioned across the cluster.  When you try to read a record with the key `k`, if the current node is not the owner of that key (i.e. not the owner of partition that the key belongs to),  Hazelcast sends a remote operation to the owner node. Each remote operation means lots of network trips.  If your cache is used for mostly read operations, it is advised to use a near cache storage in front of the cache itself to read cache records faster and consume less network traffic. &lt;br&gt;&lt;br&gt; ![image](images/NoteSmall.jpg) ***NOTE:*** *Near cache for JCache is only available for clients NOT members.* &lt;br&gt;&lt;br&gt;  However, using near cache comes with some trade-off for some cases:  - There will be extra memory consumption for storing near cache records at local. - If invalidation is enabled and entries are updated frequently, there will be many invalidation events across the cluster. - Near cache does not give strong consistency but gives eventual consistency guarantees. It is possible to read stale data.  "
});

documentTitles["index.html#configuring-invalidation-event-sending"] = "Configuring Invalidation Event Sending";
index.add({
    url: "index.html#configuring-invalidation-event-sending",
    title: "Configuring Invalidation Event Sending",
    body: "#### Configuring Invalidation Event Sending  Invalidation is the process of removing an entry from the near cache since the entry is not valid anymore (its value is updated or it is removed from actual cache). Near cache invalidation happens asynchronously at the cluster level, but synchronously in real-time at the current node. This means when an entry is updated (explicitly or via entry processor) or removed (deleted explicitly or via entry processor, evicted, expired), it is invalidated from all near caches asynchronously within the whole cluster but updated/removed at/from the current node synchronously. Generally, whenever the state of an entry changes in the record store by updating its value or removing it, the invalidation event is sent for that entry.  Invalidation events can be sent either individually or in batches. If there are lots of mutating operations such as put/remove on the cache, sending the events in batches is advised. This reduces the network traffic and keeps the eventing system less busy.   You can use the following system properties to configure the sending of invalidation events in batches:  - `hazelcast.cache.invalidation.batch.enabled`: Specifies whether the cache invalidation event batch sending is enabled or not. The default value is `true`. - `hazelcast.cache.invalidation.batch.size`: Maximum number of cache invalidation events to be drained and sent to the event listeners in a batch. The default value is `100`. - `hazelcast.cache.invalidation.batchfrequency.seconds`: Cache invalidation event batch sending frequency in seconds. When event size does not reach to `hazelcast.cache.invalidation.batch.size` in the given time period, those events are gathered into a batch and sent to the target. The default value is `10` seconds.  So if there are so many clients or so many mutating operations, batching should remain enabled and the batch size should be configured with the `hazelcast.cache.invalidation.batch.size` system property to a suitable value.  "
});

documentTitles["index.html#jcache-near-cache-expiration"] = "JCache Near Cache Expiration";
index.add({
    url: "index.html#jcache-near-cache-expiration",
    title: "JCache Near Cache Expiration",
    body: "#### JCache Near Cache Expiration  Expiration means the eviction of expired records. A record is expired:  - if it is not touched (accessed/read) for `&lt;max-idle-seconds&gt;`, - `&lt;time-to-live-seconds&gt;` passed since it is put to near-cache.  Expiration is performed in two cases:  - When a record is accessed, it is checked about if it is expired or not. If it is expired, it is evicted and returns `null` to caller. - In the background, there is an expiration task that periodically (currently 5 seconds) scans records and evicts the expired records.   "
});

documentTitles["index.html#configuring-jcache-near-cache-eviction"] = "Configuring JCache Near Cache Eviction";
index.add({
    url: "index.html#configuring-jcache-near-cache-eviction",
    title: "Configuring JCache Near Cache Eviction",
    body: "#### Configuring JCache Near Cache Eviction  In the scope of near cache, eviction means evicting (clearing) the entries selected according to the given `eviction-policy` when the specified `max-size-policy` has been reached. Eviction is handled with `max-size policy` and `eviction-policy` elements. Please see [Configuring JCache Near Cache](#configuring-jcache-near-cache).  "
});

documentTitles["index.html#max-size-policy"] = "`max-size-policy`";
index.add({
    url: "index.html#max-size-policy",
    title: "`max-size-policy`",
    body: "##### `max-size-policy`  This element defines the state when near cache is full and whether the eviction should be triggered. The following policies for maximum cache size are supported by the near cache eviction:  - **ENTRY_COUNT:** Maximum size based on the entry count in the near cache. Available only for `BINARY` and `OBJECT` in-memory formats. - **USED_NATIVE_MEMORY_SIZE:** Maximum used native memory size of the specified near cache in MB to trigger the eviction. If the used native memory size exceeds this threshold, the eviction is triggered.  Available only for `NATIVE` in-memory format. This is supported only by Hazelcast Enterprise. - **USED_NATIVE_MEMORY_PERCENTAGE:** Maximum used native memory percentage of the specified near cache to trigger the eviction. If the native memory usage percentage (relative to maximum native memory size) exceeds this threshold, the eviction is triggered. Available only for `NATIVE` in-memory format. This is supported only by Hazelcast Enterprise. - **FREE_NATIVE_MEMORY_SIZE:** Minimum free native memory size of the specified near cache in MB to trigger the eviction.  If free native memory size goes down below of this threshold, eviction is triggered. Available only for `NATIVE` in-memory format. This is supported only by Hazelcast Enterprise. - **FREE_NATIVE_MEMORY_PERCENTAGE:** Minimum free native memory percentage of the specified near cache to trigger eviction. If free native memory percentage (relative to maximum native memory size) goes down below of this threshold, eviction is triggered. Available only for `NATIVE` in-memory format. This is supported only by Hazelcast Enterprise.  "
});

documentTitles["index.html#eviction-policy"] = "`eviction-policy`";
index.add({
    url: "index.html#eviction-policy",
    title: "`eviction-policy`",
    body: "##### `eviction-policy`   Once a near cache is full (reached to its maximum size as specified with the `max-size-policy` element), an eviction policy determines which, if any, entries must be evicted. Currently, the following eviction policies are supported by near cache eviction:  - LRU (Least Recently Used) - LFU (Least Frequently Used)  "
});

documentTitles["index.html#configuring-jcache-near-cache"] = "Configuring JCache Near Cache";
index.add({
    url: "index.html#configuring-jcache-near-cache",
    title: "Configuring JCache Near Cache",
    body: "#### Configuring JCache Near Cache  The following are example configurations for JCache near cache.  **Declarative**:  ```xml &lt;hazelcast-client&gt;     ...     &lt;near-cache name=\&quot;myCache\&quot;&gt;         &lt;in-memory-format&gt;BINARY&lt;/in-memory-format&gt;         &lt;invalidate-on-change&gt;true&lt;/invalidate-on-change&gt;         &lt;cache-local-entries&gt;false&lt;/cache-local-entries&gt;         &lt;time-to-live-seconds&gt;3600000&lt;/time-to-live-seconds&gt;         &lt;max-idle-seconds&gt;600000&lt;/max-idle-seconds&gt;         &lt;eviction size=\&quot;1000\&quot; max-size-policy=\&quot;ENTRY_COUNT\&quot; eviction-policy=\&quot;LFU\&quot;/&gt;     &lt;/near-cache&gt;     ... &lt;/hazelcast-client&gt; ```  **Programmatic**:  ```java EvictionConfig evictionConfig = new EvictionConfig(); evictionConfig.setMaxSizePolicy(MaxSizePolicy.ENTRY_COUNT); evictionConfig.setEvictionPolicy(EvictionPolicy.LFU); evictionConfig.setSize(10000);   NearCacheConfig nearCacheConfig =     new NearCacheConfig()         .setName(\&quot;myCache\&quot;)         .setInMemoryFormat(InMemoryFormat.BINARY)         .setInvalidateOnChange(true)         .setCacheLocalEntries(false)         .setTimeToLiveSeconds(60 * 60 * 1000) // 1 hour TTL         .setMaxIdleSeconds(10 * 60 * 1000) // 10 minutes max idle seconds         .setEvictionConfig(evictionConfig);  ...  clientConfig.addNearCacheConfig(nearCacheConfig); ```  The following are the definitions of the configuration elements and attributes.  - `in-memory-format`: Storage type of near cache entries. Available values are `BINARY`, `OBJECT` and `NATIVE_MEMORY`. `NATIVE_MEMORY` is available only for Hazelcast Enterprise. Default value is `BINARY`. - `invalidate-on-change`: Specifies whether the cached entries are evicted when the entries are changed (updated or removed) on the local and global. Available values are `true` and `false`. Default value is `true`. - `cache-local-entries`: Specifies whether the local cache entries are stored eagerly (immediately) to near cache when a put operation from the local is performed on the cache. Available values are `true` and `false`. Default value is `false`. - `time-to-live-seconds`: Maximum number of seconds for each entry to stay in the near cache. Entries that are older than `&lt;time-to-live-seconds&gt;` will be automatically evicted from the near cache. It can be any integer between `0` and `Integer.MAX_VALUE`. `0` means **infinite**. Default value is `0`. - `max-idle-seconds`: Maximum number of seconds each entry can stay in the near cache as untouched (not-read). Entries that are not read (touched) more than `&lt;max-idle-seconds&gt;` value will be removed from the near cache. It can be any integer between `0` and `Integer.MAX_VALUE`. `0` means `Integer.MAX_VALUE`. Default is `0`. - `eviction`: Specifies when the eviction is triggered (`max-size policy`) and which eviction policy (`LRU` or `LFU`) is used for the entries to be evicted. The default value for `max-size-policy` is `ENTRY_COUNT`, default `size` is `10000` and default `eviction-policy` is `LRU`. For High-Density Memory Store near cache, since `ENTRY_COUNT` eviction policy is not supported yet, you must explicitly configure eviction with one of the supported policies: 	- `USED_NATIVE_MEMORY_SIZE` 	- `USED_NATIVE_MEMORY_PERCENTAGE` 	- `FREE_NATIVE_MEMORY_SIZE` 	- `FREE_NATIVE_MEMORY_PERCENTAGE`.  Near cache can be configured only at the client side.  &lt;br&gt;&lt;br&gt; ![image](images/NoteSmall.jpg) ***NOTE:*** *It is recommended to specify a `time-to-live-seconds` value to guarantee the eventual eviction of invalidated near cache records.* &lt;br&gt;&lt;br&gt;   "
});

documentTitles["index.html#lookup-for-client-near-cache-configuration"] = "Lookup for Client Near Cache Configuration";
index.add({
    url: "index.html#lookup-for-client-near-cache-configuration",
    title: "Lookup for Client Near Cache Configuration",
    body: "#### Lookup for Client Near Cache Configuration  Near cache configuration can be defined at the client side (using `hazelcast-client.xml` or `ClientConfig`) as independent configuration (independent from the `CacheConfig`). Near cache configuration lookup is handled as described below:  - Look for near cache configuration with the name of the cache given in the client configuration. - If a defined near cache configuration is found, use this near cache configuration defined at the client. - Otherwise:  	- If there is a defined default near cache configuration is found, use this default near cache configuration. 	- If there is no default near cache configuration, it means there is no near cache configuration for cache. 	        "
});

documentTitles["index.html#icache-convenience-methods"] = "ICache Convenience Methods";
index.add({
    url: "index.html#icache-convenience-methods",
    title: "ICache Convenience Methods",
    body: "### ICache Convenience Methods  In addition to the operations explained in [ICache Async Methods](#icache-async-methods) and [Defining a Custom ExpiryPolicy](#defining-a-custom-expirypolicy), Hazelcast ICache also provides a set of convenience methods. These methods are not part of the JCache specification.   - `size()`: Returns the estimated size of the distributed cache.  - `destroy()`: Destroys the cache and removes the data from memory. This is different from the method `javax.cache.Cache::close`.  - `getLocalCacheStatistics()`: Returns a `com.hazelcast.cache.CacheStatistics` instance providing the same statistics data as the JMX beans. This method is not available yet on Hazelcast clients: the exception `java.lang.UnsupportedOperationException` is thrown when you use this method on a Hazelcast client.      "
});

documentTitles["index.html#implementing-backupawareentryprocessor"] = "Implementing BackupAwareEntryProcessor";
index.add({
    url: "index.html#implementing-backupawareentryprocessor",
    title: "Implementing BackupAwareEntryProcessor",
    body: "### Implementing BackupAwareEntryProcessor  Another feature, especially interesting for distributed environments like Hazelcast, is the JCache specified `javax.cache.processor.EntryProcessor`. For more general information, please see the [Implementing EntryProcessor section](#implementing-entryprocessor).  Since Hazelcast provides backups of cached entries on other nodes, the default way to backup an object changed by an `EntryProcessor` is to serialize the complete object and send it to the backup partition. This can be a huge network overhead for big objects.  Hazelcast offers a sub-interface for `EntryProcessor` called `com.hazelcast.cache.BackupAwareEntryProcessor`. This allows you to create or pass another `EntryProcessor` to run on backup partitions and apply delta changes to the backup entries.  The backup partition `EntryProcessor` can either be the currently running processor (by returning `this`) or it can be a specialized `EntryProcessor` implementation (other from the currently running one) which does different operations or leaves out operations, e.g. sending emails.  If we again take the `EntryProcessor` example from the demonstration application provided in the [Implementing EntryProcessor section](#implementing-entryprocessor), the changed code will look like the following snippet.  ```java public class UserUpdateEntryProcessor     implements BackupAwareEntryProcessor&lt;Integer, User, User&gt; {    @Override   public User process( MutableEntry&lt;Integer, User&gt; entry, Object... arguments )       throws EntryProcessorException {      // Test arguments length     if ( arguments.length &lt; 1 ) {       throw new EntryProcessorException( \&quot;One argument needed: username\&quot; );     }      // Get first argument and test for String type     Object argument = arguments[0];     if ( !( argument instanceof String ) ) {       throw new EntryProcessorException(           \&quot;First argument has wrong type, required java.lang.String\&quot; );     }      // Retrieve the value from the MutableEntry     User user = entry.getValue();      // Retrieve the new username from the first argument     String newUsername = ( String ) arguments[0];      // Set the new username     user.setUsername( newUsername );      // Set the changed user to mark the entry as dirty     entry.setValue( user );      // Return the changed user to return it to the caller     return user;   }    public EntryProcessor&lt;K, V, T&gt; createBackupEntryProcessor() {     return this;   } } ```  You can use the additional method `BackupAwareEntryProcessor::createBackupEntryProcessor` to create or return the `EntryProcessor` implementation to run on the backup partition (in the example above, the same processor again).  &lt;br&gt;&lt;/br&gt; ![image](images/NoteSmall.jpg) ***NOTE:*** *For the backup runs, the returned value from the backup processor is ignored and not returned to the user.* &lt;br&gt;&lt;/br&gt;      "
});

documentTitles["index.html#icache-partition-lost-listener"] = "ICache Partition Lost Listener";
index.add({
    url: "index.html#icache-partition-lost-listener",
    title: "ICache Partition Lost Listener",
    body: "### ICache Partition Lost Listener  You can listen to `CachePartitionLostEvent` instances by registering an implementation of `CachePartitionLostListener`, which is also a sub-interface of `java.util.EventListener` from `ICache`.  Let's consider the following example code:  ```java   public static void main(String[] args) {     CachingProvider cachingProvider = Caching.getCachingProvider();     CacheManager cacheManager = cachingProvider.getCacheManager();     Cache&lt;Object, Object&gt; cache = cacheManager.getCache( ... );      ICache&lt;Object, Object&gt; unwrappedCache = cache.unwrap( ICache.class );      unwrappedCache.addPartitionLostListener(new CachePartitionLostListener() {      @Override      public void partitionLost(CachePartitionLostEvent event) {        System.out.println(event);      }     });   } ```  Within this example code, a `CachePartitionLostListener` implementation is registered to a cache and assume that this cache is configured with 1 backup. For this particular cache and any of the partitions in the system, if the partition owner member and its first backup member crash simultaneously, the given `CachePartitionLostListener` receives a corresponding `CachePartitionLostEvent`. If only a single member crashes in the cluster, a `CachePartitionLostEvent` is not fired for this cache since backups for the partitions owned by the crashed member are kept on other members.  Please refer to the [Partition Lost Listener section](#listening-for-partition-lost-events) for more information about partition lost detection and partition lost events.     "
});

documentTitles["index.html#jcache-split-brain"] = "JCache Split-Brain";
index.add({
    url: "index.html#jcache-split-brain",
    title: "JCache Split-Brain",
    body: "### JCache Split-Brain  Split-Brain handling is internally supported as a service inside Hazelcast (see [Network Partitioning](#network-partitioning-split-brain-syndrome) for more details) and `JCache` uses same infrastructure with `IMap` to support Split-Brain. You can specify cache merge policy to determine which entry is used while merging. You can also provide your own cache merge policy implementations through `CacheMergePolicyInterface`.  ![image](images/NoteSmall.jpg) ***NOTE:*** *Split-Brain is only supported for heap based JCache but not for HD-JCache since merging high volume of data in consistent way may cause significant performance loss on the system.*  "
});

documentTitles["index.html#cachemergepolicy-interface"] = "`CacheMergePolicy` Interface";
index.add({
    url: "index.html#cachemergepolicy-interface",
    title: "`CacheMergePolicy` Interface",
    body: "#### `CacheMergePolicy` Interface  After split clusters are joined again, they merge their entries with each other. This merge process is handled over the `CacheMergePolicy` interface. The `CacheMergePolicy` instance takes two entries: the owned entry, and the merging entry which comes from the joined cluster. The `CacheEntryView` instance wraps the key, value, and some metadata about the entry (such as creation time, expiration time and access hit). Then the `CacheMergePolicy` instance selects one of the entries and returns it. The returned entry is used as the stored cache entry.  "
});

documentTitles["index.html#cacheentryview"] = "`CacheEntryView`";
index.add({
    url: "index.html#cacheentryview",
    title: "`CacheEntryView`",
    body: "##### `CacheEntryView`  Wraps key, value and some metadata (such as expiration time, last access time and access hit of cache entry) and exposes them to outside as read only.  "
});

documentTitles["index.html#cachemergepolicy"] = "`CacheMergePolicy`";
index.add({
    url: "index.html#cachemergepolicy",
    title: "`CacheMergePolicy`",
    body: "##### `CacheMergePolicy`  Policy for merging cache entries. Entries from joined clusters are merged by using this policy to select one of them from source and target.  Passed `CacheEntryView` instances wrap the key and value as their original types, with conversion to object from their storage types.  If the user doesn't need the original types of key and value, you should use `StorageTypeAwareCacheMergePolicy` which is a sub-type of this interface.  "
});

documentTitles["index.html#storagetypeawarecachemergepolicy"] = "`StorageTypeAwareCacheMergePolicy`";
index.add({
    url: "index.html#storagetypeawarecachemergepolicy",
    title: "`StorageTypeAwareCacheMergePolicy`",
    body: "##### `StorageTypeAwareCacheMergePolicy`   Marker interface indicating that the key and value wrapped by `CacheEntryView` will be not converted to their original types.  The motivation of this interface is that while merging cache entries, actual key and value are not usually not checked. Therefore, there is no need to convert them to their original types.  At worst case, value is returned from the merge method as selected, meaning that in all cases, value is accessed. So even if the the conversion is done as lazy, it will be processed at this point. But by default, key and value are converted to their original types unless this `StorageTypeAwareCacheMergePolicy` is used.  Another motivation for using this interface is that at the member side, there is no need to locate classes of stored entries. It means that entries can be put from the client with `BINARY` in-memory format and the classpath of the client can be different from the member. So in this case, if entries try to convert to their original types while merging, `ClassNotFoundException` is thrown here.  As a result, both for performance and for the `ClassNotFoundException` mentioned above, it is strongly recommended that you use this interface if the original values of key and values are not needed.  "
});

documentTitles["index.html#configuration"] = "Configuration";
index.add({
    url: "index.html#configuration",
    title: "Configuration",
    body: "#### Configuration  There are four built-in cache merge policies: - **Pass Through:** Merges cache entry from source to destination directly. You can specify this policy with its full class name as `com.hazelcast.cache.merge.PassThroughCacheMergePolicy` or with its constant name as `PASS_THROUGH`. - **Put If Absent:** Merges cache entry from source to destination if it does not exist in the destination cache. You can specify this policy with its full class name as `com.hazelcast.cache.merge.PutIfAbsentCacheMergePolicy` or with its constant name as `PUT_IF_ABSENT`. - **Higher Hits:** Merges cache entry from source to destination cache if source entry has more hits than the destination one. You can specify this policy with its full class name as `com.hazelcast.cache.merge.HigherHitsCacheMergePolicy` or with its constant name as `HIGHER_HITS`. - **Latest Access:** Merges cache entry from source to destination cache if source entry has been accessed more recently than the destination entry. You can specify this policy with its full class name as `com.hazelcast.cache.merge.LatestAccessCacheMergePolicy` or with its constant name as `LATEST_ACCESS`.  You can access full class names or constant names of all build-in cache merge policies over `com.hazelcast.cache.BuiltInCacheMergePolicies` enum. You can specify merge policy configuration for cache declaratively or programmatically.  The following are example configurations for JCache Split-Brain.  **Declarative**:  ```xml &lt;cache name=\&quot;cacheWithBuiltInMergePolicyAsConstantName\&quot;&gt;     ...     &lt;merge-policy&gt;HIGHER_HITS&lt;/merge-policy&gt;     ... &lt;/cache&gt;&lt;cache name=\&quot;cacheWithBuiltInMergePolicyAsFullClassName\&quot;&gt;     ...     &lt;merge-policy&gt;com.hazelcast.cache.merge.LatestAccessCacheMergePolicy&lt;/merge-policy&gt;     ... &lt;/cache&gt; &lt;cache name=\&quot;cacheWithBuiltInMergePolicyAsCustomImpl\&quot;&gt;     ...     &lt;merge-policy&gt;com.mycompany.cache.merge.MyCacheMergePolicy&lt;/merge-policy&gt;     ... &lt;/cache&gt; ```  **Programmatic**:  ```java CacheConfig cacheConfigWithBuiltInMergePolicyAsConstantName = new CacheConfig(); cacheConfig.setMergePolicy(BuiltInCacheMergePolicies.HIGGER_HITS.name());    CacheConfig cacheConfigWithBuiltInMergePolicyAsFullClassName = new CacheConfig(); cacheConfig.setMergePolicy(BuiltInCacheMergePolicies.LATEST_ACCESS.getImplementationClassName());    CacheConfig cacheConfigWithBuiltInMergePolicyAsCustomImpl = new CacheConfig(); cacheConfig.setMergePolicy(\&quot;com.mycompany.cache.merge.MyCacheMergePolicy\&quot;); ```     "
});

documentTitles["index.html#testing-for-jcache-specification-compliance"] = "Testing for JCache Specification Compliance";
index.add({
    url: "index.html#testing-for-jcache-specification-compliance",
    title: "Testing for JCache Specification Compliance",
    body: "## Testing for JCache Specification Compliance  Hazelcast JCache is fully compliant with the JSR 107 TCK (Technology Compatibility Kit), therefore it is officially a JCache implementation. This is tested by running the TCK against the Hazelcast implementation.  You can test Hazelcast JCache for compliance by executing the TCK. Just perform the instructions below:   1. Checkout the TCK from &lt;a href=\&quot;https://github.com/jsr107/jsr107tck\&quot; target=\&quot;_blank\&quot;&gt;https://github.com/jsr107/jsr107tck&lt;/a&gt;. 2. Change the properties in `tck-parent/pom.xml` as shown below. 3. Run the TCK by `mvn clean install`.   ```xml &lt;properties&gt;   &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;   &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;    &lt;CacheInvocationContextImpl&gt;     javax.cache.annotation.impl.cdi.CdiCacheKeyInvocationContextImpl   &lt;/CacheInvocationContextImpl&gt;    &lt;domain-lib-dir&gt;${project.build.directory}/domainlib&lt;/domain-lib-dir&gt;   &lt;domain-jar&gt;domain.jar&lt;/domain-jar&gt;     &lt;!-- ################################################################# --&gt;   &lt;!-- Change the following properties on the command line        to override with the coordinates for your implementation--&gt;   &lt;implementation-groupId&gt;com.hazelcast&lt;/implementation-groupId&gt;   &lt;implementation-artifactId&gt;hazelcast&lt;/implementation-artifactId&gt;   &lt;implementation-version&gt;3.4&lt;/implementation-version&gt;    &lt;!-- Change the following properties to your CacheManager and        Cache implementation. Used by the unwrap tests. --&gt;   &lt;CacheManagerImpl&gt;     com.hazelcast.client.cache.impl.HazelcastClientCacheManager   &lt;/CacheManagerImpl&gt;   &lt;CacheImpl&gt;com.hazelcast.cache.ICache&lt;/CacheImpl&gt;   &lt;CacheEntryImpl&gt;     com.hazelcast.cache.impl.CacheEntry   &lt;/CacheEntryImpl&gt;    &lt;!-- Change the following to point to your MBeanServer, so that        the TCK can resolve it. --&gt;   &lt;javax.management.builder.initial&gt;     com.hazelcast.cache.impl.TCKMBeanServerBuilder   &lt;/javax.management.builder.initial&gt;   &lt;org.jsr107.tck.management.agentId&gt;     TCKMbeanServer   &lt;/org.jsr107.tck.management.agentId&gt;   &lt;jsr107.api.version&gt;1.0.0&lt;/jsr107.api.version&gt;    &lt;!-- ################################################################# --&gt; &lt;/properties&gt; ```  This will run the tests using an embedded Hazelcast Member.    "
});

documentTitles["index.html#integrated-clustering"] = "Integrated Clustering";
index.add({
    url: "index.html#integrated-clustering",
    title: "Integrated Clustering",
    body: "# Integrated Clustering  In this chapter, we show you how Hazelcast is integrated with Hibernate 2nd level cache and Spring, and how Hazelcast helps with your Filter, Tomcat and Jetty based web session replications.  The [Hibernate Second Level Cache section](#hibernate-second-level-cache) tells how you should configure both Hazelcast and Hibernate to integrate them. It explains the modes of Hazelcast that can be used by Hibernate and also provides how to perform advanced settings like accessing the underlying Hazelcast instance used by Hibernate.  The [Web Session Replication section](#web-session-replication) tells how to cluster user HTTP sessions automatically. You will learn how to enable session replication using filter based solution. In addition, Tomcat and Jetty specific modules will be explained.  The [Spring Integration section](#spring-integration) tells how you can integrate Hazelcast into a Spring project by explaining the Hazelcast instance and client configurations with the *hazelcast* namespace. It also lists the supported Spring bean attributes.         "
});

documentTitles["index.html#hibernate-second-level-cache"] = "Hibernate Second Level Cache";
index.add({
    url: "index.html#hibernate-second-level-cache",
    title: "Hibernate Second Level Cache",
    body: "## Hibernate Second Level Cache  Hazelcast provides distributed second level cache for your Hibernate entities, collections and queries.   "
});

documentTitles["index.html#sample-code-for-hibernate"] = "Sample Code for Hibernate";
index.add({
    url: "index.html#sample-code-for-hibernate",
    title: "Sample Code for Hibernate",
    body: "### Sample Code for Hibernate  Please see our &lt;a href=\&quot;https://github.com/hazelcast/hazelcast-code-samples/tree/master/hazelcast-integration/hibernate-2ndlevel-cache\&quot; target=\&quot;_blank\&quot;&gt;sample application&lt;/a&gt; for Hibernate Second Level Cache.  "
});

documentTitles["index.html#supported-hibernate-versions"] = "Supported Hibernate Versions";
index.add({
    url: "index.html#supported-hibernate-versions",
    title: "Supported Hibernate Versions",
    body: "### Supported Hibernate Versions  - hibernate 3.3.x+ - hibernate 4.x  "
});

documentTitles["index.html#configuring-hibernate-for-hazelcast"] = "Configuring Hibernate for Hazelcast";
index.add({
    url: "index.html#configuring-hibernate-for-hazelcast",
    title: "Configuring Hibernate for Hazelcast",
    body: "### Configuring Hibernate for Hazelcast  To configure Hibernate for Hazelcast:  - Add `hazelcast-hibernate3-&lt;`*hazelcastversion*`&gt;.jar` or `hazelcast- hibernate4-&lt;`*hazelcastversion*`&gt;.jar` into your classpath depending on your Hibernate version. - Then add the following properties into your Hibernate configuration file (e.g. `hibernate.cfg.xml`).  "
});

documentTitles["index.html#enabling-second-level-cache"] = "Enabling Second Level Cache";
index.add({
    url: "index.html#enabling-second-level-cache",
    title: "Enabling Second Level Cache",
    body: "#### Enabling Second Level Cache  ```xml &lt;property name=\&quot;hibernate.cache.use_second_level_cache\&quot;&gt;true&lt;/property&gt; ```  "
});

documentTitles["index.html#configuring-regionfactory"] = "Configuring RegionFactory";
index.add({
    url: "index.html#configuring-regionfactory",
    title: "Configuring RegionFactory",
    body: "#### Configuring RegionFactory  You can configure Hibernate RegionFactory with `HazelcastCacheRegionFactory` or `HazelcastLocalCacheRegionFactory`.  "
});

documentTitles["index.html#hazelcastcacheregionfactory"] = "HazelcastCacheRegionFactory";
index.add({
    url: "index.html#hazelcastcacheregionfactory",
    title: "HazelcastCacheRegionFactory",
    body: "##### HazelcastCacheRegionFactory  `HazelcastCacheRegionFactory` uses standard Hazelcast Distributed Maps to cache the data, so all cache operations go through the wire.  ```xml     &lt;property name=\&quot;hibernate.cache.region.factory_class\&quot;&gt;    com.hazelcast.hibernate.HazelcastCacheRegionFactory &lt;/property&gt; ```  All operations like `get`, `put`, and `remove` will be performed using the Distributed Map logic. The only downside of using `HazelcastCacheRegionFactory` may be lower performance compared to `HazelcastLocalCacheRegionFactory` since operations are handled as distributed calls.  ![image](images/NoteSmall.jpg) ***NOTE:*** *If you use `HazelcastCacheRegionFactory`, you can see your maps on [Management Center](#management-center).*  With `HazelcastCacheRegionFactory`, all of the following caches are distributed across Hazelcast Cluster.  - Entity Cache - Collection Cache - Timestamp Cache  "
});

documentTitles["index.html#hazelcastlocalcacheregionfactory"] = "HazelcastLocalCacheRegionFactory";
index.add({
    url: "index.html#hazelcastlocalcacheregionfactory",
    title: "HazelcastLocalCacheRegionFactory",
    body: "##### HazelcastLocalCacheRegionFactory  You can use `HazelcastLocalCacheRegionFactory` which stores data in a local node and sends invalidation messages when an entry is updated/deleted locally.  ```xml &lt;property name=\&quot;hibernate.cache.region.factory_class\&quot;&gt;   com.hazelcast.hibernate.HazelcastLocalCacheRegionFactory &lt;/property&gt; ```  With `HazelcastLocalCacheRegionFactory`, each cluster member has a local map and each of them is registered to a Hazelcast Topic (ITopic). Whenever a `put` or `remove` operation is performed on a member, an invalidation message is generated on the ITopic and sent to the other members. Those other members remove the related key-value pair on their local maps as soon as they get these invalidation messages. The new value is only updated on this member when a `get` operation runs on that key. In the case of `get` operations, invalidation messages are not generated and reads are performed on the local map.  An illustration of the above logic is shown below.  ![HazelcastLocalCacheRegionFactory Invalidation](images/HZLocalCacheRgnFactory.jpg)  If your operations are mostly reads, then this option gives better performance.  ![image](images/NoteSmall.jpg) ***NOTE:*** *If you use `HazelcastLocalCacheRegionFactory`, you cannot see your maps on [Management Center](#management-center).*  With `HazelcastLocalCacheRegionFactory`, all of the following caches are not distributed and are kept locally in the Hazelcast Node.  - Entity Cache - Collection Cache - Timestamp Cache  Entity and Collection are invalidated on update. When they are updated on a node, an invalidation message is sent to all other nodes in order to remove the entity from their local cache. When needed, each node reads that data from the underlying DB.   Timestamp cache is replicated. On every update, a replication message is sent to all the other nodes.  Eviction support is limited to maximum size of the map (defined by `max-size` configuration element) and TTL only. When maximum size is hit, 20% of the entries will be evicted automatically.  "
});

documentTitles["index.html#configuring-query-cache-and-other-settings"] = "Configuring Query Cache and Other Settings";
index.add({
    url: "index.html#configuring-query-cache-and-other-settings",
    title: "Configuring Query Cache and Other Settings",
    body: "#### Configuring Query Cache and Other Settings  -   To enable use of query cache:  	```xml 	&lt;property name=\&quot;hibernate.cache.use_query_cache\&quot;&gt;true&lt;/property&gt; 	```  -   To force minimal puts into query cache:  	```xml 	&lt;property name=\&quot;hibernate.cache.use_minimal_puts\&quot;&gt;true&lt;/property&gt; 	```  -   To avoid `NullPointerException` when you have entities that have composite keys (using `@IdClass`):      ```xml 	&lt;property name=\&quot;hibernate.session_factory_name\&quot;&gt;yourFactoryName&lt;/property&gt; 	``` 	 ![image](images/NoteSmall.jpg) ***NOTE:*** *QueryCache is always LOCAL to the node and never distributed across Hazelcast Cluster.*  "
});

documentTitles["index.html#configuring-hazelcast-for-hibernate"] = "Configuring Hazelcast for Hibernate";
index.add({
    url: "index.html#configuring-hazelcast-for-hibernate",
    title: "Configuring Hazelcast for Hibernate",
    body: "### Configuring Hazelcast for Hibernate  To configure Hazelcast for Hibernate, put the configuration file named `hazelcast.xml` into the root of your classpath. If Hazelcast cannot find `hazelcast.xml`, then it will use the default configuration from `hazelcast.jar`.  You can define a custom-named Hazelcast configuration XML file with one of these Hibernate configuration properties.  ```xml &lt;property name=\&quot;hibernate.cache.provider_configuration_file_resource_path\&quot;&gt;   hazelcast-custom-config.xml &lt;/property&gt; ```   ```xml &lt;property name=\&quot;hibernate.cache.hazelcast.configuration_file_path\&quot;&gt;   hazelcast-custom-config.xml &lt;/property&gt; ```  Hazelcast creates a separate distributed map for each Hibernate cache region. You can easily configure these regions via Hazelcast map configuration. You can define **backup**, **eviction**, **TTL** and **Near Cache** properties.  - [Backup Configuration](#backing-up-maps)  - [Eviction And TTL Configuration](#evicting-map-entries)  - [Near Cache Configuration](#creating-near-cache-for-map)  "
});

documentTitles["index.html#setting-p2p-peer-to-peer-for-hibernate"] = "Setting P2P (Peer-to-Peer) for Hibernate";
index.add({
    url: "index.html#setting-p2p-peer-to-peer-for-hibernate",
    title: "Setting P2P (Peer-to-Peer) for Hibernate",
    body: "### Setting P2P (Peer-to-Peer) for Hibernate  Hibernate Second Level Cache can use Hazelcast in two modes: Peer-to-Peer (P2P) and Client/Server (next section).  With P2P mode, each Hibernate deployment launches its own Hazelcast Instance. You can also configure Hibernate to use an existing instance, instead of creating a new `HazelcastInstance` for each `SessionFactory`. To do this, set the `hibernate.cache.hazelcast.instance_name` Hibernate property to the `HazelcastInstance`'s name. For more information, please see [Named Instance Scope](#binding-to-a-named-instance).  **Disabling shutdown during SessionFactory.close()**  You can disable shutting down `HazelcastInstance` during `SessionFactory.close()`. To do this, set the Hibernate property `hibernate.cache.hazelcast.shutdown_on_session_factory_close` to false. *(In this case, you should not set the Hazelcast property `hazelcast.shutdownhook.enabled` to false.)* The default value is `true`.   "
});

documentTitles["index.html#setting-clientserver-for-hibernate"] = "Setting Client/Server for Hibernate";
index.add({
    url: "index.html#setting-clientserver-for-hibernate",
    title: "Setting Client/Server for Hibernate",
    body: "### Setting Client/Server for Hibernate  You can set up Hazelcast to connect to the cluster as Native Client. Native client is not a member; it connects to one of the cluster members and delegates all cluster wide operations to it. Client instance started in the Native Client mode uses Smart Routing: when the relied cluster member dies, the client transparently switches to another live member. All client operations are Retry-able, meaning that the client resends the request as many as 10 times in case of a failure. After the 10th retry, it throws an exception. You cannot change the routing mode and retry-able operation configurations of the Native Client instance used by Hibernate 2nd Level Cache. Please see the [Smart Routing section](#setting-smart-routing) and [Retry-able Operation Failure section](#handling-retry-able-operation-failure) for more details.  ```xml    &lt;property name=\&quot;hibernate.cache.hazelcast.use_native_client\&quot;&gt;true&lt;/property&gt; ```  To set up Native Client, add the Hazelcast **group-name**, **group-password** and **cluster member address** properties. Native Client will connect to the defined member and will get the addresses of all members in the cluster. If the connected member dies or leaves the cluster, the client will automatically switch to another member in the cluster.  ```xml   &lt;property name=\&quot;hibernate.cache.hazelcast.native_client_address\&quot;&gt;10.34.22.15&lt;/property&gt; &lt;property name=\&quot;hibernate.cache.hazelcast.native_client_group\&quot;&gt;dev&lt;/property&gt; &lt;property name=\&quot;hibernate.cache.hazelcast.native_client_password\&quot;&gt;dev-pass&lt;/property&gt; ```  ![image](images/NoteSmall.jpg) ***NOTE***: *To use Native Client, add `hazelcast-client-&lt;version&gt;.jar` into your classpath. Refer to [Hazelcast Java Client chapter](#hazelcast-java-client) for more information.*   ![image](images/NoteSmall.jpg) ***NOTE***: *To use Native Client, add `hazelcast-all-&lt;version&gt;.jar` into your remote cluster's classpath.*  "
});

documentTitles["index.html#configuring-cache-concurrency-strategy"] = "Configuring Cache Concurrency Strategy";
index.add({
    url: "index.html#configuring-cache-concurrency-strategy",
    title: "Configuring Cache Concurrency Strategy",
    body: "### Configuring Cache Concurrency Strategy  Hibernate has four cache concurrency strategies: *read-only*, *read-write*, *nonstrict-read-write* and *transactional*. Hibernate does not force cache providers to support all those strategies. Hazelcast supports the first three: *read-only*, *read-write*, and *nonstrict-read-write*. It does not yet support *transactional* strategy.  If you are using XML based class configurations, add a *cache* element into your configuration with the *usage* attribute set to one of the *read-only*, *read-write*, or *nonstrict-read-write* strategies.     ```xml &lt;class name=\&quot;eg.Immutable\&quot; mutable=\&quot;false\&quot;&gt;   &lt;cache usage=\&quot;read-only\&quot;/&gt;   ....  &lt;/class&gt;  &lt;class name=\&quot;eg.Cat\&quot; .... &gt;   &lt;cache usage=\&quot;read-write\&quot;/&gt;   ....   &lt;set name=\&quot;kittens\&quot; ... &gt;     &lt;cache usage=\&quot;read-write\&quot;/&gt;     ....   &lt;/set&gt; &lt;/class&gt; ``` If you are using Hibernate-Annotations, then you can add a *class-cache* or *collection-cache* element into your Hibernate configuration file with the *usage* attribute set to *read only*, *read/write*, or *nonstrict read/write*.  ```xml     &lt;class-cache usage=\&quot;read-only\&quot; class=\&quot;eg.Immutable\&quot;/&gt; &lt;class-cache usage=\&quot;read-write\&quot; class=\&quot;eg.Cat\&quot;/&gt; &lt;collection-cache collection=\&quot;eg.Cat.kittens\&quot; usage=\&quot;read-write\&quot;/&gt; ```  Or alternatively, you can put Hibernate Annotation's *@Cache* annotation on your entities and collections.  ```java     @Cache(usage = CacheConcurrencyStrategy.READ_WRITE) public class Cat implements Serializable {   ... } ```  "
});

documentTitles["index.html#advanced-settings"] = "Advanced Settings";
index.add({
    url: "index.html#advanced-settings",
    title: "Advanced Settings",
    body: "### Advanced Settings  **Accessing underlying HazelcastInstance**  If you need to access `HazelcastInstance` used by Hibernate `SessionFactory`, you can give a name to the `HazelcastInstance` while configuring Hazelcast. Then it is possible to retrieve the instance using `getHazelcastInstanceByName` static method of `Hazelcast`.  Please refer to the [Configuring Programmatically section](#configuring-programmatically) to learn how to create a named Hazelcast instance.  **Changing/setting lock timeout value of *read-write* strategy**  You can set a lock timeout value using the `hibernate.cache.hazelcast.lock_timeout_in_seconds` Hibernate property. The value should be in seconds. The default value is 300 seconds.    &lt;br&gt;&lt;/br&gt;     "
});

documentTitles["index.html#web-session-replication"] = "Web Session Replication";
index.add({
    url: "index.html#web-session-replication",
    title: "Web Session Replication",
    body: "## Web Session Replication  This section explains how you can cluster your web sessions using Servlet Filter, Tomcat and Jetty based solutions. Each web session clustering is explained in the following subsections.  Please note that [Tomcat](#tomcat-based-web-session-replication) and [Jetty](#jetty-based-web-session-replication) based web session replications are &lt;font color=\&quot;#3981DB\&quot;&gt;**Hazelcast Enterprise**&lt;/font&gt; modules.   [Filter](#filter-based-web-session-replication) based web session replication has the option to use a map with High-Density Memory Store to keep your session objects. Note that High-Density Memory Store is available in &lt;font color=\&quot;##153F75\&quot;&gt;**Hazelcast Enterprise HD**&lt;/font&gt;. Please refer to the [High-Density Memory Store section](#high-density-memory-store) for details on this feature.   "
});

documentTitles["index.html#filter-based-web-session-replication"] = "Filter Based Web Session Replication";
index.add({
    url: "index.html#filter-based-web-session-replication",
    title: "Filter Based Web Session Replication",
    body: "### Filter Based Web Session Replication  ***Sample Code***: *Please see our &lt;a href=\&quot;https://github.com/hazelcast/hazelcast-code-samples/tree/master/hazelcast-integration/filter-based-session-replication\&quot; target=\&quot;_blank\&quot;&gt;sample application&lt;/a&gt; for Filter Based Web Session Replication.* &lt;br&gt;&lt;/br&gt;  Assume that you have more than one web server (A, B, C) with a load balancer in front of it. If server A goes down, your users on that server will be directed to one of the live servers (B or C), but their sessions will be lost.  We need to have all these sessions backed up somewhere if we do not want to lose the sessions upon server crashes. Hazelcast Web Manager (WM) allows you to cluster user HTTP sessions automatically.   "
});

documentTitles["index.html#session-clustering-requirements"] = "Session Clustering Requirements";
index.add({
    url: "index.html#session-clustering-requirements",
    title: "Session Clustering Requirements",
    body: "#### Session Clustering Requirements  The following are required before enabling Hazelcast Session Clustering:  -   Target application or web server should support Java 1.6 or higher.  -   Target application or web server should support Servlet 3.0 or higher spec.  -   Session objects that need to be clustered have to be Serializable.  -   In the client/server architecture, session classes do not have to be present in the server classpath.  "
});

documentTitles["index.html#setting-up-session-clustering"] = "Setting Up Session Clustering";
index.add({
    url: "index.html#setting-up-session-clustering",
    title: "Setting Up Session Clustering",
    body: "#### Setting Up Session Clustering  To set up Hazelcast Session Clustering:  -	Put the `hazelcast` and `hazelcast-wm` jars in your `WEB-INF/lib` folder. Optionally, if you wish to connect to a cluster as a client, add `hazelcast-client` as well.  -	Put the following XML into the `web.xml` file. Make sure Hazelcast filter is placed before all the other filters if any; for example, you can put it at the top.  ```xml              &lt;filter&gt;   &lt;filter-name&gt;hazelcast-filter&lt;/filter-name&gt;   &lt;filter-class&gt;com.hazelcast.web.WebFilter&lt;/filter-class&gt;   &lt;!--     Name of the distributed map storing     your web session objects   --&gt;   &lt;init-param&gt;     &lt;param-name&gt;map-name&lt;/param-name&gt;     &lt;param-value&gt;my-sessions&lt;/param-value&gt;   &lt;/init-param&gt;   &lt;!--     TTL value of the distributed map storing     your web session objects.     Any integer between 0 and Integer.MAX_VALUE.     Default is 1800 which is 30 minutes.   --&gt;   &lt;init-param&gt;     &lt;param-name&gt;session-ttl-seconds&lt;/param-name&gt;     &lt;param-value&gt;10&lt;/param-value&gt;   &lt;/init-param&gt;   &lt;!--     How is your load-balancer configured?     sticky-session means all requests of a session     is routed to the node where the session is first created.     This is excellent for performance.     If sticky-session is set to false, when a session is updated     on a node, entry for this session on all other nodes is invalidated.     You have to know how your load-balancer is configured before     setting this parameter. Default is true.   --&gt;   &lt;init-param&gt;     &lt;param-name&gt;sticky-session&lt;/param-name&gt;     &lt;param-value&gt;true&lt;/param-value&gt;   &lt;/init-param&gt;   &lt;!--     Name of session id cookie   --&gt;   &lt;init-param&gt;     &lt;param-name&gt;cookie-name&lt;/param-name&gt;     &lt;param-value&gt;hazelcast.sessionId&lt;/param-value&gt;   &lt;/init-param&gt;   &lt;!--     Domain of session id cookie. Default is based on incoming request.   --&gt;   &lt;init-param&gt;     &lt;param-name&gt;cookie-domain&lt;/param-name&gt;     &lt;param-value&gt;.mywebsite.com&lt;/param-value&gt;   &lt;/init-param&gt;   &lt;!--     Should cookie only be sent using a secure protocol? Default is false.   --&gt;   &lt;init-param&gt;     &lt;param-name&gt;cookie-secure&lt;/param-name&gt;     &lt;param-value&gt;false&lt;/param-value&gt;   &lt;/init-param&gt;   &lt;!--     Should HttpOnly attribute be set on cookie ? Default is false.   --&gt;   &lt;init-param&gt;     &lt;param-name&gt;cookie-http-only&lt;/param-name&gt;     &lt;param-value&gt;false&lt;/param-value&gt;   &lt;/init-param&gt;   &lt;!--     Are you debugging? Default is false.   --&gt;   &lt;init-param&gt;     &lt;param-name&gt;debug&lt;/param-name&gt;     &lt;param-value&gt;true&lt;/param-value&gt;   &lt;/init-param&gt;   &lt;!--     Configuration xml location;       * as servlet resource OR       * as classpath resource OR       * as URL     Default is one of hazelcast-default.xml     or hazelcast.xml in classpath.   --&gt;   &lt;init-param&gt;     &lt;param-name&gt;config-location&lt;/param-name&gt;     &lt;param-value&gt;/WEB-INF/hazelcast.xml&lt;/param-value&gt;   &lt;/init-param&gt;   &lt;!--     Do you want to use an existing HazelcastInstance?     Default is null.   --&gt;   &lt;init-param&gt;     &lt;param-name&gt;instance-name&lt;/param-name&gt;     &lt;param-value&gt;default&lt;/param-value&gt;   &lt;/init-param&gt;   &lt;!--     Do you want to connect as a client to an existing cluster?     Default is false.   --&gt;   &lt;init-param&gt;     &lt;param-name&gt;use-client&lt;/param-name&gt;     &lt;param-value&gt;false&lt;/param-value&gt;   &lt;/init-param&gt;   &lt;!--     Client configuration location;       * as servlet resource OR       * as classpath resource OR       * as URL     Default is null.   --&gt;   &lt;init-param&gt;     &lt;param-name&gt;client-config-location&lt;/param-name&gt;     &lt;param-value&gt;/WEB-INF/hazelcast-client.xml&lt;/param-value&gt;   &lt;/init-param&gt;   &lt;!--     Do you want to shutdown HazelcastInstance during     web application undeploy process?     Default is true.   --&gt;   &lt;init-param&gt;     &lt;param-name&gt;shutdown-on-destroy&lt;/param-name&gt;     &lt;param-value&gt;true&lt;/param-value&gt;   &lt;/init-param&gt;   &lt;!--     Do you want to cache sessions locally in each instance?     Default is false.   --&gt;   &lt;init-param&gt;     &lt;param-name&gt;deferred-write&lt;/param-name&gt;     &lt;param-value&gt;false&lt;/param-value&gt;   &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt;   &lt;filter-name&gt;hazelcast-filter&lt;/filter-name&gt;   &lt;url-pattern&gt;/*&lt;/url-pattern&gt;   &lt;dispatcher&gt;FORWARD&lt;/dispatcher&gt;   &lt;dispatcher&gt;INCLUDE&lt;/dispatcher&gt;   &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt; &lt;/filter-mapping&gt;  &lt;listener&gt;   &lt;listener-class&gt;com.hazelcast.web.SessionListener&lt;/listener-class&gt; &lt;/listener&gt; ```  - Package and deploy your `war` file as you would normally do.  It is that easy. All HTTP requests will go through Hazelcast `WebFilter` and it will put the session objects into the Hazelcast distributed map if needed.  "
});

documentTitles["index.html#using-high-density-memory-store"] = "Using High-Density Memory Store";
index.add({
    url: "index.html#using-high-density-memory-store",
    title: "Using High-Density Memory Store",
    body: "#### Using High-Density Memory Store  &lt;font color=\&quot;##153F75\&quot;&gt;**Hazelcast Enterprise HD**&lt;/font&gt; &lt;br&gt;&lt;/br&gt;  As you see in the above declarative configuration snippet, you provide the name of your map which will store the web session objects:  ``` &lt;init-param&gt;    &lt;param-name&gt;map-name&lt;/param-name&gt;    &lt;param-value&gt;my-sessions&lt;/param-value&gt; &lt;/init-param&gt; ```  If you have &lt;font color=\&quot;##153F75\&quot;&gt;**Hazelcast Enterprise HD**&lt;/font&gt;, you can configure your map to use Hazelcast's High-Density Memory Store. By this way, the filter based web session replication will use a High-Density Memory Store backed map.   Please refer to the [Using High-Density Memory Store with Map section](#using-high-density-memory-store-with-map) to learn how you can configure a map to use this feature.   "
});

documentTitles["index.html#supporting-spring-security"] = "Supporting Spring Security";
index.add({
    url: "index.html#supporting-spring-security",
    title: "Supporting Spring Security",
    body: "#### Supporting Spring Security  ***Sample Code***: *Please see our &lt;a href=\&quot;https://github.com/hazelcast/hazelcast-code-samples/tree/master/hazelcast-integration/spring-security\&quot; target=\&quot;_blank\&quot;&gt;sample application&lt;/a&gt; for Spring Security Support.* &lt;br&gt;&lt;br/&gt;  If Spring based security is used for your application, you should use `com.hazelcast.web.spring.SpringAwareWebFilter` instead of `com.hazelcast.web.WebFilter` in your filter definition.  ```xml ...  &lt;filter&gt;   &lt;filter-name&gt;hazelcast-filter&lt;/filter-name&gt;   &lt;filter-class&gt;com.hazelcast.web.spring.SpringAwareWebFilter&lt;/filter-class&gt;     ... &lt;/filter&gt;   ... ```  `SpringAwareWebFilter` notifies Spring by publishing events to Spring context. The `org.springframework.security.core.session.SessionRegistry` instance uses these events.   As before, you must also define `com.hazelcast.web.SessionListener` in your `web.xml`. However, you do not need to define `org.springframework.security.web.session.HttpSessionEventPublisher` in your `web.xml` as before, since `SpringAwareWebFilter` already informs Spring about session based events like `create` or `destroy`.      "
});

documentTitles["index.html#client-mode-vs-p2p-mode"] = "Client Mode vs. P2P Mode";
index.add({
    url: "index.html#client-mode-vs-p2p-mode",
    title: "Client Mode vs. P2P Mode",
    body: "#### Client Mode vs. P2P Mode  Hazelcast Session Replication works as P2P by default. To switch to Client/Server architecture, you need to set the `use-client` parameter to **true**. P2P mode is more flexible and requires no configuration in advance; in Client/Server architecture, clients need to connect to an existing Hazelcast Cluster. In case of connection problems, clients will try to reconnect to the cluster. The default retry count is 3. In the client/server architecture, if servers goes down, Hazelcast web manager will keep the updates in the local and after servers come back, the clients will update the distributed map.  Note that, in the client/server mode of session replication, `session-ttl-seconds` configuration does not have any effect. The reason is that the filter based session replication uses IMap and a Hazelcast client cannot change the configuration of a distributed map. Instead, you should configure the `max-idle-seconds` element in your `hazelcast.xml` on the server side.    ```  ...    &lt;map name=\&quot;my-sessions\&quot;&gt;          &lt;!--             How much seconds do you want your session attributes to be stored on server?             Default is 0.           --&gt;         &lt;max-idle-seconds&gt;20&lt;/max-idle-seconds&gt;    &lt;/map&gt;  ...  ```  &lt;br&gt;&lt;/br&gt;   Also make sure that name of the distributed map is same as the `map-name` parameter defined in your `web.xml` configuration file.   "
});

documentTitles["index.html#caching-locally-with-deferred-write"] = "Caching Locally with `deferred-write`";
index.add({
    url: "index.html#caching-locally-with-deferred-write",
    title: "Caching Locally with `deferred-write`",
    body: "#### Caching Locally with `deferred-write`  If the value for `deferred-write` is set as **true**, Hazelcast will cache the session locally and will update the local session when an attribute is set or deleted. At the end of the request, it will update the distributed map with all the updates. It will not update the distributed map upon each attribute update, but will only call it once at the end of the request. It will also cache it, i.e. whenever there is a read for the attribute, it will read it from the cache.   **Updating an attribute when `deferred-write=false`**:  If `deferred-write` is **false**, any update (i.e. `setAttribute`) on the session will directly be available in the cluster. One exception to this behavior is the changes to the session attribute objects. To update an attribute cluster-wide, `setAttribute` must be called after changes are made to the attribute object.  The following example explains how to update an attribute in the case of `deferred-write=false` setting:   ``` session.setAttribute(\&quot;myKey\&quot;, new ArrayList()); List list1 = session.getAttribute(\&quot;myKey\&quot;); list1.add(\&quot;myValue\&quot;);  session.setAttribute(\&quot;myKey\&quot;, list1); // changes updated in the cluster ```  "
});

documentTitles["index.html#sessionid-generation"] = "SessionId Generation";
index.add({
    url: "index.html#sessionid-generation",
    title: "SessionId Generation",
    body: "#### SessionId Generation  SessionId generation is done by the Hazelcast Web Session Module if session replication is configured in the web application. The default cookie name for the sessionId is `hazelcast.sessionId`. This name is configurable with a `cookie-name` parameter in the `web.xml` file of the application. `hazelcast.sessionId` is just a UUID prefixed with “HZ” characters and without a “-“ character, e.g. `HZ6F2D036789E4404893E99C05D8CA70C7`.  When called by the target application, the value of `HttpSession.getId()` is the same as the value of `hazelcast.sessionId`.  "
});

documentTitles["index.html#defining-session-expiry"] = "Defining Session Expiry";
index.add({
    url: "index.html#defining-session-expiry",
    title: "Defining Session Expiry",
    body: "#### Defining Session Expiry  Hazelcast automatically removes sessions from the cluster if the sessions are expired on the Web Container. This removal is done by `com.hazelcast.web.SessionListener`, which is an implementation of `javax.servlet.http.HttpSessionListener`.   Default session expiration configuration depends on the Servlet Container that is being used. You can also define it in your web.xml.  ```xml     &lt;session-config&gt;         &lt;session-timeout&gt;60&lt;/session-timeout&gt;     &lt;/session-config&gt; ```  "
});

documentTitles["index.html#using-sticky-sessions"] = "Using Sticky Sessions";
index.add({
    url: "index.html#using-sticky-sessions",
    title: "Using Sticky Sessions",
    body: "#### Using Sticky Sessions  Hazelcast holds whole session attributes in a distributed map and in a local HTTP session. Local session is required for fast access to data and distributed map is needed for fail-safety.  - If `sticky-session` is not used, whenever a session attribute is updated in a node (in both node local session and clustered cache), that attribute should be invalidated in all other nodes' local sessions, because now they have dirty values. Therefore, when a request arrives at one of those other nodes, that attribute value is fetched from clustered cache.  - To overcome the performance penalty of sending invalidation messages during updates, you can use sticky sessions. If Hazelcast knows sessions are sticky, invalidation will not be sent because Hazelcast assumes there is no other local session at the moment. When a server is down, requests belonging to a session hold in that server will routed to other server, and that server will fetch session data from clustered cache. That means that when using sticky sessions, you will not suffer the performance penalty of accessing clustered data and can benefit recover from a server failure.  "
});

documentTitles["index.html#marking-transient-attributes"] = "Marking Transient Attributes";
index.add({
    url: "index.html#marking-transient-attributes",
    title: "Marking Transient Attributes",
    body: "#### Marking Transient Attributes  If you have some attributes that you do not want to be distributed, you can mark those attributes as transient. Transient attributes are kept in and when the server is shutdown, you lose the attribute values. You can set the transient attributes in your `web.xml` file. Here is an example:  ``` ...    &lt;init-param&gt;             &lt;param-name&gt;transient-attributes&lt;/param-name&gt;             &lt;param-value&gt;key1,key2,key3&lt;/param-value&gt;    &lt;/init-param&gt; ... ``` &lt;br&gt;&lt;/br&gt;      "
});

documentTitles["index.html#tomcat-based-web-session-replication"] = "Tomcat Based Web Session Replication";
index.add({
    url: "index.html#tomcat-based-web-session-replication",
    title: "Tomcat Based Web Session Replication",
    body: "### Tomcat Based Web Session Replication  &lt;font color=\&quot;#3981DB\&quot;&gt;**Hazelcast Enterprise**&lt;/font&gt; &lt;br&gt;&lt;/br&gt;   ***Sample Code:*** *Please see our &lt;a href=\&quot;https://github.com/hazelcast/hazelcast-code-samples/tree/master/hazelcast-integration/enterprise-session-replication\&quot; target=\&quot;_blank\&quot;&gt;sample application&lt;/a&gt; for Tomcat Based Web Session Replication.*   "
});

documentTitles["index.html#hazelcast-tomcat-features-and-requirements"] = "Hazelcast Tomcat Features and Requirements";
index.add({
    url: "index.html#hazelcast-tomcat-features-and-requirements",
    title: "Hazelcast Tomcat Features and Requirements",
    body: "#### Hazelcast Tomcat Features and Requirements  Session Replication with Hazelcast Enterprise is a container specific module that enables session replication for JEE Web Applications without requiring changes to the application.  ***Features***  - Seamless Tomcat 6, 7 &amp; 8 integration. (Tomcat 8 is supported for Hazelcast Enterprise 3.5 or higher.) - Support for sticky and non-sticky sessions. - Tomcat failover. - Deferred write for performance boost. &lt;br&gt;&lt;/br&gt;  ***Supported Containers***  Tomcat Web Session Replication Module has been tested against the following containers.  - Tomcat 6.0.x - It can be downloaded &lt;a href=\&quot;http://tomcat.apache.org/download-60.cgi\&quot; target=\&quot;_blank\&quot;&gt;here&lt;/a&gt;. - Tomcat 7.0.x - It can be downloaded &lt;a href=\&quot;http://tomcat.apache.org/download-70.cgi\&quot; target=\&quot;_blank\&quot;&gt;here&lt;/a&gt;. - Tomcat 8.0.x - It can be downloaded &lt;a href=\&quot;http://tomcat.apache.org/download-80.cgi\&quot; target=\&quot;_blank\&quot;&gt;here&lt;/a&gt;.  The latest tested versions are **6.0.39**, **7.0.40** and **8.0.20**. &lt;br&gt;&lt;/br&gt;  ***Requirements***   - Tomcat instance must be running with Java 1.6 or higher.  - Session objects that need to be clustered have to be Serializable.  "
});

documentTitles["index.html#how-tomcat-session-replication-works"] = "How Tomcat Session Replication Works";
index.add({
    url: "index.html#how-tomcat-session-replication-works",
    title: "How Tomcat Session Replication Works",
    body: "#### How Tomcat Session Replication Works  Tomcat Session Replication in Hazelcast Enterprise is a Hazelcast Module where each created `HttpSession` Object is kept in the Hazelcast Distributed Map. If configured with Sticky Sessions, each Tomcat Instance has its own local copy of the session for performance boost.   Since the sessions are in Hazelcast Distributed Map, you can use all the available features offered by Hazelcast Distributed Map implementation, such as MapStore and WAN Replication.  Tomcat Web Sessions run in two different modes:  - **P2P**: all Tomcat instances launch its own Hazelcast Instance and join to the Hazelcast Cluster and, - **Client/Server**: all Tomcat instances put/retrieve the session data to/from an existing Hazelcast Cluster.  "
});

documentTitles["index.html#deploying-p2p-peer-to-peer-for-tomcat"] = "Deploying P2P (Peer-to-Peer) for Tomcat";
index.add({
    url: "index.html#deploying-p2p-peer-to-peer-for-tomcat",
    title: "Deploying P2P (Peer-to-Peer) for Tomcat",
    body: "#### Deploying P2P (Peer-to-Peer) for Tomcat  P2P deployment launches an embedded Hazelcast Node in each server instance.  This type of deployment is simple: just configure your Tomcat and launch. There is no need for an external Hazelcast cluster.  The following steps configure a sample P2P for Hazelcast Session Replication.  1. Go to &lt;a href=\&quot;http://www.hazelcast.com/products/hazelcast-enterprise/\&quot; target=\&quot;_blank\&quot;&gt;hazelcast.com&lt;/a&gt; and download the latest Hazelcast Enterprise. 2. Unzip the Hazelcast Enterprise zip file into the folder `$HAZELCAST_ENTERPRISE_ROOT`. 3. Update `$HAZELCAST_ENTERPRISE_ROOT/bin/hazelcast.xml` with the provided Hazelcast Enterprise License Key.  4. Put `$HAZELCAST_ENTERPRISE_ROOT/lib/hazelcast-enterprise-all-`&lt;*version*&gt;`.jar`,    `$HAZELCAST_ ENTERPRISE_ROOT/lib/hazelcast-enterprise-`&lt;*tomcatversion*&gt;`-`&lt;*version*&gt;`.jar` and `hazelcast.xml` in the folder `$CATALINA_HOME/lib/`.  5. Put a `&lt;Listener&gt;` element into the file `$CATALINA_HOME$/conf/server.xml` as shown below.   ```xml         &lt;Server&gt;         	...             &lt;Listener className=\&quot;com.hazelcast.session.P2PLifecycleListener\&quot;/&gt;             ...         &lt;/Server&gt; ```  6. Put a `&lt;Manager&gt;` element into the file `$CATALINA_HOME$/conf/context.xml` as shown below.   ```xml         &lt;Context&gt;         	...             &lt;Manager className=\&quot;com.hazelcast.session.HazelcastSessionManager\&quot;/&gt;             ...         &lt;/Context&gt;  ```  7. Start Tomcat instances with a configured load balancer and deploy the web application.  ***Optional Attributes for Listener Element***  Optionally, you can add a `configLocation` attribute into the `&lt;Listener&gt;` element. If not provided, `hazelcast.xml` in the classpath is used by default. URL or full filesystem path as a `configLocation` value is supported.  "
});

documentTitles["index.html#deploying-clientserver-for-tomcat"] = "Deploying Client/Server for Tomcat";
index.add({
    url: "index.html#deploying-clientserver-for-tomcat",
    title: "Deploying Client/Server for Tomcat",
    body: "#### Deploying Client/Server for Tomcat  In this deployment type, Tomcat instances work as clients on an existing Hazelcast Cluster.  ***Features***  -	The existing Hazelcast cluster is used as the Session Replication Cluster. -	Offloading Session Cache from Tomcat to the Hazelcast Cluster. -	The architecture is completely independent. Complete reboot of Tomcat instances. &lt;br&gt;&lt;/br&gt;  The following steps configure a sample Client/Server for Hazelcast Session Replication.  1. Go to &lt;a href=\&quot;http://www.hazelcast.com/products/hazelcast-enterprise/\&quot; target=\&quot;_blank\&quot;&gt;hazelcast.com&lt;/a&gt; and download the latest Hazelcast Enterprise. 2. Unzip the Hazelcast Enterprise zip file into the folder `$HAZELCAST_ENTERPRISE_ROOT`. 3. Put `$HAZELCAST_ENTERPRISE_ROOT/lib/hazelcast-client-`&lt;*version*&gt;`.jar`,            `$HAZELCAST_ ENTERPRISE_ROOT/lib/hazelcast-enterprise-`&lt;*version*&gt;`.jar` and           `$HAZELCAST_ENTERPRISE_ROOT/lib/hazelcast-enterprise-`&lt;*tomcatversion*&gt;`-`&lt;*version*&gt;`.jar` in the folder `$CATALINA_HOME/lib/`.  4. Put a `&lt;Listener&gt;` element into the `$CATALINA_HOME$/conf/server.xml` as shown below.   ```xml         &lt;Server&gt;         	...             &lt;Listener className=\&quot;com.hazelcast.session.ClientServerLifecycleListener\&quot;/&gt;             ...         &lt;/Server&gt;  ```  5. Update the `&lt;Manager&gt;` element in the `$CATALINA_HOME$/conf/context.xml` as shown below.   ```xml         &lt;Context&gt;              &lt;Manager className=\&quot;com.hazelcast.session.HazelcastSessionManager\&quot;               clientOnly=\&quot;true\&quot;/&gt;         &lt;/Context&gt;  ```  6. Launch a Hazelcast Instance using `$HAZELCAST_ENTERPRISE_ROOT/bin/server.sh` or `$HAZELCAST_ ENTERPRISE_ROOT/bin/server.bat`.  7. Start Tomcat instances with a configured load balancer and deploy the web application.  ***Optional Attributes for Listener Element***  Optionally, you can add `configLocation` attribute into the `&lt;Listener&gt;` element. If not provided, `hazelcast-client-default.xml` in `hazelcast-client-`&lt;*version*&gt;`.jar` file is used by default. Any client XML file in the classpath, URL or full filesystem path as a `configLocation` value is also supported.  "
});

documentTitles["index.html#configuring-manager-element-for-tomcat"] = "Configuring Manager Element for Tomcat";
index.add({
    url: "index.html#configuring-manager-element-for-tomcat",
    title: "Configuring Manager Element for Tomcat",
    body: "#### Configuring Manager Element for Tomcat  `&lt;Manager&gt;` element is used both in P2P and Client/Server mode. You can use the following attributes to configure Tomcat Session Replication Module to better serve your needs.  - Add `mapName` attribute into `&lt;Manager&gt;` element. Its default value is *default Hazelcast Distributed Map*. Use this attribute if you have a specially configured map for special cases like WAN Replication, Eviction, MapStore, etc. - Add `sticky` attribute into `&lt;Manager&gt;` element. Its default value is *true*. - Add `processExpiresFrequency` attribute into `&lt;Manager&gt;` element. It specifies the frequency of session validity check, in seconds. Its default value is *6* and the minimum value that you can set is *1*. - Add `deferredWrite` attribute into `&lt;Manager&gt;` element. Its default value is *true*.  &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#controlling-session-caching-with-deferredwrite"] = "Controlling Session Caching with deferredWrite";
index.add({
    url: "index.html#controlling-session-caching-with-deferredwrite",
    title: "Controlling Session Caching with deferredWrite",
    body: "#### Controlling Session Caching with deferredWrite  Tomcat Web Session Replication Module has its own nature of caching. Attribute changes during the HTTP Request/HTTP Response cycle is cached by default. Distributing those changes to the Hazelcast Cluster is costly. Because of that, Session Replication is only done at the end of each request for updated and deleted attributes. The risk in this approach is losing data if a Tomcat crash happens in the middle of the HTTP Request operation.  You can change that behavior by setting `deferredWrite=false` in your `&lt;Manager&gt;` element. By disabling it, all updates that are done on session objects are directly distributed into Hazelcast Cluster.  "
});

documentTitles["index.html#setting-session-expiration-checks"] = "Setting Session Expiration Checks";
index.add({
    url: "index.html#setting-session-expiration-checks",
    title: "Setting Session Expiration Checks",
    body: "#### Setting Session Expiration Checks  Based on Tomcat configuration or `sessionTimeout` setting in `web.xml`, sessions are expired over time. This requires a cleanup on the Hazelcast Cluster since there is no need to keep expired sessions in the cluster.   `processExpiresFrequency`, which is defined in [`&lt;Manager&gt;`](#configuring-manager-element-for-tomcat), is the only setting that controls the behavior of session expiry policy in the Tomcat Web Session Replication Module. By setting this, you can set the frequency of the session expiration checks in the Tomcat Instance.  "
});

documentTitles["index.html#enabling-session-replication-in-multi-app-environment"] = "Enabling Session Replication in Multi-App Environment";
index.add({
    url: "index.html#enabling-session-replication-in-multi-app-environment",
    title: "Enabling Session Replication in Multi-App Environment",
    body: "#### Enabling Session Replication in Multi-App Environment  Tomcat can be configured in two ways to enable Session Replication for deployed applications.  - Server Context.xml Configuration - Application Context.xml Configuration  ***Server Context.xml Configuration***  By configuring `$CATALINA_HOME$/conf/context.xml`, you can enable session replication for all applications deployed in the Tomcat Instance.    ***Application Context.xml Configuration***  By configuring `$CATALINA_HOME/conf/[enginename]/[hostname]/[applicationName].xml`, you can enable Session Replication per deployed application.  "
});

documentTitles["index.html#sticky-sessions-and-tomcat"] = "Sticky Sessions and Tomcat";
index.add({
    url: "index.html#sticky-sessions-and-tomcat",
    title: "Sticky Sessions and Tomcat",
    body: "#### Sticky Sessions and Tomcat  ***Sticky Sessions (default)***  Sticky Sessions are used to improve the performance since the sessions do not move around the cluster.   Requests always go to the same instance where the session was firstly created. By using a sticky session, you mostly eliminate session replication problems, except for the failover cases. In case of failovers, Hazelcast helps you to not lose existing sessions.   ***Non-Sticky Sessions***  Non-Sticky Sessions are not good for performance because you need to move session data all over the cluster every time a new request comes in.  However, load balancing might be super easy with Non-Sticky caches. In case of heavy load, you can distribute the request to the least used Tomcat instance. Hazelcast supports Non-Sticky Sessions as well.   "
});

documentTitles["index.html#tomcat-failover-and-the-jvmroute-parameter"] = "Tomcat Failover and the jvmRoute Parameter";
index.add({
    url: "index.html#tomcat-failover-and-the-jvmroute-parameter",
    title: "Tomcat Failover and the jvmRoute Parameter",
    body: "#### Tomcat Failover and the jvmRoute Parameter  Each HTTP Request is redirected to the same Tomcat instance if sticky sessions are enabled. The parameter `jvmRoute` is added to the end of session ID as a suffix, to make Load Balancer aware of the target Tomcat instance.   When Tomcat Failure happens and Load Balancer cannot redirect the request to the owning instance, it sends a request to one of the available Tomcat instances. Since the `jvmRoute` parameter of session ID is different than that of the target Tomcat instance, Hazelcast Session Replication Module updates the session ID of the session with the new `jvmRoute` parameter. That means that the Session is moved to another Tomcat instance and Load Balancer will redirect all subsequent HTTP Requests to the new Tomcat Instance.  ![image](images/NoteSmall.jpg) ***NOTE:*** *If stickySession is enabled, `jvmRoute` parameter must be set in `$CATALINA_HOME$/conf/server.xml` and unique among Tomcat instances in the cluster.*  ```xml  &lt;Engine name=\&quot;Catalina\&quot; defaultHost=\&quot;localhost\&quot; jvmRoute=\&quot;tomcat-8080\&quot;&gt; ```   &lt;br&gt;&lt;/br&gt;     "
});

documentTitles["index.html#jetty-based-web-session-replication"] = "Jetty Based Web Session Replication";
index.add({
    url: "index.html#jetty-based-web-session-replication",
    title: "Jetty Based Web Session Replication",
    body: "### Jetty Based Web Session Replication    &lt;font color=\&quot;#3981DB\&quot;&gt;**Hazelcast Enterprise**&lt;/font&gt;  &lt;br&gt;&lt;/br&gt;    ***Sample Code:*** *Please see our &lt;a href=\&quot;https://github.com/hazelcast/hazelcast-code-samples/tree/master/hazelcast-integration/enterprise-session-replication\&quot; target=\&quot;_blank\&quot;&gt;sample application&lt;/a&gt; for Jetty Based Web Session Replication.*      "
});

documentTitles["index.html#hazelcast-jetty-features-and-requirements"] = "Hazelcast Jetty Features and Requirements";
index.add({
    url: "index.html#hazelcast-jetty-features-and-requirements",
    title: "Hazelcast Jetty Features and Requirements",
    body: "#### Hazelcast Jetty Features and Requirements    Jetty Web Session Replication with Hazelcast Enterprise is a container specific module that enables session replication for JEE Web Applications without requiring changes to the application.    ***Features***    - Jetty 7 &amp; 8 &amp; 9 support  - Support for sticky and non-sticky sessions  - Jetty failover  - Deferred write for performance boost  - Client/Server and P2P modes  - Declarative and programmatic configuration    ***Supported Containers***    Jetty Web Session Replication Module has been tested against the following containers.    - Jetty 7  - It can be downloaded &lt;a href=\&quot;http://download.eclipse.org/jetty/7.6.17.v20150415/dist/\&quot; target=\&quot;_blank\&quot;&gt;here&lt;/a&gt;.  - Jetty 8  - It can be downloaded &lt;a href=\&quot;http://download.eclipse.org/jetty/8.1.17.v20150415/dist/\&quot; target=\&quot;_blank\&quot;&gt;here&lt;/a&gt;.  - Jetty 9  - It can be downloaded &lt;a href=\&quot;http://download.eclipse.org/jetty/stable-9/dist/\&quot; target=\&quot;_blank\&quot;&gt;here&lt;/a&gt;.    Latest tested versions are **7.6.16.v20140903**, **8.1.16.v20140903** and **9.2.3.v20140905**      ***Requirements***     - Jetty instance must be running with Java 1.6 or higher.   - Session objects that need to be clustered have to be Serializable.   - Hazelcast Jetty-based Web Session Replication is built on top of the `jetty-nosql` module. This module (`jetty-nosql-&lt;*jettyversion*&gt;.jar`) needs to be added to `$JETTY_HOME/lib/ext`.     This module can be found &lt;a href=\&quot;http://mvnrepository.com/artifact/org.eclipse.jetty/jetty-nosql\&quot; target=\&quot;_blank\&quot;&gt;here&lt;/a&gt;.    "
});

documentTitles["index.html#how-jetty-session-replication-works"] = "How Jetty Session Replication Works";
index.add({
    url: "index.html#how-jetty-session-replication-works",
    title: "How Jetty Session Replication Works",
    body: "#### How Jetty Session Replication Works    Jetty Session Replication in Hazelcast Enterprise is a Hazelcast Module where each created `HttpSession` Object's state is kept in Hazelcast Distributed Map.     Since the session data are in Hazelcast Distributed Map, you can use all the available features offered by Hazelcast Distributed Map implementation, such as MapStore and WAN Replication.    Jetty Web Session Replication runs in two different modes:    - **P2P**: all Jetty instances launch its own Hazelcast Instance and join to the Hazelcast Cluster and,  - **Client/Server**: all Jetty instances put/retrieve the session data to/from an existing Hazelcast Cluster.      "
});

documentTitles["index.html#deploying-p2p-peer-to-peer-for-jetty"] = "Deploying P2P (Peer-to-Peer) for Jetty";
index.add({
    url: "index.html#deploying-p2p-peer-to-peer-for-jetty",
    title: "Deploying P2P (Peer-to-Peer) for Jetty",
    body: "#### Deploying P2P (Peer-to-Peer) for Jetty    P2P deployment launches embedded Hazelcast Node in each server instance.    This type of deployment is simple: just configure your Jetty and launch. There is no need for an external Hazelcast cluster.    The following steps configure a sample P2P for Hazelcast Session Replication.    1. Go to &lt;a href=\&quot;http://www.hazelcast.com/products/hazelcast-enterprise/\&quot; target=\&quot;_blank\&quot;&gt;hazelcast.com&lt;/a&gt; and download the latest Hazelcast Enterprise.  2. Unzip the Hazelcast Enterprise zip file into the folder `$HAZELCAST_ENTERPRISE_ROOT`.  3. Update `$HAZELCAST_ENTERPRISE_ROOT/bin/hazelcast.xml` with the provided Hazelcast Enterprise License Key.   4. Put `hazelcast.xml` in the folder `$JETTY_HOME/etc`.  5. Put `$HAZELCAST_ENTERPRISE_ROOT/lib/hazelcast-enterprise-all-`&lt;*version*&gt;`.jar`,    `$HAZELCAST_  ENTERPRISE_ROOT/lib/hazelcast-enterprise-`&lt;*jettyversion*&gt;`-`&lt;*version*&gt;`.jar` in the folder `$JETTY_HOME/lib/ext`.  6. Configure the Session ID Manager. You need to configure a `com.hazelcast.session.HazelcastSessionIdManager` instance in `jetty.xml`. Add the following lines to your `jetty.xml`.     ```xml          &lt;Set name=\&quot;sessionIdManager\&quot;&gt;              &lt;New id=\&quot;hazelcastIdMgr\&quot; class=\&quot;com.hazelcast.session.HazelcastSessionIdManager\&quot;&gt;                  &lt;Arg&gt;&lt;Ref id=\&quot;Server\&quot;/&gt;&lt;/Arg&gt;                  &lt;Set name=\&quot;configLocation\&quot;&gt;etc/hazelcast.xml&lt;/Set&gt;              &lt;/New&gt;          &lt;/Set&gt;   ```    7. Configure the Session Manager. You can configure `HazelcastSessionManager` from a `context.xml` file. Each application has a context file in the `$CATALINA_HOME$/contexts` folder. You need to create this context file if it does not exist. The context filename must be the same as the application name, e.g. `example.war` should have a context file named `example.xml`. The file `context.xml` should have the following content.     ```xml          &lt;Ref name=\&quot;Server\&quot; id=\&quot;Server\&quot;&gt;              &lt;Call id=\&quot;hazelcastIdMgr\&quot; name=\&quot;getSessionIdManager\&quot;/&gt;          &lt;/Ref&gt;          &lt;Set name=\&quot;sessionHandler\&quot;&gt;              &lt;New class=\&quot;org.eclipse.jetty.server.session.SessionHandler\&quot;&gt;                  &lt;Arg&gt;                      &lt;New id=\&quot;hazelcastMgr\&quot; class=\&quot;com.hazelcast.session.HazelcastSessionManager\&quot;&gt;                          &lt;Set name=\&quot;idManager\&quot;&gt;                              &lt;Ref id=\&quot;hazelcastIdMgr\&quot;/&gt;                          &lt;/Set&gt;                      &lt;/New&gt;                  &lt;/Arg&gt;              &lt;/New&gt;          &lt;/Set&gt;   ```    8. Start Jetty instances with a configured load balancer and deploy the web application.    ![image](images/NoteSmall.jpg) ***NOTE:*** *In Jetty 9, there is no folder with the name *`contexts`*. You have to put the file *`context.xml`* under the *`webapps`* directory. And you need to add the following lines to *`context.xml`*.*:     ```xml          &lt;Ref name=\&quot;Server\&quot; id=\&quot;Server\&quot;&gt;              &lt;Call id=\&quot;hazelcastIdMgr\&quot; name=\&quot;getSessionIdManager\&quot;/&gt;          &lt;/Ref&gt;          &lt;Set name=\&quot;sessionHandler\&quot;&gt;              &lt;New class=\&quot;org.eclipse.jetty.server.session.SessionHandler\&quot;&gt;                  &lt;Arg&gt;                      &lt;New id=\&quot;hazelcastMgr\&quot; class=\&quot;com.hazelcast.session.HazelcastSessionManager\&quot;&gt;                          &lt;Set name=\&quot;sessionIdManager\&quot;&gt;                              &lt;Ref id=\&quot;hazelcastIdMgr\&quot;/&gt;                          &lt;/Set&gt;                      &lt;/New&gt;                  &lt;/Arg&gt;              &lt;/New&gt;          &lt;/Set&gt;   ```      "
});

documentTitles["index.html#deploying-clientserver-for-jetty"] = "Deploying Client/Server for Jetty";
index.add({
    url: "index.html#deploying-clientserver-for-jetty",
    title: "Deploying Client/Server for Jetty",
    body: "#### Deploying Client/Server for Jetty    In client/server deployment type, Jetty instances work as clients to an existing Hazelcast Cluster.    -	Existing Hazelcast cluster is used as the Session Replication Cluster.  -	The architecture is completely independent. Complete reboot of Jetty instances without losing data.  &lt;br&gt;&lt;/br&gt;    The following steps configure a sample Client/Server for Hazelcast Session Replication.    1. Go to &lt;a href=\&quot;http://www.hazelcast.com/products/hazelcast-enterprise/\&quot; target=\&quot;_blank\&quot;&gt;hazelcast.com&lt;/a&gt; and download the latest Hazelcast Enterprise.  2. Unzip the Hazelcast Enterprise zip file into the folder `$HAZELCAST_ENTERPRISE_ROOT`.  3. Update `$HAZELCAST_ENTERPRISE_ROOT/bin/hazelcast.xml` with the provided Hazelcast Enterprise License Key.   4. Put `hazelcast.xml` in the folder `$JETTY_HOME/etc`.  5. Put `$HAZELCAST_ENTERPRISE_ROOT/lib/hazelcast-enterprise-all-`&lt;*version*&gt;`.jar`,    `$HAZELCAST_  ENTERPRISE_ROOT/lib/hazelcast-enterprise-`&lt;*jettyversion*&gt;`-`&lt;*version*&gt;`.jar` in the folder `$JETTY_HOME/lib/ext`.  6. Configure the Session ID Manager. You need to configure a `com.hazelcast.session.HazelcastSessionIdManager` instance in `jetty.xml`. Add the following lines to your `jetty.xml`.     ```xml          &lt;Set name=\&quot;sessionIdManager\&quot;&gt;              &lt;New id=\&quot;hazelcastIdMgr\&quot; class=\&quot;com.hazelcast.session.HazelcastSessionIdManager\&quot;&gt;                  &lt;Arg&gt;&lt;Ref id=\&quot;Server\&quot;/&gt;&lt;/Arg&gt;                  &lt;Set name=\&quot;configLocation\&quot;&gt;etc/hazelcast.xml&lt;/Set&gt;                  &lt;Set name=\&quot;clientOnly\&quot;&gt;true&lt;/Set&gt;              &lt;/New&gt;          &lt;/Set&gt;   ```    7. Configure the Session Manager. You can configure `HazelcastSessionManager` from a `context.xml` file. Each application has a context file under the `$CATALINA_HOME$/contexts` folder. You need to create this context file if it does not exist. The context filename must be the same as the application name, e.g. `example.war` should have a context file named `example.xml`.     ```xml              &lt;Ref name=\&quot;Server\&quot; id=\&quot;Server\&quot;&gt;                  &lt;Call id=\&quot;hazelcastIdMgr\&quot; name=\&quot;getSessionIdManager\&quot;/&gt;              &lt;/Ref&gt;                  &lt;Set name=\&quot;sessionHandler\&quot;&gt;                  &lt;New class=\&quot;org.eclipse.jetty.server.session.SessionHandler\&quot;&gt;                      &lt;Arg&gt;                          &lt;New id=\&quot;hazelMgr\&quot; class=\&quot;com.hazelcast.session.HazelcastSessionManager\&quot;&gt;                              &lt;Set name=\&quot;idManager\&quot;&gt;                                  &lt;Ref id=\&quot;hazelcastIdMgr\&quot;/&gt;                              &lt;/Set&gt;                          &lt;/New&gt;                      &lt;/Arg&gt;                  &lt;/New&gt;              &lt;/Set&gt;   ```    ![image](images/NoteSmall.jpg) ***NOTE:*** *In Jetty 9, there is no folder with name *`contexts`*. You have to put the file *`context.xml`* file under *`webapps`* directory. And you need to add below lines to *`context.xml`*.*     ```xml              &lt;Ref name=\&quot;Server\&quot; id=\&quot;Server\&quot;&gt;                  &lt;Call id=\&quot;hazelcastIdMgr\&quot; name=\&quot;getSessionIdManager\&quot;/&gt;              &lt;/Ref&gt;                  &lt;Set name=\&quot;sessionHandler\&quot;&gt;                  &lt;New class=\&quot;org.eclipse.jetty.server.session.SessionHandler\&quot;&gt;                      &lt;Arg&gt;                          &lt;New id=\&quot;hazelMgr\&quot; class=\&quot;com.hazelcast.session.HazelcastSessionManager\&quot;&gt;                              &lt;Set name=\&quot;sessionIdManager\&quot;&gt;                                  &lt;Ref id=\&quot;hazelcastIdMgr\&quot;/&gt;                              &lt;/Set&gt;                          &lt;/New&gt;                      &lt;/Arg&gt;                  &lt;/New&gt;              &lt;/Set&gt;   ```    8. Launch a Hazelcast Instance using `$HAZELCAST_ENTERPRISE_ROOT/bin/server.sh` or `$HAZELCAST_  ENTERPRISE_ROOT/bin/server.bat`.    9. Start Tomcat instances with a configured load balancer and deploy the web application.        "
});

documentTitles["index.html#configuring-hazelcastsessionidmanager-for-jetty"] = "Configuring HazelcastSessionIdManager for Jetty";
index.add({
    url: "index.html#configuring-hazelcastsessionidmanager-for-jetty",
    title: "Configuring HazelcastSessionIdManager for Jetty",
    body: "#### Configuring HazelcastSessionIdManager for Jetty    `HazelcastSessionIdManager` is used both in P2P and Client/Server mode. Use the following parameters to configure the Jetty Session Replication Module to better serve your needs.    - `workerName`: Set this attribute to a unique value for each Jetty instance to enable session affinity with a sticky-session configured load balancer.  - `cleanUpPeriod`: Defines the working period of session clean-up task in milliseconds.  - `configLocation`: specifies the location of `hazelcast.xml`.    &lt;br&gt;&lt;/br&gt;    "
});

documentTitles["index.html#configuring-hazelcastsessionmanager-for-jetty"] = "Configuring HazelcastSessionManager for Jetty";
index.add({
    url: "index.html#configuring-hazelcastsessionmanager-for-jetty",
    title: "Configuring HazelcastSessionManager for Jetty",
    body: "#### Configuring HazelcastSessionManager for Jetty    `HazelcastSessionManager` is used both in P2P and Client/Server mode. Use the following parameters to configure Jetty Session Replication Module to better serve your needs.    - `savePeriod`: Sets the interval of saving session data to the Hazelcast cluster. Jetty Web Session Replication Module has its own nature of caching. Attribute changes during the HTTP Request/HTTP Response cycle are cached by default. Distributing those changes to the Hazelcast Cluster is costly, so Session Replication is only done at the end of each request for updated and deleted attributes. The risk with this approach is losing data if a Jetty crash happens in the middle of the HTTP Request operation.  You can change that behavior by setting the `savePeriod` attribute.    Notes:    - If `savePeriod` is set to **-2**, `HazelcastSessionManager.save` method is called for every `doPutOrRemove` operation.  - If it is set to **-1**, the same method is never called if Jetty is not shut down.  - If it is set to **0** (the default value), the same method is called at the end of request.  - If it is set to **1**, the same method is called at the end of request if session is dirty.    &lt;br&gt;&lt;/br&gt;      "
});

documentTitles["index.html#setting-session-expiration"] = "Setting Session Expiration";
index.add({
    url: "index.html#setting-session-expiration",
    title: "Setting Session Expiration",
    body: "#### Setting Session Expiration    Based on Tomcat configuration or `sessionTimeout` setting in `web.xml`, the sessions are expired over time. This requires a cleanup on Hazelcast Cluster, since there is no need to keep expired sessions in it.     `cleanUpPeriod`, which is defined in `HazelcastSessionIdManager`, is the only setting that controls the behavior of session expiry policy in Jetty Web Session Replication Module. By setting this, you can set the frequency of the session expiration checks in the Jetty Instance.      "
});

documentTitles["index.html#sticky-sessions-and-jetty"] = "Sticky Sessions and Jetty";
index.add({
    url: "index.html#sticky-sessions-and-jetty",
    title: "Sticky Sessions and Jetty",
    body: "#### Sticky Sessions and Jetty     `HazelcastSessionIdManager` can work in sticky and non-sticky setups.    The clustered session mechanism works in conjunction with a load balancer that supports stickiness. Stickiness can be based on various data items, such as source IP address, or characteristics of the session ID, or a load-balancer specific mechanism.   For those load balancers that examine the session ID, `HazelcastSessionIdManager` appends a node ID to the session ID, which can be used for routing.  You must configure the `HazelcastSessionIdManager` with a `workerName` that is unique across the cluster.   Typically the name relates to the physical node on which the instance is executed. If this name is not unique, your load balancer might fail to distribute your sessions correctly.  If sticky sessions are enabled, the `workerName` parameter has to be set, as shown below.      ```xml  &lt;Set name=\&quot;sessionIdManager\&quot;&gt;      &lt;New id=\&quot;hazelcastIdMgr\&quot; class=\&quot;com.hazelcast.session.HazelcastSessionIdManager\&quot;&gt;          &lt;Arg&gt;&lt;Ref id=\&quot;Server\&quot;/&gt;&lt;/Arg&gt;          &lt;Set name=\&quot;configLocation\&quot;&gt;etc/hazelcast.xml&lt;/Set&gt;          &lt;Set name=\&quot;workerName\&quot;&gt;unique-worker-1&lt;/Set&gt;      &lt;/New&gt;  &lt;/Set&gt;  ```      &lt;br&gt;&lt;/br&gt;     "
});

documentTitles["index.html#spring-integration"] = "Spring Integration";
index.add({
    url: "index.html#spring-integration",
    title: "Spring Integration",
    body: "## Spring Integration  You can integrate Hazelcast with Spring and this chapter explains the configuration of Hazelcast within Spring context.    "
});

documentTitles["index.html#supported-versions"] = "Supported Versions";
index.add({
    url: "index.html#supported-versions",
    title: "Supported Versions",
    body: "### Supported Versions  - Spring 2.5+   "
});

documentTitles["index.html#configuring-spring"] = "Configuring Spring";
index.add({
    url: "index.html#configuring-spring",
    title: "Configuring Spring",
    body: "### Configuring Spring  ***Sample Code***: *Please see our &lt;a href=\&quot;https://github.com/hazelcast/hazelcast-code-samples/tree/master/hazelcast-integration/spring-configuration\&quot; target=\&quot;_blank\&quot;&gt;sample application&lt;/a&gt; for Spring Configuration.* &lt;br&gt;&lt;/br&gt;   "
});

documentTitles["index.html#declaring-beans-by-spring-beans-namespace"] = "Declaring Beans by Spring *beans* Namespace";
index.add({
    url: "index.html#declaring-beans-by-spring-beans-namespace",
    title: "Declaring Beans by Spring *beans* Namespace",
    body: "#### Declaring Beans by Spring *beans* Namespace   ***Classpath Configuration***   This configuration requires the following jar file in the classpath:  - `hazelcast-`&lt;*version*&gt;`.jar`  ***Bean Declaration***   You can declare Hazelcast Objects using the default Spring *beans* namespace. Example code for a Hazelcast Instance declaration is listed below.  ```xml &lt;bean id=\&quot;instance\&quot; class=\&quot;com.hazelcast.core.Hazelcast\&quot; factory-method=\&quot;newHazelcastInstance\&quot;&gt;   &lt;constructor-arg&gt;     &lt;bean class=\&quot;com.hazelcast.config.Config\&quot;&gt;       &lt;property name=\&quot;groupConfig\&quot;&gt;         &lt;bean class=\&quot;com.hazelcast.config.GroupConfig\&quot;&gt;           &lt;property name=\&quot;name\&quot; value=\&quot;dev\&quot;/&gt;           &lt;property name=\&quot;password\&quot; value=\&quot;pwd\&quot;/&gt;         &lt;/bean&gt;       &lt;/property&gt;       &lt;!-- and so on ... --&gt;     &lt;/bean&gt;   &lt;/constructor-arg&gt; &lt;/bean&gt;  &lt;bean id=\&quot;map\&quot; factory-bean=\&quot;instance\&quot; factory-method=\&quot;getMap\&quot;&gt;   &lt;constructor-arg value=\&quot;map\&quot;/&gt; &lt;/bean&gt; ```   "
});

documentTitles["index.html#declaring-beans-by-hazelcast-namespace"] = "Declaring Beans by *hazelcast* Namespace";
index.add({
    url: "index.html#declaring-beans-by-hazelcast-namespace",
    title: "Declaring Beans by *hazelcast* Namespace",
    body: "#### Declaring Beans by *hazelcast* Namespace   ***Configuring Classpath***   Hazelcast-Spring integration requires the following JAR files in the classpath:  - `hazelcast-spring-`&lt;*version*&gt;`.jar` - `hazelcast-`&lt;*version*&gt;`.jar`  or  - `hazelcast-all-`&lt;*version*&gt;`.jar`  ***Declaring Beans***   Hazelcast has its own namespace **hazelcast** for bean definitions. You can easily add the namespace declaration *xmlns:hz=\&quot;http://www.hazelcast.com/schema/spring\&quot;* to the `beans` element in the context file so that *hz* namespace shortcut can be used as a bean declaration.  Here is an example schema definition for Hazelcast 3.3.x:  ```xml &lt;beans xmlns=\&quot;http://www.springframework.org/schema/beans\&quot;        xmlns:xsi=\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;        xmlns:hz=\&quot;http://www.hazelcast.com/schema/spring\&quot;        xsi:schemaLocation=\&quot;http://www.springframework.org/schema/beans                 http://www.springframework.org/schema/beans/spring-beans-3.0.xsd                 http://www.hazelcast.com/schema/spring                 http://www.hazelcast.com/schema/spring/hazelcast-spring.xsd\&quot;&gt; ```   "
});

documentTitles["index.html#supported-configurations-with-hazelcast-namespace"] = "Supported Configurations with *hazelcast* Namespace";
index.add({
    url: "index.html#supported-configurations-with-hazelcast-namespace",
    title: "Supported Configurations with *hazelcast* Namespace",
    body: "#### Supported Configurations with *hazelcast* Namespace  - **Configuring Hazelcast Instance**  ```xml &lt;hz:hazelcast id=\&quot;instance\&quot;&gt;   &lt;hz:config&gt;     &lt;hz:group name=\&quot;dev\&quot; password=\&quot;password\&quot;/&gt;     &lt;hz:network port=\&quot;5701\&quot; port-auto-increment=\&quot;false\&quot;&gt;       &lt;hz:join&gt;         &lt;hz:multicast enabled=\&quot;false\&quot;                       multicast-group=\&quot;224.2.2.3\&quot;                       multicast-port=\&quot;54327\&quot;/&gt;         &lt;hz:tcp-ip enabled=\&quot;true\&quot;&gt;           &lt;hz:members&gt;10.10.1.2, 10.10.1.3&lt;/hz:members&gt;         &lt;/hz:tcp-ip&gt;       &lt;/hz:join&gt;     &lt;/hz:network&gt;     &lt;hz:map name=\&quot;map\&quot;             backup-count=\&quot;2\&quot;             max-size=\&quot;0\&quot;             eviction-percentage=\&quot;30\&quot;             read-backup-data=\&quot;true\&quot;             eviction-policy=\&quot;NONE\&quot;             merge-policy=\&quot;com.hazelcast.map.merge.PassThroughMergePolicy\&quot;/&gt;   &lt;/hz:config&gt; &lt;/hz:hazelcast&gt; ```  -   **Configuring Hazelcast Client**  ```xml &lt;hz:client id=\&quot;client\&quot;&gt;   &lt;hz:group name=\&quot;${cluster.group.name}\&quot; password=\&quot;${cluster.group.password}\&quot; /&gt;   &lt;hz:network connection-attempt-limit=\&quot;3\&quot;               connection-attempt-period=\&quot;3000\&quot;               connection-timeout=\&quot;1000\&quot;               redo-operation=\&quot;true\&quot;               smart-routing=\&quot;true\&quot;&gt;     &lt;hz:member&gt;10.10.1.2:5701&lt;/hz:member&gt;     &lt;hz:member&gt;10.10.1.3:5701&lt;/hz:member&gt;   &lt;/hz:network&gt; &lt;/hz:client&gt; ```  -   **Hazelcast Supported Type Configurations and Examples**  	- `map` 	- `multiMap` 	- `replicatedmap` 	- `queue` 	- `topic` 	- `set` 	- `list` 	- `executorService` 	- `idGenerator` 	- `atomicLong` 	- `atomicReference` 	- `semaphore` 	- `countDownLatch` 	- `lock`   ```xml &lt;hz:map id=\&quot;map\&quot; instance-ref=\&quot;client\&quot; name=\&quot;map\&quot; lazy-init=\&quot;true\&quot; /&gt; &lt;hz:multiMap id=\&quot;multiMap\&quot; instance-ref=\&quot;instance\&quot; name=\&quot;multiMap\&quot;     lazy-init=\&quot;false\&quot; /&gt; &lt;hz:replicatedmap id=\&quot;replicatedmap\&quot; instance-ref=\&quot;instance\&quot;      name=\&quot;replicatedmap\&quot; lazy-init=\&quot;false\&quot; /&gt; &lt;hz:queue id=\&quot;queue\&quot; instance-ref=\&quot;client\&quot; name=\&quot;queue\&quot;      lazy-init=\&quot;true\&quot; depends-on=\&quot;instance\&quot;/&gt; &lt;hz:topic id=\&quot;topic\&quot; instance-ref=\&quot;instance\&quot; name=\&quot;topic\&quot;      depends-on=\&quot;instance, client\&quot;/&gt; &lt;hz:set id=\&quot;set\&quot; instance-ref=\&quot;instance\&quot; name=\&quot;set\&quot; /&gt; &lt;hz:list id=\&quot;list\&quot; instance-ref=\&quot;instance\&quot; name=\&quot;list\&quot;/&gt; &lt;hz:executorService id=\&quot;executorService\&quot; instance-ref=\&quot;client\&quot;      name=\&quot;executorService\&quot;/&gt; &lt;hz:idGenerator id=\&quot;idGenerator\&quot; instance-ref=\&quot;instance\&quot;      name=\&quot;idGenerator\&quot;/&gt; &lt;hz:atomicLong id=\&quot;atomicLong\&quot; instance-ref=\&quot;instance\&quot; name=\&quot;atomicLong\&quot;/&gt; &lt;hz:atomicReference id=\&quot;atomicReference\&quot; instance-ref=\&quot;instance\&quot;      name=\&quot;atomicReference\&quot;/&gt; &lt;hz:semaphore id=\&quot;semaphore\&quot; instance-ref=\&quot;instance\&quot; name=\&quot;semaphore\&quot;/&gt; &lt;hz:countDownLatch id=\&quot;countDownLatch\&quot; instance-ref=\&quot;instance\&quot;      name=\&quot;countDownLatch\&quot;/&gt; &lt;hz:lock id=\&quot;lock\&quot; instance-ref=\&quot;instance\&quot; name=\&quot;lock\&quot;/&gt; ```  -   **Supported Spring Bean Attributes**  Hazelcast also supports `lazy-init`, `scope` and `depends-on` bean attributes.  ```xml &lt;hz:hazelcast id=\&quot;instance\&quot; lazy-init=\&quot;true\&quot; scope=\&quot;singleton\&quot;&gt;   ... &lt;/hz:hazelcast&gt; &lt;hz:client id=\&quot;client\&quot; scope=\&quot;prototype\&quot; depends-on=\&quot;instance\&quot;&gt;   ... &lt;/hz:client&gt; ```  -   **Configuring MapStore and NearCache**  For map-store, you should set either the *class-name* or the *implementation* attribute.  ```xml &lt;hz:config&gt;   &lt;hz:map name=\&quot;map1\&quot;&gt;     &lt;hz:near-cache time-to-live-seconds=\&quot;0\&quot; max-idle-seconds=\&quot;60\&quot;         eviction-policy=\&quot;LRU\&quot; max-size=\&quot;5000\&quot;  invalidate-on-change=\&quot;true\&quot;/&gt;      &lt;hz:map-store enabled=\&quot;true\&quot; class-name=\&quot;com.foo.DummyStore\&quot;         write-delay-seconds=\&quot;0\&quot;/&gt;   &lt;/hz:map&gt;    &lt;hz:map name=\&quot;map2\&quot;&gt;     &lt;hz:map-store enabled=\&quot;true\&quot; implementation=\&quot;dummyMapStore\&quot;         write-delay-seconds=\&quot;0\&quot;/&gt;   &lt;/hz:map&gt;    &lt;bean id=\&quot;dummyMapStore\&quot; class=\&quot;com.foo.DummyStore\&quot; /&gt; &lt;/hz:config&gt; ```   "
});

documentTitles["index.html#enabling-springaware-objects"] = "Enabling SpringAware Objects";
index.add({
    url: "index.html#enabling-springaware-objects",
    title: "Enabling SpringAware Objects",
    body: "### Enabling SpringAware Objects  You can mark Hazelcast Distributed Objects with @SpringAware if the object wants:  - to apply bean properties, - to apply factory callbacks such as `ApplicationContextAware`, `BeanNameAware`, - to apply bean post-processing annotations such as `InitializingBean`, `@PostConstruct`.  Hazelcast Distributed `ExecutorService`, or more generally any Hazelcast managed object, can benefit from these features. To enable SpringAware objects, you must first configure `HazelcastInstance` using *hazelcast* namespace as explained in [Configuring Spring](#configuring-spring) and add `&lt;hz:spring-aware /&gt;` tag.   "
});

documentTitles["index.html#springaware-examples"] = "SpringAware Examples";
index.add({
    url: "index.html#springaware-examples",
    title: "SpringAware Examples",
    body: "#### SpringAware Examples  - Configure a Hazelcast Instance (3.3.x) via Spring Configuration and define *someBean* as Spring Bean. - Add `&lt;hz:spring-aware /&gt;` to Hazelcast configuration to enable @SpringAware.  ```xml &lt;beans xmlns=\&quot;http://www.springframework.org/schema/beans\&quot;        xmlns:xsi=\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;        xmlns:context=\&quot;http://www.springframework.org/schema/context\&quot;        xmlns:hz=\&quot;http://www.hazelcast.com/schema/spring\&quot;        xsi:schemaLocation=\&quot;http://www.springframework.org/schema/beans                 http://www.springframework.org/schema/beans/spring-beans-3.0.xsd                 http://www.springframework.org/schema/context                 http://www.springframework.org/schema/context/spring-context-3.0.xsd                 http://www.hazelcast.com/schema/spring                 http://www.hazelcast.com/schema/spring/hazelcast-spring.xsd\&quot;&gt;    &lt;context:annotation-config /&gt;    &lt;hz:hazelcast id=\&quot;instance\&quot;&gt;     &lt;hz:config&gt;       &lt;hz:spring-aware /&gt;       &lt;hz:group name=\&quot;dev\&quot; password=\&quot;password\&quot;/&gt;       &lt;hz:network port=\&quot;5701\&quot; port-auto-increment=\&quot;false\&quot;&gt;         &lt;hz:join&gt;           &lt;hz:multicast enabled=\&quot;false\&quot; /&gt;           &lt;hz:tcp-ip enabled=\&quot;true\&quot;&gt;             &lt;hz:members&gt;10.10.1.2, 10.10.1.3&lt;/hz:members&gt;           &lt;/hz:tcp-ip&gt;         &lt;/hz:join&gt;       &lt;/hz:network&gt;       ...     &lt;/hz:config&gt;   &lt;/hz:hazelcast&gt;    &lt;bean id=\&quot;someBean\&quot; class=\&quot;com.hazelcast.examples.spring.SomeBean\&quot;       scope=\&quot;singleton\&quot; /&gt;   ... &lt;/beans&gt; ``` **Distributed Map SpringAware Example:**  - Create a class called `SomeValue` which contains Spring Bean definitions like `ApplicationContext` and `SomeBean`.  ```java @SpringAware @Component(\&quot;someValue\&quot;) @Scope(\&quot;prototype\&quot;) public class SomeValue implements Serializable, ApplicationContextAware {    private transient ApplicationContext context;    private transient SomeBean someBean;    private transient boolean init = false;    public void setApplicationContext( ApplicationContext applicationContext )     throws BeansException {     context = applicationContext;   }    @Autowired   public void setSomeBean( SomeBean someBean)  {     this.someBean = someBean;   }    @PostConstruct   public void init() {     someBean.doSomethingUseful();     init = true;   }   ... } ```  - Get `SomeValue` Object from Context and put it into Hazelcast Distributed Map on Node-1.  ```java HazelcastInstance hazelcastInstance =      (HazelcastInstance) context.getBean( \&quot;hazelcast\&quot; ); SomeValue value = (SomeValue) context.getBean( \&quot;someValue\&quot; ) IMap&lt;String, SomeValue&gt; map = hazelcastInstance.getMap( \&quot;values\&quot; ); map.put( \&quot;key\&quot;, value ); ```  - Read `SomeValue` Object from Hazelcast Distributed Map and assert that `init` method is called since it is annotated with `@PostConstruct`.  ```java HazelcastInstance hazelcastInstance =      (HazelcastInstance) context.getBean( \&quot;hazelcast\&quot; ); IMap&lt;String, SomeValue&gt; map = hazelcastInstance.getMap( \&quot;values\&quot; ); SomeValue value = map.get( \&quot;key\&quot; ); Assert.assertTrue( value.init ); ```  **ExecutorService SpringAware Example:**  - Create a Callable Class called SomeTask which contains Spring Bean definitions like `ApplicationContext`, `SomeBean`.   ```java @SpringAware public class SomeTask     implements Callable&lt;Long&gt;, ApplicationContextAware, Serializable {    private transient ApplicationContext context;    private transient SomeBean someBean;    public Long call() throws Exception {     return someBean.value;   }    public void setApplicationContext( ApplicationContext applicationContext )       throws BeansException {     context = applicationContext;   }    @Autowired   public void setSomeBean( SomeBean someBean ) {     this.someBean = someBean;   } } ```  - Submit `SomeTask` to two Hazelcast Members and assert that `someBean` is autowired.  ```java HazelcastInstance hazelcastInstance =     (HazelcastInstance) context.getBean( \&quot;hazelcast\&quot; ); SomeBean bean = (SomeBean) context.getBean( \&quot;someBean\&quot; );  Future&lt;Long&gt; f = hazelcastInstance.getExecutorService().submit(new SomeTask()); Assert.assertEquals(bean.value, f.get().longValue());  // choose a member Member member = hazelcastInstance.getCluster().getMembers().iterator().next();  Future&lt;Long&gt; f2 = (Future&lt;Long&gt;) hazelcast.getExecutorService()     .submitToMember(new SomeTask(), member); Assert.assertEquals(bean.value, f2.get().longValue()); ``` &lt;br&gt;&lt;br&gt;  ![image](images/NoteSmall.jpg) ***NOTE:*** *Spring managed properties/fields are marked as `transient`.*   "
});

documentTitles["index.html#adding-caching-to-spring"] = "Adding Caching to Spring";
index.add({
    url: "index.html#adding-caching-to-spring",
    title: "Adding Caching to Spring",
    body: "### Adding Caching to Spring  ***Sample Code***: *Please see our sample application for &lt;a href=\&quot;https://github.com/hazelcast/hazelcast-code-samples/tree/master/hazelcast-integration/spring-cache-manager\&quot; target=\&quot;_blank\&quot;&gt;Spring Cache&lt;/a&gt;.* &lt;br&gt;&lt;/br&gt;  As of version 3.1, Spring Framework provides support for adding caching into an existing Spring application. Spring 3.2 and later versions support JCache compliant caching providers. You can also use JCache caching backed by Hazelcast if your Spring version supports JCache.   "
});

documentTitles["index.html#declarative-spring-cache-configuration"] = "Declarative Spring Cache Configuration";
index.add({
    url: "index.html#declarative-spring-cache-configuration",
    title: "Declarative Spring Cache Configuration",
    body: "#### Declarative Spring Cache Configuration  ```xml &lt;cache:annotation-driven cache-manager=\&quot;cacheManager\&quot; /&gt;  &lt;hz:hazelcast id=\&quot;hazelcast\&quot;&gt;   ... &lt;/hz:hazelcast&gt;  &lt;bean id=\&quot;cacheManager\&quot; class=\&quot;com.hazelcast.spring.cache.HazelcastCacheManager\&quot;&gt;   &lt;constructor-arg ref=\&quot;instance\&quot;/&gt; &lt;/bean&gt; ```  Hazelcast uses its Map implementation for underlying cache. You can configure a map with your cache's name if you want to set additional configuration such as `ttl`.  ```xml &lt;cache:annotation-driven cache-manager=\&quot;cacheManager\&quot; /&gt;  &lt;hz:hazelcast id=\&quot;hazelcast\&quot;&gt;   &lt;hz:config&gt;     ...      &lt;hz:map name=\&quot;city\&quot; time-to-live-seconds=\&quot;0\&quot; in-memory-format=\&quot;BINARY\&quot; /&gt; &lt;/hz:hazelcast&gt;  &lt;bean id=\&quot;cacheManager\&quot; class=\&quot;com.hazelcast.spring.cache.HazelcastCacheManager\&quot;&gt;   &lt;constructor-arg ref=\&quot;instance\&quot;/&gt; &lt;/bean&gt; ```  ``` public interface IDummyBean {   @Cacheable(\&quot;city\&quot;)   String getCity(); } ```  "
});

documentTitles["index.html#declarative-hazelcast-jcache-based-caching-configuration"] = "Declarative Hazelcast JCache Based Caching Configuration";
index.add({
    url: "index.html#declarative-hazelcast-jcache-based-caching-configuration",
    title: "Declarative Hazelcast JCache Based Caching Configuration",
    body: "#### Declarative Hazelcast JCache Based Caching Configuration  ```xml &lt;cache:annotation-driven cache-manager=\&quot;cacheManager\&quot; /&gt;  &lt;hz:hazelcast id=\&quot;hazelcast\&quot;&gt;   ... &lt;/hz:hazelcast&gt;  &lt;hz:cache-manager id=\&quot;hazelcastJCacheCacheManager\&quot; instance-ref=\&quot;instance\&quot; name=\&quot;hazelcastJCacheCacheManager\&quot;/&gt;  &lt;bean id=\&quot;cacheManager\&quot; class=\&quot;org.springframework.cache.jcache.JCacheCacheManager\&quot;&gt;     &lt;constructor-arg ref=\&quot;hazelcastJCacheCacheManager\&quot; /&gt; &lt;/bean&gt; ```  You can use JCache implementation in both member and client mode. A cache manager should be bound to an instance. Instance can be referenced by `instance-ref` attribute or provided by `hazelcast.instance.name` property which is passed to CacheManager. Instance should be specified using one of these methods.  ![image](images/NoteSmall.jpg) ***NOTE:*** *Instance name provided in properties overrides `instance-ref` attribute.*  You can specify a uri for each cache manager with `uri` attribute.   ```xml &lt;hz:cache-manager id=\&quot;cacheManager2\&quot; name=\&quot;cacheManager2\&quot; uri=\&quot;testURI\&quot;&gt;     &lt;hz:properties&gt;         &lt;hz:property name=\&quot;hazelcast.instance.name\&quot;&gt;named-spring-hz-instance&lt;/hz:property&gt;         &lt;hz:property name=\&quot;testProperty\&quot;&gt;testValue&lt;/hz:property&gt;     &lt;/hz:properties&gt; &lt;/hz:cache-manager&gt; ```  "
});

documentTitles["index.html#annotation-based-spring-cache-configuration"] = "Annotation-Based Spring Cache Configuration";
index.add({
    url: "index.html#annotation-based-spring-cache-configuration",
    title: "Annotation-Based Spring Cache Configuration",
    body: "#### Annotation-Based Spring Cache Configuration  Annotation-Based Configuration does not require any XML definition. To perform Annotation-Based Configuration:  - Implement a `CachingConfiguration` class with related Annotations.  ```java @Configuration @EnableCaching public class CachingConfiguration implements CachingConfigurer{     @Bean     public CacheManager cacheManager() {         ClientConfig config = new ClientConfig();         HazelcastInstance client = HazelcastClient.newHazelcastClient(config);         return new HazelcastCacheManager(client);     }     @Bean     public KeyGenerator keyGenerator() {         return null;     } ```  - Launch Application Context and register `CachingConfiguration`.  ```java AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(); context.register(CachingConfiguration.class); context.refresh(); ```  For more information about Spring Cache, please see &lt;a href=\&quot;http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/cache.html\&quot; target=\&quot;_blank\&quot;&gt;Spring Cache Abstraction&lt;/a&gt;.   "
});

documentTitles["index.html#configuring-hibernate-second-level-cache"] = "Configuring Hibernate Second Level Cache";
index.add({
    url: "index.html#configuring-hibernate-second-level-cache",
    title: "Configuring Hibernate Second Level Cache",
    body: "### Configuring Hibernate Second Level Cache  ***Sample Code***: *Please see our &lt;a href=\&quot;https://github.com/hazelcast/hazelcast-code-samples/tree/master/hazelcast-integration/spring-hibernate-2ndlevel-cache\&quot; target=\&quot;_blank\&quot;&gt;sample application&lt;/a&gt; for Hibernate 2nd Level Cache Config.* &lt;br&gt;&lt;/br&gt;  If you are using Hibernate with Hazelcast as a second level cache provider, you can easily create `RegionFactory` instances within Spring configuration (by Spring version 3.1). That way, you can use the same `HazelcastInstance` as Hibernate L2 cache instance.  ```xml &lt;hz:hibernate-region-factory id=\&quot;regionFactory\&quot; instance-ref=\&quot;instance\&quot;     mode=\&quot;LOCAL\&quot; /&gt; ... &lt;bean id=\&quot;sessionFactory\&quot;        class=\&quot;org.springframework.orm.hibernate3.LocalSessionFactoryBean\&quot;  	  scope=\&quot;singleton\&quot;&gt;   &lt;property name=\&quot;dataSource\&quot; ref=\&quot;dataSource\&quot;/&gt;   &lt;property name=\&quot;cacheRegionFactory\&quot; ref=\&quot;regionFactory\&quot; /&gt;   ... &lt;/bean&gt; ```  **Hibernate RegionFactory Modes**  - LOCAL - DISTRIBUTED   Please refer to Hibernate [Configuring RegionFactory](#configuring-regionfactory) for more information.   "
});

documentTitles["index.html#best-practices"] = "Best Practices";
index.add({
    url: "index.html#best-practices",
    title: "Best Practices",
    body: "### Best Practices  Spring tries to create a new `Map`/`Collection` instance and fill the new instance by iterating and converting values of the original `Map`/`Collection` (`IMap`, `IQueue`, etc.) to required types when generic type parameters of the original `Map`/`Collection` and the target property/attribute do not match.  Since Hazelcast `Map`s/`Collection`s are designed to hold very large data which a single machine cannot carry, iterating through whole values can cause out of memory errors.  To avoid this issue, the target property/attribute can be declared as un-typed `Map`/`Collection` as shown below.  ```java public class SomeBean {   @Autowired   IMap map; // instead of IMap&lt;K, V&gt; map    @Autowired   IQueue queue; // instead of IQueue&lt;E&gt; queue    ... } ```  Or, parameters of injection methods (constructor, setter) can be un-typed as shown below.  ```java public class SomeBean {    IMap&lt;K, V&gt; map;    IQueue&lt;E&gt; queue;    // Instead of IMap&lt;K, V&gt; map   public SomeBean(IMap map) {     this.map = map;   }    ...    // Instead of IQueue&lt;E&gt; queue   public void setQueue(IQueue queue) {     this.queue = queue;   }   ... } ``` &lt;br&gt; &lt;/br&gt;  ***RELATED INFORMATION***  *For more information please see &lt;a href=\&quot;https://jira.springsource.org/browse/SPR-3407\&quot; target=\&quot;_blank\&quot;&gt;Spring issue-3407&lt;/a&gt;.*      "
});

documentTitles["index.html#storage"] = "Storage";
index.add({
    url: "index.html#storage",
    title: "Storage",
    body: "# Storage  This chapter describes Hazelcast's High-Density Memory Store and Hot Restart Persistence features along with their configurations, and gives recommendations on the storage sizing.  "
});

documentTitles["index.html#high-density-memory-store"] = "High-Density Memory Store";
index.add({
    url: "index.html#high-density-memory-store",
    title: "High-Density Memory Store",
    body: "## High-Density Memory Store  &lt;font color=\&quot;##153F75\&quot;&gt;**Hazelcast Enterprise HD**&lt;/font&gt; &lt;br&gt;&lt;/br&gt;  Hazelcast High-Density Memory Store is Hazelcast's enterprise grade backend storage solution. By default, Hazelcast offers a production ready, low garbage collection (GC) pressure, storage backend. Serialized keys and values are still stored in the standard Java map, such as data structures on the heap. The data structures are stored in serialized form for the highest data compaction, and are still subject to Java Garbage Collection.  In &lt;font color=\&quot;##153F75\&quot;&gt;**Hazelcast Enterprise HD**&lt;/font&gt;, the High-Density Memory Store is built around a pluggable memory manager which enables multiple memory stores. These memory stores are all accessible using a common access layer that scales up to Terabytes of main memory on a single JVM. At the same time, by further minimizing the GC pressure, High-Density Memory Store enables predictable application scaling and boosts performance and latency while minimizing pauses for Java Garbage Collection.  This foundation includes, but is not limited to, storing keys and values next to the heap in a native memory region.  High-Density Memory Store is currently provided for the following Hazelcast features and implementations:  - [Map](#using-high-density-memory-store-with-map) and [near cache](#using-high-density-memory-store-with-near-cache) - JCache Implementation - [Hot Restart Persistence](#hot-restart-persistence) - Java Client, when using the near cache for client - [Web Session Replications](#using-high-density-memory-store) - Hibernate 2nd Level Caching    "
});

documentTitles["index.html#configuring-high-density-memory-store"] = "Configuring High-Density Memory Store";
index.add({
    url: "index.html#configuring-high-density-memory-store",
    title: "Configuring High-Density Memory Store",
    body: "### Configuring High-Density Memory Store  To use the High-Density memory storage, the native memory usage must be enabled using the programmatic or declarative configuration. Also, you can configure its size, memory allocator type, minimum block size, page size and metadata space percentage.  - **size:** Size of the total native memory to allocate. Default value is **512 MB**. - **allocator type**: Type of the memory allocator. Available values are as follows:   * **STANDARD**: This option is used internally by Hazelcast's POOLED allocator type or for debugging/testing purposes. 	- With this option, the memory is allocated or deallocated using your operating system's default memory manager.    	- It uses GNU C Library's standard `malloc()` and `free()` methods which are subject to contention on multithreaded/multicore systems.   	- Memory operations may become slower when you perform a lot of small allocations and deallocations.    	- It may cause large memory fragmentations, unless you use a method in the background that emphasizes fragmentation avoidance, such as `jemalloc()`. Note that a large memory fragmentation can trigger the Linux Out of Memory Killer if there is no swap space enabled in your system. Even if the swap space is enabled, the killer can be again triggered if there is not enough swap space left.    	- If you still want to use the operating system's default memory management, you can set the allocator type to STANDARD in your native memory configuration.    * **POOLED**: This is the default option, Hazelcast's own pooling memory allocator.   	- With this option, memory blocks are managed using internal memory pools.    	- It allocates memory blocks, each of which has a 4MB page size by default, and splits them into chunks or merges them to create larger chunks when required. Sizing of these chunks follows the [buddy memory allocation](https://en.wikipedia.org/wiki/Buddy_memory_allocation) algorithm, i.e. power-of-two sizing.   	- It never frees memory blocks back to the operating system. It marks disposed memory blocks as available to be used later, meaning that these blocks are reusable.   	- Memory allocation and deallocation operations (except the ones requiring larger sizes than the page size) do not interact with the operating system mostly.   	- For memory allocation, it tries to find the requested memory size inside the internal memory pools. If it cannot be found, then it interacts with the operating system.     - **minimum block size:** Minimum size of the blocks in bytes to split and fragment a page block to assign to an allocation request. It is used only by the **POOLED** memory allocator. Default value is **16**. - **page size:** Size of the page in bytes to allocate memory as a block. It is used only by the **POOLED** memory allocator. Default value is `1 &lt;&lt; 22` = **4194304 Bytes**, about **4 MB**. - **metadata space percentage:** Defines the percentage of the allocated native memory that is used for internal memory structures by the High-Density Memory for tracking the used and available memory blocks. It is used only by the **POOLED** memory allocator. Default value is **12.5**.  The following is the programmatic configuration example.  ```java MemorySize memorySize = new MemorySize(512, MemoryUnit.MEGABYTES); NativeMemoryConfig nativeMemoryConfig =                 new NativeMemoryConfig()                         .setAllocatorType(NativeMemoryConfig.MemoryAllocatorType.POOLED)                         .setSize(memorySize)                         .setEnabled(true)                         .setMinBlockSize(16)                         .setPageSize(1 &lt;&lt; 20); ```  The following is the declarative configuration example.  ```xml &lt;native-memory enabled=\&quot;true\&quot; allocator-type=\&quot;POOLED\&quot;&gt;   &lt;size value=\&quot;512\&quot; unit=\&quot;MEGABYTES\&quot;/&gt; &lt;/native-memory&gt; ```      "
});

documentTitles["index.html#sizing-practices"] = "Sizing Practices";
index.add({
    url: "index.html#sizing-practices",
    title: "Sizing Practices",
    body: "## Sizing Practices  Data in Hazelcast is both active data and backup data for high availability, so the total memory footprint is the size of active data plus the size of backup data. If you use a single backup, it means the total memory footprint is two times the active data (active data + backup data). If you use, for example, two backups, then the total memory footprint is three times the active data (active data + backup data + backup data).  If you use only heap memory, each Hazelcast node with a 4 GB heap should accommodate a maximum of 3.5 GB of total data (active and backup). If you use the High-Density Memory Store, up to 75% of your physical memory footprint may be used for active and backup data, with headroom of 25% for normal fragmentation. In both cases, however, you should also keep some memory headroom available to handle any node failure or explicit node shutdown. When a node leaves the cluster, the data previously owned by the newly offline node will be distributed among the remaining members. For this reason, we recommend that you plan to use only 60% of available memory, with 40% headroom to handle node failure or shutdown.      "
});

documentTitles["index.html#hot-restart-persistence"] = "Hot Restart Persistence";
index.add({
    url: "index.html#hot-restart-persistence",
    title: "Hot Restart Persistence",
    body: "## Hot Restart Persistence  &lt;font color=\&quot;##153F75\&quot;&gt;**Hazelcast Enterprise HD**&lt;/font&gt; &lt;br&gt;&lt;/br&gt;     This chapter explains the Hazelcast's Hot Restart Persistence feature, introduced with Hazelcast 3.6. Hot Restart Persistence provides fast cluster restarts by storing the states of the cluster members on the disk. This feature is currently provided for the Hazelcast map data structure and the Hazelcast JCache implementation.  "
});

documentTitles["index.html#hot-restart-persistence-overview"] = "Hot Restart Persistence Overview";
index.add({
    url: "index.html#hot-restart-persistence-overview",
    title: "Hot Restart Persistence Overview",
    body: "### Hot Restart Persistence Overview  Hot Restart Persistence enables you to get your cluster up and running swiftly after a cluster restart. A restart can be caused by a planned shutdown (including rolling upgrades) or a sudden cluster-wide crash (e.g. power outage). For Hot Restart Persistence, required states for Hazelcast clusters and members are introduced. Please refer to the [Managing Cluster and Member States section](#managing-cluster-and-member-states) for information on the cluster and member states.  "
});

documentTitles["index.html#hot-restart-types"] = "Hot Restart Types";
index.add({
    url: "index.html#hot-restart-types",
    title: "Hot Restart Types",
    body: "#### Hot Restart Types  The Hot Restart feature is supported for the following restart types:  - **Restart after a planned shutdown**: 	- The cluster is shutdown completely and restarted with the exact same previous setup and data.  		You can shutdown the cluster completely using the method `HazelcastInstance.getCluster().shutdown()` or you can manually change the cluster state to `PASSIVE` and then shut down each member one by one. When you send the command to shut the cluster down, i.e. `HazelcastInstance.getCluster().shutdown()`, the members that are not in the `PASSIVE` state change their states to `PASSIVE`. Then, each member shuts itself down by calling the method `HazelcastInstance.shutdown()`.  	- Rolling upgrade: The cluster is restarted intentionally member by member. For example, this could be done to install an operating system patch or new hardware.  		To be able to shutdown the cluster member by member as part of a planned restart, each member in the cluster should be in the `FROZEN` or `PASSIVE` state. After the cluster state is changed to `FROZEN` or `PASSIVE`, you can manually shutdown each member by calling the method `HazelcastInstance.shutdown()`. When that member is restarted, it will rejoin the running cluster. After all members are restarted, the cluster state can be changed back to `ACTIVE`.  - **Restart after a cluster crash**: The cluster is restarted after all its members crashed at the same time due to a power outage, networking interruptions, etc.  "
});

documentTitles["index.html#the-restart-process"] = "The Restart Process";
index.add({
    url: "index.html#the-restart-process",
    title: "The Restart Process",
    body: "#### The Restart Process  During the restart process, each member waits to load data until all the members in the partition table are started. During this process, no operations are allowed. Once all cluster members are started, Hazelcast changes the cluster state to `PASSIVE` and starts to load data. When all data is loaded, Hazelcast changes the cluster state to its previous known state before shutdown and starts to accept the operations which are allowed by the restored cluster state.  If a member fails to either start, join the cluster in time (within the timeout), or load its data, then that member will be terminated immediately. After the problems causing the failure are fixed, that member can be restarted. If the cluster start cannot be completed in time, then all members will fail to start. Please refer to the [Configuring Hot Restart section](#configuring-hot-restart) for defining timeouts.  In the case of a restart after a cluster crash, the Hot Restart feature realizes that it was not a clean shutdown and Hazelcast tries to restart the cluster with the last saved data following the process explained above. In some cases, specifically when the cluster crashes while it has an ongoing partition migration process, currently it is not possible to restore the last saved state.  "
});

documentTitles["index.html#force-start"] = "Force Start";
index.add({
    url: "index.html#force-start",
    title: "Force Start",
    body: "#### Force Start  A member can crash permanently and then be unable to recover from the failure. In that case, restart process cannot be completed since some of the members do not start or fail to load their own data. In that case, you can force the cluster to clean its persisted data and make a fresh start. This process is called **force start**.      You can trigger the force start process using the Management Center, REST API and cluster management scripts. Force start process is managed by the master member. Therefore, you should trigger the force start on master member.  Please refer to the [Hot Restart functionality](#hot-restart) of the Management Center section to learn how you can perform a force start using the Management Center.  "
});

documentTitles["index.html#configuring-hot-restart"] = "Configuring Hot Restart";
index.add({
    url: "index.html#configuring-hot-restart",
    title: "Configuring Hot Restart",
    body: "### Configuring Hot Restart  You can configure Hot Restart programmatically or declaratively. The configuration includes elements to enable/disable the feature, to specify the directory where the Hot Restart data will be stored, and to define timeout values.  "
});

documentTitles["index.html#hot-restart-configuration-elements"] = "Hot Restart Configuration Elements";
index.add({
    url: "index.html#hot-restart-configuration-elements",
    title: "Hot Restart Configuration Elements",
    body: "#### Hot Restart Configuration Elements  The following are the descriptions of the Hot Restart configuration elements.  - `hot-restart-persistence`: The configuration that enables the Hot Restart feature. It includes the element `base-dir` that is used to specify the directory where the Hot Restart data will be stored. The default value for `base-dir` is `hot-restart`. You can use the default value, or you can specify the value of another folder containing the Hot Restart configuration, but it is mandatory that this `hot-restart` element has a value. This directory will be created automatically if it does not exist. - `validation-timeout-seconds`: Validation timeout for the Hot Restart process when validating the cluster members expected to join and the partition table on the whole cluster. - `data-load-timeout-seconds`: Data load timeout for the Hot Restart process. All members in the cluster should finish restoring their local data before this timeout. - `hot-restart`: The configuration that enables or disables the Hot Restart feature per data structure. This element is used for the supported data structures (in the above examples, you can see that it is included in `map` and `cache`). Turning on `fsync` guarantees that data is persisted to the disk device when a write operation returns successful response to the caller. By default, `fsync` is turned off. That means data will be persisted to the disk device eventually, instead of on every disk write. This generally provides better performance.  "
});

documentTitles["index.html#hot-restart-configuration-examples"] = "Hot Restart Configuration Examples";
index.add({
    url: "index.html#hot-restart-configuration-examples",
    title: "Hot Restart Configuration Examples",
    body: "#### Hot Restart Configuration Examples  The following are example configurations for a Hazelcast map and JCache implementation.  **Declarative Configuration**:  An example configuration is shown below.  ```xml &lt;hazelcast&gt;    ...    &lt;hot-restart-persistence enabled=\&quot;true\&quot;&gt; 	   &lt;base-dir&gt;/mnt/hot-restart&lt;/base-dir&gt; 	   &lt;validation-timeout-seconds&gt;120&lt;/validation-timeout-seconds&gt; 	   &lt;data-load-timeout-seconds&gt;900&lt;/data-load-timeout-seconds&gt;    &lt;/hot-restart-persistence&gt;    ...    &lt;map&gt; 	   &lt;hot-restart enabled=\&quot;true\&quot;&gt; 		   &lt;fsync&gt;false&lt;/fsync&gt; 	   &lt;/hot-restart&gt;    &lt;/map&gt;    ...    &lt;cache&gt; 	   &lt;hot-restart enabled=\&quot;true\&quot;&gt; 		   &lt;fsync&gt;false&lt;/fsync&gt; 	   &lt;/hot-restart&gt;    &lt;/cache&gt;    ... &lt;/hazelcast&gt; ```   **Programmatic Configuration**:  The programmatic equivalent of the above declarative configuration is shown below.  ```java HotRestartPersistenceConfig hotRestartPersistenceConfig = new HotRestartPersistenceConfig(); hotRestartPersistenceConfig.setEnabled(true); hotRestartPersistenceConfig.setBaseDir(new File(\&quot;/mnt/hot-restart\&quot;)); hotRestartPersistenceConfig.setValidationTimeoutSeconds(120); hotRestartPersistenceConfig.setDataLoadTimeoutSeconds(900); config.setHotRestartPersistenceConfig(hotRestartPersistenceConfig);  ... MapConfig mapConfig = new MapConfig(); mapConfig.getHotRestartConfig().setEnabled(true);  ... CacheConfig cacheConfig = new CacheConfig(); cacheConfig.getHotRestartConfig().setEnabled(true); ```   "
});

documentTitles["index.html#hot-restart-and-ip-address-port"] = "Hot Restart and IP Address-Port";
index.add({
    url: "index.html#hot-restart-and-ip-address-port",
    title: "Hot Restart and IP Address-Port",
    body: "### Hot Restart and IP Address-Port  Hazelcast relies on the IP address-port pair as a unique identifier for a cluster member. The member must restart with these address-port settings the same as before shutdown. Otherwise, Hot Restart fails.  "
});

documentTitles["index.html#hot-restart-persistence-design-details"] = "Hot Restart Persistence Design Details";
index.add({
    url: "index.html#hot-restart-persistence-design-details",
    title: "Hot Restart Persistence Design Details",
    body: "### Hot Restart Persistence Design Details  Hazelcast's Hot Restart Persistence uses the log-structured storage approach. The following is a top-level design description:  - The only kind of update operation on persistent data is _appending_. - What is appended are facts about events that happened to the data model represented by the store; either a new value was assigned to a key or a key was removed. - Each record associated with a key makes stale the previous record that was associated with that key. - Stale records contribute to the amount of _garbage_ present in the persistent storage. - Measures are taken to remove garbage from the storage.  This kind of design focuses almost all of the system's complexity into the garbage collection (GC) process, stripping down the client's operation to the bare necessity of guaranteeing persistent behavior: a simple file append operation. Consequently, the latency of operations is close to the theoretical minimum in almost all cases. Complications arise only during prolonged periods of maximum load; this is where the details of the GC process begin to matter.  "
});

documentTitles["index.html#concurrent-incremental-generational-gc"] = "Concurrent, Incremental, Generational GC";
index.add({
    url: "index.html#concurrent-incremental-generational-gc",
    title: "Concurrent, Incremental, Generational GC",
    body: "### Concurrent, Incremental, Generational GC  In order to maintain the lowest possible footprint in the update operation latency, the following properties are built into the garbage collection process:  - A dedicated thread performs the GC. In Hazelcast terms, this thread is called the Collector and the application thread is called the Mutator. &lt;br&gt;&lt;/br&gt; - On each update there is metadata to be maintained; this is done asynchronously by the Collector thread. The Mutator enqueues update events to the Collector's work queue. &lt;br&gt;&lt;/br&gt; - The Collector keeps draining its work queue at all times, including the time it goes through the GC cycle. Updates are taken into account at each stage in the GC cycle, preventing the copying of already dead records into compacted files. &lt;br&gt;&lt;/br&gt; - All GC-induced I/O competes for the same resources as the Mutator's update operations. Therefore, measures are taken to minimize the impact of I/O done during GC:   - data is never read from files, but from RAM;   - a heuristic scheme is employed which minimizes the number of bytes written to disk for each kilobyte of reclaimed garbage;   - measures are also taken to achieve a good interleaving of Collector and Mutator operations, minimizing latency outliers perceived by the Mutator.  "
});

documentTitles["index.html#io-minimization-scheme"] = "I/O Minimization Scheme";
index.add({
    url: "index.html#io-minimization-scheme",
    title: "I/O Minimization Scheme",
    body: "#### I/O Minimization Scheme  The success of this scheme is subject to a bet on the Weak Generational Garbage Hypothesis, which states that a new record entering the system is likely to become garbage soon. In other words, a key updated now is more likely than average to be updated again soon.  The scheme was taken from the seminal Sprite LFS paper, [Rosenblum, Ousterhout, _The Design and Implementation of a Log-Structured File System_](http://www.cs.berkeley.edu/~brewer/cs262/LFS.pdf). The following is an outline of the paper:  - Data is not written to one huge file, but to many files of moderate size (8 MB) called \&quot;chunks\&quot;. - Garbage is collected incrementally, i.e. by choosing several chunks, then copying all their live data to new chunks, then deleting the old ones. - I/O is minimized using a collection technique which results in a bimodal distribution of chunks with respect to their garbage content: most files are either almost all live data or they are all garbage. - The technique consists of two main principles:     1. Chunks are selected based on their _Cost-Benefit factor_ (see below).     2. Records are sorted by age before copying to new chunks.  "
});

documentTitles["index.html#cost-benefit-factor"] = "Cost-Benefit Factor";
index.add({
    url: "index.html#cost-benefit-factor",
    title: "Cost-Benefit Factor",
    body: "#### Cost-Benefit Factor  The Cost-Benefit factor of a chunk consists of two components multiplied together:  1. The ratio of benefit (amount of garbage that can be collected) to I/O cost (amount of live data to be written). 2. The age of the data in the chunk, measured as the age of the youngest record it contains.  The essence is in the second component: given equal amount of garbage in all chunks, it will make the young ones less attractive to the Collector. Assuming the generational garbage hypothesis, this will allow the young chunks to quickly accumulate more garbage. On the flip side, it will also ensure that even files with little garbage are eventually garbage collected. This removes garbage which would otherwise linger on, thinly spread across many chunk files.  Sorting records by age will group young records together in a single chunk and will do the same for older records. Therefore the chunks will either tend to keep their data live for a longer time, or quickly become full of garbage.  "
});

documentTitles["index.html#hot-restart-performance-considerations"] = "Hot Restart Performance Considerations";
index.add({
    url: "index.html#hot-restart-performance-considerations",
    title: "Hot Restart Performance Considerations",
    body: "### Hot Restart Performance Considerations  In this section you can find performance test summaries which are results of benchmark tests performed with a single Hazelcast member running on a physical server and on AWS R3.   "
});

documentTitles["index.html#performance-on-a-physical-server"] = "Performance on a Physical Server";
index.add({
    url: "index.html#performance-on-a-physical-server",
    title: "Performance on a Physical Server",
    body: "#### Performance on a Physical Server  The member has the following:  - An IMap data structure with High-Density Memory Store.  - Its data size is changed for each test, started from 10 GB to 500 GB (each map entry has a value of 1 KB).   The tests investigate the write and read performance of Hot Restart Persistence and are performed on HP ProLiant servers with RHEL 7 operating system using Hazelcast Simulator.   The following are the specifications of the server hardware used for the test:  * CPU: 2x Intel(R) Xeon(R) CPU E5-2687W v3 @ 3.10GHz – with 10 cores per processor. Total 20 cores, 40 with hyper threading enabled. * Memory: 768GB 2133 MHz memory 24x HP 32GB 4Rx4 PC4-2133P-L Kit  The following are the storage media used for the test:  * A hot-pluggable 2.5 inch HDD with 1 TB capacity and 10K RPM. * An SSD, Light Endurance PCle Workload Accelerator.  The below table shows the test results.  ![Performance on a Physical Server](images/HotRestartPerf.png)   "
});

documentTitles["index.html#performance-on-aws-r3"] = "Performance on AWS R3";
index.add({
    url: "index.html#performance-on-aws-r3",
    title: "Performance on AWS R3",
    body: "#### Performance on AWS R3  The member has the following:  - An IMap data structure with High-Density Memory Store.  - IMap has 40 million distinct keys, each map entry is 1 KB.  - High-Density Memory Store is 59 GiB whose 19% is metadata.  - Hot Restart is configured with `fsync` turned off.  - Data size reloaded on restart is 38 GB.  The tests investigate the write and read performance of Hot Restart Persistence and are performed on R3.2xlarge and R3.4xlarge EC2 instances using Hazelcast Simulator.  The following are the AWS storage types used for the test:  - Elastic Block Storage (EBS) General Purpose SSD (GP2). - Elastic Block Storage with Provisioned IOPS (IO1). Provisioned 10,000 IOPS on a 340 GiB volume, enabled EBS-optimized on instance. - SSD-backed instance store.  The below table shows the test results.  ![Performance on AWS](images/HotRestartPerf2.png)      "
});

documentTitles["index.html#hazelcast-java-client"] = "Hazelcast Java Client";
index.add({
    url: "index.html#hazelcast-java-client",
    title: "Hazelcast Java Client",
    body: "# Hazelcast Java Client  There are currently three ways to connect to a running Hazelcast cluster:  * Native Clients (Java, C++, .NET) * [Memcache Client](#memcache-client) * [REST Client](#rest-client)  Native Clients enable you to perform almost all Hazelcast operations without being a member of the cluster. It connects to one of the cluster members and delegates all cluster wide operations to it (_dummy client_), or it connects to all of them and delegates operations smartly (_smart client_). When the relied cluster member dies, the client will transparently switch to another live member.  Hundreds or even thousands of clients can be connected to the cluster. By default, there are *core count* * *10* threads on the server side that will handle all the requests (e.g. if the server has 4 cores, there will be 40 threads).  Imagine a trading application where all the trading data are stored and managed in a Hazelcast cluster with tens of nodes. Swing/Web applications at the traders' desktops can use Native Clients to access and modify the data in the Hazelcast cluster.  Currently, Hazelcast has Native Java, C++ and .NET Clients available. This chapter describes the Java Client.  &lt;br&gt;&lt;br&gt; ![image](images/NoteSmall.jpg) ***IMPORTANT:*** *Starting with the Hazelcast 3.5. release, a new Java Native Client Library is introduced in the release package: `hazelcast-client-new-&lt;version&gt;.jar`. This library contains clients which use the new Hazelcast Binary Client Protocol. This library does not exist for the releases before 3.5.*  &lt;br&gt;&lt;br&gt;  "
});

documentTitles["index.html#hazelcast-clients-feature-comparison"] = "Hazelcast Clients Feature Comparison";
index.add({
    url: "index.html#hazelcast-clients-feature-comparison",
    title: "Hazelcast Clients Feature Comparison",
    body: "## Hazelcast Clients Feature Comparison  Before detailing the Java Client, this section provides the below comparison matrix to show which features are supported by the Hazelcast clients.   Feature|Java Client|.NET Client|C++ Client -|-|- Map|Yes|Yes|Yes Queue|Yes|Yes|Yes Set|Yes|Yes|Yes List|Yes|Yes|Yes MultiMap|Yes|Yes|Yes Replicated Map|Yes|No|No Topic|Yes|Yes|Yes MapReduce|Yes|No|No Lock|Yes|Yes|Yes Semaphore|Yes|Yes|Yes AtomicLong|Yes|Yes|Yes AtomicReference|Yes|Yes|Yes IdGenerator|Yes|Yes|Yes CountDownLatch|Yes|Yes|Yes Transactional Map|Yes|Yes|Yes Transactional MultiMap|Yes|Yes|Yes Transactional Queue|Yes|Yes|Yes Transactional List|Yes|Yes|Yes Transactional Set|Yes|Yes|Yes JCache|Yes|No|No Ringbuffer|Yes|No|No Reliable Topic|Yes|No|No Hot Restart|Yes (with a near cache)|No|No Client Configuration Import|Yes|No|No Hazelcast Client Protocol|Yes|Yes|Yes Fail Fast on Invalid Conviguration|Yes|No|No Sub-Listener Interfaces for Map ListenerMap|Yes|No|No Continuous Query|Yes|No|No Listener with Predicate|Yes|Yes|No Distributed Executor Service|Yes|No|No Query|Yes|Yes|Yes Near Cache|Yes|Yes|No Heartbeat|Yes|Yes|Yes Declarative Configuration|Yes|Yes|No Programmatic Configuration|Yes|Yes|Yes SSL Support|Yes|No|No XA Transactions|Yes|No|No Smart Client|Yes|Yes|Yes Dummy Client|Yes|Yes|Yes Lifecycle Service|Yes|Yes|Yes Event Listeners|Yes|Yes|Yes DataSerializable|Yes|Yes|Yes IdentifiedDataSerializable|Yes|Yes|Yes Portable|Yes|Yes|Yes    &lt;br&gt;&lt;br&gt;   "
});

documentTitles["index.html#java-client-overview"] = "Java Client Overview";
index.add({
    url: "index.html#java-client-overview",
    title: "Java Client Overview",
    body: "## Java Client Overview  The Java client is the most full featured Hazelcast native client. It is offered both with Hazelcast and Hazelcast Enterprise.  The main idea behind the Java client is to provide the same Hazelcast functionality by proxying each operation through a Hazelcast node. It can access and change distributed data, and it can listen to distributed events of an already established Hazelcast cluster from another Java application.   "
});

documentTitles["index.html#including-dependencies-for-java-clients"] = "Including Dependencies for Java Clients";
index.add({
    url: "index.html#including-dependencies-for-java-clients",
    title: "Including Dependencies for Java Clients",
    body: "### Including Dependencies for Java Clients  You should include two dependencies in your classpath to start using the Hazelcast client: `hazelcast.jar` and `hazelcast-client.jar`.  After adding these dependencies, you can start using the Hazelcast client as if you are using the Hazelcast API. The differences are discussed in the below sections.  If you prefer to use maven, add the following lines to your `pom.xml`.  ```xml &lt;dependency&gt;     &lt;groupId&gt;com.hazelcast&lt;/groupId&gt;     &lt;artifactId&gt;hazelcast-client&lt;/artifactId&gt;     &lt;version&gt;$LATEST_VERSION$&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt;     &lt;groupId&gt;com.hazelcast&lt;/groupId&gt;     &lt;artifactId&gt;hazelcast&lt;/artifactId&gt;     &lt;version&gt;$LATEST_VERSION$&lt;/version&gt; &lt;/dependency&gt; ```  "
});

documentTitles["index.html#getting-started-with-client-api"] = "Getting Started with Client API";
index.add({
    url: "index.html#getting-started-with-client-api",
    title: "Getting Started with Client API",
    body: "### Getting Started with Client API  The first step is configuration. You can configure the Java client declaratively or programmatically. We will use the programmatic approach throughout this tutorial. Please refer to the [Java Client Declarative Configuration section](#configuring-java-client) for details.  ```java ClientConfig clientConfig = new ClientConfig(); clientConfig.getGroupConfig().setName(\&quot;dev\&quot;).setPassword(\&quot;dev-pass\&quot;); clientConfig.getNetworkConfig().addAddress(\&quot;10.90.0.1\&quot;, \&quot;10.90.0.2:5702\&quot;); ```  The second step is to initialize the HazelcastInstance to be connected to the cluster.  ```java HazelcastInstance client = HazelcastClient.newHazelcastClient(clientConfig); ```  *This client interface is your gateway to access all Hazelcast distributed objects.*  Let's create a map and populate it with some data.  ```java  IMap&lt;String, Customer&gt; mapCustomers = client.getMap(\&quot;customers\&quot;); //creates the map proxy  mapCustomers.put(\&quot;1\&quot;, new Customer(\&quot;Joe\&quot;, \&quot;Smith\&quot;)); mapCustomers.put(\&quot;2\&quot;, new Customer(\&quot;Ali\&quot;, \&quot;Selam\&quot;)); mapCustomers.put(\&quot;3\&quot;, new Customer(\&quot;Avi\&quot;, \&quot;Noyan\&quot;));  ```  As a final step, if you are done with your client, you can shut it down as shown below. This will release all the used resources and will close connections to the cluster.  ```java  client.shutdown();  ```  "
});

documentTitles["index.html#java-client-operation-modes"] = "Java Client Operation Modes";
index.add({
    url: "index.html#java-client-operation-modes",
    title: "Java Client Operation Modes",
    body: "### Java Client Operation Modes  The client has two operation modes because of the distributed nature of the data and cluster.  **Smart Client**: In smart mode, clients connect to each cluster node. Since each data partition uses the well known and consistent hashing algorithm, each client can send an operation to the relevant cluster node, which increases the overall throughput and efficiency. Smart mode is the default mode.   **Dummy Client**: For some cases, the clients can be required to connect to a single node instead of to each node in the cluster. Firewalls, security, or some custom networking issues can be the reason for these cases.  In dummy client mode, the client will only connect to one of the configured addresses. This single node will behave as a gateway to the other nodes. For any operation requested from the client, it will redirect the request to the relevant node and return the response back to the client returned from this node.  "
});

documentTitles["index.html#handling-failures"] = "Handling Failures";
index.add({
    url: "index.html#handling-failures",
    title: "Handling Failures",
    body: "### Handling Failures  There are two main failure cases you should be aware of, and configurations you can perform to achieve proper behavior.  "
});

documentTitles["index.html#handling-client-connection-failure"] = "Handling Client Connection Failure";
index.add({
    url: "index.html#handling-client-connection-failure",
    title: "Handling Client Connection Failure",
    body: "#### Handling Client Connection Failure   While the client is trying to connect initially to one of the members in the `ClientNetworkConfig.addressList`, all the members might be not available. Instead of giving up, throwing an exception and stopping the client, the client will retry as many as `connectionAttemptLimit` times.   You can configure `connectionAttemptLimit` for the number of times you want the client to retry connecting. Please see [Setting Connection Attempt Limit](#setting-connection-attempt-limit).  The client executes each operation through the already established connection to the cluster. If this connection(s) disconnects or drops, the client will try to reconnect as configured.   "
});

documentTitles["index.html#handling-retry-able-operation-failure"] = "Handling Retry-able Operation Failure";
index.add({
    url: "index.html#handling-retry-able-operation-failure",
    title: "Handling Retry-able Operation Failure",
    body: "#### Handling Retry-able Operation Failure  While sending the requests to related nodes, operations can fail due to various reasons. Read-only operations are retried by default. If you want to enable retry for the other operations, set the `redoOperation` to `true`. Please see [Enabling Redo Operation](#enabling-redo-operation).  You can set a timeout for retrying the operations sent to a member. This can be provided by using the property `hazelcast.client.invocation.timeout.seconds` in `ClientProperties`. Client will retry an operation within this given period, of course if it is a read-only operation or you enabled the `redoOperation` as stated in the above paragraph. This timeout value is important when there is a failure resulted by either of the following causes:   - Member throws an exception. - Connection between the client and member is closed. - Client's heartbeat requests are timed out.  Please see the [Client System Properties section](#client-system-properties).   "
});

documentTitles["index.html#using-supported-distributed-data-structures"] = "Using Supported Distributed Data Structures";
index.add({
    url: "index.html#using-supported-distributed-data-structures",
    title: "Using Supported Distributed Data Structures",
    body: "### Using Supported Distributed Data Structures  Most of the Distributed Data Structures are supported by the Java client. When you use clients in other languages, you should check for the exceptions.  As a general rule, you configure these data structures on the server side and access them through a proxy on the client side.  "
});

documentTitles["index.html#using-map-with-java-client"] = "Using Map with Java Client";
index.add({
    url: "index.html#using-map-with-java-client",
    title: "Using Map with Java Client",
    body: "#### Using Map with Java Client  You can use any [Distributed Map](#map) object with the client, as shown below.  ```java Imap&lt;Integer, String&gt; map = client.getMap(“myMap”);  map.put(1, “Ali”); String value= map.get(1); map.remove(1); ```  Locality is ambiguous for the client, so `addLocalEntryListener` and `localKeySet` are not supported. Please see the [Distributed Map section](#map) for more information.  "
});

documentTitles["index.html#using-multimap-with-java-client"] = "Using MultiMap with Java Client";
index.add({
    url: "index.html#using-multimap-with-java-client",
    title: "Using MultiMap with Java Client",
    body: "#### Using MultiMap with Java Client  A MultiMap usage example is shown below.   ```java MultiMap&lt;Integer, String&gt; multiMap = client.getMultiMap(\&quot;myMultiMap\&quot;);  multiMap.put(1,”ali”); multiMap.put(1,”veli”);  Collection&lt;String&gt; values = multiMap.get(1); ```  `addLocalEntryListener`, `localKeySet` and  `getLocalMultiMapStats` are not supported because locality is ambiguous for the client. Please see the [Distributed MultiMap section](#multimap) for more information.  "
});

documentTitles["index.html#using-queue-with-java-client"] = "Using Queue with Java Client";
index.add({
    url: "index.html#using-queue-with-java-client",
    title: "Using Queue with Java Client",
    body: "#### Using Queue with Java Client  A sample usage is shown below.   ```java IQueue&lt;String&gt; myQueue = client.getQueue(“theQueue”); myQueue.offer(“ali”) ```  `getLocalQueueStats` is not supported because locality is ambiguous for the client. Please see the [Distributed Queue section](#queue) for more information.  "
});

documentTitles["index.html#using-topic-with-java-client"] = "Using Topic with Java Client";
index.add({
    url: "index.html#using-topic-with-java-client",
    title: "Using Topic with Java Client",
    body: "#### Using Topic with Java Client  `getLocalTopicStats` is not supported because locality is ambiguous for the client.  "
});

documentTitles["index.html#using-other-supported-distributed-structures"] = "Using Other Supported Distributed Structures";
index.add({
    url: "index.html#using-other-supported-distributed-structures",
    title: "Using Other Supported Distributed Structures",
    body: "#### Using Other Supported Distributed Structures  The distributed data structures listed below are also supported by the client. Since their logic is the same in both the node side and client side, you can refer to their sections as listed below.  - [Replicated Map](#replicated-map) - [MapReduce](#mapreduce) - [List](#list) - [Set](#set) - [IAtomicLong](#iatomiclong) - [IAtomicReference](#iatomicreference) - [ICountDownLatch](#icountdownlatch) - [ISemaphore](#isemaphore) - [IdGenerator](#idgenerator) - [Lock](#lock)    "
});

documentTitles["index.html#using-client-services"] = "Using Client Services";
index.add({
    url: "index.html#using-client-services",
    title: "Using Client Services",
    body: "### Using Client Services  Hazelcast provides the services discussed below for some common functionalities on the client side.  "
});

documentTitles["index.html#using-distributed-executor-service"] = "Using Distributed Executor Service";
index.add({
    url: "index.html#using-distributed-executor-service",
    title: "Using Distributed Executor Service",
    body: "#### Using Distributed Executor Service  The distributed executor service is for distributed computing. It can be used to execute tasks on the cluster on a designated partition or on all the partitions. It can also be used to process entries. Please see the [Distributed Executor Service section](#executor-service) for more information.  ```java IExecutorService executorService = client.getExecutorService(\&quot;default\&quot;); ```   After getting an instance of `IExecutorService`, you can use the instance as the interface with the one provided on the server side. Please see the [Distributed Computing chapter](#distributed-computing) for detailed usage.  ![image](images/NoteSmall.jpg) ***NOTE:*** *This service is only supported by the Java client.*   "
});

documentTitles["index.html#listening-to-client-connection"] = "Listening to Client Connection";
index.add({
    url: "index.html#listening-to-client-connection",
    title: "Listening to Client Connection",
    body: "#### Listening to Client Connection  If you need to track clients and you want to listen to their connection events, you can use the `clientConnected` and `clientDisconnected` methods of the `ClientService` class. This class must be run on the **node** side. The following is an example code.  ```java final ClientService clientService = hazelcastInstance.getClientService(); final Collection&lt;Client&gt; connectedClients = clientService.getConnectedClients();  clientService.addClientListener(new ClientListener() {     @Override     public void clientConnected(Client client) { 	//Handle client connected event     }      @Override     public void clientDisconnected(Client client) {       //Handle client disconnected event     } }); ```  "
});

documentTitles["index.html#finding-the-partition-of-a-key"] = "Finding the Partition of a Key";
index.add({
    url: "index.html#finding-the-partition-of-a-key",
    title: "Finding the Partition of a Key",
    body: "#### Finding the Partition of a Key  You use partition service to find the partition of a key. It will return all partitions. See the example code below.  ```java PartitionService partitionService = client.getPartitionService();  //partition of a key Partition partition = partitionService.getPartition(key);  //all partitions Set&lt;Partition&gt; partitions = partitionService.getPartitions(); ```   "
});

documentTitles["index.html#handling-lifecycle"] = "Handling Lifecycle";
index.add({
    url: "index.html#handling-lifecycle",
    title: "Handling Lifecycle",
    body: "#### Handling Lifecycle  Lifecycle handling performs the following:  - checks to see if the client is running, - shuts down the client gracefully, - terminates the client ungracefully (forced shutdown), and - adds/removes lifecycle listeners.   ```java LifecycleService lifecycleService = client.getLifecycleService();  if(lifecycleService.isRunning()){     //it is running }  //shutdown client gracefully lifecycleService.shutdown();  ```  "
});

documentTitles["index.html#client-listeners"] = "Client Listeners";
index.add({
    url: "index.html#client-listeners",
    title: "Client Listeners",
    body: "### Client Listeners  You can configure listeners to listen to various event types on the client side. You can configure global events not relating to any distributed object through [Client ListenerConfig](#configuring-client-listeners). You should configure distributed object listeners like map entry listeners or list item listeners through their proxies. You can refer to the related sections under each distributed data structure in this reference manual.  "
});

documentTitles["index.html#client-transactions"] = "Client Transactions";
index.add({
    url: "index.html#client-transactions",
    title: "Client Transactions",
    body: "### Client Transactions  Transactional distributed objects are supported on the client side. Please see the [Transactions chapter](#transactions) on how to use them.      "
});

documentTitles["index.html#configuring-java-client"] = "Configuring Java Client";
index.add({
    url: "index.html#configuring-java-client",
    title: "Configuring Java Client",
    body: "## Configuring Java Client  You can configure Hazelcast Java Client declaratively (XML) or programmatically (API).  For declarative configuration, the Hazelcast client looks at the following places for the client configuration file.  - **System property**: The client first checks if `hazelcast.client.config` system property is set to a file path, e.g. `-Dhazelcast.client.config=C:/myhazelcast.xml`.  - **Classpath**: If config file is not set as a system property, the client checks the classpath for `hazelcast-client.xml` file.  If the client does not find any configuration file, it starts with the default configuration (`hazelcast-client-default.xml`) located in the `hazelcast-client.jar` library. Before configuring the client, please try to work with the default configuration to see if it works for you. The default should be just fine for most users. If not, then consider custom configuration for your environment.  If you want to specify your own configuration file to create a `Config` object, the Hazelcast client supports the following.  - `Config cfg = new XmlClientConfigBuilder(xmlFileName).build();`  - `Config cfg = new XmlClientConfigBuilder(inputStream).build();`   For programmatic configuration of the Hazelcast Java Client, just instantiate a `ClientConfig` object and configure the desired aspects. An example is shown below.  ```java ClientConfig clientConfig = new ClientConfig(); clientConfig.setGroupConfig(new GroupConfig(\&quot;dev\&quot;,\&quot;dev-pass”); clientConfig.setLoadBalancer(yourLoadBalancer); ... ... ```   "
});

documentTitles["index.html#configuring-client-network"] = "Configuring Client Network";
index.add({
    url: "index.html#configuring-client-network",
    title: "Configuring Client Network",
    body: "### Configuring Client Network  All network related configuration of Hazelcast Java Client is performed via the `network` element in the declarative configuration file, or in the class `ClientNetworkConfig` when using programmatic configuration. Let's first give the examples for these two approaches. Then we will look at its sub-elements and attributes.  "
});

documentTitles["index.html#declarative-client-network-configuration"] = "Declarative Client Network Configuration";
index.add({
    url: "index.html#declarative-client-network-configuration",
    title: "Declarative Client Network Configuration",
    body: "#### Declarative Client Network Configuration  Here is an example of configuring network for Java Client declaratively.  ```xml ... &lt;network&gt;   &lt;cluster-members&gt;     &lt;address&gt;127.0.0.1&lt;/address&gt;     &lt;address&gt;127.0.0.2&lt;/address&gt;   &lt;/cluster-members&gt;   &lt;smart-routing&gt;true&lt;/smart-routing&gt;   &lt;redo-operation&gt;true&lt;/redo-operation&gt;   &lt;socket-interceptor enabled=\&quot;true\&quot;&gt;     &lt;class-name&gt;com.hazelcast.XYZ&lt;/class-name&gt;     &lt;properties&gt;       &lt;property name=\&quot;kerberos-host\&quot;&gt;kerb-host-name&lt;/property&gt;       &lt;property name=\&quot;kerberos-config-file\&quot;&gt;kerb.conf&lt;/property&gt;     &lt;/properties&gt;    &lt;/socket-interceptor&gt;   &lt;aws enabled=\&quot;true\&quot; connection-timeout-seconds=\&quot;11\&quot;&gt;     &lt;inside-aws&gt;false&lt;/inside-aws&gt;     &lt;access-key&gt;my-access-key&lt;/access-key&gt;     &lt;secret-key&gt;my-secret-key&lt;/secret-key&gt;     &lt;iam-role&gt;s3access&lt;/iam-role&gt;     &lt;region&gt;us-west-1&lt;/region&gt;     &lt;host-header&gt;ec2.amazonaws.com&lt;/host-header&gt;     &lt;security-group-name&gt;hazelcast-sg&lt;/security-group-name&gt;     &lt;tag-key&gt;type&lt;/tag-key&gt;     &lt;tag-value&gt;hz-nodes&lt;/tag-value&gt;   &lt;/aws&gt; &lt;/network&gt; ```  "
});

documentTitles["index.html#programmatic-client-network-configuration"] = "Programmatic Client Network Configuration";
index.add({
    url: "index.html#programmatic-client-network-configuration",
    title: "Programmatic Client Network Configuration",
    body: "#### Programmatic Client Network Configuration  Here is an example of configuring network for Java Client programmatically.  ```java ClientConfig clientConfig = new ClientConfig(); ClientNetworkConfig networkConfig = clientConfig.getNetworkConfig(); ```  "
});

documentTitles["index.html#configuring-address-list"] = "Configuring Address List";
index.add({
    url: "index.html#configuring-address-list",
    title: "Configuring Address List",
    body: "#### Configuring Address List  Address List is the initial list of cluster addresses to which the client will connect. The client uses this list to find an alive node. Although it may be enough to give only one address of a node in the cluster (since all nodes communicate with each other), it is recommended that you give the addresses for all the nodes.  **Declarative**:  ```xml &lt;hazelcast-client&gt;   ...   &lt;network&gt;     &lt;cluster-members&gt;       &lt;address&gt;10.1.1.21&lt;/address&gt;       &lt;address&gt;10.1.1.22:5703&lt;/address&gt;     &lt;/cluster-members&gt;   ...   &lt;/network&gt; ... &lt;/hazelcast-client&gt; ```  **Programmatic**:  ```java ClientConfig clientConfig = new ClientConfig(); ClientNetworkConfig networkConfig = clientConfig.getNetworkConfig(); networkConfig().addAddress(\&quot;10.1.1.21\&quot;, \&quot;10.1.1.22:5703\&quot;); ```  If the port part is omitted, then 5701, 5702, and 5703 will be tried in random order.  You can provide multiple addresses with ports provided or not, as seen above. The provided list is shuffled and tried in random order. Default value is *localhost*.  "
});

documentTitles["index.html#setting-smart-routing"] = "Setting Smart Routing";
index.add({
    url: "index.html#setting-smart-routing",
    title: "Setting Smart Routing",
    body: "#### Setting Smart Routing  Smart routing defines whether the client mode is smart or dummy. The following are example configurations.  **Declarative**:  ```xml ... &lt;network&gt; ...   &lt;smart-routing&gt;true&lt;/smart-routing&gt; ... &lt;/network&gt; ... ```  **Programmatic**:  ```java ClientConfig clientConfig = new ClientConfig(); ClientNetworkConfig networkConfig = clientConfig.getNetworkConfig(); networkConfig().setSmartRouting(true); ``` The default is *smart client* mode.  "
});

documentTitles["index.html#enabling-redo-operation"] = "Enabling Redo Operation";
index.add({
    url: "index.html#enabling-redo-operation",
    title: "Enabling Redo Operation",
    body: "#### Enabling Redo Operation  It enables/disables redo-able operations as described in [Handling Retry-able Operation Failure](#handling-retry-able-operation-failure). The following are the example configurations.  **Declarative**:  ```xml ... &lt;network&gt; ...     &lt;redo-operation&gt;true&lt;/redo-operation&gt; ... &lt;/network&gt; ```  **Programmatic**:  ```java ClientConfig clientConfig = new ClientConfig(); ClientNetworkConfig networkConfig = clientConfig.getNetworkConfig(); networkConfig().setRedoOperation(true); ```  Default is *disabled*.  "
});

documentTitles["index.html#setting-connection-timeout"] = "Setting Connection Timeout";
index.add({
    url: "index.html#setting-connection-timeout",
    title: "Setting Connection Timeout",
    body: "#### Setting Connection Timeout  Connection timeout is the timeout value in milliseconds for nodes to accept client connection requests. The following are the example configurations.  **Declarative**:  ```xml ... &lt;network&gt; ...   &lt;connection-timeout&gt;5000&lt;/connection-timeout&gt; ... &lt;/network&gt; ```  **Programmatic**:  ```java ClientConfig clientConfig = new ClientConfig(); clientConfig.getNetworkConfig().setConnectionTimeout(5000); ```  The default value is *5000* milliseconds.  "
});

documentTitles["index.html#setting-connection-attempt-limit"] = "Setting Connection Attempt Limit";
index.add({
    url: "index.html#setting-connection-attempt-limit",
    title: "Setting Connection Attempt Limit",
    body: "#### Setting Connection Attempt Limit  While the client is trying to connect initially to one of the members in the `ClientNetworkConfig.addressList`, all members might be not available. Instead of giving up, throwing an exception and stopping the client, the client will retry as many as `ClientNetworkConfig.connectionAttemptLimit` times. This is also the case when an existing client-member connection goes down. The following are example configurations.  **Declarative**:  ```xml ... &lt;network&gt; ...   &lt;connection-attempt-limit&gt;5&lt;/connection-attempt-limit&gt; ... &lt;/network&gt; ```  **Programmatic**:  ```java ClientConfig clientConfig = new ClientConfig(); clientConfig.getNetworkConfig().setConnectionAttemptLimit(5); ```  Default value is *2*.  "
});

documentTitles["index.html#setting-connection-attempt-period"] = "Setting Connection Attempt Period";
index.add({
    url: "index.html#setting-connection-attempt-period",
    title: "Setting Connection Attempt Period",
    body: "#### Setting Connection Attempt Period  Connection timeout period is the duration in milliseconds between the connection attempts defined by `ClientNetworkConfig.connectionAttemptLimit`. The following are example configurations.  **Declarative**:  ```xml ... &lt;network&gt; ...   &lt;connection-attempt-period&gt;5000&lt;/connection-attempt-period&gt; ... &lt;/network&gt; ```  **Programmatic**:  ```java ClientConfig clientConfig = new ClientConfig(); clientConfig.getNetworkConfig().setConnectionAttemptPeriod(5000); ```  Default value is *3000*.  "
});

documentTitles["index.html#setting-a-socket-interceptor"] = "Setting a Socket Interceptor";
index.add({
    url: "index.html#setting-a-socket-interceptor",
    title: "Setting a Socket Interceptor",
    body: "#### Setting a Socket Interceptor  &lt;font color=\&quot;#3981DB\&quot;&gt;**Hazelcast Enterprise**&lt;/font&gt; &lt;br&gt;&lt;/br&gt;   Following is a client configuration to set a socket intercepter. Any class implementing `com.hazelcast.nio.SocketInterceptor` is a socket interceptor.   ```java public interface SocketInterceptor {     void init(Properties properties);     void onConnect(Socket connectedSocket) throws IOException; } ```  `SocketInterceptor` has two steps. First, it will be initialized by the configured properties. Second, it will be informed just after the socket is connected using `onConnect`.   ```java SocketInterceptorConfig socketInterceptorConfig = clientConfig                .getNetworkConfig().getSocketInterceptorConfig();  MyClientSocketInterceptor myClientSocketInterceptor = new MyClientSocketInterceptor();  socketInterceptorConfig.setEnabled(true); socketInterceptorConfig.setImplementation(myClientSocketInterceptor); ```  If you want to configure the socket connector with a class name instead of an instance, see the example below.  ```java SocketInterceptorConfig socketInterceptorConfig = clientConfig             .getNetworkConfig().getSocketInterceptorConfig();  MyClientSocketInterceptor myClientSocketInterceptor = new MyClientSocketInterceptor();  socketInterceptorConfig.setEnabled(true);  //These properties are provided to interceptor during init socketInterceptorConfig.setProperty(\&quot;kerberos-host\&quot;,\&quot;kerb-host-name\&quot;); socketInterceptorConfig.setProperty(\&quot;kerberos-config-file\&quot;,\&quot;kerb.conf\&quot;);  socketInterceptorConfig.setClassName(myClientSocketInterceptor); ```  &lt;br&gt;&lt;/br&gt; ***RELATED INFORMATION***  *Please see the [Socket Interceptor section](#socket-interceptor) for more information.* &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#configuring-network-socket-options"] = "Configuring Network Socket Options";
index.add({
    url: "index.html#configuring-network-socket-options",
    title: "Configuring Network Socket Options",
    body: "#### Configuring Network Socket Options  You can configure the network socket options using `SocketOptions`. It has the following methods.  - `socketOptions.setKeepAlive(x)`: Enables/disables the *SO_KEEPALIVE* socket option. The default value is `true`.  - `socketOptions.setTcpNoDelay(x)`: Enables/disables the *TCP_NODELAY* socket option. The default value is `true`.  - `socketOptions.setReuseAddress(x)`: Enables/disables the *SO_REUSEADDR* socket option. The default value is `true`.  - `socketOptions.setLingerSeconds(x)`: Enables/disables *SO_LINGER* with the specified linger time in seconds. The default value is `3`.  - `socketOptions.setBufferSize(x)`: Sets the *SO_SNDBUF* and *SO_RCVBUF* options to the specified value in KB for this Socket. The default value is `32`.   ```java SocketOptions socketOptions = clientConfig.getNetworkConfig().getSocketOptions(); socketOptions.setBufferSize(32); socketOptions.setKeepAlive(true); socketOptions.setTcpNoDelay(true); socketOptions.setReuseAddress(true); socketOptions.setLingerSeconds(3); ```  "
});

documentTitles["index.html#enabling-client-ssl"] = "Enabling Client SSL";
index.add({
    url: "index.html#enabling-client-ssl",
    title: "Enabling Client SSL",
    body: "#### Enabling Client SSL  &lt;font color=\&quot;#3981DB\&quot;&gt;**Hazelcast Enterprise**&lt;/font&gt; &lt;br&gt;&lt;/br&gt;    You can use SSL to secure the connection between the client and the nodes. If you want SSL enabled for the client-cluster connection, you should set `SSLConfig`. Once set, the connection (socket) is established out of an SSL factory defined either by a factory class name or factory implementation. Please see the `SSLConfig` class in the `com.hazelcast.config` package at the JavaDocs page of the &lt;a href=\&quot;http://www.hazelcast.org/documentation\&quot; target=\&quot;_blank\&quot;&gt;Hazelcast Documentation&lt;/a&gt; web site.  "
});

documentTitles["index.html#configuring-client-for-aws"] = "Configuring Client for AWS";
index.add({
    url: "index.html#configuring-client-for-aws",
    title: "Configuring Client for AWS",
    body: "#### Configuring Client for AWS  The example declarative and programmatic configurations below show how to configure a Java client for connecting to a Hazelcast cluster in AWS.  **Declarative**:  ```xml ... &lt;network&gt;   &lt;aws enabled=\&quot;true\&quot;&gt;     &lt;inside-aws&gt;false&lt;/inside-aws&gt;     &lt;access-key&gt;my-access-key&lt;/access-key&gt;     &lt;secret-key&gt;my-secret-key&lt;/secret-key&gt;     &lt;iam-role&gt;s3access&lt;/iam-role&gt;     &lt;region&gt;us-west-1&lt;/region&gt;     &lt;host-header&gt;ec2.amazonaws.com&lt;/host-header&gt;     &lt;security-group-name&gt;hazelcast-sg&lt;/security-group-name&gt;     &lt;tag-key&gt;type&lt;/tag-key&gt;     &lt;tag-value&gt;hz-nodes&lt;/tag-value&gt;   &lt;/aws&gt; ... &lt;/network&gt; ```  **Programmatic**:  ```java ClientConfig clientConfig = new ClientConfig(); ClientAwsConfig clientAwsConfig = new ClientAwsConfig(); clientAwsConfig.setInsideAws( false )                .setAccessKey( \&quot;my-access-key\&quot; )                .setSecretKey( \&quot;my-secret-key\&quot; )                .setRegion( \&quot;us-west-1\&quot; )                .setHostHeader( \&quot;ec2.amazonaws.com\&quot; )                .setSecurityGroupName( \&quot;&gt;hazelcast-sg\&quot; )                .setTagKey( \&quot;type\&quot; )                .setTagValue( \&quot;hz-nodes\&quot; );                .setIamRole( \&quot;s3access\&quot; ); clientConfig.getNetworkConfig().setAwsConfig( clientAwsConfig ); HazelcastInstance client = HazelcastClient.newHazelcastClient( clientConfig ); ```  You can refer to the [aws element section](#aws-element) for the descriptions of above AWS configuration elements except `inside-aws` and `iam-role`, which are explained below.  If the `inside-aws` element is not set, the private addresses of cluster members will always be converted to public addresses. Also, the client will use public addresses to connect to the members. In order to use private addresses, set the `inside-aws` parameter to `true`. Also note that, when connecting outside from AWS, setting the `inside-aws` parameter to `true` will cause the client to not be able to reach the members.  IAM roles are used to make secure requests from your clients. You can provide the name of your IAM role that you created previously on your AWS console using the `iam-role` or `setIamRole()` method.  "
});

documentTitles["index.html#configuring-client-load-balancer"] = "Configuring Client Load Balancer";
index.add({
    url: "index.html#configuring-client-load-balancer",
    title: "Configuring Client Load Balancer",
    body: "### Configuring Client Load Balancer  `LoadBalancer` allows you to send operations to one of a number of endpoints (Members). Its main purpose is to determine the next `Member` if queried.  It is up to your implementation to use different load balancing policies. You should implement the interface `com.hazelcast.client.LoadBalancer` for that purpose.  If the client is configured in smart mode, only the operations that are not key-based will be routed to the endpoint that is returned by the `LoadBalancer`. If the client is not a smart client, `LoadBalancer` will be ignored.  The following are example configurations.  **Declarative**:  ```xml &lt;hazelcast-client&gt;   ...   &lt;load-balancer type=“random”&gt;     yourLoadBalancer   &lt;/load-balancer&gt;   ... &lt;/hazelcast-client&gt; ```  **Programmatic**:  ```java ClientConfig clientConfig = new ClientConfig(); clientConfig.setLoadBalancer(yourLoadBalancer); ```  "
});

documentTitles["index.html#configuring-client-near-cache"] = "Configuring Client Near Cache";
index.add({
    url: "index.html#configuring-client-near-cache",
    title: "Configuring Client Near Cache",
    body: "### Configuring Client Near Cache  Hazelcast distributed map has a Near Cache feature to reduce network latencies. Since the client always requests data from the cluster nodes, it can be helpful for some of your use cases to configure a near cache on the client side. The client supports the same Near Cache that is used in Hazelcast distributed map.  You can create Near Cache on the client side by providing a configuration per map name, as shown below.  ```java ClientConfig clientConfig = new ClientConfig(); CacheConfig nearCacheConfig = new NearCacheConfig(); nearCacheConfig.setName(\&quot;mapName\&quot;); clientConfig.addNearCacheConfig(nearCacheConfig); ```  You can use wildcards for the map name, as shown below.  ```java nearCacheConfig.setName(\&quot;map*\&quot;); nearCacheConfig.setName(\&quot;*map\&quot;); ```  The following is an example declarative configuration for Near Cache.   ```xml &lt;/hazelcast-client&gt; 	... 	... 	&lt;near-cache name=\&quot;MENU\&quot;&gt; 		&lt;max-size&gt;2000&lt;/max-size&gt; 		&lt;time-to-live-seconds&gt;0&lt;/time-to-live-seconds&gt; 		&lt;max-idle-seconds&gt;0&lt;/max-idle-seconds&gt; 		&lt;eviction-policy&gt;LFU&lt;/eviction-policy&gt; 		&lt;invalidate-on-change&gt;true&lt;/invalidate-on-change&gt; 		&lt;in-memory-format&gt;OBJECT&lt;/in-memory-format&gt; 	&lt;/near-cache&gt; 	... &lt;/hazelcast-client&gt; ```  Name of Near Cache on the client side must be the same as the name of IMap on the server for which this Near Cache is being created.  Near Cache can have its own `in-memory-format` which is independent of the `in-memory-format` of the servers.   "
});

documentTitles["index.html#client-group-configuration"] = "Client Group Configuration";
index.add({
    url: "index.html#client-group-configuration",
    title: "Client Group Configuration",
    body: "### Client Group Configuration Clients should provide a group name and password in order to connect to the cluster. You can configure them using `GroupConfig`, as shown below.  ```java clientConfig.setGroupConfig(new GroupConfig(\&quot;dev\&quot;,\&quot;dev-pass\&quot;)); ```  "
});

documentTitles["index.html#client-security-configuration"] = "Client Security Configuration";
index.add({
    url: "index.html#client-security-configuration",
    title: "Client Security Configuration",
    body: "### Client Security Configuration  In the cases where the security established with `GroupConfig` is not enough and you want your clients connecting securely to the cluster, you can use `ClientSecurityConfig`. This configuration has a `credentials` parameter to set the IP address and UID. Please see `ClientSecurityConfig.java` in our code.   "
});

documentTitles["index.html#client-serialization-configuration"] = "Client Serialization Configuration";
index.add({
    url: "index.html#client-serialization-configuration",
    title: "Client Serialization Configuration",
    body: "### Client Serialization Configuration  For the client side serialization, use Hazelcast configuration. Please refer to the [Serialization chapter](#serialization).   "
});

documentTitles["index.html#configuring-client-listeners"] = "Configuring Client Listeners";
index.add({
    url: "index.html#configuring-client-listeners",
    title: "Configuring Client Listeners",
    body: "### Configuring Client Listeners You can configure global event listeners using `ListenerConfig` as shown below.   ```java ClientConfig clientConfig = new ClientConfig(); ListenerConfig listenerConfig = new ListenerConfig(LifecycleListenerImpl); clientConfig.addListenerConfig(listenerConfig); ```  ```java ClientConfig clientConfig = new ClientConfig(); ListenerConfig listenerConfig = new ListenerConfig(\&quot;com.hazelcast.example.MembershipListenerImpl\&quot;); clientConfig.addListenerConfig(listenerConfig); ```  You can add three types of event listeners.  - LifecycleListener - MembershipListener - DistributedObjectListener   ***RELATED INFORMATION***  *Please refer to &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/blob/master/hazelcast/src/main/java/com/hazelcast/core/LifecycleListener.java\&quot; target=\&quot;_blank\&quot;&gt;LifecycleListener&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/blob/master/hazelcast/src/main/java/com/hazelcast/core/MembershipListener.java\&quot; target=\&quot;_blank\&quot;&gt;MembershipListener&lt;/a&gt; and &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/blob/master/hazelcast/src/main/java/com/hazelcast/core/DistributedObjectListener.java\&quot; target=\&quot;_blank\&quot;&gt;DistributedObjectListener&lt;/a&gt;.* &lt;br&gt;&lt;/br&gt;   "
});

documentTitles["index.html#executorpoolsize"] = "ExecutorPoolSize";
index.add({
    url: "index.html#executorpoolsize",
    title: "ExecutorPoolSize",
    body: "### ExecutorPoolSize  Hazelcast has an internal executor service (different from the data structure *Executor Service*) that has threads and queues to perform internal operations such as handling responses. This parameter specifies the size of the pool of threads which perform these operations laying in the executor's queue. If not configured, this parameter has the value as **5 \* *core size of the client*** (i.e. it is 20 for a machine that has 4 cores).  "
});

documentTitles["index.html#classloader"] = "ClassLoader";
index.add({
    url: "index.html#classloader",
    title: "ClassLoader",
    body: "### ClassLoader You can configure a custom `classLoader`. It will be used by the serialization service and to load any class configured in configuration, such as event listeners or ProxyFactories.      "
});

documentTitles["index.html#client-system-properties"] = "Client System Properties";
index.add({
    url: "index.html#client-system-properties",
    title: "Client System Properties",
    body: "## Client System Properties  There are some advanced client configuration properties to tune some aspects of Hazelcast Client. You can set them as property name and value pairs through declarative configuration, programmatic configuration, or JVM system property. Please see the [System Properties section](#system-properties) to learn how to set these properties.  The table below lists the client configuration properties with their descriptions.  Property Name | Default Value | Type | Description :--------------|:---------------|:------|:------------ `hazelcast.client.event.queue.capacity`|1000000|string|The default value of the capacity of executor that handles incoming event packets. `hazelcast.client.event.thread.count`|5|string|The thread count for handling incoming event packets. `hazelcast.client.heartbeat.interval`|10000|string|The frequency of heartbeat messages sent by the clients to the members. `hazelcast.client.heartbeat.timeout`|300000|string|Timeout for the heartbeat messages sent by the client to members. If no messages pass between client and member within the given time via this property in milliseconds, the connection will be closed. `hazelcast.client.invocation.timeout.seconds`|120|string|Time to give up the invocation when a member in the member list is not reachable. `hazelcast.client.shuffle.member.list`|true|string|The client shuffles the given member list to prevent all clients to connect to the same node when this property is `false`. When it is set to `true`, the client tries to connect to the nodes in the given order.   "
});

documentTitles["index.html#sample-codes-for-client"] = "Sample Codes for Client";
index.add({
    url: "index.html#sample-codes-for-client",
    title: "Sample Codes for Client",
    body: "## Sample Codes for Client  Please refer to &lt;a href=\&quot;https://github.com/hazelcast/hazelcast-code-samples/tree/master/clients\&quot; target=\&quot;_blank\&quot;&gt;Client Code Samples&lt;/a&gt;.      "
});

documentTitles["index.html#using-high-density-memory-store-with-java-client"] = "Using High-Density Memory Store with Java Client";
index.add({
    url: "index.html#using-high-density-memory-store-with-java-client",
    title: "Using High-Density Memory Store with Java Client",
    body: "## Using High-Density Memory Store with Java Client  &lt;font color=\&quot;##153F75\&quot;&gt;**Hazelcast Enterprise HD**&lt;/font&gt; &lt;br&gt;&lt;/br&gt;  If you have &lt;font color=\&quot;##153F75\&quot;&gt;**Hazelcast Enterprise HD**&lt;/font&gt;, your Hazelcast Java client's near cache can benefit from the High-Density Memory Store.   Let's recall the Java client's near cache configuration (please see the [Configuring Client Near Cache section](#configuring-client-near-cache)) **without** High-Density Memory Store:  ```xml &lt;/hazelcast-client&gt;     ...     ...     &lt;near-cache name=\&quot;MENU\&quot;&gt;         &lt;max-size&gt;2000&lt;/max-size&gt;         &lt;time-to-live-seconds&gt;0&lt;/time-to-live-seconds&gt;         &lt;max-idle-seconds&gt;0&lt;/max-idle-seconds&gt;         &lt;eviction-policy&gt;LFU&lt;/eviction-policy&gt;         &lt;invalidate-on-change&gt;true&lt;/invalidate-on-change&gt;         &lt;in-memory-format&gt;OBJECT&lt;/in-memory-format&gt;     &lt;/near-cache&gt;     ... &lt;/hazelcast-client&gt; ```  You can configure this near cache to use Hazelcast's High-Density Memory Store by setting the in-memory format to NATIVE. Please see the following configuration example:  ```xml &lt;/hazelcast-client&gt;     ...     ...     &lt;near-cache&gt;        ...        &lt;time-to-live-seconds&gt;0&lt;/time-to-live-seconds&gt;        &lt;max-idle-seconds&gt;0&lt;/max-idle-seconds&gt;        &lt;invalidate-on-change&gt;true&lt;/invalidate-on-change&gt;        &lt;in-memory-format&gt;NATIVE&lt;/in-memory-format&gt;        &lt;eviction size=\&quot;1000\&quot; max-size-policy=\&quot;ENTRY_COUNT\&quot; eviction-policy=\&quot;LFU\&quot;/&gt;        ...     &lt;/near-cache&gt; &lt;/hazelcast-client&gt; ```   Please notice that when the in-memory format is NATIVE, i.e. High-Density Memory Store is enabled, the configuration element `&lt;eviction&gt;` is used to specify the eviction behavior of your client's near cache. In this case, the elements `&lt;max-size&gt;` and `&lt;eviction-policy&gt;` used in the configuration of a near cache without High-Density Memory Store do not have any impact.   The element `&lt;eviction&gt;` has the following attributes:  - `size`: Maximum size (entry count) of the near cache. - `max-size-policy`: Maximum size policy for eviction of the near cache. Available values are as follows: 	* ENTRY_COUNT: Maximum entry count per member. 	* USED_NATIVE_MEMORY_SIZE: Maximum used native memory size in megabytes. 	* USED_NATIVE_MEMORY_PERCENTAGE: Maximum used native memory percentage. 	* FREE_NATIVE_MEMORY_SIZE: Minimum free native memory size to trigger cleanup. 	* FREE_NATIVE_MEMORY_PERCENTAGE: Minimum free native memory percentage to trigger cleanup. - `eviction-policy`: Eviction policy configuration. Its default values is NONE. Available values are as follows: 	- NONE: No items will be evicted and the property max-size will be ignored. You still can combine it with time-to-live-seconds. 	- LRU: 	Least Recently Used. 	- LFU: 	Least Frequently Used.  Keep in mind that you should have already enabled the High-Density Memory Store usage for your client, using the `&lt;native-memory&gt;` element in the client's configuration.  Please see the [High-Density Memory Store section](#high-density-memory-store) for more information on Hazelcast's High-Density Memory Store feature.            "
});

documentTitles["index.html#other-client-implementations"] = "Other Client Implementations";
index.add({
    url: "index.html#other-client-implementations",
    title: "Other Client Implementations",
    body: "# Other Client Implementations  This chapter describes the clients other than the Hazelcast Java Client.        "
});

documentTitles["index.html#c-client"] = "C++ Client";
index.add({
    url: "index.html#c-client",
    title: "C++ Client",
    body: "## C++ Client   You can use Native C++ Client to connect to Hazelcast cluster members and perform almost all operations that a member can perform. Clients differ from members in that clients do not hold data. The C++ Client is by default a smart client, i.e. it knows where the data is and asks directly for the correct member. You can disable this feature (using the `ClientConfig::setSmart` method) if you do not want the clients to connect to every member.  The features of C++ Clients are:  - Access to distributed data structures (IMap, IQueue, MultiMap, ITopic, etc.). - Access to transactional distributed data structures (TransactionalMap, TransactionalQueue, etc.). - Ability to add cluster listeners to a cluster and entry/item listeners to distributed data structures. - Distributed synchronization mechanisms with ILock, ISemaphore and ICountDownLatch.   "
});

documentTitles["index.html#setting-up-c-client"] = "Setting Up C++ Client";
index.add({
    url: "index.html#setting-up-c-client",
    title: "Setting Up C++ Client",
    body: "### Setting Up C++ Client  Hazelcast C++ Client is shipped with 32/64 bit, shared and static libraries. You only need to include the boost *shared_ptr.hpp* header in your compilation since the API makes use of the boost `shared_ptr`.   The downloaded release folder consists of:  - Mac_64/ - Windows_32/ - Windows_64/ - Linux_32/ - Linux_64/ - docs/ *(HTML Doxygen documents are here)*   Each of the folders above contains the following:  - examples/ 	- testApp.exe =&gt; example command line client tool to connect hazelcast servers. 	- TestApp.cpp =&gt; code of the example command line tool.  - hazelcast/ 	- lib/ =&gt; Contains both shared and static library of hazelcast. 	- include/ =&gt; Contains headers of client.  - external/ 	- include/ =&gt; Contains headers of dependencies. (boost::shared_ptr)    "
});

documentTitles["index.html#installing-c-client"] = "Installing C++ Client";
index.add({
    url: "index.html#installing-c-client",
    title: "Installing C++ Client",
    body: "### Installing C++ Client The C++ Client is tested on Linux 32/64-bit, Mac 64-bit and Windows 32/64-bit machines. For each of the headers above, it is assumed that you are in the correct folder for your platform. Folders are Mac_64, Windows_32, Windows_64, Linux_32 or Linux_64.  "
});

documentTitles["index.html#linux-c-client"] = "Linux C++ Client";
index.add({
    url: "index.html#linux-c-client",
    title: "Linux C++ Client",
    body: "#### Linux C++ Client  For Linux, there are two distributions: 32 bit and 64 bit.  Here is an example script to build with static library:  `g++ main.cpp -pthread -I./external/include -I./hazelcast/include       ./hazelcast/lib/libHazelcastClientStatic_64.a`  Here is an example script to build with shared library:  `g++ main.cpp -lpthread -Wl,–no-as-needed -lrt -I./external/include -I./hazelcast/include -L./hazelcast/lib -lHazelcastClientShared_64`  "
});

documentTitles["index.html#mac-c-client"] = "Mac C++ Client";
index.add({
    url: "index.html#mac-c-client",
    title: "Mac C++ Client",
    body: "#### Mac C++ Client  For Mac, there is one distribution: 64 bit.  Here is an example script to build with static library:  `g++ main.cpp -I./external/include -I./hazelcast/include ./hazelcast/lib/libHazelcastClientStatic_64.a`  Here is an example script to build with shared library:  `g++ main.cpp -I./external/include -I./hazelcast/include -L./hazelcast/lib -lHazelcastClientShared_64`  "
});

documentTitles["index.html#windows-c-client"] = "Windows C++ Client";
index.add({
    url: "index.html#windows-c-client",
    title: "Windows C++ Client",
    body: "#### Windows C++ Client  For Windows, there are two distributions; 32 bit and 64 bit. The static library is located in a folder named \&quot;static\&quot; while the dynamic library(dll) is in the folder named as \&quot;shared\&quot;.  When compiling for Windows environment the user should specify one of the following flags:     HAZELCAST_USE_STATIC: You want the application to use the static Hazelcast library.     HAZELCAST_USE_SHARED: You want the application to use the shared Hazelcast library.  "
});

documentTitles["index.html#c-client-code-examples"] = "C++ Client Code Examples";
index.add({
    url: "index.html#c-client-code-examples",
    title: "C++ Client Code Examples",
    body: "### C++ Client Code Examples  You can try the following C++ client code examples. You need to have a Hazelcast client member running for the code examples to work.   "
});

documentTitles["index.html#c-client-map-example"] = "C++ Client Map Example";
index.add({
    url: "index.html#c-client-map-example",
    title: "C++ Client Map Example",
    body: "#### C++ Client Map Example  ```cpp #include &lt;hazelcast/client/HazelcastAll.h&gt; #include &lt;iostream&gt;  using namespace hazelcast::client;  int main() {   ClientConfig clientConfig;   Address address( \&quot;localhost\&quot;, 5701 );   clientConfig.addAddress( address );    HazelcastClient hazelcastClient( clientConfig );    IMap&lt;int,int&gt; myMap = hazelcastClient.getMap&lt;int ,int&gt;( \&quot;myIntMap\&quot; );   myMap.put( 1,3 );   boost::shared_ptr&lt;int&gt; value = myMap.get( 1 );   if( value.get() != NULL ) {     //process the item   }    return 0; } ```  "
});

documentTitles["index.html#c-client-queue-example"] = "C++ Client Queue Example";
index.add({
    url: "index.html#c-client-queue-example",
    title: "C++ Client Queue Example",
    body: "#### C++ Client Queue Example  ```cpp #include &lt;hazelcast/client/HazelcastAll.h&gt; #include &lt;iostream&gt; #include &lt;string&gt;  using namespace hazelcast::client;  int main() {   ClientConfig clientConfig;   Address address( \&quot;localhost\&quot;, 5701 );   clientConfig.addAddress( address );    HazelcastClient hazelcastClient( clientConfig );    IQueue&lt;std::string&gt; queue = hazelcastClient.getQueue&lt;std::string&gt;( \&quot;q\&quot; );   queue.offer( \&quot;sample\&quot; );   boost::shared_ptr&lt;std::string&gt; value = queue.poll();   if( value.get() != NULL ) {     //process the item   }   return 0; } ```  "
});

documentTitles["index.html#c-client-entry-listener-example"] = "C++ Client Entry Listener Example";
index.add({
    url: "index.html#c-client-entry-listener-example",
    title: "C++ Client Entry Listener Example",
    body: "#### C++ Client Entry Listener Example  ```cpp #include \&quot;hazelcast/client/ClientConfig.h\&quot; #include \&quot;hazelcast/client/EntryEvent.h\&quot; #include \&quot;hazelcast/client/IMap.h\&quot; #include \&quot;hazelcast/client/Address.h\&quot; #include \&quot;hazelcast/client/HazelcastClient.h\&quot; #include &lt;iostream&gt; #include &lt;string&gt;  using namespace hazelcast::client;  class SampleEntryListener {   public:    void entryAdded( EntryEvent&lt;std::string, std::string&gt; &amp;event ) {     std::cout &lt;&lt; \&quot;entry added \&quot; &lt;&lt;  event.getKey() &lt;&lt; \&quot; \&quot;         &lt;&lt; event.getValue() &lt;&lt; std::endl;   };    void entryRemoved( EntryEvent&lt;std::string, std::string&gt; &amp;event ) {     std::cout &lt;&lt; \&quot;entry added \&quot; &lt;&lt;  event.getKey() &lt;&lt; \&quot; \&quot;          &lt;&lt; event.getValue() &lt;&lt; std::endl;   }    void entryUpdated( EntryEvent&lt;std::string, std::string&gt; &amp;event ) {     std::cout &lt;&lt; \&quot;entry added \&quot; &lt;&lt;  event.getKey() &lt;&lt; \&quot; \&quot;          &lt;&lt; event.getValue() &lt;&lt; std::endl;   }    void entryEvicted( EntryEvent&lt;std::string, std::string&gt; &amp;event ) {     std::cout &lt;&lt; \&quot;entry added \&quot; &lt;&lt;  event.getKey() &lt;&lt; \&quot; \&quot;          &lt;&lt; event.getValue() &lt;&lt; std::endl;   } };   int main( int argc, char **argv ) {   ClientConfig clientConfig;   Address address( \&quot;localhost\&quot;, 5701 );   clientConfig.addAddress( address );    HazelcastClient hazelcastClient( clientConfig );    IMap&lt;std::string,std::string&gt; myMap = hazelcastClient       .getMap&lt;std::string ,std::string&gt;( \&quot;myIntMap\&quot; );   SampleEntryListener *  listener = new SampleEntryListener();    std::string id = myMap.addEntryListener( *listener, true );   // Prints entryAdded   myMap.put( \&quot;key1\&quot;, \&quot;value1\&quot; );   // Prints updated   myMap.put( \&quot;key1\&quot;, \&quot;value2\&quot; );   // Prints entryRemoved   myMap.remove( \&quot;key1\&quot; );   // Prints entryEvicted after 1 second   myMap.put( \&quot;key2\&quot;, \&quot;value2\&quot;, 1000 );    // WARNING: deleting listener before removing it from hazelcast leads to crashes.   myMap.removeEntryListener( id );   // Delete listener after remove it from hazelcast.   delete listener;   return 0; }; ```  "
});

documentTitles["index.html#c-client-serialization-example"] = "C++ Client Serialization Example";
index.add({
    url: "index.html#c-client-serialization-example",
    title: "C++ Client Serialization Example",
    body: "#### C++ Client Serialization Example  Assume that you have the following two classes in Java and you want to use them with a C++ client.   ```java class Foo implements Serializable {   private int age;   private String name; }  class Bar implements Serializable {   private float x;   private float y; }  ```  **First**, let them implement `Portable` or `IdentifiedDataSerializable` as shown below.  ```java class Foo implements Portable {   private int age;   private String name;    public int getFactoryId() {     // a positive id that you choose     return 123;   }    public int getClassId() {     // a positive id that you choose     return 2;        }    public void writePortable( PortableWriter writer ) throws IOException {     writer.writeUTF( \&quot;n\&quot;, name );     writer.writeInt( \&quot;a\&quot;, age );   }    public void readPortable( PortableReader reader ) throws IOException {     name = reader.readUTF( \&quot;n\&quot; );     age = reader.readInt( \&quot;a\&quot; );   } }  class Bar implements IdentifiedDataSerializable {   private float x;   private float y;    public int getFactoryId() {     // a positive id that you choose     return 4;        }    public int getId() {     // a positive id that you choose     return 5;       }    public void writeData( ObjectDataOutput out ) throws IOException {     out.writeFloat( x );     out.writeFloat( y );   }    public void readData( ObjectDataInput in ) throws IOException {     x = in.readFloat();     y = in.readFloat();   } } ```  **Then**, implement the corresponding classes in C++ with same factory and class ID as shown below.  ```cpp class Foo : public Portable {   public:   int getFactoryId() const {     return 123;   };    int getClassId() const {     return 2;   };    void writePortable( serialization::PortableWriter &amp;writer ) const {     writer.writeUTF( \&quot;n\&quot;, name );     writer.writeInt( \&quot;a\&quot;, age );   };    void readPortable( serialization::PortableReader &amp;reader ) {     name = reader.readUTF( \&quot;n\&quot; );     age = reader.readInt( \&quot;a\&quot; );   };    private:   int age;   std::string name; };  class Bar : public IdentifiedDataSerializable {   public:   int getFactoryId() const {     return 4;   };    int getClassId() const {     return 2;   };    void writeData( serialization::ObjectDataOutput&amp; out ) const {     out.writeFloat(x);     out.writeFloat(y);   };    void readData( serialization::ObjectDataInput&amp; in ) {     x = in.readFloat();     y = in.readFloat();   };      private:   float x;   float y; }; ```  Now, you can use the classes `Foo` and `Bar` in distributed structures. For example, you can use as Key or Value of `IMap` or as an Item in `IQueue`. 	      	  "
});

documentTitles["index.html#net-client"] = ".NET Client";
index.add({
    url: "index.html#net-client",
    title: ".NET Client",
    body: "## .NET Client  You can use the native .NET client to connect to Hazelcast client members. You need to add `HazelcastClient3x.dll` into your .NET project references. The API is very similar to the Java native client.   .NET Client has the following distributed objects.  * `IMap&lt;K,V&gt;` * `IMultiMap&lt;K,V&gt;` * `IQueue&lt;E&gt;` * `ITopic&lt;E&gt;` * `IHList&lt;E&gt;` * `IHSet&lt;E&gt;` * `IIdGenerator` * `ILock` * `ISemaphore` * `ICountDownLatch` * `IAtomicLong` * `ITransactionContext` * `IRingbuffer` 	 ITransactionContext can be used to obtain:  * `ITransactionalMap&lt;K,V&gt;` * `ITransactionalMultiMap&lt;K,V&gt;` * `ITransactionalList&lt;E&gt;` * `ITransactionalSet&lt;E&gt;` * `ITransactionalQueue&lt;E&gt;`  At present the following features are not available in the .NET Client as they are in the Java Client:  * Distributed Executor Service * Replicated Map * JCache  A code example is shown below.  ```csharp using Hazelcast.Config; using Hazelcast.Client; using Hazelcast.Core; using Hazelcast.IO.Serialization;  using System.Collections.Generic;  namespace Hazelcast.Client.Example {   public class SimpleExample   {      public static void Test()     {       var clientConfig = new ClientConfig();       clientConfig.GetNetworkConfig().AddAddress( \&quot;10.0.0.1\&quot; );       clientConfig.GetNetworkConfig().AddAddress( \&quot;10.0.0.2:5702\&quot; );        // Portable Serialization setup up for Customer Class       clientConfig.GetSerializationConfig()           .AddPortableFactory( MyPortableFactory.FactoryId, new MyPortableFactory() );        IHazelcastInstance client = HazelcastClient.NewHazelcastClient( clientConfig );       // All cluster operations that you can do with ordinary HazelcastInstance       IMap&lt;string, Customer&gt; mapCustomers = client.GetMap&lt;string, Customer&gt;( \&quot;customers\&quot; );       mapCustomers.Put( \&quot;1\&quot;, new Customer( \&quot;Joe\&quot;, \&quot;Smith\&quot; ) );       mapCustomers.Put( \&quot;2\&quot;, new Customer( \&quot;Ali\&quot;, \&quot;Selam\&quot; ) );       mapCustomers.Put( \&quot;3\&quot;, new Customer( \&quot;Avi\&quot;, \&quot;Noyan\&quot; ) );        ICollection&lt;Customer&gt; customers = mapCustomers.Values();       foreach (var customer in customers)       {         //process customer       }     }   }    public class MyPortableFactory : IPortableFactory   {     public const int FactoryId = 1;      public IPortable Create( int classId ) {       if ( Customer.Id == classId )         return new Customer();       else         return null;     }   }    public class Customer : IPortable   {     private string name;     private string surname;      public const int Id = 5;      public Customer( string name, string surname )     {       this.name = name;       this.surname = surname;     }      public Customer() {}      public int GetFactoryId()     {       return MyPortableFactory.FactoryId;     }      public int GetClassId()     {       return Id;     }      public void WritePortable( IPortableWriter writer )     {       writer.WriteUTF( \&quot;n\&quot;, name );       writer.WriteUTF( \&quot;s\&quot;, surname );     }      public void ReadPortable( IPortableReader reader )     {       name = reader.ReadUTF( \&quot;n\&quot; );       surname = reader.ReadUTF( \&quot;s\&quot; );     }   } } ```   "
});

documentTitles["index.html#configuring-net-client"] = "Configuring .NET Client";
index.add({
    url: "index.html#configuring-net-client",
    title: "Configuring .NET Client",
    body: "### Configuring .NET Client You can configure the Hazelcast .NET client via API or XML. To start the client, you can pass a configuration or leave it empty to use default values.  ![image](images/NoteSmall.jpg) ***NOTE***: *.NET and Java clients are similar in terms of configuration. Therefore, you can refer to [Java Client](#hazelcast-java-client) section for configuration aspects. Please also refer to the .NET API documentation.*   "
});

documentTitles["index.html#starting-net-client"] = "Starting .NET Client";
index.add({
    url: "index.html#starting-net-client",
    title: "Starting .NET Client",
    body: "### Starting .NET Client After configuration, you can obtain a client using one of the static methods of Hazelcast, as shown below.   ```csharp IHazelcastInstance client = HazelcastClient.NewHazelcastClient(clientConfig);  ...   IHazelcastInstance defaultClient = HazelcastClient.NewHazelcastClient();  ...  IHazelcastInstance xmlConfClient = Hazelcast     .NewHazelcastClient(@\&quot;..\Hazelcast.Net\Resources\hazelcast-client.xml\&quot;); ```  The `IHazelcastInstance` interface is the starting point where all distributed objects can be obtained.  ```csharp var map = client.GetMap&lt;int,string&gt;(\&quot;mapName\&quot;);  ...  var lock= client.GetLock(\&quot;thelock\&quot;); ```           "
});

documentTitles["index.html#rest-client"] = "REST Client";
index.add({
    url: "index.html#rest-client",
    title: "REST Client",
    body: "## REST Client Hazelcast provides a REST interface, i.e. it provides an HTTP service in each cluster member (node) so that you can access your `map` and `queue` using HTTP protocol. Assuming `mapName` and `queueName` are already configured in your Hazelcast, its structure is shown below.  `http://node IP address:port/hazelcast/rest/maps/mapName/key`  `http://node IP address:port/hazelcast/rest/queues/queueName`  For the operations to be performed, standard REST conventions for HTTP calls are used.  "
});

documentTitles["index.html#rest-client-getpostdelete-examples"] = "REST Client GET/POST/DELETE Examples";
index.add({
    url: "index.html#rest-client-getpostdelete-examples",
    title: "REST Client GET/POST/DELETE Examples",
    body: "### REST Client GET/POST/DELETE Examples  In the following GET, POST, and DELETE examples, assume that your cluster members are as shown below.  ```plain Members [5] {   Member [10.20.17.1:5701]   Member [10.20.17.2:5701]   Member [10.20.17.4:5701]   Member [10.20.17.3:5701]   Member [10.20.17.5:5701] } ```  ---  ![image](images/NoteSmall.jpg) ***NOTE***: *All of the requests below can return one of the following responses in case of a failure.*  - If the HTTP request syntax is not known, the following response will be returned.  ```plain HTTP/1.1 400 Bad Request Content-Length: 0 ```   - In case of an unexpected exception, the following response will be returned.  ```plain &lt; HTTP/1.1 500 Internal Server Error &lt; Content-Length: 0 ```  ---   "
});

documentTitles["index.html#creatingupdating-entries-in-a-map-for-rest-client"] = "Creating/Updating Entries in a Map for REST Client";
index.add({
    url: "index.html#creatingupdating-entries-in-a-map-for-rest-client",
    title: "Creating/Updating Entries in a Map for REST Client",
    body: "#### Creating/Updating Entries in a Map for REST Client  You can put a new `key1/value1` entry into a map by using POST call to  `http://10.20.17.1:5701/hazelcast/ rest/maps/mapName/key1` URL. This call's content body should contain the value of the key. Also, if the call contains the MIME type, Hazelcast stores this information, too.   A sample POST call is shown below.  ```plain $ curl -v -X POST -H \&quot;Content-Type: text/plain\&quot; -d \&quot;bar\&quot;      http://10.20.17.1:5701/hazelcast/rest/maps/mapName/foo ```  It will return the following response if successful:  ```plain &lt; HTTP/1.1 200 OK &lt; Content-Type: text/plain &lt; Content-Length: 0 ```  "
});

documentTitles["index.html#retrieving-entries-from-a-map-for-rest-client"] = "Retrieving Entries from a Map for REST Client";
index.add({
    url: "index.html#retrieving-entries-from-a-map-for-rest-client",
    title: "Retrieving Entries from a Map for REST Client",
    body: "#### Retrieving Entries from a Map for REST Client  If you want to retrieve an entry, you can use a GET call to `http://10.20.17.1:5701/hazelcast/rest/maps/mapName/key1`. You can also retrieve this entry from another member of your cluster, such as  `http://10.20.17.3:5701/hazelcast/rest/ maps/mapName/key1`.  An example of a GET call is shown below.  ```plain $ curl -X GET http://10.20.17.3:5701/hazelcast/rest/maps/mapName/foo ```  It will return the following response if there is a corresponding value:  ```plain &lt; HTTP/1.1 200 OK &lt; Content-Type: text/plain &lt; Content-Length: 3 bar ```  This GET call returned a value, its length, and also the MIME type (`text/plain`) since the POST call example shown above included the MIME type.  It will return the following if there is no mapping for the given key:  ```plain &lt; HTTP/1.1 204 No Content &lt; Content-Length: 0 ```   "
});

documentTitles["index.html#removing-entries-from-a-map-for-rest-client"] = "Removing Entries from a Map for REST Client";
index.add({
    url: "index.html#removing-entries-from-a-map-for-rest-client",
    title: "Removing Entries from a Map for REST Client",
    body: "#### Removing Entries from a Map for REST Client  You can use a DELETE call to remove an entry. A sample DELETE call is shown below with its response.  ```plain $ curl -v -X DELETE http://10.20.17.1:5701/hazelcast/rest/maps/mapName/foo ``` ``` &lt; HTTP/1.1 200 OK &lt; Content-Type: text/plain &lt; Content-Length: 0 ``` If you leave the key empty as follows, DELETE will delete all entries from the map.  ```plain $ curl -v -X DELETE http://10.20.17.1:5701/hazelcast/rest/maps/mapName ```  ```plain &lt; HTTP/1.1 200 OK &lt; Content-Type: text/plain &lt; Content-Length: 0 ```  "
});

documentTitles["index.html#offering-items-on-a-queue-for-rest-client"] = "Offering Items on a Queue for REST Client";
index.add({
    url: "index.html#offering-items-on-a-queue-for-rest-client",
    title: "Offering Items on a Queue for REST Client",
    body: "#### Offering Items on a Queue for REST Client  You can use a POST call to create an item on the queue. A sample is shown below.  ```plain $ curl -v -X POST -H \&quot;Content-Type: text/plain\&quot; -d \&quot;foo\&quot;      http://10.20.17.1:5701/hazelcast/rest/queues/myEvents ```  The above call is equivalent to `HazelcastInstance#getQueue(\&quot;myEvents\&quot;).offer(\&quot;foo\&quot;);`.  It will return the following if successful:  ```plain &lt; HTTP/1.1 200 OK &lt; Content-Type: text/plain &lt; Content-Length: 0 ```  It will return the following if the queue is full and the item is not able to be offered to the queue:  ```plain &lt; HTTP/1.1 503 Service Unavailable &lt; Content-Length: 0 ```  "
});

documentTitles["index.html#retrieving-items-from-a-queue-for-rest-client"] = "Retrieving Items from a Queue for REST Client";
index.add({
    url: "index.html#retrieving-items-from-a-queue-for-rest-client",
    title: "Retrieving Items from a Queue for REST Client",
    body: "#### Retrieving Items from a Queue for REST Client  You can use a DELETE call for retrieving items from a queue. Note that you should state the poll timeout while polling for queue events by an extra path parameter.   An example is shown below (**10** being the timeout value).  ```plain $ curl -v -X DELETE \http://10.20.17.1:5701/hazelcast/rest/queues/myEvents/10 ```  The above call is equivalent to `HazelcastInstance#getQueue(\&quot;myEvents\&quot;).poll(10, SECONDS);`. Below is the response.  ```plain &lt; HTTP/1.1 200 OK &lt; Content-Type: text/plain &lt; Content-Length: 3 foo ```  When the timeout is reached, the response will be `No Content` success, i.e. there is no item on the queue to be returned.   ```plain &lt; HTTP/1.1 204 No Content &lt; Content-Length: 0 ```   "
});

documentTitles["index.html#getting-the-size-of-the-queue-for-rest-client"] = "Getting the size of the queue for REST Client";
index.add({
    url: "index.html#getting-the-size-of-the-queue-for-rest-client",
    title: "Getting the size of the queue for REST Client",
    body: "#### Getting the size of the queue for REST Client  ```plain $ curl -v -X GET \http://10.20.17.1:5701/hazelcast/rest/queues/myEvents/size ```  The above call is equivalent to `HazelcastInstance#getQueue(\&quot;myEvents\&quot;).size();`. Below is a sample response.  ```plain &lt; HTTP/1.1 200 OK &lt; Content-Type: text/plain &lt; Content-Length: 1 5 ``` ---  "
});

documentTitles["index.html#checking-the-status-of-the-cluster-for-rest-client"] = "Checking the Status of the Cluster for REST Client";
index.add({
    url: "index.html#checking-the-status-of-the-cluster-for-rest-client",
    title: "Checking the Status of the Cluster for REST Client",
    body: "### Checking the Status of the Cluster for REST Client  Besides the above operations, you can check the status of your cluster, a sample of which is shown below.  ```plain $ curl -v http://127.0.0.1:5701/hazelcast/rest/cluster ```  The return will be similar to the following:  ```plain &lt; HTTP/1.1 200 OK &lt; Content-Length: 119  Members [5] {   Member [10.20.17.1:5701] this   Member [10.20.17.2:5701]   Member [10.20.17.4:5701]   Member [10.20.17.3:5701]   Member [10.20.17.5:5701] }  ConnectionCount: 5 AllConnectionCount: 20 ```  ---  RESTful access is provided through any member of your cluster. You can even put an HTTP load-balancer in front of your cluster members for load balancing and fault tolerance.  ![image](images/NoteSmall.jpg) ***NOTE***: *REST client request listener service is not enabled by default. You should enable it on your cluster members to use REST client. It can be enabled using the system property `hazelcast.rest.enabled`. Please refer to the [System Properties section](#system-properties) for the definition of this property and how to set a system property.*  ![image](images/NoteSmall.jpg) ***NOTE***: *You need to handle the failures on REST polls as there is no transactional guarantee.*        "
});

documentTitles["index.html#memcache-client"] = "Memcache Client";
index.add({
    url: "index.html#memcache-client",
    title: "Memcache Client",
    body: "## Memcache Client  ![image](images/NoteSmall.jpg) ***NOTE:*** *Hazelcast Memcache Client only supports ASCII protocol. Binary Protocol is not supported.*  A Memcache client written in any language can talk directly to a Hazelcast cluster. No additional configuration is required.  "
});

documentTitles["index.html#memcache-client-code-examples"] = "Memcache Client Code Examples";
index.add({
    url: "index.html#memcache-client-code-examples",
    title: "Memcache Client Code Examples",
    body: "### Memcache Client Code Examples  Assume that your cluster members are as shown below.  ```plain Members [5] {   Member [10.20.17.1:5701]   Member [10.20.17.2:5701]   Member [10.20.17.4:5701]   Member [10.20.17.3:5701]   Member [10.20.17.5:5701] } ``` Assume that you have a PHP application that uses PHP Memcache client to cache things in Hazelcast. All you need to do is have your PHP Memcache client connect to one of these members. It does not matter which member the client connects to because the Hazelcast cluster looks like one giant machine (Single System Image). Here is a PHP client code example.  ```php &lt;?php   $memcache = new Memcache;   $memcache-&gt;connect( '10.20.17.1', 5701 ) or die ( \&quot;Could not connect\&quot; );   $memcache-&gt;set( 'key1', 'value1', 0, 3600 );   $get_result = $memcache-&gt;get( 'key1' ); // retrieve your data   var_dump( $get_result ); // show it ?&gt; ```  Notice that Memcache client connects to `10.20.17.1` and uses port `5701`. Here is a Java client code example with SpyMemcached client:  ```java MemcachedClient client = new MemcachedClient(     AddrUtil.getAddresses( \&quot;10.20.17.1:5701 10.20.17.2:5701\&quot; ) ); client.set( \&quot;key1\&quot;, 3600, \&quot;value1\&quot; ); System.out.println( client.get( \&quot;key1\&quot; ) ); ```  If you want your data to be stored in different maps (e.g. to utilize per map configuration), you can do that with a map name prefix as in the following example code.   ```java MemcachedClient client = new MemcachedClient(     AddrUtil.getAddresses( \&quot;10.20.17.1:5701 10.20.17.2:5701\&quot; ) ); client.set( \&quot;map1:key1\&quot;, 3600, \&quot;value1\&quot; ); // store to *hz_memcache_map1 client.set( \&quot;map2:key1\&quot;, 3600, \&quot;value1\&quot; ); // store to hz_memcache_map2 System.out.println( client.get( \&quot;key1\&quot; ) ); // get from hz_memcache_map1 System.out.println( client.get( \&quot;key2\&quot; ) ); // get from hz_memcache_map2 ```  *hz\_memcache prefix\_* separates Memcache maps from Hazelcast maps. If no map name is given, it will be stored in a default map named *hz_memcache_default*.  An entry written with a Memcache client can be read by another Memcache client written in another language.  "
});

documentTitles["index.html#unsupported-operations-for-memcache"] = "Unsupported Operations for Memcache";
index.add({
    url: "index.html#unsupported-operations-for-memcache",
    title: "Unsupported Operations for Memcache",
    body: "### Unsupported Operations for Memcache  - CAS operations are not supported. In operations that get CAS parameters, such as append, CAS values are ignored.  - Only a subset of statistics are supported. Below is the list of supported statistic values.      - cmd_set     -	cmd_get     -	incr_hits     -	incr_misses     -	decr_hits     -	decr_misses    &lt;br&gt; &lt;/br&gt;  ![image](images/NoteSmall.jpg) ***NOTE***: *Memcache client request listener service is not enabled by default. You should enable it on your cluster members to use Memcache client. It can be enabled using the system property `hazelcast.memcache.enabled`. Please refer to the [System Properties section](#system-properties) for the definition of this property and how to set a system property.*        "
});

documentTitles["index.html#serialization"] = "Serialization";
index.add({
    url: "index.html#serialization",
    title: "Serialization",
    body: "# Serialization  Hazelcast needs to serialize the Java objects that you put into Hazelcast because Hazelcast is a distributed system. The data and its replicas are stored in different partitions on multiple cluster members. The data you need may not be present on the local member, and in that case, Hazelcast retrieves that data from another member. This requires serialization.  Hazelcast serializes all your objects into an instance of `com.hazelcast.nio.serialization.Data`. `Data` is the binary representation of an object.   Serialization is used when:  - key/value objects are added to a map, - items are put in a queue/set/list, - a runnable is sent using an executor service, - an entry processing is performed within a map, - an object is locked, and - a message is sent to a topic.   Hazelcast optimizes the serialization for the basic types and their array types. You cannot override this behavior.  **Default Types**;   * Byte, Boolean, Character, Short, Integer, Long, Float, Double, String * byte[], boolean[], char[], short[], int[], long[], float[], double[], String[] * `java.util.Date`, `java.math.BigInteger`, `java.math.BigDecimal`, `java.lang.Class`, `java.lang.Enum`  &lt;br&gt;&lt;br&gt; Hazelcast optimizes all of the above object types. You do not need to worry about their (de)serializations.         "
});

documentTitles["index.html#serialization-interface-types"] = "Serialization Interface Types";
index.add({
    url: "index.html#serialization-interface-types",
    title: "Serialization Interface Types",
    body: "## Serialization Interface Types  For complex objects, use the following interfaces for serialization and deserialization.  - `java.io.Serializable`: Please see the [Implementing Java Serializable and Externalizable section](#implementing-java-serializable-and-externalizable).  - `java.io.Externalizable`: Please see the [Implementing Java Externalizable section](#implementing-java-externalizable).  - `com.hazelcast.nio.serialization.DataSerializable`: Please see the [Implementing DataSerializable section](#implementing-dataserializable).  - `com.hazelcast.nio.serialization.IdentifiedDataSerializable`: Please see the [IdentifiedDataSerializable section](#identifieddataserializable).  - `com.hazelcast.nio.serialization.Portable`: Please see the [Implementing Portable Serialization section](#implementing-portable-serialization).  - Custom Serialization (using [StreamSerializer](#implementing-streamserializer) and [ByteArraySerializer](#implementing-bytearrayserializer)).  - Global Serializer: Please see the [Global Serializer section](#global-serializer) for details.   **When Hazelcast serializes an object into `Data`:  **(1)** It first checks whether the object is `null`.  **(2)** If the above check fails, then Hazelcast checks if it is an instance of `com.hazelcast.nio.serialization.DataSerializable` or `com.hazelcast.nio.serialization.IdentifiedDataSerializable`.  **(3)** If the above check fails, then Hazelcast checks if it is an instance of `com.hazelcast.nio.serialization.Portable`.  **(4)** If the above check fails, then Hazelcast checks if it is an instance of one of the default types (see the [Serialization chapter introduction](#serialization) for default types).  **(5)** If the above check fails, then Hazelcast looks for a user-specified [Custom Serializer](#custom-serialization), i.e. an implementation of `ByteArraySerializer` or `StreamSerializer`. Custom serializer is searched using the input Object's Class and its parent class up to Object. If parent class search fails, all interfaces implemented by the class are also checked (excluding `java.io.Serializable` and `java.io.Externalizable`).   **(6)** If the above check fails, then Hazelcast checks if it is an instance of `java.io.Serializable` or `java.io.Externalizable` and a Global Serializer is not registered with Java Serialization Override feature.  **(7)** If the above check fails, Hazelcast will use the registered Global Serializer if one exists.  If all of the above checks fail, then serialization will fail. When a class implements multiple interfaces, the above steps are important to determine the serialization mechanism that Hazelcast will use. When a class definition is required for any of these serializations, you need to have all the classes needed by the application on your classpath because Hazelcast does not download them automatically.      "
});

documentTitles["index.html#comparing-serialization-interfaces"] = "Comparing Serialization Interfaces";
index.add({
    url: "index.html#comparing-serialization-interfaces",
    title: "Comparing Serialization Interfaces",
    body: "## Comparing Serialization Interfaces  The table below provides a comparison between the interfaces listed in the previous section to help you in deciding which interface to use in your applications.  *Serialization Interface*|*Advantages*|*Drawbacks* :-|:-|:- **Serializable**|- A standard and basic Java interface &lt;br&gt; - Requires no implementation |- More time and CPU usage &lt;br&gt; - More space occupancy &lt;br&gt; - Not supported by Native clients **Externalizable**|- A standard Java interface &lt;br&gt; - More CPU and memory usage efficient than Serializable| - Serialization interface must be implemented &lt;br&gt; - Not supported by Native clients **DataSerializable**| - More CPU and memory usage efficient than Serializable| - Specific to Hazelcast &lt;br&gt; - Not supported by Native clients **IdentifiedDataSerializable**| - More CPU and memory usage efficient than Serializable &lt;br&gt; - Reflection is not used during deserialization &lt;br&gt; - Supported by all Native Clients| - Specific to Hazelcast &lt;br&gt; - Serialization interface must be implemented &lt;br&gt; - A Factory and configuration must be implemented **Portable**| - More CPU and memory usage efficient than Serializable &lt;br&gt; - Reflection is not used during deserialization &lt;br&gt; - Versioning is supported &lt;br&gt; Partial deserialization is supported during Queries &lt;br&gt; - Supported by all Native Clients| - Specific to Hazelcast &lt;br&gt; - Serialization interface must be implemented &lt;br&gt; - A Factory and configuration must be implemented &lt;br&gt; - Class definition is also sent with data but stored only once per class **Custom Serialization**| - Does not require class to implement an interface &lt;br&gt; - Convenient and flexible &lt;br&gt; - Can be based on StreamSerializer ByteArraySerializer|- Serialization interface must be implemented &lt;br&gt; - Plug in and configuration is required    Let's dig into the details of the above serialization mechanisms in the following sections.         "
});

documentTitles["index.html#implementing-java-serializable-and-externalizable"] = "Implementing Java Serializable and Externalizable";
index.add({
    url: "index.html#implementing-java-serializable-and-externalizable",
    title: "Implementing Java Serializable and Externalizable",
    body: "## Implementing Java Serializable and Externalizable  A class often needs to implement the `java.io.Serializable` interface; native Java serialization is the easiest way to do serialization.  Let's take a look at the example code below for Java Serializable.  ```java public class Employee implements Serializable {    private static final long serialVersionUID = 1L;   private String surname;      public Employee( String surname ) {      this.surname = surname;   }  } ```  Here, the fields that are non-static and non-transient are automatically serialized. To eliminate class compatibility issues, it is recommended that you add a `serialVersionUID`, as shown above. Also, when you are using methods that perform byte-content comparisons (e.g. `IMap.replace()`) and if byte-content of equal objects is different, you may face unexpected behaviors. For example, if the class relies on a hash map, the `replace` method may fail. The reason for this is the hash map is a serialized data structure with unreliable byte-content.  "
});

documentTitles["index.html#implementing-java-externalizable"] = "Implementing Java Externalizable";
index.add({
    url: "index.html#implementing-java-externalizable",
    title: "Implementing Java Externalizable",
    body: "### Implementing Java Externalizable  Hazelcast also supports `java.io.Externalizable`. This interface offers more control on the way fields are serialized or deserialized. Compared to native Java serialization, it also can have a positive effect on performance. With `java.io.Externalizable`, there is no need to add `serialVersionUID`.  Let's take a look at the example code below.  ```java public class Employee implements Externalizable {    private String surname;   public Employee(String surname) {          this.surname = surname;   }      @Override   public void readExternal( ObjectInput in )       throws IOException, ClassNotFoundException {     this.surname = in.readUTF();   }        @Override   public void writeExternal( ObjectOutput out )       throws IOException {     out.writeUTF(surname);    } } ```  You explicitly perform writing and reading of fields. Perform reading in the same order as writing.         "
});

documentTitles["index.html#implementing-dataserializable"] = "Implementing DataSerializable";
index.add({
    url: "index.html#implementing-dataserializable",
    title: "Implementing DataSerializable",
    body: "## Implementing DataSerializable  As mentioned in [Implementing Java Serializable &amp; Externalizable](#implementing-java-serializable-and-externalizable), Java serialization is an easy mechanism. However, it does not control how fields are serialized or deserialized. Moreover, Java serialization can lead to excessive CPU loads since it keeps track of objects to handle the cycles and streams class descriptors. These are performance decreasing factors; thus, serialized data may not have an optimal size.  The `DataSerializable` interface of Hazelcast overcomes these issues. Here is an example of a class implementing the `com.hazelcast.nio.serialization.DataSerializable` interface.  ```java public class Address implements DataSerializable {   private String street;   private int zipCode;   private String city;   private String state;    public Address() {}    //getters setters..    public void writeData( ObjectDataOutput out ) throws IOException {     out.writeUTF(street);     out.writeInt(zipCode);     out.writeUTF(city);     out.writeUTF(state);   }    public void readData( ObjectDataInput in ) throws IOException {     street = in.readUTF();     zipCode = in.readInt();     city = in.readUTF();     state = in.readUTF();   } } ```  "
});

documentTitles["index.html#reading-and-writing-and-dataserializable"] = "Reading and Writing and DataSerializable";
index.add({
    url: "index.html#reading-and-writing-and-dataserializable",
    title: "Reading and Writing and DataSerializable",
    body: "#### Reading and Writing and DataSerializable  Let's take a look at another example which encapsulates a `DataSerializable` field.   Since the `address` field itself is `DataSerializable`, it calls `address.writeData(out)` when writing and `address.readData(in)` when reading. Also note that you should have writing and reading of the fields occur  in the same order. When Hazelcast serializes a `DataSerializable`, it writes the `className` first. When Hazelcast deserializes it, `className` is used to instantiate the object using reflection.   ```java public class Employee implements DataSerializable {   private String firstName;   private String lastName;   private int age;   private double salary;   private Address address; //address itself is DataSerializable    public Employee() {}    //getters setters..    public void writeData( ObjectDataOutput out ) throws IOException {     out.writeUTF(firstName);     out.writeUTF(lastName);     out.writeInt(age);     out.writeDouble (salary);     address.writeData (out);   }    public void readData( ObjectDataInput in ) throws IOException {     firstName = in.readUTF();     lastName = in.readUTF();     age = in.readInt();     salary = in.readDouble();     address = new Address();     // since Address is DataSerializable let it read its own internal state     address.readData(in);   } } ```  As you can see, since the `address` field itself is `DataSerializable`, it calls `address.writeData(out)` when writing and `address.readData(in)` when reading. Also note that you should have writing and reading of the fields occur in the same order. While Hazelcast serializes a `DataSerializable`, it writes the `className` first. When Hazelcast deserializes it, `className` is used to instantiate the object using reflection.  ![image](images/NoteSmall.jpg) ***NOTE:*** *Since Hazelcast needs to create an instance during deserialization,`DataSerializable` class has a no-arg constructor.*  ![image](images/NoteSmall.jpg) ***NOTE:*** *`DataSerializable` is a good option if serialization is only needed for in-cluster communication.*  ![image](images/NoteSmall.jpg) ***NOTE:*** *`DataSerializable` is not supported by non-Java clients as it uses Java reflection. If you need non-Java clients, please use [`IdentifiedDataSerializable`](#identifieddataserializable) or [`Portable`](#implementing-portable-serialization).*   "
});

documentTitles["index.html#identifieddataserializable"] = "IdentifiedDataSerializable";
index.add({
    url: "index.html#identifieddataserializable",
    title: "IdentifiedDataSerializable",
    body: "### IdentifiedDataSerializable  For a faster serialization of objects, avoiding reflection and long class names, Hazelcast recommends you implement `com.hazelcast.nio.serialization.IdentifiedDataSerializable` which is a slightly better version of `DataSerializable`.  `DataSerializable` uses reflection to create a class instance, as mentioned in [Implementing DataSerializable](#implementing-dataserializable). But `IdentifiedDataSerializable` uses a factory for this purpose and it is faster during deserialization, which requires new instance creations.  "
});

documentTitles["index.html#getid-and-getfactoryid-methods"] = "getID and getFactoryId Methods";
index.add({
    url: "index.html#getid-and-getfactoryid-methods",
    title: "getID and getFactoryId Methods",
    body: "#### getID and getFactoryId Methods  `IdentifiedDataSerializable` extends `DataSerializable` and introduces two new methods.  -   `int getId();` -   `int getFactoryId();`   `IdentifiedDataSerializable` uses `getId()` instead of class name, and it uses `getFactoryId()` to load the class when given the Id. To complete the implementation, you should also implement  `com.hazelcast.nio.serialization.DataSerializableFactory` and register it into `SerializationConfig`, which can be accessed from `Config.getSerializationConfig()`. Factory's responsibility is to return an instance of the right `IdentifiedDataSerializable` object, given the Id. This is currently the most efficient way of Serialization that Hazelcast supports off the shelf.  "
});

documentTitles["index.html#implementing-identifieddataserializable"] = "Implementing IdentifiedDataSerializable";
index.add({
    url: "index.html#implementing-identifieddataserializable",
    title: "Implementing IdentifiedDataSerializable",
    body: "#### Implementing IdentifiedDataSerializable  Let's take a look at the following example code and configuration to see `IdentifiedDataSerializable` in action.  ```java public class Employee     implements IdentifiedDataSerializable {         private String surname;      public Employee() {}      public Employee( String surname ) {      this.surname = surname;   }      @Override   public void readData( ObjectDataInput in )        throws IOException {     this.surname = in.readUTF();   }      @Override   public void writeData( ObjectDataOutput out )       throws IOException {      out.writeUTF( surname );   }      @Override   public int getFactoryId() {      return EmployeeDataSerializableFactory.FACTORY_ID;   }      @Override   public int getId() {      return EmployeeDataSerializableFactory.EMPLOYEE_TYPE;   }       @Override   public String toString() {     return String.format( \&quot;Employee(surname=%s)\&quot;, surname );    } } ```   The methods `getId` and `getFactoryId` return a unique positive number within the `EmployeeDataSerializableFactory`. Now, let's create an instance of this `EmployeeDataSerializableFactory`.  ```java public class EmployeeDataSerializableFactory      implements DataSerializableFactory{       public static final int FACTORY_ID = 1;       public static final int EMPLOYEE_TYPE = 1;    @Override   public IdentifiedDataSerializable create(int typeId) {     if ( typeId == EMPLOYEE_TYPE ) {        return new Employee();     } else {       return null;      }   } } ```  The only method you should implement is `create`, as seen in the above example. It is recommended that you use a `switch-case` statement instead of multiple `if-else` blocks if you have a lot of subclasses. Hazelcast throws an exception if null is returned for `typeId`.  "
});

documentTitles["index.html#registering-employeedataserializablefactory"] = "Registering EmployeeDataSerializableFactory";
index.add({
    url: "index.html#registering-employeedataserializablefactory",
    title: "Registering EmployeeDataSerializableFactory",
    body: "#### Registering EmployeeDataSerializableFactory  As the last step, you need to register `EmployeeDataSerializableFactory` declaratively (declare in the configuration file `hazelcast.xml`) as shown below. Note that `factory-id` has the same value of `FACTORY_ID` in the above code. This is crucial to enable Hazelcast to find the correct factory.  ```xml &lt;hazelcast&gt;    ...   &lt;serialization&gt;     &lt;data-serializable-factories&gt;       &lt;data-serializable-factory factory-id=\&quot;1\&quot;&gt;         EmployeeDataSerializableFactory       &lt;/data-serializable-factory&gt;     &lt;/data-serializable-factories&gt;   &lt;/serialization&gt;   ... &lt;/hazelcast&gt; ```   &lt;br&gt;&lt;/br&gt;  ***RELATED INFORMATION***   *Please refer to the [Serialization Configuration Wrap-Up section](#serialization-configuration-wrap-up) for a full description of Hazelcast Serialization configuration.*         "
});

documentTitles["index.html#implementing-portable-serialization"] = "Implementing Portable Serialization";
index.add({
    url: "index.html#implementing-portable-serialization",
    title: "Implementing Portable Serialization",
    body: "## Implementing Portable Serialization  As an alternative to the existing serialization methods, Hazelcast offers a language/platform independent Portable serialization that has the following advantages:  -   Supports multi-version of the same object type. -   Fetches individual fields without having to rely on reflection. -   Queries and indexing support without deserialization and/or reflection.  In order to support these features, a serialized Portable object contains meta information like the version and the concrete location of the each field in the binary data. This way, Hazelcast navigates in the `byte[]` and deserializes only the required field without actually deserializing the whole object. This improves the Query performance.  With multi-version support, you can have two cluster members where each has different versions of the same object. Hazelcast will store both meta information and use the correct one to serialize and deserialize Portable objects depending on the member. This is very helpful when you are doing a rolling upgrade without shutting down the cluster.  Portable serialization is totally language independent and is used as the binary protocol between Hazelcast server and clients.  "
});

documentTitles["index.html#portable-serialization-example-code"] = "Portable Serialization Example Code";
index.add({
    url: "index.html#portable-serialization-example-code",
    title: "Portable Serialization Example Code",
    body: "### Portable Serialization Example Code  Here is example code for Portable implementation of a Foo class.  ```java public class Foo implements Portable{   final static int ID = 5;    private String foo;    public String getFoo() {     return foo;   }    public void setFoo( String foo ) {     this.foo = foo;   }    @Override   public int getFactoryId() {     return 1;   }    @Override   public int getClassId() {     return ID;   }    @Override   public void writePortable( PortableWriter writer ) throws IOException {     writer.writeUTF( \&quot;foo\&quot;, foo );   }    @Override   public void readPortable( PortableReader reader ) throws IOException {     foo = reader.readUTF( \&quot;foo\&quot; );   } }         ```  Similar to `IdentifiedDataSerializable`, a Portable Class must provide `classId` and `factoryId`. The Factory object creates the Portable object given the `classId`.  An example `Factory` could be implemented as follows:  ```java public class MyPortableFactory implements PortableFactory {    @Override   public Portable create( int classId ) {     if ( Foo.ID == classId )       return new Foo();     else       return null;   } }             ```  "
});

documentTitles["index.html#registering-the-portable-factory"] = "Registering the Portable Factory";
index.add({
    url: "index.html#registering-the-portable-factory",
    title: "Registering the Portable Factory",
    body: "### Registering the Portable Factory  The last step is to register the `Factory` to the `SerializationConfig`. Below are the programmatic and declarative configurations for this step.   ```java Config config = new Config(); config.getSerializationConfig().addPortableFactory( 1, new MyPortableFactory() ); ```   ```xml &lt;hazelcast&gt;   &lt;serialization&gt;     &lt;portable-version&gt;0&lt;/portable-version&gt;     &lt;portable-factories&gt;       &lt;portable-factory factory-id=\&quot;1\&quot;&gt;           com.hazelcast.nio.serialization.MyPortableFactory       &lt;/portable-factory&gt;     &lt;/portable-factories&gt;   &lt;/serialization&gt; &lt;/hazelcast&gt; ```   Note that the `id` that is passed to the `SerializationConfig` is the same as the `factoryId` that the `Foo` class returns.   "
});

documentTitles["index.html#versioning-for-portable-serialization"] = "Versioning for Portable Serialization";
index.add({
    url: "index.html#versioning-for-portable-serialization",
    title: "Versioning for Portable Serialization",
    body: "### Versioning for Portable Serialization  More than one version of the same class may need to be serialized and deserialized. For example, a client may have an older version of a class, and the node to which it is connected may have a newer version of the same class.   Portable serialization supports versioning. It is a global versioning, meaning that all portable classes that are serialized through a member get the globally configured portable version.  You can declare Version in the configuration file `hazelcast.xml` using the `portable-version` element, as shown below.  ```xml &lt;serialization&gt;   &lt;portable-version&gt;1&lt;/portable-version&gt;   &lt;portable-factories&gt;     &lt;portable-factory factory-id=\&quot;1\&quot;&gt;         PortableFactoryImpl     &lt;/portable-factory&gt;   &lt;/portable-factories&gt; &lt;/serialization&gt; ```  You can also use the interface &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/blob/master/hazelcast/src/main/java/com/hazelcast/nio/serialization/VersionedPortable.java\&quot; target=\&quot;_blank\&quot;&gt;VersionedPortable&lt;/a&gt; which enables to upgrade the version per class, instead of global versioning. If you need to update only one class, you can use this interface. In this case, your class should implement `VersionedPortable` instead of `Portable`, and you can give the desired version using the method `VersionedPortable.getClassVersion()`.  You should consider the following when you perform versioning.  - It is important to change the version whenever an update is performed in the serialized fields of a class (e.g. increment the version). - If a client performs a Portable deserialization on a field, and then that Portable is updated by removing that field on the cluster side, this may lead to a problem. - Portable serialization does not use reflection and hence, fields in the class and in the serialized content are not automatically mapped. Field renaming is a simpler process. Also, since the class ID is stored, renaming the Portable does not lead to problems. - Types of fields need to be updated carefully. Hazelcast performs basic type upgradings (e.g. `int` to `float`).   "
});

documentTitles["index.html#example-portable-versioning-scenarios"] = "Example Portable Versioning Scenarios";
index.add({
    url: "index.html#example-portable-versioning-scenarios",
    title: "Example Portable Versioning Scenarios",
    body: "#### Example Portable Versioning Scenarios  Assume that a new member joins to the cluster with a class that has been modified and class' version has been upgraded due to this modification.  - If you modified the class by adding a new field, the new member's `put` operations will include that new field. If this new member tries to get an object that was put from the older members, it will get `null` for the newly added field. - If you modified the class by removing a field, the old members get `null` for the objects that are put by the new member. - If you modified the class by changing the type of a field, the error `IncompatibleClassChangeError` is generated unless the change was made on a built-in type or the byte size of the new type is less than or equal to the old one. The following are example allowed type conversions: 	- `long` -&gt; `int`, `byte`, `char`, `short` 	- `int`-&gt; `byte`, `char`, `short`   If you have not modify a class at all, it will work as usual.   "
});

documentTitles["index.html#null-portable-serialization"] = "Null Portable Serialization";
index.add({
    url: "index.html#null-portable-serialization",
    title: "Null Portable Serialization",
    body: "### Null Portable Serialization  Be careful with serializing null portables. Hazelcast lazily creates a class definition of portable internally when the user first serializes. This class definition is stored and used later for deserializing that portable class. When the user tries to serialize a null portable when there is no class definition at the moment, Hazelcast throws an exception saying that `com.hazelcast.nio.serialization.HazelcastSerializationException: Cannot write null portable without explicitly registering class definition!`.   There are two solutions to get rid of this exception. Either put a non-null portable class of the same type before any other operation, or manually register a class definition in serialization configuration as shown below.  ```java Config config = new Config(); final ClassDefinition classDefinition = new ClassDefinitionBuilder(Foo.factoryId, Foo.getClassId)                        .addUTFField(\&quot;foo\&quot;).build(); config.getSerializationConfig().addClassDefinition(classDefinition); Hazelcast.newHazelcastInstance(config); ```   "
});

documentTitles["index.html#distributedobject-serialization"] = "DistributedObject Serialization";
index.add({
    url: "index.html#distributedobject-serialization",
    title: "DistributedObject Serialization",
    body: "### DistributedObject Serialization  Putting a `DistributedObject` (Hazelcast Semaphore, Queue, etc.) in a cluster member and getting it from another one is not a straightforward operation. Passing the ID and type of the `DistributedObject` can be a solution. For deserialization, you can get the object from HazelcastInstance. For instance, if your object is an instance of `IQueue`, you can either use `HazelcastInstance.getQueue(id)` or `Hazelcast.getDistributedObject`.  You can use the `HazelcastInstanceAware` interface in the case of a deserialization of a Portable `DistributedObject` if it gets an ID to be looked up. HazelcastInstance is set after deserialization, so you first need to store the ID and then retrieve the `DistributedObject` using the `setHazelcastInstance` method.    &lt;br&gt;&lt;/br&gt;  ***RELATED INFORMATION***   *Please refer to the [Serialization Configuration Wrap-Up section](#serialization-configuration-wrap-up) for a full description of Hazelcast Serialization configuration.*          "
});

documentTitles["index.html#custom-serialization"] = "Custom Serialization";
index.add({
    url: "index.html#custom-serialization",
    title: "Custom Serialization",
    body: "## Custom Serialization  Hazelcast lets you plug in a custom serializer for serializing your objects. You can use [StreamSerializer](#implementing-streamserializer) and [ByteArraySerializer](#implementing-bytearrayserializer) interfaces for this purpose.   "
});

documentTitles["index.html#implementing-streamserializer"] = "Implementing StreamSerializer";
index.add({
    url: "index.html#implementing-streamserializer",
    title: "Implementing StreamSerializer",
    body: "### Implementing StreamSerializer  You can use a stream to serialize and deserialize data by using `StreamSerializer`. This is a good option for your own implementations. It can also be adapted to external serialization libraries like Kryo, JSON, and protocol buffers.  "
});

documentTitles["index.html#streamserializer-example-code-1"] = "StreamSerializer Example Code 1";
index.add({
    url: "index.html#streamserializer-example-code-1",
    title: "StreamSerializer Example Code 1",
    body: "#### StreamSerializer Example Code 1  First, let's create a simple object.  ```java public class Employee {   private String surname;      public Employee( String surname ) {     this.surname = surname;   } } ```  Now, let's implement StreamSerializer for `Employee` class.  ```java public class EmployeeStreamSerializer     implements StreamSerializer&lt;Employee&gt; {    @Override   public int getTypeId () {     return 1;    }    @Override   public void write( ObjectDataOutput out, Employee employee )       throws IOException {      out.writeUTF(employee.getSurname());   }    @Override   public Employee read( ObjectDataInput in )        throws IOException {      String surname = in.readUTF();     return new Employee(surname);   }    @Override   public void destroy () {    } } ```  In practice, classes may have many fields. Just make sure the fields are read in the same order as they are written. The type ID must be unique and greater than or equal to **1**. Uniqueness of the type ID enables Hazelcast to determine which serializer will be used during deserialization.   As the last step, let's register the `EmployeeStreamSerializer` in the configuration file `hazelcast.xml`, as shown below.  ```xml &lt;serialization&gt;   &lt;serializers&gt;     &lt;serializer type-class=\&quot;Employee\&quot; class-name=\&quot;EmployeeStreamSerializer\&quot; /&gt;   &lt;/serializers&gt; &lt;/serialization&gt; ```   ![image](images/NoteSmall.jpg) ***NOTE:*** *`StreamSerializer` cannot be created for well-known types (e.g. Long, String) and primitive arrays. Hazelcast already registers these types.*   &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#streamserializer-example-code-2"] = "StreamSerializer Example Code 2";
index.add({
    url: "index.html#streamserializer-example-code-2",
    title: "StreamSerializer Example Code 2",
    body: "#### StreamSerializer Example Code 2  Let's take a look at another example implementing `StreamSerializer`.  ```java public class Foo {   private String foo;      public String getFoo() {     return foo;   }      public void setFoo( String foo ) {     this.foo = foo;   } } ```  Assume that our custom serialization will serialize Foo into XML. First you need to implement a `com.hazelcast.nio.serialization.StreamSerializer`. A very simple one that uses XMLEncoder and XMLDecoder could look like the following:  ```java public static class FooXmlSerializer implements StreamSerializer&lt;Foo&gt; {    @Override   public int getTypeId() {     return 10;   }    @Override   public void write( ObjectDataOutput out, Foo object ) throws IOException {     ByteArrayOutputStream bos = new ByteArrayOutputStream();     XMLEncoder encoder = new XMLEncoder( bos );     encoder.writeObject( object );     encoder.close();     out.write( bos.toByteArray() );   }    @Override   public Foo read( ObjectDataInput in ) throws IOException {     InputStream inputStream = (InputStream) in;     XMLDecoder decoder = new XMLDecoder( inputStream );     return (Foo) decoder.readObject();   }    @Override   public void destroy() {   } } ```  "
});

documentTitles["index.html#configuring-streamserializer"] = "Configuring StreamSerializer";
index.add({
    url: "index.html#configuring-streamserializer",
    title: "Configuring StreamSerializer",
    body: "#### Configuring StreamSerializer  Note that `typeId` must be unique because Hazelcast will use it to look up the `StreamSerializer` while it deserializes the object. The last required step is to register the `StreamSerializer` in your Hazelcast configuration. Below are the programmatic and declarative configurations for this step.  ```java SerializerConfig sc = new SerializerConfig()     .setImplementation(new FooXmlSerializer())     .setTypeClass(Foo.class); Config config = new Config(); config.getSerializationConfig().addSerializerConfig(sc); ```   ```xml &lt;hazelcast&gt;   &lt;serialization&gt;     &lt;serializers&gt;       &lt;serializer type-class=\&quot;com.www.Foo\&quot; class-name=\&quot;com.www.FooXmlSerializer\&quot; /&gt;     &lt;/serializers&gt;   &lt;/serialization&gt; &lt;/hazelcast&gt; ```  From now on, this Hazelcast example will use `FooXmlSerializer` to serialize Foo objects. In this way, you can write an adapter (StreamSerializer) for any Serialization framework and plug it into Hazelcast.   &lt;br&gt;&lt;/br&gt;  ***RELATED INFORMATION***   *Please refer to the [Serialization Configuration Wrap-Up section](#serialization-configuration-wrap-up) for a full description of Hazelcast Serialization configuration.*          "
});

documentTitles["index.html#implementing-bytearrayserializer"] = "Implementing ByteArraySerializer";
index.add({
    url: "index.html#implementing-bytearrayserializer",
    title: "Implementing ByteArraySerializer",
    body: "### Implementing ByteArraySerializer  `ByteArraySerializer` exposes the raw ByteArray used internally by Hazelcast. It is a good option if the serialization library you are using deals with ByteArrays instead of streams.  Let's implement `ByteArraySerializer` for the `Employee` class mentioned in [Implementing StreamSerializer](#implementing-streamserializer).  ```java public class EmployeeByteArraySerializer     implements ByteArraySerializer&lt;Employee&gt; {    @Override   public void destroy () {    }    @Override   public int getTypeId () {     return 1;    }    @Override   public byte[] write( Employee object )       throws IOException {      return object.getName().getBytes();   }    @Override   public Employee read( byte[] buffer )        throws IOException {      String surname = new String( buffer );     return new Employee( surname );   } } ```  "
});

documentTitles["index.html#configuring-bytearrayserializer"] = "Configuring ByteArraySerializer";
index.add({
    url: "index.html#configuring-bytearrayserializer",
    title: "Configuring ByteArraySerializer",
    body: "#### Configuring ByteArraySerializer  As usual, let's register the `EmployeeByteArraySerializer` in the configuration file `hazelcast.xml`, as shown below.  ```xml &lt;serialization&gt;   &lt;serializers&gt;     &lt;serializer type-class=\&quot;Employee\&quot;&gt;EmployeeByteArraySerializer&lt;/serializer&gt;   &lt;/serializers&gt; &lt;/serialization&gt; ```   &lt;br&gt;&lt;/br&gt;  ***RELATED INFORMATION***   *Please refer to the [Serialization Configuration Wrap-Up section](#serialization-configuration-wrap-up) for a full description of Hazelcast Serialization configuration.*       "
});

documentTitles["index.html#global-serializer"] = "Global Serializer";
index.add({
    url: "index.html#global-serializer",
    title: "Global Serializer",
    body: "## Global Serializer  The global serializer is identical to [custom serializers](#custom-serialization) from the implementation perspective. The global serializer is registered as a fallback serializer to handle all other objects if a serializer cannot be located for them.  By default, the global serializer does not handle `java.io.Serializable` and `java.io.Externalizable` instances. However, you can configure it to be responsible for those instances.  A custom serializer should be registered for a specific class type. The global serializer will handle all class types if all the steps in searching for a serializer fail as described in [Serialization Interface Types](#serialization-interface-types).   **Use cases**  * Third party serialization frameworks can be integrated using the global serializer.  * For your custom objects, you can implement a single serializer to handle all of them.   * You can replace the internal Java serialization by enabling the `overrideJavaSerialization` option of the global serializer configuration.   Any custom serializer can be used as the global serializer. Please refer to the [Custom Serialization section](#custom-serialization) for implementation details.  ![image](images/NoteSmall.jpg) ***NOTE:*** *To function properly, Hazelcast needs the Java serializable objects to be handled correctly. If the global serializer is configured to handle the Java serialization, the global serializer must properly serialize/deserialize the `java.io.Serializable` instances. Otherwise, it causes Hazelcast to malfunction.*   "
});

documentTitles["index.html#sample-global-serializer"] = "Sample Global Serializer";
index.add({
    url: "index.html#sample-global-serializer",
    title: "Sample Global Serializer",
    body: "### Sample Global Serializer  A sample global serializer that integrates with a third party serializer is shown below.   ```java public class GlobalStreamSerializer     implements StreamSerializer&lt;Object&gt; {    private SomeThirdPartySerializer someThirdPartySerializer;      private init() {     //someThirdPartySerializer  = ...    }      @Override   public int getTypeId () {     return 123;    }    @Override   public void write( ObjectDataOutput out, Object object ) throws IOException {       byte[] bytes = someThirdPartySerializer.encode(object);      out.writeByteArray(bytes);   }    @Override   public Object read( ObjectDataInput in ) throws IOException {      byte[] bytes = in.readByteArray();     return someThirdPartySerializer.decode(bytes);   }    @Override   public void destroy () {      someThirdPartySerializer.destroy();   } } ```  Now, we can register the global serializer in the configuration file `hazelcast.xml`, as shown below.  ```xml &lt;serialization&gt;   &lt;serializers&gt;     &lt;global-serializer override-java-serialization=\&quot;true\&quot;&gt;GlobalStreamSerializer&lt;/global-serializer&gt;   &lt;/serializers&gt; &lt;/serialization&gt; ```       "
});

documentTitles["index.html#implementing-hazelcastinstanceaware"] = "Implementing HazelcastInstanceAware";
index.add({
    url: "index.html#implementing-hazelcastinstanceaware",
    title: "Implementing HazelcastInstanceAware",
    body: "## Implementing HazelcastInstanceAware  You can implement the `HazelcastInstanceAware` interface to access distributed objects for cases where an object is deserialized and needs access to HazelcastInstance.  Let's implement it for the `Employee` class mentioned in the [Custom Serialization section](#custom-serialization).  ```java public class Employee     implements Serializable, HazelcastInstanceAware {        private static final long serialVersionUID = 1L;   private String surname;   private transient HazelcastInstance hazelcastInstance;    public Person( String surname ) {      this.surname = surname;   }    @Override   public void setHazelcastInstance( HazelcastInstance hazelcastInstance ) {     this.hazelcastInstance = hazelcastInstance;     System.out.println( \&quot;HazelcastInstance set\&quot; );    }    @Override   public String toString() {     return String.format( \&quot;Person(surname=%s)\&quot;, surname );    } } ```   After deserialization, the object is checked to see if it implements `HazelcastInstanceAware` and the method `setHazelcastInstance` is called. Notice the `hazelcastInstance` is `transient`. This is because this field should not be serialized.  It may be a good practice to inject a HazelcastInstance into a domain object (e.g. `Employee` in the above sample) when used together with `Runnable`/`Callable` implementations. These runnables/callables are executed by `IExecutorService` which sends them to another machine. And after a task is deserialized, run/call method implementations need to access HazelcastInstance.  We recommend you only set the HazelcastInstance field while using `setHazelcastInstance` method and you not execute operations on the HazelcastInstance. The reason is that when HazelcastInstance is injected for a `HazelcastInstanceAware` implementation, it may not be up and running at the injection time.     &lt;br&gt;&lt;/br&gt;    "
});

documentTitles["index.html#serialization-configuration-wrap-up"] = "Serialization Configuration Wrap-Up";
index.add({
    url: "index.html#serialization-configuration-wrap-up",
    title: "Serialization Configuration Wrap-Up",
    body: "## Serialization Configuration Wrap-Up  This section summarizes the configuration of serialization options, explained in the above sections, into all-in-one examples. The following are example serialization configurations.  **Declarative:**  ```xml &lt;serialization&gt;    &lt;portable-version&gt;2&lt;/portable-version&gt;    &lt;use-native-byte-order&gt;true&lt;/use-native-byte-order&gt;    &lt;byte-order&gt;BIG_ENDIAN&lt;/byte-order&gt;    &lt;enable-compression&gt;true&lt;/enable-compression&gt;    &lt;enable-shared-object&gt;false&lt;/enable-shared-object&gt;    &lt;allow-unsafe&gt;true&lt;/allow-unsafe&gt;    &lt;data-serializable-factories&gt;       &lt;data-serializable-factory factory-id=\&quot;1001\&quot;&gt;           abc.xyz.Class       &lt;/data-serializable-factory&gt;    &lt;/data-serializable-factories&gt;    &lt;portable-factories&gt;       &lt;portable-factory factory-id=\&quot;9001\&quot;&gt;          xyz.abc.Class       &lt;/portable-factory&gt;    &lt;/portable-factories&gt;    &lt;serializers&gt;       &lt;global-serializer&gt;abc.Class&lt;/global-serializer&gt;       &lt;serializer type-class=\&quot;Employee\&quot; class-name=\&quot;com.EmployeeSerializer\&quot;&gt;       &lt;/serializer&gt;    &lt;/serializers&gt;    &lt;check-class-def-errors&gt;true&lt;/check-class-def-errors&gt; &lt;/serialization&gt; ```  **Programmatic:**  ```java Config config = new Config(); SerializationConfig srzConfig = config.getSerializationConfig(); srzConfig.setPortableVersion( \&quot;2\&quot; ).setUseNativeByteOrder( true ); srzConfig.setAllowUnsafe( true ).setEnableCompression( true ); srzConfig.setCheckClassDefErrors( true );  GlobalSerializerConfig globSrzConfig = srzConfig.getGlobalSerializerConfig(); globSrzConfig.setClassName( \&quot;abc.Class\&quot; );  SerializerConfig serializerConfig = srzConfig.getSerializerConfig(); serializerConfig.setTypeClass( \&quot;Employee\&quot; )                 .setClassName( \&quot;com.EmployeeSerializer\&quot; ); ```  Serialization configuration has the following elements.  - `portable-version`: Defines versioning of the portable serialization. Portable version differentiates two of the same classes that have changes, such as adding/removing field or changing a type of a field. - `use-native-byte-order`: Set to `true` to use native byte order for the underlying platform.  - `byte-order`: Defines the byte order that the serialization will use: `BIG_ENDIAN` or `LITTLE_ENDIAN`. The default value is `BIG_ENDIAN`. - `enable-compression`: Enables compression if default Java serialization is used.  - `enable-shared-object`: Enables shared object if default Java serialization is used.  - `allow-unsafe`: Set to `true` to allow `unsafe` to be used.  - `data-serializable-factory`: The DataSerializableFactory class to be registered. - `portable-factory`: The PortableFactory class to be registered. - `global-serializer`: The global serializer class to be registered if no other serializer is applicable. - `serializer`: The class name of the serializer implementation. - `check-class-def-errors`: When set to `true`, the serialization system will check for class definitions error at start and will throw a Serialization Exception with an error definition.         "
});

documentTitles["index.html#management"] = "Management";
index.add({
    url: "index.html#management",
    title: "Management",
    body: "# Management  This chapter provides information on managing and monitoring your Hazelcast cluster. It gives detailed instructions related to gathering statistics, monitoring via JMX protocol, and managing the cluster with useful utilities. It also explains how to use Hazelcast Management Center.   "
});

documentTitles["index.html#getting-member-statistics-from-distributed-data-structures"] = "Getting Member Statistics from Distributed Data Structures";
index.add({
    url: "index.html#getting-member-statistics-from-distributed-data-structures",
    title: "Getting Member Statistics from Distributed Data Structures",
    body: "## Getting Member Statistics from Distributed Data Structures  You can get various statistics from your distributed data structures via the Statistics API. Since the data structures are distributed in the cluster, the Statistics API provides statistics for the local portion (1/Number of Members in the Cluster) of data on each member (or node).   "
});

documentTitles["index.html#map-statistics"] = "Map Statistics";
index.add({
    url: "index.html#map-statistics",
    title: "Map Statistics",
    body: "### Map Statistics  To get local map statistics, use the `getLocalMapStats()` method from the `IMap` interface. This method returns a `LocalMapStats` object that holds local map statistics.  Below is example code where the `getLocalMapStats()` method and the `getOwnedEntryCount()` method get the number of entries owned by this member.  ```java HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance(); IMap&lt;String, Customer&gt; customers = hazelcastInstance.getMap( \&quot;customers\&quot; ); LocalMapStats mapStatistics = customers.getLocalMapStats; System.out.println( \&quot;number of entries owned on this node = \&quot;     + mapStatistics.getOwnedEntryCount() ); ```  Below is the list of metrics that you can access via the `LocalMapStats` object.  ```java /**  * Returns the number of entries owned by this member.  */ long getOwnedEntryCount();  /**  * Returns the number of backup entries hold by this member.  */ long getBackupEntryCount();  /**  * Returns the number of backups per entry.  */ int getBackupCount();  /**  * Returns memory cost (number of bytes) of owned entries in this member.  */ long getOwnedEntryMemoryCost();  /**  * Returns memory cost (number of bytes) of backup entries in this member.  */ long getBackupEntryMemoryCost();  /**  * Returns the creation time of this map on this member.  */ long getCreationTime();  /**  * Returns the last access (read) time of the locally owned entries.  */ long getLastAccessTime();  /**  * Returns the last update time of the locally owned entries.  */ long getLastUpdateTime();  /**  * Returns the number of hits (reads) of the locally owned entries.  */ long getHits();  /**  * Returns the number of currently locked locally owned keys.  */ long getLockedEntryCount();  /**  * Returns the number of entries that the member owns and are dirty (updated  * but not persisted yet).  * dirty entry count is meaningful when there is a persistence defined.  */ long getDirtyEntryCount();  /**  * Returns the number of put operations.  */ long getPutOperationCount();  /**  * Returns the number of get operations.  */ long getGetOperationCount();  /**  * Returns the number of Remove operations.  */ long getRemoveOperationCount();  /**  * Returns the total latency of put operations. To get the average latency,  * divide by number of puts  */ long getTotalPutLatency();  /**  * Returns the total latency of get operations. To get the average latency,  * divide by the number of gets.  */ long getTotalGetLatency();  /**  * Returns the total latency of remove operations. To get the average latency,  * divide by the number of gets.  */ long getTotalRemoveLatency();  /**  * Returns the maximum latency of put operations. To get the average latency,  * divide by the number of puts.  */ long getMaxPutLatency();  /**  * Returns the maximum latency of get operations. To get the average latency,  * divide by the number of gets.  */ long getMaxGetLatency();  /**  * Returns the maximum latency of remove operations. To get the average latency,  * divide by the number of gets.  */ long getMaxRemoveLatency();  /**  * Returns the number of Events Received.  */ long getEventOperationCount();  /**  * Returns the total number of Other Operations.  */ long getOtherOperationCount();  /**  * Returns the total number of total operations.  */ long total();  /**  * Cost of map &amp; near cache &amp; backup in bytes.  * todo: in object mode, object size is zero.  */ long getHeapCost();  /**  * Returns statistics related to the Near Cache.  */ NearCacheStats getNearCacheStats(); ```  "
});

documentTitles["index.html#near-cache-statistics"] = "Near Cache Statistics";
index.add({
    url: "index.html#near-cache-statistics",
    title: "Near Cache Statistics",
    body: "#### Near Cache Statistics  To get Near Cache statistics, use the `getNearCacheStats()` method from the `LocalMapStats` object. This method returns a `NearCacheStats` object that holds Near Cache statistics.  Below is example code where the `getNearCacheStats()` method and the `getRatio` method from `NearCacheStats` get a Near Cache hit/miss ratio.   ```java HazelcastInstance node = Hazelcast.newHazelcastInstance(); IMap&lt;String, Customer&gt; customers = node.getMap( \&quot;customers\&quot; ); LocalMapStats mapStatistics = customers.getLocalMapStats(); NearCacheStats nearCacheStatistics = mapStatistics.getNearCacheStats(); System.out.println( \&quot;near cache hit/miss ratio= \&quot;     + nearCacheStatistics.getRatio() ); ``` Below is the list of metrics that you can access via the `NearCacheStats` object. This behavior applies to both client and node near caches.  ```java /**  * Returns the creation time of this NearCache on this member  */ long getCreationTime();  /**  * Returns the number of entries owned by this member.  */ long getOwnedEntryCount();  /**  * Returns memory cost (number of bytes) of entries in this cache.  */ long getOwnedEntryMemoryCost();  /**  * Returns the number of hits (reads) of the locally owned entries.  */ long getHits();  /**  * Returns the number of misses  of the locally owned entries.  */ long getMisses();  /**  * Returns the hit/miss ratio  of the locally owned entries.  */ double getRatio(); ```  "
});

documentTitles["index.html#multimap-statistics"] = "Multimap Statistics";
index.add({
    url: "index.html#multimap-statistics",
    title: "Multimap Statistics",
    body: "### Multimap Statistics  To get MultiMap statistics, use the `getLocalMultiMapStats()` method from the `MultiMap` interface. This method returns a `LocalMultiMapStats` object that holds local MultiMap statistics.  Below is example code where the `getLocalMultiMapStats()` method and the `getLastUpdateTime` method from `LocalMultiMapStats` get the last update time.   ```java HazelcastInstance node = Hazelcast.newHazelcastInstance(); MultiMap&lt;String, Customer&gt; customers = node.getMultiMap( \&quot;customers\&quot; ); LocalMultiMapStats multiMapStatistics = customers.getLocalMultiMapStats(); System.out.println( \&quot;last update time =  \&quot;     + multiMapStatistics.getLastUpdateTime() ); ``` Below is the list of metrics that you can access via the `LocalMultiMapStats` object.  ```java /**  * Returns the number of entries owned by this member.  */ long getOwnedEntryCount();  /**  * Returns the number of backup entries hold by this member.  */ long getBackupEntryCount();  /**  * Returns the number of backups per entry.  */ int getBackupCount();  /**  * Returns memory cost (number of bytes) of owned entries in this member.  */ long getOwnedEntryMemoryCost();  /**  * Returns memory cost (number of bytes) of backup entries in this member.  */ long getBackupEntryMemoryCost();  /**  * Returns the creation time of this map on this member.  */ long getCreationTime();  /**  * Returns the last access (read) time of the locally owned entries.  */ long getLastAccessTime();  /**  * Returns the last update time of the locally owned entries.  */ long getLastUpdateTime();  /**  * Returns the number of hits (reads) of the locally owned entries.  */ long getHits();  /**  * Returns the number of currently locked locally owned keys.  */ long getLockedEntryCount();  /**  * Returns the number of entries that the member owns and are dirty (updated  * but not persisted yet).  * Dirty entry count is meaningful when a persistence is defined.  */ long getDirtyEntryCount();  /**  * Returns the number of put operations.  */ long getPutOperationCount();  /**  * Returns the number of get operations.  */ long getGetOperationCount();  /**  * Returns the number of Remove operations.  */ long getRemoveOperationCount();  /**  * Returns the total latency of put operations. To get the average latency,  * divide by the number of puts.  */ long getTotalPutLatency();  /**  * Returns the total latency of get operations. To get the average latency,  * divide by the number of gets.  */ long getTotalGetLatency();  /**  * Returns the total latency of remove operations. To get the average latency,  * divide by the number of gets.  */ long getTotalRemoveLatency();  /**  * Returns the maximum latency of put operations. To get the average latency,  * divide by the number of puts.  */ long getMaxPutLatency();  /**  * Returns the maximum latency of get operations. To get the average latency,  * divide by the number of gets.  */ long getMaxGetLatency();  /**  * Returns the maximum latency of remove operations. To get the average latency,  * divide by the number of gets.  */ long getMaxRemoveLatency();  /**  * Returns the number of Events Received.  */ long getEventOperationCount();  /**  * Returns the total number of Other Operations.  */ long getOtherOperationCount();  /**  * Returns the total number of total operations.  */ long total();  /**  * Cost of map &amp; near cache  &amp; backup in bytes.  * todo: in object mode, object size is zero.  */ long getHeapCost(); ```  "
});

documentTitles["index.html#queue-statistics"] = "Queue Statistics";
index.add({
    url: "index.html#queue-statistics",
    title: "Queue Statistics",
    body: "### Queue Statistics  To get local queue statistics, use the `getLocalQueueStats()` method from the `IQueue` interface. This method returns a `LocalQueueStats` object that holds local queue statistics.  Below is example code where the `getLocalQueueStats()` method and the `getAvgAge` method from `LocalQueueStats` get the average age of items.  ```java HazelcastInstance node = Hazelcast.newHazelcastInstance(); IQueue&lt;Order&gt; orders = node.getQueue( \&quot;orders\&quot; ); LocalQueueStats queueStatistics = orders.getLocalQueueStats(); System.out.println( \&quot;average age of items = \&quot;      + queueStatistics.getAvgAge() ); ```  Below is the list of metrics that you can access via the `LocalQueueStats` object.  ```java /**  * Returns the number of owned items in this member.  */ long getOwnedItemCount();  /**  * Returns the number of backup items in this member.  */ long getBackupItemCount();  /**  * Returns the min age of the items in this member.  */ long getMinAge();  /**  * Returns the max age of the items in this member.  */ long getMaxAge();  /**  * Returns the average age of the items in this member.  */ long getAvgAge();  /**  * Returns the number of offer/put/add operations.  * Offers returning false will be included.  * #getRejectedOfferOperationCount can be used  * to get the rejected offers.  */ long getOfferOperationCount();  /**  * Returns the number of rejected offers. Offer  * can be rejected because of max-size limit  * on the queue.  */ long getRejectedOfferOperationCount();  /**  * Returns the number of poll/take/remove operations.  * Polls returning null (empty) will be included.  * #getEmptyPollOperationCount can be used to get the  * number of polls returned null.  */ long getPollOperationCount();  /**  * Returns the number of null returning poll operations.  * Poll operation might return null if the queue is empty.  */ long getEmptyPollOperationCount();  /**  * Returns the number of other operations.  */ long getOtherOperationsCount();  /**  * Returns the number of event operations.  */ long getEventOperationCount(); ```  "
});

documentTitles["index.html#topic-statistics"] = "Topic Statistics";
index.add({
    url: "index.html#topic-statistics",
    title: "Topic Statistics",
    body: "### Topic Statistics  To get local topic statistics, use the `getLocalTopicStats()` method from the `ITopic` interface. This method returns a `LocalTopicStats` object that holds local topic statistics.  Below is example code where the `getLocalTopicStats()` method and the `getPublishOperationCount` method from `LocalTopicStats` get the number of publish operations.   ```java HazelcastInstance node = Hazelcast.newHazelcastInstance(); ITopic&lt;Object&gt; news = node.getTopic( \&quot;news\&quot; ); LocalTopicStats topicStatistics = news.getLocalTopicStats(); System.out.println( \&quot;number of publish operations = \&quot;      + topicStatistics.getPublishOperationCount() ); ```  Below is the list of metrics that you can access via the `LocalTopicStats` object.  ```java /**  * Returns the creation time of this topic on this member.  */ long getCreationTime();  /**  * Returns the total number of published messages of this topic on this member.  */ long getPublishOperationCount();  /**  * Returns the total number of received messages of this topic on this member.  */ long getReceiveOperationCount(); ```  "
});

documentTitles["index.html#executor-statistics"] = "Executor Statistics";
index.add({
    url: "index.html#executor-statistics",
    title: "Executor Statistics",
    body: "### Executor Statistics  To get local executor statistics, use the `getLocalExecutorStats()` method from the `IExecutorService` interface. This method returns a `LocalExecutorStats` object that holds local executor statistics.  Below is example code where the `getLocalExecutorStats()` method and the `getCompletedTaskCount` method from `LocalExecutorStats` get the number of completed operations of the executor service.   ```java HazelcastInstance node = Hazelcast.newHazelcastInstance(); IExecutorService orderProcessor = node.getExecutorService( \&quot;orderProcessor\&quot; ); LocalExecutorStats executorStatistics = orderProcessor.getLocalExecutorStats(); System.out.println( \&quot;completed task count = \&quot;      + executorStatistics.getCompletedTaskCount() ); ```  Below is the list of metrics that you can access via the `LocalExecutorStats` object.  ```java /**  * Returns the number of pending operations of the executor service.  */ long getPendingTaskCount();  /**  * Returns the number of started operations of the executor service.  */ long getStartedTaskCount();  /**  * Returns the number of completed operations of the executor service.  */ long getCompletedTaskCount();  /**  * Returns the number of cancelled operations of the executor service.  */ long getCancelledTaskCount();  /**  * Returns the total start latency of operations started.  */ long getTotalStartLatency();  /**  * Returns the total execution time of operations finished.  */ long getTotalExecutionLatency(); ```       "
});

documentTitles["index.html#jmx-api-per-node"] = "JMX API per Node";
index.add({
    url: "index.html#jmx-api-per-node",
    title: "JMX API per Node",
    body: "## JMX API per Node  Hazelcast members expose various management beans which include statistics about distributed data structures and the states of Hazelcast node internals.  The metrics are local to the nodes, i.e. they do not reflect cluster wide values.  You can find the JMX API definition below with descriptions and the API methods in parenthesis.  **Atomic Long (`IAtomicLong`)**  *  Name ( `name` ) *  Current Value ( `currentValue` ) *  Set Value ( `set(v)` ) *  Add value and Get ( `addAndGet(v)` ) *  Compare and Set ( `compareAndSet(e,v)` ) *  Decrement and Get ( `decrementAndGet()` ) *  Get and Add ( `getAndAdd(v)` ) *  Get and Increment ( `getAndIncrement()` ) *  Get and Set ( `getAndSet(v)` ) *  Increment and Get ( `incrementAndGet()` ) *  Partition key ( `partitionKey` )  **Atomic Reference ( `IAtomicReference` )**  *  Name ( `name` ) *  Partition key  ( `partitionKey`)  **Countdown Latch ( `ICountDownLatch` )**  *  Name ( `name` ) *  Current count ( `count`) *  Countdown ( `countDown()` ) *  Partition key  ( `partitionKey`)  **Executor Service ( `IExecutorService` )**  *  Local pending operation count ( `localPendingTaskCount` ) *  Local started operation count ( `localStartedTaskCount` ) *  Local completed operation count ( `localCompletedTaskCount` ) *  Local cancelled operation count ( `localCancelledTaskCount` ) *  Local total start latency ( `localTotalStartLatency` ) *  Local total execution latency ( `localTotalExecutionLatency` )  **List ( `IList` )**  *  Name ( `name` ) *  Clear list ( `clear` )  **Lock ( `ILock` )**  *  Name ( `name` ) *  Lock Object ( `lockObject` ) *  Partition key ( `partitionKey` )  **Map ( `IMap` )**  *  Name ( `name` ) *  Size ( `size` ) *  Config ( `config` ) *  Owned entry count ( `localOwnedEntryCount` ) *  Owned entry memory cost ( `localOwnedEntryMemoryCost` ) *  Backup entry count ( `localBackupEntryCount` ) *  Backup entry cost ( `localBackupEntryMemoryCost` ) *  Backup count ( `localBackupCount` ) *  Creation time ( `localCreationTime` ) *  Last access time ( `localLastAccessTime` ) *  Last update time ( `localLastUpdateTime` ) *  Hits ( `localHits` ) *  Locked entry count ( `localLockedEntryCount` ) *  Dirty entry count ( `localDirtyEntryCount` ) *  Put operation count ( `localPutOperationCount` ) *  Get operation count ( `localGetOperationCount` ) *  Remove operation count ( `localRemoveOperationCount` ) *  Total put latency ( `localTotalPutLatency` ) *  Total get latency ( `localTotalGetLatency` ) *  Total remove latency ( `localTotalRemoveLatency` ) *  Max put latency ( `localMaxPutLatency` ) *  Max get latency ( `localMaxGetLatency` ) *  Max remove latency ( `localMaxRemoveLatency` ) *  Event count ( `localEventOperationCount` ) *  Other (keySet,entrySet etc..) operation count ( `localOtherOperationCount` ) *  Total operation count ( `localTotal` ) *  Heap Cost ( `localHeapCost` ) *  Clear ( `clear()` ) *  Values ( `values(p)`) *  Entry Set ( `entrySet(p)` )  **MultiMap ( `MultiMap` )**  *  Name ( `name` ) *  Size ( `size` ) *  Owned entry count ( `localOwnedEntryCount` ) *  Owned entry memory cost ( `localOwnedEntryMemoryCost` ) *  Backup entry count ( `localBackupEntryCount` ) *  Backup entry cost ( `localBackupEntryMemoryCost` ) *  Backup count ( `localBackupCount` ) *  Creation time ( `localCreationTime` ) *  Last access time ( `localLastAccessTime` ) *  Last update time ( `localLastUpdateTime` ) *  Hits ( `localHits` ) *  Locked entry count ( `localLockedEntryCount` ) *  Put operation count ( `localPutOperationCount` ) *  Get operation count ( `localGetOperationCount` ) *  Remove operation count ( `localRemoveOperationCount` ) *  Total put latency ( `localTotalPutLatency` ) *  Total get latency ( `localTotalGetLatency` ) *  Total remove latency ( `localTotalRemoveLatency` ) *  Max put latency ( `localMaxPutLatency` ) *  Max get latency ( `localMaxGetLatency` ) *  Max remove latency ( `localMaxRemoveLatency` ) *  Event count ( `localEventOperationCount` ) *  Other (keySet,entrySet etc..) operation count ( `localOtherOperationCount` ) *  Total operation count ( `localTotal` ) *  Clear ( `clear()` )  **Replicated Map ( `ReplicatedMap` )**  *  Name ( `name` ) *  Size ( `size` ) *  Config ( `config` ) *  Owned entry count ( `localOwnedEntryCount` ) *  Creation time ( `localCreationTime` ) *  Last access time ( `localLastAccessTime` ) *  Last update time ( `localLastUpdateTime` ) *  Hits ( `localHits` ) *  Put operation count ( `localPutOperationCount` ) *  Get operation count ( `localGetOperationCount` ) *  Remove operation count ( `localRemoveOperationCount` ) *  Total put latency ( `localTotalPutLatency` ) *  Total get latency ( `localTotalGetLatency` ) *  Total remove latency ( `localTotalRemoveLatency` ) *  Max put latency ( `localMaxPutLatency` ) *  Max get latency ( `localMaxGetLatency` ) *  Max remove latency ( `localMaxRemoveLatency` ) *  Event count ( `localEventOperationCount` ) *  Replication event count ( `localReplicationEventCount` ) *  Other (keySet,entrySet etc..) operation count ( `localOtherOperationCount` ) *  Total operation count ( `localTotal` ) *  Clear ( `clear()` ) *  Values ( `values()`) *  Entry Set ( `entrySet()` )  **Queue ( `IQueue` )**  *  Name ( `name` ) *  Config ( `QueueConfig` ) *  Partition key ( `partitionKey` ) *  Owned item count ( `localOwnedItemCount` ) *  Backup item count ( `localBackupItemCount` ) *  Minimum age ( `localMinAge` ) *  Maximum age ( `localMaxAge` ) *  Average age ( `localAveAge` ) *  Offer operation count ( `localOfferOperationCount` ) *  Rejected offer operation count ( `localRejectedOfferOperationCount` ) *  Poll operation count ( `localPollOperationCount` ) *  Empty poll operation count ( `localEmptyPollOperationCount` ) *  Other operation count ( `localOtherOperationsCount` ) *  Event operation count ( `localEventOperationCount` ) *  Clear ( `clear()` )  **Semaphore ( `ISemaphore` )**  *  Name ( `name` ) *  Available permits ( `available` ) *  Partition key ( `partitionKey` ) *  Drain ( `drain()`) *  Shrink available permits by given number ( `reduce(v)` ) *  Release given number of permits ( `release(v)` )  **Set ( `ISet` )**  *  Name ( `name` ) *  Partition key ( `partitionKey` ) *  Clear ( `clear()` )  **Topic ( `ITopic` )**  *  Name ( `name` ) *  Config ( `config` ) *  Creation time ( `localCreationTime` ) *  Publish operation count ( `localPublishOperationCount` ) *  Receive operation count ( `localReceiveOperationCount` )  **Hazelcast Instance ( `HazelcastInstance` )**  *  Name ( `name` ) *  Version ( `version` ) *  Build ( `build` ) *  Configuration ( `config` ) *  Configuration source ( `configSource` ) *  Group name ( `groupName` ) *  Network Port ( `port` ) *  Cluster-wide Time ( `clusterTime` ) *  Size of the cluster ( `memberCount` ) *  List of members ( `Members` ) *  Running state ( `running` ) *  Shutdown the member ( `shutdown()` )      *  **Node ( `HazelcastInstance.Node` )**     *  Address ( `address` )     *  Master address ( `masterAddress` )   * **Event Service ( `HazelcastInstance.EventService` )**    *  Event thread count  ( `eventThreadCount` )    *  Event queue size ( `eventQueueSize` )    *  Event queue capacity ( `eventQueueCapacity` )   * **Operation Service ( `HazelcastInstance.OperationService` )**    *  Response queue size  ( `responseQueueSize` )    *  Operation executor queue size ( `operationExecutorQueueSize` )    *  Running operation count ( `runningOperationsCount` )    *  Remote operation count ( `remoteOperationCount` )    *  Executed operation count ( `executedOperationCount` )    *  Operation thread count ( `operationThreadCount` )  * **Proxy Service ( `HazelcastInstance.ProxyService` )**    *  Proxy count ( `proxyCount` )  * **Partition Service ( `HazelcastInstance.PartitionService` )**    *  Partition count ( `partitionCount` )    *  Active partition count ( `activePartitionCount` )    *  Cluster Safe State ( `isClusterSafe` )    *  LocalMember Safe State ( `isLocalMemberSafe` )  * **Connection Manager ( `HazelcastInstance.ConnectionManager` )**    *  Client connection count ( `clientConnectionCount` )    *  Active connection count ( `activeConnectionCount` )    *  Connection count ( `connectionCount` )  * **Client Engine ( `HazelcastInstance.ClientEngine` )**    *  Client endpoint count ( `clientEndpointCount` )  * **System Executor ( `HazelcastInstance.ManagedExecutorService` )**    *  Name ( `name` )    *  Work queue size ( `queueSize` )    *  Thread count of the pool ( `poolSize` )    *  Maximum thread count of the pool ( `maximumPoolSize` )    *  Remaining capacity of the work queue ( `remainingQueueCapacity` )    *  Is shutdown ( `isShutdown` )    *  Is terminated ( `isTerminated` )    *  Completed task count ( `completedTaskCount` )     * **Operation Executor ( `HazelcastInstance.ManagedExecutorService` )**    *  Name ( `name` )    *  Work queue size ( `queueSize` )    *  Thread count of the pool ( `poolSize` )    *  Maximum thread count of the pool ( `maximumPoolSize` )    *  Remaining capacity of the work queue ( `remainingQueueCapacity` )    *  Is shutdown ( `isShutdown` )    *  Is terminated ( `isTerminated` )    *  Completed task count ( `completedTaskCount` )  * **Async Executor (`HazelcastInstance.ManagedExecutorService`)**    *  Name ( `name` )    *  Work queue size ( `queueSize` )    *  Thread count of the pool ( `poolSize` )    *  Maximum thread count of the pool ( `maximumPoolSize` )    *  Remaining capacity of the work queue ( `remainingQueueCapacity` )    *  Is shutdown ( `isShutdown` )    *  Is terminated ( `isTerminated` )    *  Completed task count ( `completedTaskCount` )  * **Scheduled Executor ( `HazelcastInstance.ManagedExecutorService` )**    *  Name ( `name` )    *  Work queue size ( `queueSize` )    *  Thread count of the pool ( `poolSize` )    *  Maximum thread count of the pool ( `maximumPoolSize` )    *  Remaining capacity of the work queue ( `remainingQueueCapacity` )    *  Is shutdown ( `isShutdown` )    *  Is terminated ( `isTerminated` )    *  Completed task count ( `completedTaskCount` )  * **Client Executor ( `HazelcastInstance.ManagedExecutorService` )**    *  Name ( `name` )    *  Work queue size ( `queueSize` )    *  Thread count of the pool ( `poolSize` )    *  Maximum thread count of the pool ( `maximumPoolSize` )    *  Remaining capacity of the work queue ( `remainingQueueCapacity` )    *  Is shutdown ( `isShutdown` )    *  Is terminated ( `isTerminated` )    *  Completed task count ( `completedTaskCount` )  * **Query Executor ( `HazelcastInstance.ManagedExecutorService` )**    *  Name ( `name` )    *  Work queue size ( `queueSize` )    *  Thread count of the pool ( `poolSize` )    *  Maximum thread count of the pool ( `maximumPoolSize` )    *  Remaining capacity of the work queue ( `remainingQueueCapacity` )    *  Is shutdown ( `isShutdown` )    *  Is terminated ( `isTerminated` )    *  Completed task count ( `completedTaskCount` )  * **IO Executor ( `HazelcastInstance.ManagedExecutorService` )**    *  Name ( `name` )    *  Work queue size ( `queueSize` )    *  Thread count of the pool ( `poolSize` )    *  Maximum thread count of the pool ( `maximumPoolSize` )    *  Remaining capacity of the work queue ( `remainingQueueCapacity` )    *  Is shutdown ( `isShutdown` )    *  Is terminated ( `isTerminated` )    *  Completed task count ( `completedTaskCount` )      "
});

documentTitles["index.html#monitoring-with-jmx"] = "Monitoring with JMX";
index.add({
    url: "index.html#monitoring-with-jmx",
    title: "Monitoring with JMX",
    body: "## Monitoring with JMX  You can monitor your Hazelcast members via the JMX protocol.  To achieve this, first add the following system properties to enable &lt;a href=\&quot;http://download.oracle.com/javase/1.5.0/docs/guide/management/agent.html\&quot; target=\&quot;_blank\&quot;&gt;JMX agent&lt;/a&gt;:     - `-Dcom.sun.management.jmxremote`    - `-Dcom.sun.management.jmxremote.port=\_portNo\_` (to specify JMX port, the default is `1099`) (*optional*)    - `-Dcom.sun.management.jmxremote.authenticate=false` (to disable JMX auth) (*optional*)   Then enable the Hazelcast property `hazelcast.jmx` (please refer to the [System Properties section](#system-properties)) using one of the following ways:  - By declarative configuration:     ``` &lt;properties&gt;    &lt;property name=\&quot;hazelcast.jmx\&quot;&gt;true&lt;/property&gt; &lt;/properties&gt;    ```  - By programmatic configuration:     `config.setProperty(\&quot;hazelcast.jmx\&quot;, \&quot;true\&quot;);`     - By Spring XML configuration:     ``` &lt;hz:properties&gt;   &lt;hz: property name=\&quot;hazelcast.jmx\&quot;&gt;true&lt;/hz:property&gt; &lt;/hz:properties&gt; ```     - By setting the system property `-Dhazelcast.jmx=true`      "
});

documentTitles["index.html#mbean-naming-for-hazelcast-data-structures"] = "MBean Naming for Hazelcast Data Structures";
index.add({
    url: "index.html#mbean-naming-for-hazelcast-data-structures",
    title: "MBean Naming for Hazelcast Data Structures",
    body: "### MBean Naming for Hazelcast Data Structures  Hazelcast set the naming convention for MBeans as follows:  ``` final ObjectName mapMBeanName = new ObjectName(\&quot;com.hazelcast:instance=_hzInstance_1_dev,type=IMap,name=trial\&quot;); ```  The MBeans name consists of the Hazelcast instance name, the type of the data structure, and that data structure's name. In the above sample, `_hzInstance_1_dev` is the instance name, we connect to an IMap with the name `trial`.     "
});

documentTitles["index.html#connecting-to-jmx-agent"] = "Connecting to JMX Agent";
index.add({
    url: "index.html#connecting-to-jmx-agent",
    title: "Connecting to JMX Agent",
    body: "### Connecting to JMX Agent  One of the ways you can connect to JMX agent is using jconsole, jvisualvm (with MBean plugin) or another JMX compliant monitoring tool.  The other way to connect is to use a custom JMX client.   First, you need to specify the URL where the Hazelcast JMX service is running. Please see the following sample code snippet. The `port` in this sample should be the one that you define while setting the JMX remote port number (if different than the default port `1099`).   ```java // Parameters for connecting to the JMX Service int port = 1099; String hostname = InetAddress.getLocalHost().getHostName(); JMXServiceURL url = new JMXServiceURL(\&quot;service:jmx:rmi://\&quot; + hostname + \&quot;:\&quot; + port + \&quot;/jndi/rmi://\&quot; + hostname + \&quot;:\&quot; + port + \&quot;/jmxrmi\&quot;); ```  Then use the URL you acquired to connect to the JMX service and get the `JMXConnector` object. Using this object, get the `MBeanServerConnection` object. The `MBeanServerConnection` object will enable you to use the MBean methods. Please see the example code below.   ```java // Connect to the JMX Service JMXConnector jmxc = JMXConnectorFactory.connect(url, null); MBeanServerConnection mbsc = jmxc.getMBeanServerConnection(); ```  Once you get the `MBeanServerConnection` object, you can call the getter methods of MBeans as follows:  ```java System.out.println(\&quot;\nTotal entries on map \&quot; + mbsc.getAttribute(mapMBeanName, \&quot;name\&quot;) + \&quot; : \&quot;                 + mbsc.getAttribute(mapMBeanName, \&quot;localOwnedEntryCount\&quot;)); ```                    "
});

documentTitles["index.html#cluster-utilities"] = "Cluster Utilities";
index.add({
    url: "index.html#cluster-utilities",
    title: "Cluster Utilities",
    body: "## Cluster Utilities  This section provides information on programmatic utilities you can use to listen to the cluster events, to change the state of your cluster, to check whether the cluster and/or members are safe before shutting down a member, and to define the minimum number of cluster members required for the cluster to remain up and running. It also gives information on the Hazelcast Lite Member.  "
});

documentTitles["index.html#getting-member-events-and-member-sets"] = "Getting Member Events and Member Sets";
index.add({
    url: "index.html#getting-member-events-and-member-sets",
    title: "Getting Member Events and Member Sets",
    body: "### Getting Member Events and Member Sets  Hazelcast allows you to register for membership events so you will be notified when members are added or removed. You can also get the set of cluster members.  The following example code does the above: registers for member events, notified when members are added or removed, and gets the set of cluster members.  ```java import com.hazelcast.core.*;  HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance(); Cluster cluster = hazelcastInstance.getCluster(); cluster.addMembershipListener( new MembershipListener() {   public void memberAdded( MembershipEvent membershipEvent ) {     System.out.println( \&quot;MemberAdded \&quot; + membershipEvent );   }    public void memberRemoved( MembershipEvent membershipEvent ) {     System.out.println( \&quot;MemberRemoved \&quot; + membershipEvent );   } } );  Member localMember  = cluster.getLocalMember(); System.out.println ( \&quot;my inetAddress= \&quot; + localMember.getInetAddress() );  Set setMembers  = cluster.getMembers(); for ( Member member : setMembers ) {   System.out.println( \&quot;isLocalMember \&quot; + member.localMember() );   System.out.println( \&quot;member.inetaddress \&quot; + member.getInetAddress() );   System.out.println( \&quot;member.port \&quot; + member.getPort() ); } ```  ***RELATED INFORMATION***  *Please refer to the [Membership Listener section](#listening-for-member-events) for more information on membership events.*      "
});

documentTitles["index.html#managing-cluster-and-member-states"] = "Managing Cluster and Member States";
index.add({
    url: "index.html#managing-cluster-and-member-states",
    title: "Managing Cluster and Member States",
    body: "### Managing Cluster and Member States  With the release of 3.6, Hazelcast introduces cluster and member states in addition to the default `ACTIVE` state. This section explains these states of Hazelcast clusters and members which you can use to allow or restrict the designated cluster/member operations.  "
});

documentTitles["index.html#cluster-states"] = "Cluster States";
index.add({
    url: "index.html#cluster-states",
    title: "Cluster States",
    body: "#### Cluster States  By changing the state of your cluster, you can allow/restrict several cluster operations or change the behavior of those operations. You can use the methods `changeClusterState()` and `shutdown()` which are in the &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/blob/master/hazelcast/src/main/java/com/hazelcast/core/Cluster.java\&quot; target=\&quot;_blank\&quot;&gt;Cluster interface&lt;/a&gt; to change your cluster's state.   Hazelcast clusters have the following states:  - **`ACTIVE`**: This is the default cluster state. Cluster continues to operate without restrictions. &lt;br&gt;&lt;/br&gt; - **`FROZEN`**:  	- In this state, the partition table is frozen and partition assignments are not performed.  	- Your cluster does not accept new members.  	- If a member leaves, it can join back. Its partition assignments (both primary and replica) remain the same until either it joins back or the cluster state is changed to `ACTIVE`. When it joins back to the cluster, it will own all previous partition assignments as it was. On the other hand, when the cluster state changes to `ACTIVE`, re-partitioning starts and unassigned partitions are assigned to the active members. 	- All other operations in the cluster, except migration, continue without restrictions. 	- You cannot change the state of a cluster to `FROZEN` when migration/replication tasks are being performed. &lt;br&gt;&lt;/br&gt; - **`PASSIVE`**: 	- In this state, the partition table is frozen and partition assignments are not performed.  	- Your cluster does not accept new members. 	- If a member leaves while the cluster is in this state, the member will be removed from the partition table if cluster state moves back to `ACTIVE`.  	- This state rejects ALL operations immediately EXCEPT the read-only operations like `map.get()` and `cache.get()`, replication and cluster heartbeat tasks.  	- You cannot change the state of a cluster to `PASSIVE` when migration/replication tasks are being performed. &lt;br&gt;&lt;/br&gt; - **`IN_TRANSITION`**:  	- This state shows that the state of the cluster is in transition.  	- You cannot set your cluster's state as `IN_TRANSITION` explicitly.  	- It is a temporary and intermediate state.  	- During this state, your cluster does not accept new members and migration/replication tasks are paused.   ![image](images/NoteSmall.jpg) ***NOTE:*** *All in-cluster methods are fail-fast, i.e. when a method fails in the cluster, it throws an exception immediately (it will not be retried).*   The following snippet is from the `Cluster` interface showing the new methods used to manage your cluster's states.   ```java public interface Cluster { ... ...     ClusterState getClusterState();     void changeClusterState(ClusterState newState);     void changeClusterState(ClusterState newState, TransactionOptions transactionOptions);     void shutdown();     void shutdown(TransactionOptions transactionOptions); ```  Please refer to the &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/blob/master/hazelcast/src/main/java/com/hazelcast/core/Cluster.java\&quot; target=\&quot;_blank\&quot;&gt;Cluster interface&lt;/a&gt; for information on these methods.  "
});

documentTitles["index.html#cluster-member-states"] = "Cluster Member States";
index.add({
    url: "index.html#cluster-member-states",
    title: "Cluster Member States",
    body: "#### Cluster Member States  Hazelcast cluster members have the following states:  - **`ACTIVE`**: This is the initial member state. The member can execute and process all operations. When the state of the cluster is `ACTIVE` or `FROZEN`, the members are in the `ACTIVE` state.  &lt;br&gt;&lt;/br&gt; - **`PASSIVE`**: In this state, member rejects all operations EXCEPT the read-only ones, replication and migration operations, heartbeat operations, and the join operations as explained in the [Cluster States section](#cluster-states) above. A member can go into this state when either of the following happens: 	1. Until the member's shutdown process is completed after the method `Node.shutdown(boolean)` is called. Note that, when the shutdown process is completed, member's state changes to `SHUT_DOWN`.  	2. Cluster's state is changed to `PASSIVE` using the method `changeClusterState()`.  &lt;br&gt;&lt;/br&gt; - **`SHUT_DOWN`**: A member goes into this state when the member's shutdown process is completed. The member in this state rejects all operations and invocations. A member in this state cannot be restarted. &lt;br&gt;&lt;/br&gt;       "
});

documentTitles["index.html#using-the-script-clustersh"] = "Using the Script cluster.sh";
index.add({
    url: "index.html#using-the-script-clustersh",
    title: "Using the Script cluster.sh",
    body: "### Using the Script cluster.sh  The script `cluster.sh` that comes with the Hazelcast package is used to get/change the state of your cluster, to shutdown your cluster and to force your cluster to clean its persisted data and make a fresh start. The latter is the Force Start operation of Hazelcast's Hot Restart Persistence feature. Please refer to the [Force Start section](#force-start). &lt;br&gt;&lt;/br&gt; ![image](images/NoteSmall.jpg) ***NOTE:*** *The script `cluster.sh` uses `curl` command and `curl` must be installed to be able to use the script.* &lt;br&gt;&lt;/br&gt;  The script `cluster.sh` needs the following parameters to operate according to your needs. If these parameters are not provided, the default values are used.  Parameter | Default Value | Description :--------------|:------|:------------ `-o` or `--operation`|`get-state`|Executes a cluster-wide operation. Operation can be `get-state`, `change-state`, `shutdown` and `force-start`. `-s` or `--state`|None|Updates the state of the cluster to a new state. New state can be `active`, `frozen`, `passive`. It is used with the operation `change-state` and has no default value. You should provide a valid state. `-a` or `--address`|`127.0.0.1`|Defines the IP address of a cluster member. If you want to manage your cluster remotely, you should provide the IP address of a member to the script. `-p` or `--port`|`5701`|Defines on which port Hazelcast is running on the local or remote machine. Its default value is `5701`. `-g` or `--groupname`|`dev`|Defines the name of a cluster group which is used for a simple authentication. Please see the [Creating Cluster Groups section](#creating-cluster-groups). `-P` or `--password`|`dev-pass`|Defines the password of a cluster group. Please see the [Creating Cluster Groups section](#creating-cluster-groups).  The script `cluster.sh` is self-documented; you can see the parameter descriptions using the command `sh cluster.sh -h` or `sh cluster.sh --help`.  &lt;br&gt;&lt;/br&gt; ![image](images/NoteSmall.jpg) ***NOTE:*** *You can perform the above operations using the Hot Restart tab of Hazelcast Management Center or using the REST API. Please see the [Hot Restart section](#hot-restart) and [Using REST API for Cluster Management section](#using-rest-api-for-cluster-management).* &lt;br&gt;&lt;/br&gt;   "
});

documentTitles["index.html#example-usages-for-clustersh"] = "Example Usages for cluster.sh";
index.add({
    url: "index.html#example-usages-for-clustersh",
    title: "Example Usages for cluster.sh",
    body: "#### Example Usages for cluster.sh  Let's say you have a cluster running on remote machines and one Hazelcast member is running on the IP  `172.16.254.1` and on the port `5702`. Group name and password of the cluster is `test/test`.  &lt;br&gt;&lt;/br&gt; **Getting the cluster state:**  To get the state of the cluster, use the following command:  `sh cluster.sh -o get-state -a 172.16.254.1 -p 5702 -g test -P test`  The following also gets the cluster state, using the alternative parameter names (e.g. `--port` instead of `-p`):  `sh cluster.sh --operation get-state --address 172.16.254.1 --port 5702 --groupname test --password test`  &lt;br&gt;&lt;/br&gt; **Changing the cluster state:**  To change the state of the cluster to `frozen`, use the following command:  `sh cluster.sh -o change-state -s frozen -a 172.16.254.1 -p 5702 -g test -P test`  Similarly, you can use the following command for the same purpose:  `sh cluster.sh --operation change-state --state frozen --address 172.16.254.1 --port 5702 --groupname test --password test`   &lt;br&gt;&lt;/br&gt; **Shutting down the cluster:**  To shutdown the cluster, use the following command:  `sh cluster.sh -o shutdown -a 172.16.254.1 -p 5702 -g test -P test`  Similarly, you can use the following command for the same purpose:   `sh cluster.sh --operation shutdown --address 172.16.254.1 --port 5702 --groupname test --password test`   &lt;br&gt;&lt;/br&gt; **Force starting the cluster:**  To force start the cluster, use the following command:  `sh cluster.sh -o force-start -a 172.16.254.1 -p 5702 -g test -P test`  Similarly, you can use the following command for the same purpose:  `sh cluster.sh --operation force-start --address 172.16.254.1 --port 5702 --groupname test --password test`   &lt;br&gt;&lt;/br&gt; ![image](images/NoteSmall.jpg) ***NOTE:*** *Currently, this script is not supported on the Windows platforms.* &lt;br&gt;&lt;/br&gt;      "
});

documentTitles["index.html#using-rest-api-for-cluster-management"] = "Using REST API for Cluster Management";
index.add({
    url: "index.html#using-rest-api-for-cluster-management",
    title: "Using REST API for Cluster Management",
    body: "### Using REST API for Cluster Management  Besides the Management Center's Hot Restart tab and the script `cluster.sh`, you can also use REST API to manage your cluster's state. The following are the commands you can use.  &lt;br&gt;&lt;/br&gt; **Getting the cluster state:**  To get the state of the cluster, use the following command:  ``` curl --data \&quot;${GROUPNAME}&amp;${PASSWORD}\&quot; http://127.0.0.1:5701/hazelcast/rest/management/cluster/state ```  &lt;br&gt;&lt;/br&gt; **Changing the cluster state:**  To change the state of the cluster to `frozen`, use the following command:  ``` curl --data \&quot;${GROUPNAME}&amp;${PASSWORD}&amp;${STATE}\&quot; http://127.0.0.1:${PORT}/hazelcast/rest/management/cluster/changeState  ```   &lt;br&gt;&lt;/br&gt; **Shutting down the cluster:**  To shutdown the cluster, use the following command:  ``` curl --data \&quot;${GROUPNAME}&amp;${PASSWORD}\&quot;  http://127.0.0.1:${PORT}/hazelcast/rest/management/cluster/shutdown ```   &lt;br&gt;&lt;/br&gt; **Force starting the cluster:**  To force start the cluster, use the following command:  ``` curl --data \&quot;${GROUPNAME}&amp;${PASSWORD}\&quot; http://127.0.0.1:${PORT}/hazelcast/rest/management/cluster/forceStart/ ```   &lt;br&gt;&lt;/br&gt; ![image](images/NoteSmall.jpg) ***NOTE:*** *You can also perform the above operations using the Hot Restart tab of Hazelcast Management Center or using the script `cluster.sh`. Please see the [Hot Restart section](#hot-restart) and [Using the Script cluster.sh section](#using-the-script-cluster-sh).* &lt;br&gt;&lt;/br&gt;         "
});

documentTitles["index.html#enabling-lite-members"] = "Enabling Lite Members";
index.add({
    url: "index.html#enabling-lite-members",
    title: "Enabling Lite Members",
    body: "### Enabling Lite Members  Lite members are the Hazelcast cluster members that do not store data. These members are used mainly to execute tasks and register listeners, and they do not have partitions.  You can form your cluster to include the regular Hazelcast members to store data and Hazelcast lite members to run heavy computations. The presence of the lite members do not affect the operations performed on the other members in the cluster. You can directly submit your tasks to the lite members, register listeners on them and invoke operations for the Hazelcast data structures on them (e.g. `map.put()` and `map.get()`).  "
});

documentTitles["index.html#configuring-lite-members"] = "Configuring Lite Members";
index.add({
    url: "index.html#configuring-lite-members",
    title: "Configuring Lite Members",
    body: "#### Configuring Lite Members  You can enable a cluster member to be a lite member using declarative or programmatic configuration.   "
});

documentTitles["index.html#declarative-configuration"] = "Declarative Configuration";
index.add({
    url: "index.html#declarative-configuration",
    title: "Declarative Configuration",
    body: "##### Declarative Configuration  ```xml &lt;hazelcast&gt;     &lt;lite-member enabled=\&quot;true\&quot;&gt; &lt;/hazelcast&gt; ```  "
});

documentTitles["index.html#programmatic-configuration"] = "Programmatic Configuration";
index.add({
    url: "index.html#programmatic-configuration",
    title: "Programmatic Configuration",
    body: "##### Programmatic Configuration  ```java Config config = new Config(); config.setLiteMember(true); ```  ![image](images/NoteSmall.jpg) ***NOTE:*** *Note that you cannot change a member's role at runtime.*          "
});

documentTitles["index.html#defining-member-attributes"] = "Defining Member Attributes";
index.add({
    url: "index.html#defining-member-attributes",
    title: "Defining Member Attributes",
    body: "### Defining Member Attributes  You can define various member attributes on your Hazelcast members. You can use these member attributes to tag your members as your business logic requirements.  To define member attribute on a member, you can either:  - provide `MemberAttributeConfig` to your `Config` object,  - or provide member attributes at runtime via attribute setter methods on the `Member` interface.  For example, you can tag your members with their CPU characteristics and you can route CPU intensive tasks to those CPU-rich members.  ```java MemberAttributeConfig fourCore = new MemberAttributeConfig(); memberAttributeConfig.setIntAttribute( \&quot;CPU_CORE_COUNT\&quot;, 4 ); MemberAttributeConfig twelveCore = new MemberAttributeConfig(); memberAttributeConfig.setIntAttribute( \&quot;CPU_CORE_COUNT\&quot;, 12 ); MemberAttributeConfig twentyFourCore = new MemberAttributeConfig(); memberAttributeConfig.setIntAttribute( \&quot;CPU_CORE_COUNT\&quot;, 24 );  Config member1Config = new Config(); config.setMemberAttributeConfig( fourCore ); Config member2Config = new Config(); config.setMemberAttributeConfig( twelveCore ); Config member3Config = new Config(); config.setMemberAttributeConfig( twentyFourCore );  HazelcastInstance member1 = Hazelcast.newHazelcastInstance( member1Config ); HazelcastInstance member2 = Hazelcast.newHazelcastInstance( member2Config ); HazelcastInstance member3 = Hazelcast.newHazelcastInstance( member3Config );  IExecutorService executorService = member1.getExecutorService( \&quot;processor\&quot; );  executorService.execute( new CPUIntensiveTask(), new MemberSelector() {   @Override   public boolean select(Member member) {     int coreCount = (int) member.getIntAttribute( \&quot;CPU_CORE_COUNT\&quot; );     // Task will be executed at either member2 or member3     if ( coreCount &gt; 8 ) {        return true;     }     return false;   } } );  HazelcastInstance member4 = Hazelcast.newHazelcastInstance(); // We can also set member attributes at runtime. member4.setIntAttribute( \&quot;CPU_CORE_COUNT\&quot;, 2 ); ```     "
});

documentTitles["index.html#safety-checking-cluster-members"] = "Safety Checking Cluster Members";
index.add({
    url: "index.html#safety-checking-cluster-members",
    title: "Safety Checking Cluster Members",
    body: "### Safety Checking Cluster Members  To prevent data loss when shutting down a cluster member, Hazelcast provides a graceful shutdown feature. You perform this shutdown by calling the method `HazelcastInstance.shutdown()`. Once this method is called, it checks the following conditions to ensure the member is safe to shutdown.  - There is no active migration. - At least one backup of partitions are synced with primary ones.  Even if the above conditions are not met, `HazelcastInstance.shutdown()` will force them to be completed. When this method eventually returns, the member has been brought to a safe state and it can be shut down without any data loss.   "
});

documentTitles["index.html#ensuring-safe-state-with-partitionservice"] = "Ensuring Safe State with PartitionService";
index.add({
    url: "index.html#ensuring-safe-state-with-partitionservice",
    title: "Ensuring Safe State with PartitionService",
    body: "#### Ensuring Safe State with PartitionService  What if you want to be sure that your **cluster** is in a safe state, as in safe to shutdown without any data loss? For example, you may have some use cases like rolling upgrades, development/testing, or other logic that requires a cluster/member to be safe.   To provide this safety, Hazelcast offers the `PartitionService` interface with the methods `isClusterSafe`, `isMemberSafe`, `isLocalMemberSafe` and `forceLocalMemberToBeSafe`. These methods can be deemed as decoupled pieces from the method `Hazelcast.shutdown`.    ```java public interface PartitionService {    ...    ...     boolean isClusterSafe();     boolean isMemberSafe(Member member);     boolean isLocalMemberSafe();     boolean forceLocalMemberToBeSafe(long timeout, TimeUnit unit); } ```  The method `isClusterSafe` checks whether the cluster is in a safe state. It returns `true` if there are no active partition migrations and there are sufficient backups for each partition. Once it returns `true`, the cluster is safe and a node can be shut down without data loss.  The method `isMemberSafe` checks whether a specific member is in a safe state. This check controls if the first backups of partitions of the given member are synced with the primary ones. Once it returns `true`, the given member is safe and it can be shut down without data loss.   Similarly, the method `isLocalMemberSafe` does the same check for the local member. The method `forceLocalMemberToBeSafe` forces the owned and backup partitions to be synchronized, making the local member safe.  ![image](images/NoteSmall.jpg) ***NOTE:*** *These methods are available starting with Hazelcast 3.3.*   "
});

documentTitles["index.html#example-partitionservice-code"] = "Example PartitionService Code";
index.add({
    url: "index.html#example-partitionservice-code",
    title: "Example PartitionService Code",
    body: "#### Example PartitionService Code   ```java PartitionService partitionService = hazelcastInstance.getPartitionService(); if (partitionService.isClusterSafe()) {   hazelcastInstance.shutdown(); // or terminate } ```  OR   ```java PartitionService partitionService = hazelcastInstance.getPartitionService(); if (partitionService.isLocalMemberSafe()) {   hazelcastInstance.shutdown(); // or terminate } ``` &lt;br&gt;&lt;/br&gt; ***RELATED INFORMATION***  *For more code samples please refer to &lt;a href=\&quot;https://github.com/hazelcast/hazelcast-code-samples/tree/master/monitoring/cluster/src/main/java\&quot; target=\&quot;_blank\&quot;&gt;PartitionService Code Samples&lt;/a&gt;*. &lt;br&gt;&lt;/br&gt;   "
});

documentTitles["index.html#defining-a-cluster-quorum"] = "Defining a Cluster Quorum";
index.add({
    url: "index.html#defining-a-cluster-quorum",
    title: "Defining a Cluster Quorum",
    body: "### Defining a Cluster Quorum  Hazelcast Cluster Quorum enables you to define the minimum number of machines required in a cluster for the cluster to remain in an operational state. If the number of machines is below the defined minimum at any time, the operations are rejected and the rejected operations return a `QuorumException` to their callers.  When a network partitioning happens, by default Hazelcast chooses to be available. With Cluster Quorum, you can tune your Hazelcast instance towards achieving better consistency by rejecting updates that do not pass a minimum threshold. This reduces the chance of concurrent updates to an entry from two partitioned clusters. Note that the consistency defined here is the best effort, it is not full or strong consistency. To prevent mutative operations in case of a split brain syndrome, you can define a minimum quorum that must be present in the cluster.  Hazelcast initiates a quorum when a change happens on the member list.  ![image](images/NoteSmall.jpg) ***NOTE:*** *Currently, cluster quorum only applies to the Map, Transactional Map and Cache; support for other data structures will be added soon. Also, lock methods in the IMap interface do not participate in a quorum.*   "
});

documentTitles["index.html#configuring-a-cluster-quorum"] = "Configuring a Cluster Quorum";
index.add({
    url: "index.html#configuring-a-cluster-quorum",
    title: "Configuring a Cluster Quorum",
    body: "#### Configuring a Cluster Quorum  You can set up Cluster Quorum using either declarative or programmatic configuration.  Assume that you have a 5-member Hazelcast Cluster and you want to set the minimum number of 3 members for the cluster to continue operating. The following examples are configurations for this scenario.  **Declarative:**  ```xml &lt;hazelcast&gt; .... &lt;quorum name=\&quot;quorumRuleWithThreeMembers\&quot; enabled=\&quot;true\&quot;&gt;   &lt;quorum-size&gt;3&lt;/quorum-size&gt; &lt;/quorum&gt;  &lt;map name=\&quot;default\&quot;&gt; &lt;quorum-ref&gt;quorumRuleWithThreeNodes&lt;/quorum-ref&gt; &lt;/map&gt; .... &lt;/hazelcast&gt;  ```  **Programmatic:**  ```java QuorumConfig quorumConfig = new QuorumConfig(); quorumConfig.setName(\&quot;quorumRuleWithThreeNodes\&quot;) quorumConfig.setEnabled(true); quorumConfig.setSize(3);  MapConfig mapConfig = new MapConfig(); mapConfig.setQuorumName(\&quot;quorumRuleWithThreeNodes\&quot;);  Config config = new Config(); config.addQuorumConfig(quorumConfig); config.addMapConfig(mapConfig);  ```  Quorum configuration has the following elements.   - `quorum-size`: Minimum number of members required in a cluster for the cluster to remain in an operational state. If the number of members is below the defined minimum at any time, the operations are rejected and the rejected operations return a QuorumException to their callers. - `quorum-type`: Type of the cluster quorum. Available values are READ, WRITE and READ_WRITE.    "
});

documentTitles["index.html#configuring-quorum-listeners"] = "Configuring Quorum Listeners";
index.add({
    url: "index.html#configuring-quorum-listeners",
    title: "Configuring Quorum Listeners",
    body: "#### Configuring Quorum Listeners  You can register quorum listeners to be notified about quorum results. Quorum listeners are local to the member where they are registered, so they receive only events that occurred on that local member.  Quorum listeners can be configured via declarative or programmatic configuration. The following examples are such configurations.  **Declarative:**  ```xml &lt;hazelcast&gt; .... &lt;quorum name=\&quot;quorumRuleWithThreeMembers\&quot; enabled=\&quot;true\&quot;&gt;   &lt;quorum-size&gt;3&lt;/quorum-size&gt;   &lt;quorum-listeners&gt;     &lt;quorum-listener&gt;com.company.quorum.ThreeMemberQuorumListener&lt;/quorum-listener&gt;   &lt;/quorum-listeners&gt; &lt;/quorum&gt;  &lt;map name=\&quot;default\&quot;&gt;   &lt;quorum-ref&gt;quorumRuleWithThreeMembers&lt;/quorum-ref&gt; &lt;/map&gt; .... &lt;/hazelcast&gt; ```  **Programmatic:**  ```java QuorumListenerConfig listenerConfig = new QuorumListenerConfig(); // You can either directly set quorum listener implementation of your own listenerConfig.setImplementation(new QuorumListener() {             @Override             public void onChange(QuorumEvent quorumEvent) {               if (QuorumResult.PRESENT.equals(quorumEvent.getType())) {                 // handle quorum presence               } else if (QuorumResult.ABSENT.equals(quorumEvent.getType())) {                 // handle quorum absence               }             }         }); // Or you can give the name of the class that implements QuorumListener interface. listenerConfig.setClassName(\&quot;com.company.quorum.ThreeMemberQuorumListener\&quot;);  QuorumConfig quorumConfig = new QuorumConfig(); quorumConfig.setName(\&quot;quorumRuleWithThreeMembers\&quot;) quorumConfig.setEnabled(true); quorumConfig.setSize(3); quorumConfig.addListenerConfig(listenerConfig);   MapConfig mapConfig = new MapConfig(); mapConfig.setQuorumName(\&quot;quorumRuleWithThreeMembers\&quot;);  Config config = new Config(); config.addQuorumConfig(quorumConfig); config.addMapConfig(mapConfig); ```     "
});

documentTitles["index.html#querying-quorum-results"] = "Querying Quorum Results";
index.add({
    url: "index.html#querying-quorum-results",
    title: "Querying Quorum Results",
    body: "#### Querying Quorum Results  Quorum service gives you the ability to query quorum results over the `Quorum` instances. Quorum instances let you query the quorum result of a particular quorum.  Here is a Quorum interface that you can interact with.  ```java /**  * {@link Quorum} provides access to the current status of a quorum.  */ public interface Quorum {     /**      * Returns true if quorum is present, false if absent.      *      * @return boolean presence of the quorum      */     boolean isPresent(); } ``` You can retrieve the quorum instance for a particular quorum over the quorum service, as in the following example.  ```java String quorumName = \&quot;at-least-one-storage-member\&quot;; QuorumConfig quorumConfig = new QuorumConfig(); quorumConfig.setName(quorumName) quorumConfig.setEnabled(true);  MapConfig mapConfig = new MapConfig(); mapConfig.setQuorumName(quorumName);  Config config = new Config(); config.addQuorumConfig(quorumConfig); config.addMapConfig(mapConfig);  HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance(config); QuorumService quorumService = hazelcastInstance.getQuorumService(); Quorum quorum = quorumService.getQuorum(quorumName);  boolean quorumPresence = quorum.isPresent();  ```    "
});

documentTitles["index.html#management-center"] = "Management Center";
index.add({
    url: "index.html#management-center",
    title: "Management Center",
    body: "## Management Center  Hazelcast Management Center enables you to monitor and manage your cluster members running Hazelcast. In addition to monitoring overall state of your clusters, you can also analyze and browse your data structures in detail, update map configurations and take thread dumps from members. With its scripting and console module, you can run scripts (JavaScript, Groovy, etc.) and commands on your members.  "
});

documentTitles["index.html#installing-management-center"] = "Installing Management Center";
index.add({
    url: "index.html#installing-management-center",
    title: "Installing Management Center",
    body: "### Installing Management Center  You have two options for installing Hazelcast Management Center: - deploy the `mancenter`-*version*`.war` application into your Java application server/container, - or start Hazelcast Management Center from the command line and then have the Hazelcast cluster members communicate with that web application. This means that your members should know the URL of the `mancenter` application before they start.  Here are the steps.  - Download the latest Hazelcast ZIP from &lt;a href=\&quot;http://www.hazelcast.org/download/\&quot; target=\&quot;_blank\&quot;&gt;hazelcast.org&lt;/a&gt;. The ZIP contains the `mancenter`-*version*`.war` file. - You can directly start `mancenter`-*version*`.war` file from the command line. The following command will start Hazelcast Management Center on port 8080 with context root 'mancenter' (`http://localhost:8080/mancenter`).  ```java java -jar mancenter-*version*.war 8080 mancenter ```  - Or, instead of starting at the command line, you can deploy it to your web server (Tomcat, Jetty, etc.). Let us say it is running at `http://localhost:8080/mancenter`. - After you perform the above steps, make sure that `http://localhost:8080/mancenter` is up. - Configure your Hazelcast members by adding the URL of your web application to your `hazelcast.xml`. Hazelcast members will send their states to this URL.  ```xml &lt;management-center enabled=\&quot;true\&quot;&gt;     http://localhost:8080/mancenter &lt;/management-center&gt; ```  - You can also set a frequency (in seconds) for which Management Center will take information from the Hazelcast cluster, using the element `update-interval` as shown below. `update-interval` is optional and its default value is 3 seconds.  ```xml &lt;management-center enabled=\&quot;true\&quot; update-interval=\&quot;3\&quot;&gt;http://localhost:8080/ mancenter&lt;/management-center&gt; ```   - Start your Hazelcast cluster. - Browse to `http://localhost:8080/mancenter` and setup your [administrator account](#getting-started-to-management-center) explained in the next section.  "
});

documentTitles["index.html#getting-started-to-management-center"] = "Getting Started to Management Center";
index.add({
    url: "index.html#getting-started-to-management-center",
    title: "Getting Started to Management Center",
    body: "### Getting Started to Management Center    If you have the open source edition of Hazelcast, Management Center can be used for at most 2 members in the cluster. To use it for more members, you need to have either a Management Center license, Hazelcast Enterprise license or Hazelcast Enterprise HD license. This license should be entered within the Management Center as described in the following paragraphs.  ![image](images/NoteSmall.jpg) ***NOTE:*** *Even if you have a Hazelcast Enterprise or Enterprise HD license key and you set it as explained in the [Setting the License Key](#setting-the-license-key) section, you still need to enter this same license within the Management Center. Please see the following paragraphs to learn how you can enter your license.* &lt;br&gt;&lt;/br&gt;   Once you browse to `http://localhost:8080/mancenter` and since you are going to use Management Center for the first time, the following dialog box appears.  &lt;img src=\&quot;images/SignUp-Popup.jpg\&quot; alt=\&quot;Signup\&quot; style=\&quot;width:413px;height:345px;\&quot;&gt;   ![image](images/NoteSmall.jpg) ***NOTE:*** *If you already created an administrator account before, a login dialog box appears instead.*   It asks you to create a username and password and give a valid e-mail address of yours. Once you press the **Sign Up** button, your administrator account credentials are created and the following dialog box appears.   &lt;img src=\&quot;images/ConnectCluster.jpg\&quot; alt=\&quot;Connect to Cluster\&quot; style=\&quot;width:313px;height:243px;\&quot;&gt;   \&quot;Select Cluster to Connect\&quot; dialog box lists the clusters that send statistics to Management Center. You can either select a cluster to connect using the **Connect** button or enter your Management Center license key using the **Enter License** button. Management Center can be used without a license if the cluster that you want to monitor has at most 2 members.  If you have a Management Center license or Hazelcast Enterprise license, you can enter it in the dialog box that appears once you press the **Enter License** button, as shown below.   &lt;img src=\&quot;images/EnterLicense.jpg\&quot; alt=\&quot;Enter License\&quot; style=\&quot;width:312px;height:244px;\&quot;&gt;   When you try to connect to a cluster that has more than 2 members without entering a license key or if your license key is expired, the following dialog box appears.  &lt;img src=\&quot;images/ExpiredLicense.jpg\&quot; alt=\&quot;License Warning\&quot; style=\&quot;width:313px;height:244px;\&quot;&gt;   Here, you can either choose to connect to a cluster without providing a license key or to enter your license key. If you choose to continue without a license, Management Center still continues to function but you will only be able to monitor up to 2 members of your cluster.  Management Center creates a folder with the name `mancenter` under your `user/home` folder to save data files and above settings/license information. You can change the data folder by setting the `hazelcast.mancenter.home` system property. Please see the [System Properties section](#system-properties) to see the description of this property and to learn how to set a system property.  &lt;br&gt;&lt;/br&gt;  ***RELATED INFORMATION***  *Please refer to the [Management Center Configuration section](#management-center-configuration) for a full description of Hazelcast Management Center configuration.*   "
});

documentTitles["index.html#management-center-tools"] = "Management Center Tools";
index.add({
    url: "index.html#management-center-tools",
    title: "Management Center Tools",
    body: "### Management Center Tools  Once the page is loaded after selecting a cluster, the tool's home page appears as shown below.  ![](images/NonHostedMCHomePage.jpg)  This page provides the fundamental properties of the selected cluster which are explained in the [Home Page](#management-center-home-page) section. The page has a toolbar on the top and a menu on the left.  "
});

documentTitles["index.html#toolbar"] = "Toolbar";
index.add({
    url: "index.html#toolbar",
    title: "Toolbar",
    body: "#### Toolbar  ![](images/Toolbar.png)  The toolbar has the following buttons:  -	**Home**: Loads the home page shown above. Please see the [Management Center Home Page section](#management-center-home-page). -	**Scripting**: Loads the page used to write and execute the user`s own scripts on the cluster. Please see the [Scripting section](#scripting). -	**Console**: Loads the page used to execute commands on the cluster. Please see the [Console section](#executing-console-commands). -	**Alerts**: Creates alerts by specifying filters. Please see the [Setting Alerts section](#creating-alerts). -	**Documentation**: Opens the Management Center documentation in a window inside the tool. Please see the [Documentation section](#management-center-documentation). -	**Administration**: Used by the admin users to manage users in the system. Please see the [Administering Management Center section](#administering-management-center). -	**Logout**: Closes the current user's session. -	**Hot Restart**: Used by the admin users to manage cluster state. Please see the [Hot Restart section](#hot-restart). -	**Time Travel**: Sees the cluster's situation at a time in the past. Please see the [Time Travel section](#checking-past-status-with-time-travel). -	**Cluster Selector**: Switches between clusters. When the mouse is moved onto this item, a drop down list of clusters appears.    ![](images/4ChangeCluster.jpg)    The user can select any cluster and once selected, the page immediately loads with the selected cluster's information.   ![image](images/NoteSmall.jpg) ***NOTE:*** *Some of the above listed toolbar items are not visible to users who are not admin or who have **read-only** permission. Also, some of the operations explained in the later sections cannot be performed by users with read-only permission. Please see the [Administering Management Center section](#administering-management-center) for details.*  "
});

documentTitles["index.html#menu"] = "Menu";
index.add({
    url: "index.html#menu",
    title: "Menu",
    body: "#### Menu  The Home Page includes a menu on the left which lists the distributed data structures in the cluster and all the cluster members, as shown below.  ![](images/LeftMenu.png)  ![image](images/NoteSmall.jpg) ***NOTE:*** *Distributed data structures will be shown there when the proxies are created for them.*  ![image](images/NoteSmall.jpg) ***NOTE:*** *WAN Replication tab is only visible with &lt;font color=\&quot;#3981DB\&quot;&gt;**Hazelcast Enterprise**&lt;/font&gt; license.*  You can expand and collapse menu items by clicking on them. Below is the list of menu items with links to their explanations.  -	[Caches](#monitoring-caches) -	[Maps](#managing-maps) - [Replicated Maps](#monitoring-replicated-maps) -	[Queues](#monitoring-queues) -	[Topics](#monitoring-topics) -	[MultiMaps](#monitoring-multimaps) -	[Executors](#monitoring-executors) - [WAN](#monitoring-wan-replication) -	[Members](#monitoring-members)  "
});

documentTitles["index.html#tabbed-view"] = "Tabbed View";
index.add({
    url: "index.html#tabbed-view",
    title: "Tabbed View",
    body: "#### Tabbed View  Each time you select an item from the toolbar or menu, the item is added to the main view as a tab, as shown below.  ![](images/NonHMCTabbedView.jpg)  In the above example, *Home*, *Scripting*, *Console*, *queue1* and *map1* windows can be seen as tabs. Windows can be closed using the ![](images/CloseIcon.jpg) icon on each tab (except the Home Page; it cannot be closed).   "
});

documentTitles["index.html#management-center-home-page"] = "Management Center Home Page";
index.add({
    url: "index.html#management-center-home-page",
    title: "Management Center Home Page",
    body: "### Management Center Home Page  This is the first page appearing after logging in. It gives an overview of the connected cluster. The following subsections describe each portion of the page.  "
});

documentTitles["index.html#cpu-utilization"] = "CPU Utilization";
index.add({
    url: "index.html#cpu-utilization",
    title: "CPU Utilization",
    body: "#### CPU Utilization  This part of the page provides load and utilization information for the CPUs for each node (cluster member), as shown below.  ![](images/NonHMCCPUUtil.jpg)  The first column lists the nodes with their IPs and ports. The next columns list the system load averages on each node for the last 1, 5 and 15 minutes. These average values are calculated as the sum of the count of runnable entities running on and queued to the available CPUs averaged over the last 1, 5 and 15 minutes. This calculation is operating system specific, typically a damped time-dependent average. If system load average is not available, these columns show negative values.  The last column (**Chart**) graphically shows the recent load on the CPUs. When you move the mouse cursor on a chart, you can see the CPU load at the time where the cursor is placed. Charts under this column shows the CPU loads approximately for the last 2 minutes. If recent CPU load is not available, you will see a negative value.  "
});

documentTitles["index.html#memory-utilization"] = "Memory Utilization";
index.add({
    url: "index.html#memory-utilization",
    title: "Memory Utilization",
    body: "#### Memory Utilization  This part of the page provides information related to memory usages for each node (cluster member), as shown below.  ![](images/NonHMCMemoryUtil.jpg)  The first column lists the nodes with their IPs and ports. The next columns show the used and free memories out of the total memory reserved for Hazelcast usage, in real-time. The **Max** column lists the maximum memory capacity of each node and the **Percent** column lists the percentage value of used memory out of the maximum memory. The last column (**Chart**) shows the memory usage of nodes graphically. When you move the mouse cursor on a desired graph, you can see the memory usage at the time where the cursor is placed. Graphs under this column shows the memory usages approximately for the last 2 minutes.  "
});

documentTitles["index.html#memory-distribution"] = "Memory Distribution";
index.add({
    url: "index.html#memory-distribution",
    title: "Memory Distribution",
    body: "#### Memory Distribution  This part of the page graphically provides the cluster wise breakdown of memory, as shown below. The blue area is the memory used by maps. The dark yellow area is the memory used by both non-Hazelcast entities and all Hazelcast entities except the map (i.e. the memory used by all entities subtracted by the memory used by map). The green area is the free memory out of the whole cluster`s memory capacity.  ![](images/Home-MemoryDistribution.jpg)  In the above example, you can see 0.32% of the total memory is used by Hazelcast maps (it can be seen by placing the mouse cursor on it), 58.75% is used by non-Hazelcast entities and 40.85% of the total memory is free.  "
});

documentTitles["index.html#map-memory-distribution"] = "Map Memory Distribution";
index.add({
    url: "index.html#map-memory-distribution",
    title: "Map Memory Distribution",
    body: "#### Map Memory Distribution  This part is the breakdown of the blue area shown in the **Memory Distribution** graph explained above. It provides the percentage values of the memories used by each map, out of the total cluster memory reserved for all Hazelcast maps.  ![](images/Home-MapMemoryDistribution.jpg)  In the above example, you can see 49.55% of the total map memory is used by **map1** and 49.55% is used by **map2**.  "
});

documentTitles["index.html#partition-distribution"] = "Partition Distribution";
index.add({
    url: "index.html#partition-distribution",
    title: "Partition Distribution",
    body: "#### Partition Distribution  This pie chart shows what percentage of partitions each node (cluster member) has, as shown below.  ![](images/Home-PartitionDistribution.jpg)  You can see each node's partition percentages by placing the mouse cursor on the chart. In the above example, you can see the node \&quot;127.0.0.1:5708\&quot; has 5.64% of the total partition count (which is 271 by default and configurable, please see the `hazelcast.partition.count` property explained in the [System Properties section](#system-properties)).   "
});

documentTitles["index.html#monitoring-caches"] = "Monitoring Caches";
index.add({
    url: "index.html#monitoring-caches",
    title: "Monitoring Caches",
    body: "### Monitoring Caches  You can monitor your caches' metrics by clicking the cache name listed on the left panel under **Caches** menu item. A new tab for monitoring that cache instance is opened on the right, as shown below.  ![](images/ManCenter-Caches.jpg)  On top of the page, four charts monitor the **Gets**, **Puts**, **Removals** and **Evictions** in real-time. The X-axis of all the charts show the current system time. To open a chart as a separate dialog, click on the ![](images/MaximizeChart.jpg) button placed at the top right of each chart.  Under these charts is the Cache Statistics Data Table. From left to right, this table lists the IP addresses and ports of each member, and the get, put, removal, eviction, and hit and miss counts per second in real-time.  You can navigate through the pages using the buttons at the bottom right of the table (**First, Previous, Next, Last**). You can ascend or descend the order of the listings in each column by clicking on column headings.  ![image](images/NoteSmall.jpg) ***NOTE:*** *You need to enable the statistics for caches to monitor them in the Management Center. Use the `&lt;statistics-enabled&gt;` element or `setStatisticsEnabled()` method in declarative or programmatic configuration, respectively, to enable the statistics. Please refer to the [JCache Declarative Configuration section](#jcache-declarative-configuration) for more information.*    "
});

documentTitles["index.html#managing-maps"] = "Managing Maps";
index.add({
    url: "index.html#managing-maps",
    title: "Managing Maps",
    body: "### Managing Maps  Map instances are listed under the **Maps** menu item on the left. When you click on a map, a new tab for monitoring that map instance opens on the right, as shown below. In this tab, you can monitor metrics and also re-configure the selected map.  ![](images/MapsHome.jpg)  The below subsections explain the portions of this window.  "
});

documentTitles["index.html#map-browser"] = "Map Browser";
index.add({
    url: "index.html#map-browser",
    title: "Map Browser",
    body: "#### Map Browser  Use the Map Browser tool to retrieve properties of the entries stored in the selected map. To open the Map Browser tool, click on the **Map Browser** button, located at the top right of the window. Once opened, the tool appears as a dialog, as shown below.  ![](images/Map-MapBrowser.jpg)  Once the key and the key's type are specified and the **Browse** button is clicked, the key's properties along with its value are listed.  "
});

documentTitles["index.html#map-config"] = "Map Config";
index.add({
    url: "index.html#map-config",
    title: "Map Config",
    body: "#### Map Config  Use the Map Config tool to set the selected map's attributes, such as the backup count, TTL, and eviction policy. To open the Map Config tool, click on the **Map Config** button, located at the top right of the window. Once opened, the tool appears as a dialog, as shown below.  ![](images/Map-MapConfig.jpg)  You can change any attribute and click the **Update** button to save your changes.   "
});

documentTitles["index.html#map-monitoring"] = "Map Monitoring";
index.add({
    url: "index.html#map-monitoring",
    title: "Map Monitoring",
    body: "#### Map Monitoring  Besides the Map Browser and Map Config tools, the map monitoring page has monitoring options that are explained below. All of these options perform real-time monitoring.  On top of the page, small charts monitor the size, throughput, memory usage, backup size, etc. of the selected map in real-time. The X-axis of all the charts show the current system time. You can select other small monitoring charts using the ![](images/ChangeWindowIcon.jpg) button at the top right of each chart. When you click the button, the monitoring options are listed, as shown below.  ![](images/SelectConfOpt.jpg)  When you click on a desired monitoring, the chart is loaded with the selected option. To open a chart as a separate dialog, click on the ![](images/MaximizeChart.jpg) button placed at the top right of each chart. The monitoring charts below are available:  -	**Size**: Monitors the size of the map. Y-axis is the entry count (should be multiplied by 1000). -	**Throughput**: Monitors get, put and remove operations performed on the map. Y-axis is the operation count. -	**Memory**: Monitors the memory usage on the map. Y-axis is the memory count. -	**Backups**: Chart loaded when \&quot;Backup Size\&quot; is selected. Monitors the size of the backups in the map. Y-axis is the backup entry count (should be multiplied by 1000). -	**Backup Memory**: Chart loaded when \&quot;Backup Mem.\&quot; is selected. Monitors the memory usage of the backups. Y-axis is the memory count. -	**Hits**: Monitors the hit count of the map. -	**Puts/s, Gets/s, Removes/s**: These three charts monitor the put, get and remove operations (per second) performed on the selected map.  Under these charts are **Map Memory** and **Map Throughput** data tables. The Map Memory data table provides memory metrics distributed over members, as shown below.  ![](images/Map-MemoryDataTable.jpg)  From left to right, this table lists the IP address and port, entry counts, memory used by entries, backup entry counts, memory used by backup entries, events, hits, locks and dirty entries (in the cases where *MapStore* is enabled, these are the entries that are put to/removed from the map but not written to/removed from a database yet) of each entry in the map. You can navigate through the pages using the buttons at the bottom right of the table (**First, Previous, Next, Last**). You can ascend or descend the order of the listings by clicking on the column headings.  Map Throughput data table provides information about the operations (get, put, remove) performed on each member in the map, as shown below.  ![](images/Map-MapThroughputDataTable.jpg)  From left to right, this table lists:  - the IP address and port of each member, - the put, get and remove operations on each member, - the average put, get, remove latencies, - and the maximum put, get, remove latencies on each member.  You can select the period in the combo box placed at the top right corner of the window, for which the table data will be shown. Available values are **Since Beginning**, **Last Minute**, **Last 10 Minutes** and **Last 1 Hour**.  You can navigate through the pages using the buttons placed at the bottom right of the table (**First, Previous, Next, Last**). To ascend or descent the order of the listings, click on the column headings.  "
});

documentTitles["index.html#monitoring-replicated-maps"] = "Monitoring Replicated Maps";
index.add({
    url: "index.html#monitoring-replicated-maps",
    title: "Monitoring Replicated Maps",
    body: "### Monitoring Replicated Maps  Replicated Map instances are shown under the **Replicated Maps** menu item on the left. When you click on a Replicated Map, a new tab for monitoring that instance opens on the right, as shown below.  ![](images/replicated-map-stats.png)  In this tab, you can monitor metrics and also re-configure the selected Replicated Map. All of the statistics are real-time monitoring statistics.  When you click on a desired monitoring, the chart is loaded with the selected option. Also you can open the chart in new window.  -	**Size**: Monitors the size of the Replicated Map. Y-axis is the entry count (should be multiplied by 1000). -	**Throughput**: Monitors get, put and remove operations performed on the Replicated Map. Y-axis is the operation count. -	**Memory**: Monitors the memory usage on the Replicated Map. Y-axis is the memory count. -	**Hits**: Monitors the hit count of the Replicated Map. -	**Puts/s, Gets/s, Removes/s**: These three charts monitor the put, get and remove operations (per second) performed on the selected Replicated Map, the average put, get, remove latencies, and the maximum put, get, remove latencies on each member.  The Replicated Map Throughput Data Table provides information about operations (get, put, remove) performed on each member in the selected Replicated Map.  ![](images/replicated-map-throughput.png)  From left to right, this table lists:  - the IP address and port of each member, - the put, get, and remove operations on each member, - the average put, get, and remove latencies, - and the maximum put, get, and remove latencies on each member.  You can select the period from the combo box placed at the top right corner of the window, in which the table data is shown. Available values are **Since Beginning**, **Last Minute**, **Last 10 Minutes** and **Last 1 Hour**.  You can navigate through the pages using the buttons placed at the bottom right of the table (**First, Previous, Next, Last**). To ascend or descent the order of the listings, click on the column headings.   "
});

documentTitles["index.html#monitoring-queues"] = "Monitoring Queues";
index.add({
    url: "index.html#monitoring-queues",
    title: "Monitoring Queues",
    body: "### Monitoring Queues  Using the menu item **Queues**, you can monitor your queues data structure. When you expand this menu item and click on a queue, a new tab for monitoring that queue instance is opened on the right, as shown below.  ![](images/Queues-Home.jpg)  On top of the page, small charts monitor the size, offers and polls of the selected queue in real-time. The X-axis of all the charts shows the current system time. To open a chart as a separate dialog, click on the ![](images/MaximizeChart.jpg) button placed at the top right of each chart. The monitoring charts below are available:  -	**Size**: Monitors the size of the queue. Y-axis is the entry count (should be multiplied by 1000). -	**Offers**: Monitors the offers sent to the selected queue. Y-axis is the offer count. -	**Polls**: Monitors the polls sent to the selected queue. Y-axis is the poll count.  Under these charts are **Queue Statistics** and **Queue Operation Statistics** tables. The Queue Statistics table provides item and backup item counts in the queue and age statistics of items and backup items at each member, as shown below.  ![](images/QueueStatistics.jpg)  From left to right, this table lists the IP address and port, items and backup items on the queue of each member, and maximum, minimum and average age of items in the queue. You can navigate through the pages using the buttons placed at the bottom right of the table (**First, Previous, Next, Last**). The order of the listings in each column can be ascended or descended by clicking on column headings.  Queue Operations Statistics table provides information about the operations (offers, polls, events) performed on the queues, as shown below.  ![](images/QueueOperationStatistics.jpg)  From left to right, this table lists the IP address and port of each member, and counts of offers, rejected offers, polls, poll misses and events.  You can select the period in the combo box placed at the top right corner of the window to show the table data. Available values are **Since Beginning**, **Last Minute**, **Last 10 Minutes** and **Last 1 Hour**.  You can navigate through the pages using the buttons placed at the bottom right of the table (**First, Previous, Next, Last**). Click on the column headings to ascend or descend the order of the listings.   "
});

documentTitles["index.html#monitoring-topics"] = "Monitoring Topics";
index.add({
    url: "index.html#monitoring-topics",
    title: "Monitoring Topics",
    body: "### Monitoring Topics  To monitor your topics' metrics, click the topic name listed on the left panel under the **Topics** menu item. A new tab for monitoring that topic instance opens on the right, as shown below.  ![](images/ManCenter-Topics.jpg)  On top of the page, two charts monitor the **Publishes** and **Receives** in real-time. They show the published and received message counts of the cluster, the members of which are subscribed to the selected topic. The X-axis of both charts show the current system time. To open a chart as a separate dialog, click on the ![](images/MaximizeChart.jpg) button placed at the top right of each chart.  Under these charts is the Topic Operation Statistics table. From left to right, this table lists the IP addresses and ports of each member, and counts of message published and receives per second in real-time. You can select the period in the combo box placed at top right corner of the table to show the table data. The available values are **Since Beginning**, **Last Minute**, **Last 10 Minutes** and **Last 1 Hour**.  You can navigate through the pages using the buttons placed at the bottom right of the table (**First, Previous, Next, Last**). Click on the column heading to ascend or descend the order of the listings.   "
});

documentTitles["index.html#monitoring-multimaps"] = "Monitoring MultiMaps";
index.add({
    url: "index.html#monitoring-multimaps",
    title: "Monitoring MultiMaps",
    body: "### Monitoring MultiMaps  MultiMap is a specialized map where you can associate a key with multiple values. This monitoring option is similar to the **Maps** option: the same monitoring charts and data tables monitor MultiMaps. The differences are that you cannot browse the MultiMaps and re-configure it. Please see [Managing Maps](#managing-maps).   "
});

documentTitles["index.html#monitoring-executors"] = "Monitoring Executors";
index.add({
    url: "index.html#monitoring-executors",
    title: "Monitoring Executors",
    body: "### Monitoring Executors  Executor instances are listed under the **Executors** menu item on the left. When you click on a executor, a new tab for monitoring that executor instance opens on the right, as shown below.  ![](images/ExecutorsHome.jpg)  On top of the page, small charts monitor the pending, started, completed, etc. executors in real-time. The X-axis of all the charts shows the current system time. You can select other small monitoring charts using the ![](images/ChangeWindowIcon.jpg) button placed at the top right of each chart. Click the button to list the monitoring options, as shown below.  ![](images/SelectExecMonOpt.jpg)  When you click on a desired monitoring, the chart loads with the selected option. To open a chart as a separate dialog, click on the ![](images/MaximizeChart.jpg) button placed at top right of each chart. The below monitoring charts are available:  -	**Pending**: Monitors the pending executors. Y-axis is the executor count. -	**Started**: Monitors the started executors. Y-axis is the executor count. -	**Start Lat. (msec.)**: Shows the latency when executors are started. Y-axis is the duration in milliseconds. -	**Completed**: Monitors the completed executors. Y-axis is the executor count. -	**Comp. Time (msec.)**: Shows the completion period of executors. Y-axis is the duration in milliseconds.  Under these charts is the **Executor Operation Statistics** table, as shown below.  ![](images/ExecutorOperationStats.jpg)  From left to right, this table lists the IP address and port of members, the counts of pending, started and completed executors per second, and the execution time and average start latency of executors on each member. You can navigate through the pages using the buttons placed at the bottom right of the table (**First, Previous, Next, Last**). Click on the column heading to ascend or descend the order of the listings.  "
});

documentTitles["index.html#monitoring-wan-replication"] = "Monitoring WAN Replication";
index.add({
    url: "index.html#monitoring-wan-replication",
    title: "Monitoring WAN Replication",
    body: "### Monitoring WAN Replication  WAN Replication schemes are listed under the **WAN** menu item on the left. When you click on a scheme, a new tab for monitoring the targets which that scheme has appears on the right, as shown below.  ![](images/WanPublisherStats.png)  In this tab, you see **WAN Replication Operations Table** for each target which belongs to this scheme. One of the example tables is shown below.  ![](images/WanTargetTable.png)  -	**Connected**: Status of the member connection to the target. -	**Outbound Recs (sec)**: Average number of records sent to target per second from this member. -	**Outbound Lat (ms)**: Average latency of sending a record to the target from this member. -	**Outbound Queue**: Number of records waiting in the queue to be sent to the target. -	**Action**: Stops/Resumes replication of this member's records.  "
});

documentTitles["index.html#monitoring-members"] = "Monitoring Members";
index.add({
    url: "index.html#monitoring-members",
    title: "Monitoring Members",
    body: "### Monitoring Members  Use this menu item to monitor each cluster member and perform operations like running garbage collection (GC) and taking a thread dump. Once you select a member from the menu, a new tab for monitoring that member opens on the right, as shown below.  ![](images/MembersHome.png)  The **CPU Utilization** chart shows the percentage of CPU usage on the selected member. The **Memory Utilization** chart shows the memory usage on the selected member with three different metrics (maximum, used and total memory). You can open both of these charts as separate windows using the ![](images/ChangeWindowIcon.jpg) button placed at top right of each chart; this gives you a clearer view of the chart.  The window titled **Partitions** shows which partitions are assigned to the selected member. **Runtime** is a dynamically updated window tab showing the processor number, the start and up times, and the maximum, total and free memory sizes of the selected member. These values are collected from the default MXBeans provided by the Java Virtual Machine (JVM). Descriptions from the Javadocs and some explanations are below:  - **Number of Processors**: Number of processors available to the member (JVM).  - **Start Time**: Start time of the member (JVM) in milliseconds.  - **Up Time**: Uptime of the member (JVM) in milliseconds  - **Maximum Memory**: Maximum amount of memory that the member (JVM) will attempt to use.  - **Free Memory**: Amount of free memory in the member (JVM).  - **Used Heap Memory**: Amount of used memory in bytes.  - **Max Heap Memory**: Maximum amount of memory in bytes that can be used for memory management.  - **Used Non-Heap Memory**: Amount of used memory in bytes.  - **Max Non-Heap Memory**: Maximum amount of memory in bytes that can be used for memory management.  - **Total Loaded Classes**: Total number of classes that have been loaded since the member (JVM) has started execution.  - **Current Loaded Classes**: Number of classes that are currently loaded in the member (JVM).  - **Total Unloaded Classes**: Total number of classes unloaded since the member (JVM) has started execution.  - **Total Thread Count**: Total number of threads created and also started since the member (JVM) started.  - **Active Thread Count**: Current number of live threads including both daemon and non-daemon threads.  - **Peak Thread Count**: Peak live thread count since the member (JVM) started or peak was reset.  - **Daemon Thread Count**: Current number of live daemon threads.  - **OS: Free Physical Memory**: Amount of free physical memory in bytes.  - **OS: Committed Virtual Memory**: Amount of virtual memory that is guaranteed to be available to the running process in bytes.  - **OS: Total Physical Memory**: Total amount of physical memory in bytes.  - **OS: Free Swap Space**: Amount of free swap space in bytes. Swap space is used when the amount of physical memory (RAM) is full. If the system needs more memory resources and the RAM is full, inactive pages in memory are moved to the swap space.  - **OS: Total Swap Space**: Total amount of swap space in bytes.  - **OS: Maximum File Descriptor Count**: Maximum number of file descriptors. File descriptor is an integer number that uniquely represents an opened file in the operating system.  - **OS: Open File Descriptor Count**: Number of open file descriptors.  - **OS: Process CPU Time**: CPU time used by the process on which the member (JVM) is running in nanoseconds.  - **OS: Process CPU Load**: Recent CPU usage for the member (JVM) process. This is a double with a value from 0.0 to 1.0. A value of 0.0 means that none of the CPUs were running threads from the member (JVM) process during the recent period of time observed, while a value of 1.0 means that all CPUs were actively running threads from the member (JVM) 100% of the time during the recent period being observed. Threads from the member (JVM) include the application threads as well as the member (JVM) internal threads.  - **OS: System Load Average**: System load average for the last minute. The system load average is the average over a period of time of this sum: (the number of runnable entities queued to the available processors) + (the number of runnable entities running on the available processors). The way in which the load average is calculated is operating system specific but it is typically a damped time-dependent average.  - **OS: System CPU Load**: Recent CPU usage for the whole system. This is a double with a value from 0.0 to 1.0. A value of 0.0 means that all CPUs were idle during the recent period of time observed, while a value of 1.0 means that all CPUs were actively running 100% of the time during the recent period being observed.  ![image](images/NoteSmall.jpg) ***NOTE:*** *These descriptions may vary according to the JVM version or vendor.*  Next to the **Runtime** tab, the **Properties** tab shows the system properties. The **Member Configuration** window shows the XML configuration of the connected Hazelcast cluster.  The **List of Slow Operations** gives an overview of detected slow operations which occurred on that member. The data is collected by the [SlowOperationDetector](#slowoperationdetector).  ![](images/ListOfSlowOperations.png)  Click on an entry to open a dialog which shows the stacktrace and detailed information about each slow invocation of this operation.  ![](images/SlowOperationDetail.png)  Besides the aforementioned monitoring charts and windows, you can also perform operations on the selected member through this page. The operation buttons are located at the top right of the page, as explained below:  -	**Run GC**: Press this button to execute garbage collection on the selected member. A notification stating that the GC execution was successful will be shown. -	**Thread Dump**: Press this button to take a thread dump of the selected member and show it as a separate dialog to the user. -	**Shutdown Node**: Press this button to shutdown the selected member.  "
});

documentTitles["index.html#scripting"] = "Scripting";
index.add({
    url: "index.html#scripting",
    title: "Scripting",
    body: "### Scripting  You can use the scripting feature of this tool to execute codes on the cluster. To open this feature as a tab, select **Scripting** located at the toolbar on top. Once selected, the scripting feature opens as shown below.  ![](images/Scripting.jpg)  In this window, the **Scripting** part is the actual coding editor. You can select the members on which the code will execute from the **Members** list shown at the right side of the window. Below the members list, a combo box enables you to select a scripting language: currently, JavaScript, Ruby, Groovy and Python languages are supported. After you write your script and press the **Execute** button, you can see the execution result in the **Result** part of the window.  ![image](images/NoteSmall.jpg) ***NOTE:*** *To use the scripting languages other than JavaScript on a member, the libraries for those languages should be placed in the classpath of that member.*  There are **Save** and **Delete** buttons on the top right of the scripting editor. To save your scripts, press the **Save** button after you type a name for your script into the field next to this button. The scripts you saved are listed in the **Saved Scripts** part of the window, located at the bottom right of the page. Click on a saved script from this list to execute or edit it. If you want to remove a script that you wrote and saved before, select it from this list and press the **Delete** button.  In the scripting engine you have a `HazelcastInstance` bonded to a variable named `hazelcast`. You can invoke any method that `HazelcastInstance` has via the `hazelcast` variable. You can see example usage for JavaScript below.  ```javascript var name = hazelcast.getName(); var node = hazelcast.getCluster().getLocalMember(); var employees = hazelcast.getMap(\&quot;employees\&quot;); employees.put(\&quot;1\&quot;,\&quot;John Doe\&quot;); employees.get(\&quot;1\&quot;); // will return \&quot;John Doe\&quot; ```   "
});

documentTitles["index.html#executing-console-commands"] = "Executing Console Commands";
index.add({
    url: "index.html#executing-console-commands",
    title: "Executing Console Commands",
    body: "### Executing Console Commands  The Management Center has a console feature that enables you to execute commands on the cluster. For example, you can perform `put`s and `get`s on a map, after you set the namespace with the command `ns &lt;name of your map&gt;`. The same is valid for queues, topics, etc. To execute your command, type it into the field below the console and press **Enter**. Type `help` to see all the commands that you can use.  Open a console window by clicking on the **Console** button located on the toolbar. Below is a sample view with some executed commands.  ![](images/Console.jpg)   "
});

documentTitles["index.html#creating-alerts"] = "Creating Alerts";
index.add({
    url: "index.html#creating-alerts",
    title: "Creating Alerts",
    body: "### Creating Alerts  You can use the alerts feature of this tool to receive alerts and/or e-mail notifications by creating filters. In these filters, you can specify criteria for cluster members or data structures. When the specified criteria are met for a filter, the related alert is shown as a pop-up message on the top right of the page or sent as an e-mail.  Once you click the **Alerts** button located on the toolbar, the page shown below appears.  ![](images/Alerts-Home.png)  If you want to enable the Management Center to send e-mail notifications to the Management Center Admin users, you need to configure the SMTP server. To do this, click on the **Create STMP Config** shown above. The form shown below appears.  ![](images/CreateSMTPConfig.png)  In this form, specify the e-mail address from which the notifications will be sent and also its password. Then, provide the SMTP server host address and port. Finally, check the **TLS Connection** checkbox if the connection is secured by TLS (Transport Layer Security).  After you provide the required information, click on the **Save Config** button. After a processing period (for a couple of seconds), the form will be closed if the configuration is created successfully. In this case, an e-mail will be sent to the e-mail address you provided in the form stating that the SMTP configuration is successful and e-mail alert system is created.  If not, you will see an error message at the bottom of this form as shown below.     ![](images/SMTPConfigFormWithError.png)  As you can see, the reasons can be wrong SMTP configuration or connectivity problems. In this case, please check the form fields and check for any causes for the connections issues with your server.  **Creating Filters for Cluster Members**  Select **Member Alerts** check box to create filters for some or all members in the cluster. Once selected, the next screen asks for which members the alert will be created. Select the desired members and click on the **Next** button. On the next page (shown below), specify the criteria.  ![](images/MemberAlert1.jpg)  You can create alerts when:  -	free memory on the selected member nodes is less than the specified number. -	used heap memory is larger than the specified number. -	the number of active threads are less than the specified count. -	the number of daemon threads are larger than the specified count.  When two or more criteria is specified they will be bound with the logical operator **AND**.  On the next page, give a name for the filter. Then, select whether notification e-mails will be sent to the Management Center Admins using the **Send Email Alert** checkbox. Then, provide a time interval (in seconds) for which the e-mails with the **same notification content** will be sent using the **Email Interval (secs)** field.  Finally, select whether the alert data will be written to the disk (if checked, you can see the alert log at the folder */users/&lt;your user&gt;/mancenter&lt;version&gt;*).  Click on the **Save** button; your filter will be saved and put into the **Filters** part of the page. To edit the filter, click on the ![](images/EditIcon.jpg) icon. To delete it, click on the ![](images/DeleteIcon.jpg) icon.  **Creating Filters for Data Types**  Select the **Data Type Alerts** check box to create filters for data structures. The next screen asks for which data structure (maps, queues, multimaps, executors) the alert will be created. Once a structure is selected, the next screen immediately loads and you then select the data structure instances (i.e. if you selected *Maps*, it will list all the maps defined in the cluster, you can select one map or more). Select as desired, click on the **Next** button, and select the members on which the selected data structure instances will run.  The next screen, as shown below, is the one where you specify the criteria for the selected data structure.  ![](images/DataAlert1.jpg)  As the screen shown above shows, you will select an item from the left combo box, select the operator in the middle one, specify a value in the input field, and click on the **Add** button. You can create more than one criteria in this page; those will be bound by the logical operator **AND**.  After you specify the criteria, click the **Next** button. On the next page, give a name for the filter. Then, select whether notification e-mails will be sent to the Management Center Admins using the **Send Email Alert** checkbox. Then, provide a time interval (in seconds) for which the e-mails with the **same notification content** will be sent using the **Email Interval (secs)** field.  Finally, select whether the alert data will be written to the disk (if checked, you can see the alert log at the folder */users/&lt;your user&gt;/mancenter&lt;version&gt;*).  Click on the **Save** button; your filter will be saved and put into the **Filters** part of the page. To edit the filter, click on the ![](images/EditIcon.jpg) icon. To delete it, click on the ![](images/DeleteIcon.jpg) icon.   "
});

documentTitles["index.html#administering-management-center"] = "Administering Management Center";
index.add({
    url: "index.html#administering-management-center",
    title: "Administering Management Center",
    body: "### Administering Management Center  ![image](images/NoteSmall.jpg) ***NOTE:*** *This toolbar item is available only to admin users.*  The **Admin** user can add, edit, and remove users and specify the permissions for the users of Management Center. To perform these operations, click on the **Administration** button located on the toolbar. The page below appears.  ![](images/admin.jpg)  To add a user to the system, specify the username, e-mail and password in the **Add/Edit User** part of the page. If the user to be added will have administrator privileges, select **isAdmin** checkbox. **Permissions** checkboxes have two values:  -	**Read Only**: If this permission is given to the user, only *Home*, *Documentation* and *Time Travel* items will be visible at the toolbar at that user's session. Also, users with this permission cannot update a [map configuration](#map-config), run a garbage collection and take a thread dump on a cluster member, or shutdown a member (please see [Monitoring Members](#monitoring-members)). -	**Read/Write**: If this permission is given to the user, *Home*, *Scripting*, *Console*, *Documentation* and *Time Travel* items will be visible. The users with this permission can update a map configuration and perform operations on the members.  After you enter/select all fields, click **Save** button to create the user. You will see the newly created user's username on the left side, in the **Users** part of the page.  To edit or delete a user, select a username listed in the **Users**. Selected user information appears on the right side of the page. To update the user information, change the fields as desired and click the **Save** button. To delete the user from the system, click the **Delete** button.  "
});

documentTitles["index.html#hot-restart"] = "Hot Restart";
index.add({
    url: "index.html#hot-restart",
    title: "Hot Restart",
    body: "### Hot Restart  ![image](images/NoteSmall.jpg) ***NOTE:*** *This toolbar item is available only to admin users.*  The admin user can see and change the cluster state, shut down the cluster, and force start the cluster using the operations listed in this screen as shown below.  ![](images/HotRestart.png)  **Cluster States**  - **Active**: Cluster will continue to operate without any restriction. All operations are allowed. This is the default state of a cluster.  - **Frozen**: New members are not allowed to join, except the members left in **this** state or **Passive** state. All other operations except migrations are allowed and will operate without any restriction.  - **Passive**: New members are not allowed to join, except the members left in **this** state or **Frozen** state. All operations, except the ones marked with `AllowedDuringPassiveState`, will be rejected immediately.  - **In Transition**: Shows that the cluster state is in transition. This is a temporary and intermediate state. It is not allowed to set it explicitly.  **Changing Cluster State**  ![](images/ChangeClusterState.png)  - Click the dropdown menu and choose the state to which you want your cluster to change. A pop-up will appear and stay on the screen until the state is successfully changed.  ![](images/ChangeClusterState-wait.png)  **Shutting Down the Cluster**  - Click the **Shutdown** button. A pop-up will appear and stay on screen until the cluster is successfully shutdown.  ![](images/ShutdownCluster.png)  If an exception occurs during the state change or shutdown operation on the cluster, this exception message will be shown on the screen as a notification.  **Force Start the Cluster**  Restart process cannot be completed if a node crashes permanently and cannot recover from the failure since it cannot start or it fails to load its own data. In that case, you can force the cluster to clean its persisted data and make a fresh start. This process is called **force start**.  ![](images/ForceStart.png)  Click the **Force Start** button. A pop-up will appear and stay on screen until the operation is triggered.  If an exception occurs, this exception message will be showed on the screen as a notification.  &lt;br&gt;&lt;/br&gt; ![image](images/NoteSmall.jpg) ***NOTE:*** *The operations explained in this section (Hot Restart) can also be performed using REST API and the script `cluster.sh`. Please refer to the [Using REST API for Cluster Management section](#using-rest-api-for-cluster-management) and [Using the Script cluster.sh section](#using-the-script-cluster-sh).*    "
});

documentTitles["index.html#checking-past-status-with-time-travel"] = "Checking Past Status with Time Travel";
index.add({
    url: "index.html#checking-past-status-with-time-travel",
    title: "Checking Past Status with Time Travel",
    body: "### Checking Past Status with Time Travel  Use the Time Travel toolbar item to check the status of the cluster at a time in the past. When you select it on the toolbar, a small window appears on top of the page, as shown below.  ![](images/Timetravel.jpg)  To see the cluster status in a past time, you should first enable the Time Travel. Click on the area where it says **OFF** (on the right of Time Travel window). It will turn to **ON** after it asks whether to enable the Time Travel with a dialog: click on **Enable** in the dialog to enable the Time Travel.  Once it is **ON**, the status of your cluster will be stored on your disk as long as your web server is alive.  You can go back in time using the slider and/or calendar and check your cluster's situation at the selected time. All data structures and members can be monitored as if you are using the management center normally (charts and data tables for each data structure and members). Using the arrow buttons placed at both sides of the slider, you can go back or further with steps of 5 seconds. It will show status if Time Travel has been **ON** at the selected time in past; otherwise, all the charts and tables will be shown as empty.  The historical data collected with Time Travel feature are stored in a file database on the disk. These files can be found in the folder `&lt;User's Home Directory&gt;/mancenter&lt;Hazelcast version&gt;`, e.g. `/home/mancenter3.5`. This folder can be changed using the `hazelcast.mancenter.home` property on the server where Management Center is running.  Time travel data files are created monthly. Their file name format is `[group-name]-[year][month].db` and  `[group-name]-[year][month].lg`. Time travel data is kept in the `*.db` files. The files with the extension `lg` are temporary files created internally and you do not have to worry about them.  Management Center has no automatic way of removing or archiving old time travel data files. They remain in the aforementioned folder until you delete or archive them.   "
});

documentTitles["index.html#management-center-documentation"] = "Management Center Documentation";
index.add({
    url: "index.html#management-center-documentation",
    title: "Management Center Documentation",
    body: "### Management Center Documentation  To see the documentation, click on the **Documentation** button located at the toolbar. Management Center manual will appear as a tab.   "
});

documentTitles["index.html#suggested-heap-size"] = "Suggested Heap Size";
index.add({
    url: "index.html#suggested-heap-size",
    title: "Suggested Heap Size",
    body: "### Suggested Heap Size  **For 2 Nodes (Cluster Members)**  | Mancenter Heap Size | # of Maps | # of Queues | # of Topics | | -------- | --------- | ---------- | ------------ | | 256m | 3k | 1k | 1k | | 1024m | 10k | 1k | 1k |  **For 10 Nodes**  | Mancenter Heap Size | # of Maps | # of Queues | # of Topics | | -------- | --------- | ---------- | ------------ | | 256m | 50 | 30 | 30 | | 1024m | 2k | 1k | 1k |  **For 20 Nodes**  | Mancenter Heap Size | # of Maps | # of Queues | # of Topics | | -------- | --------- | ---------- | ------------ | | 256m* | N/A | N/A | N/A | | 1024m | 1k | 1k | 1k |  \* With 256m heap, management center is unable to collect statistics.      "
});

documentTitles["index.html#clustered-jmx-via-management-center"] = "Clustered JMX via Management Center";
index.add({
    url: "index.html#clustered-jmx-via-management-center",
    title: "Clustered JMX via Management Center",
    body: "## Clustered JMX via Management Center   &lt;font color=\&quot;#3981DB\&quot;&gt;**Hazelcast Enterprise**&lt;/font&gt; &lt;br&gt;&lt;/br&gt;   Clustered JMX via Management Center allows you to monitor clustered statistics of distributed objects from a JMX interface.   "
});

documentTitles["index.html#configuring-clustered-jmx"] = "Configuring Clustered JMX";
index.add({
    url: "index.html#configuring-clustered-jmx",
    title: "Configuring Clustered JMX",
    body: "### Configuring Clustered JMX  In order to configure Clustered JMX, use two command line parameters for your Management Center deployment.  - `-Dhazelcast.mc.jmx.enabled=true` (default is false) - `-Dhazelcast.mc.jmx.port=9000` (optional, default is 9999)  With embedded Jetty, you do not need to deploy your Management Center application to any container or application server.  You can start Management Center application with Clustered JMX enabled as shown below.  ``` java -Dhazelcast.mc.jmx.enabled=true -Dhazelcast.mc.jmx.port=9999 -jar mancenter-3.3.jar ```  Once Management Center starts, you should see a log similar to below.  ``` INFO: Management Center 3.3 Jun 05, 2014 11:55:32 AM com.hazelcast.webmonitor.service.jmx.impl.JMXService INFO: Starting Management Center JMX Service on port :9999 ```  You should be able to connect to Clustered JMX interface from the address `localhost:9999`.  You can use `jconsole` or any other JMX client to monitor your Hazelcast Cluster. As a sample, below is the `jconsole` screenshot of the Clustered JMX hierarchy.  ![](images/ClusteredJMX.png)  "
});

documentTitles["index.html#clustered-jmx-api"] = "Clustered JMX API";
index.add({
    url: "index.html#clustered-jmx-api",
    title: "Clustered JMX API",
    body: "### Clustered JMX API  The management beans are exposed with the following object name format.  `ManagementCenter[`*cluster name*`]:type=&lt;`*object type*`&gt;,name=&lt;`*object name*`&gt;,member=\&quot;&lt;`*cluster member IP address*`&gt;\&quot;`  Object name starts with `ManagementCenter` prefix. Then it has the cluster name in brackets followed by a colon. After that, `type`,`name` and `member` attributes follows, each separated with a comma.  -	`type` is the type of object. Values are `Clients`, `Executors`, `Maps`, `Members`, `MultiMaps`, `Queues`, `Services`, and `Topics`.  -	`name` is the name of object.  -	`member` is the node address of object (only required if the statistics are local to the node).   A sample bean is shown below.  ``` ManagementCenter[dev]:type=Services,name=OperationService,member=\&quot;192.168.2.79:5701\&quot; ```   Here is the list of attributes that are exposed from the Clustered JMX interface.  * **ManagementCenter[ClusterName]** * Clients  * Address  * ClientType  * Uuid *  Executors  * Cluster   * Name   * StartedTaskCount   * CompletedTaskCount   * CancelledTaskCount   * PendingTaskCount *  Maps   * Cluster   * Name   * BackupEntryCount   * BackupEntryMemoryCost   * CreationTime   * DirtyEntryCount   * Events   * GetOperationCount   * HeapCost   * Hits   * LastAccessTime   * LastUpdateTime   * LockedEntryCount   * MaxGetLatency   * MaxPutLatency   * MaxRemoveLatency   * OtherOperationCount   * OwnedEntryCount   * PutOperationCount   * RemoveOperationCount *  Members   * ConnectedClientCount   * HeapFreeMemory   * HeapMaxMemory   * HeapTotalMemory   * HeapUsedMemory   * IsMaster   * OwnedPartitionCount *  MultiMaps   * Cluster   * Name   * BackupEntryCount   * BackupEntryMemoryCost   * CreationTime   * DirtyEntryCount   * Events   * GetOperationCount   * HeapCost   * Hits   * LastAccessTime   * LastUpdateTime   * LockedEntryCount   * MaxGetLatency   * MaxPutLatency   * MaxRemoveLatency   * OtherOperationCount   * OwnedEntryCount   * PutOperationCount   * RemoveOperationCount *  Queues   * Cluster   * Name   * MinAge   * MaxAge   * AvgAge   * OwnedItemCount   * BackupItemCount   * OfferOperationCount   * OtherOperationsCount   * PollOperationCount   * RejectedOfferOperationCount   * EmptyPollOperationCount   * EventOperationCount   * CreationTime *  Services   * ConnectionManager     * ActiveConnectionCount     * ClientConnectionCount     * ConnectionCount   * EventService     * EventQueueCapacity     * EventQueueSize     * EventThreadCount   * OperationService     * ExecutedOperationCount     * OperationExecutorQueueSize     * OperationThreadCount     * RemoteOperationCount     * ResponseQueueSize     * RunningOperationsCount   * PartitionService     * ActivePartitionCount     * PartitionCount   * ProxyService     * ProxyCount   * ManagedExecutor[hz::async]     * Name     * CompletedTaskCount     * MaximumPoolSize     * PoolSize     * QueueSize     * RemainingQueueCapacity     * Terminated   * ManagedExecutor[hz::client]     * Name     * CompletedTaskCount     * MaximumPoolSize     * PoolSize     * QueueSize     * RemainingQueueCapacity     * Terminated   * ManagedExecutor[hz::global-operation]     * Name     * CompletedTaskCount     * MaximumPoolSize     * PoolSize     * QueueSize     * RemainingQueueCapacity     * Terminated   * ManagedExecutor[hz::io]     * Name     * CompletedTaskCount     * MaximumPoolSize     * PoolSize     * QueueSize     * RemainingQueueCapacity     * Terminated   * ManagedExecutor[hz::query]     * Name     * CompletedTaskCount     * MaximumPoolSize     * PoolSize     * QueueSize     * RemainingQueueCapacity     * Terminated   * ManagedExecutor[hz::scheduled]     * Name     * CompletedTaskCount     * MaximumPoolSize     * PoolSize     * QueueSize     * RemainingQueueCapacity     * Terminated   * ManagedExecutor[hz::system]     * Name     * CompletedTaskCount     * MaximumPoolSize     * PoolSize     * QueueSize     * RemainingQueueCapacity     * Terminated   *  Topics   * Cluster   * Name   * CreationTime   * PublishOperationCount   * ReceiveOperationCount   "
});

documentTitles["index.html#integrating-with-new-relic"] = "Integrating with New Relic";
index.add({
    url: "index.html#integrating-with-new-relic",
    title: "Integrating with New Relic",
    body: "### Integrating with New Relic  Use the Clustered JMX interface to integrate Hazelcast Management Center with *New Relic*. To perform this integration, attach New Relic Java agent and provide an extension file that describes which metrics will be sent to New Relic.  Please see &lt;a href=\&quot;http://docs.newrelic.com/docs/java/custom-jmx-instrumentation-by-yml\&quot; target=\&quot;_blank\&quot;&gt;Custom JMX instrumentation by YAML&lt;/a&gt; on the New Relic webpage.  Below is an example Map monitoring `.yml` file for New Relic.  ```plain name: Clustered JMX version: 1.0 enabled: true  jmx:   - object_name: ManagementCenter[clustername]:type=Maps,name=mapname     metrics:       - attributes: PutOperationCount, GetOperationCount, RemoveOperationCount, Hits,\              BackupEntryCount, OwnedEntryCount, LastAccessTime, LastUpdateTime         type: simple   - object_name: ManagementCenter[clustername]:type=Members,name=\&quot;node address in\         double quotes\&quot;     metrics:       - attributes: OwnedPartitionCount         type: simple ```  Put the `.yml` file in the `extensions` folder in your New Relic installation. If an `extensions` folder does not exist there, create one.  After you set your extension, attach the New Relic Java agent and start Management Center as shown below.  ```plain java -javaagent:/path/to/newrelic.jar -Dhazelcast.mc.jmx.enabled=true\     -Dhazelcast.mc.jmx.port=9999 -jar mancenter-3.3.jar ```  If your logging level is set as FINER, you should see the log listing in the file `newrelic_agent.log`, which is located in the `logs` folder in your New Relic installation. Below is an example log listing.  ```plain Jun 5, 2014 14:18:43 +0300 [72696 62] com.newrelic.agent.jmx.JmxService FINE:     JMX Service : querying MBeans (1) Jun 5, 2014 14:18:43 +0300 [72696 62] com.newrelic.agent.jmx.JmxService FINER:     JMX Service : MBeans query ManagementCenter[dev]:type=Members,     name=\&quot;192.168.2.79:5701\&quot;, matches 1 Jun 5, 2014 14:18:43 +0300 [72696 62] com.newrelic.agent.jmx.JmxService FINER:     Recording JMX metric OwnedPartitionCount : 68 Jun 5, 2014 14:18:43 +0300 [72696 62] com.newrelic.agent.jmx.JmxService FINER:     JMX Service : MBeans query ManagementCenter[dev]:type=Maps,name=orders,      matches 1 Jun 5, 2014 14:18:43 +0300 [72696 62] com.newrelic.agent.jmx.JmxService FINER:      Recording JMX metric Hits : 46,593 Jun 5, 2014 14:18:43 +0300 [72696 62] com.newrelic.agent.jmx.JmxService FINER:      Recording JMX metric BackupEntryCount : 1,100 Jun 5, 2014 14:18:43 +0300 [72696 62] com.newrelic.agent.jmx.JmxService FINER:      Recording JMX metric OwnedEntryCount : 1,100 Jun 5, 2014 14:18:43 +0300 [72696 62] com.newrelic.agent.jmx.JmxService FINER:      Recording JMX metric RemoveOperationCount : 0 Jun 5, 2014 14:18:43 +0300 [72696 62] com.newrelic.agent.jmx.JmxService FINER:      Recording JMX metric PutOperationCount : 118,962 Jun 5, 2014 14:18:43 +0300 [72696 62] com.newrelic.agent.jmx.JmxService FINER:      Recording JMX metric GetOperationCount : 0 Jun 5, 2014 14:18:43 +0300 [72696 62] com.newrelic.agent.jmx.JmxService FINER:      Recording JMX metric LastUpdateTime : 1,401,962,426,811 Jun 5, 2014 14:18:43 +0300 [72696 62] com.newrelic.agent.jmx.JmxService FINER:      Recording JMX metric LastAccessTime : 1,401,962,426,811 ```  Then you can navigate to your New Relic account and create Custom Dashboards. Please see &lt;a href=\&quot;http://docs.newrelic.com/docs/dashboards-menu/creating-custom-dashboards\&quot; target=\&quot;_blank\&quot;&gt;Creating custom dashboards&lt;/a&gt;.  While you are creating the dashboard, you should see the metrics that you are sending to New Relic from Management Center in the **Metrics** section under the JMX folder.  "
});

documentTitles["index.html#integrating-with-appdynamics"] = "Integrating with AppDynamics";
index.add({
    url: "index.html#integrating-with-appdynamics",
    title: "Integrating with AppDynamics",
    body: "### Integrating with AppDynamics  Use the Clustered JMX interface to integrate Hazelcast Management Center with *AppDynamics*. To perform this integration, attach AppDynamics Java agent to the Management Center.  For agent installation, refer to &lt;a href=\&quot;http://docs.appdynamics.com/display/PRO14S/Install+the+App+Agent+for+Java\&quot; target=\&quot;_blank\&quot;&gt;Install the App Agent for Java&lt;/a&gt; page.  For monitoring on AppDynamics, refer to &lt;a href=\&quot;http://docs.appdynamics.com/display/PRO14S/Monitor+JMX+MBeans#MonitorJMXMBeans-UsingAppDynamicsforJMXMonitoring\&quot; target=\&quot;_blank\&quot;&gt;Using AppDynamics for JMX Monitoring&lt;/a&gt; page.  After installing AppDynamics agent, you can start Management Center as shown below.  ```plain java -javaagent:/path/to/javaagent.jar -Dhazelcast.mc.jmx.enabled=true\     -Dhazelcast.mc.jmx.port=9999 -jar mancenter-3.3.jar ```  When Management Center starts, you should see the logs below.  ```plain Started AppDynamics Java Agent Successfully. Hazelcast Management Center starting on port 8080 at path : /mancenter ``` &lt;br&gt;&lt;/br&gt;     "
});

documentTitles["index.html#clustered-rest-via-management-center"] = "Clustered REST via Management Center";
index.add({
    url: "index.html#clustered-rest-via-management-center",
    title: "Clustered REST via Management Center",
    body: "## Clustered REST via Management Center  &lt;font color=\&quot;#3981DB\&quot;&gt;**Hazelcast Enterprise**&lt;/font&gt; &lt;br&gt;&lt;/br&gt;   The Clustered REST API is exposed from Management Center to allow you to monitor clustered statistics of distributed objects.  "
});

documentTitles["index.html#enabling-clustered-rest"] = "Enabling Clustered REST";
index.add({
    url: "index.html#enabling-clustered-rest",
    title: "Enabling Clustered REST",
    body: "### Enabling Clustered REST  To enable Clustered REST on your Management Center, pass the following system property at startup. This property is disabled by default.  ```plain -Dhazelcast.mc.rest.enabled=true ```  "
});

documentTitles["index.html#clustered-rest-api-root"] = "Clustered REST API Root";
index.add({
    url: "index.html#clustered-rest-api-root",
    title: "Clustered REST API Root",
    body: "### Clustered REST API Root   The entry point for Clustered REST API is `/rest/`.  This resource does not have any attributes.  "
});

documentTitles["index.html#clusters-resource"] = "Clusters Resource";
index.add({
    url: "index.html#clusters-resource",
    title: "Clusters Resource",
    body: "### Clusters Resource  This resource returns a list of clusters that are connected to the Management Center.  "
});

documentTitles["index.html#retrieve-clusters"] = "Retrieve Clusters";
index.add({
    url: "index.html#retrieve-clusters",
    title: "Retrieve Clusters",
    body: "##### Retrieve Clusters  + *Request Type:* GET + *URL:* `/rest/clusters` + *Request:*  	```plain 	curl http://localhost:8083/mancenter/rest/clusters 	``` + *Response:* `200` (application/json) + *Body:*  	```json 	[\&quot;dev\&quot;,\&quot;qa\&quot;] 	``` 	  "
});

documentTitles["index.html#cluster-resource"] = "Cluster Resource";
index.add({
    url: "index.html#cluster-resource",
    title: "Cluster Resource",
    body: "### Cluster Resource  This resource returns information related to the provided cluster name.  "
});

documentTitles["index.html#retrieve-cluster-information"] = "Retrieve Cluster Information";
index.add({
    url: "index.html#retrieve-cluster-information",
    title: "Retrieve Cluster Information",
    body: "##### Retrieve Cluster Information + *Request Type:* GET + *URL:* `/rest/clusters/{clustername}` + *Request:*  	```plain 	curl http://localhost:8083/mancenter/rest/clusters/dev/ 	``` + *Response:* `200` (application/json) + *Body:*  	```json 	{\&quot;masterAddress\&quot;:\&quot;192.168.2.78:5701\&quot;} 	```  "
});

documentTitles["index.html#members-resource"] = "Members Resource";
index.add({
    url: "index.html#members-resource",
    title: "Members Resource",
    body: "### Members Resource  This resource returns a list of members belonging to the provided clusters.  "
});

documentTitles["index.html#retrieve-members-get-restclustersclusternamemembers"] = "Retrieve Members [GET] [/rest/clusters/{clustername}/members]";
index.add({
    url: "index.html#retrieve-members-get-restclustersclusternamemembers",
    title: "Retrieve Members [GET] [/rest/clusters/{clustername}/members]",
    body: "##### Retrieve Members [GET] [/rest/clusters/{clustername}/members] + *Request Type:* GET + *URL:* `/rest/clusters/{clustername}/members` + *Request:*  	```plain 	curl http://localhost:8083/mancenter/rest/clusters/dev/members 	``` + *Response:* `200` (application/json) + *Body:*  	```json 	[\&quot;192.168.2.78:5701\&quot;,\&quot;192.168.2.78:5702\&quot;,\&quot;192.168.2.78:5703\&quot;,\&quot;192.168.2.78:5704\&quot;] 	```  "
});

documentTitles["index.html#member-resource"] = "Member Resource";
index.add({
    url: "index.html#member-resource",
    title: "Member Resource",
    body: "### Member Resource  This resource returns information related to the provided member.  "
});

documentTitles["index.html#retrieve-member-information"] = "Retrieve Member Information";
index.add({
    url: "index.html#retrieve-member-information",
    title: "Retrieve Member Information",
    body: "##### Retrieve Member Information + *Request Type:* GET + *URL:* `/rest/clusters/{clustername}/members/{member}` + *Request:*  	```plain 	curl http://localhost:8083/mancenter/rest/clusters/dev/members/192.168.2.78:5701 	``` + *Response:* `200` (application/json) + *Body:*  	```json 	{ 	  \&quot;cluster\&quot;:\&quot;dev\&quot;, 	  \&quot;name\&quot;:\&quot;192.168.2.78:5701\&quot;, 	  \&quot;maxMemory\&quot;:129957888, 	  \&quot;ownedPartitionCount\&quot;:68, 	  \&quot;usedMemory\&quot;:60688784, 	  \&quot;freeMemory\&quot;:24311408, 	  \&quot;totalMemory\&quot;:85000192, 	  \&quot;connectedClientCount\&quot;:1, 	  \&quot;master\&quot;:true 	} 	```  "
});

documentTitles["index.html#retrieve-connection-manager-information"] = "Retrieve Connection Manager Information";
index.add({
    url: "index.html#retrieve-connection-manager-information",
    title: "Retrieve Connection Manager Information",
    body: "##### Retrieve Connection Manager Information + *Request Type:* GET + *URL:* `/rest/clusters/{clustername}/members/{member}/connectionManager` + *Request:*  	```plain 	curl http://localhost:8083/mancenter/rest/clusters/dev/members/192.168.2.78:5701/connectionManager 	``` + *Response:* `200` (application/json) + *Body:*  	```json 	{ 	  \&quot;clientConnectionCount\&quot;:2, 	  \&quot;activeConnectionCount\&quot;:5, 	  \&quot;connectionCount\&quot;:5 	} 	```  "
});

documentTitles["index.html#retrieve-operation-service-information"] = "Retrieve Operation Service Information";
index.add({
    url: "index.html#retrieve-operation-service-information",
    title: "Retrieve Operation Service Information",
    body: "##### Retrieve Operation Service Information + *Request Type:* GET + *URL:* `/rest/clusters/{clustername}/members/{member}/operationService` + *Request:*  	```plain 	curl http://localhost:8083/mancenter/rest/clusters/dev/members/192.168.2.78:5701/operationService 	``` + *Response:* `200` (application/json) + *Body:*  	```json 	{ 	  \&quot;responseQueueSize\&quot;:0, 	  \&quot;operationExecutorQueueSize\&quot;:0, 	  \&quot;runningOperationsCount\&quot;:0, 	  \&quot;remoteOperationCount\&quot;:1, 	  \&quot;executedOperationCount\&quot;:461139, 	  \&quot;operationThreadCount\&quot;:8 	} 	```  "
});

documentTitles["index.html#retrieve-event-service-information"] = "Retrieve Event Service Information";
index.add({
    url: "index.html#retrieve-event-service-information",
    title: "Retrieve Event Service Information",
    body: "##### Retrieve Event Service Information + *Request Type:* GET + *URL:* `/rest/clusters/{clustername}/members/{member}/eventService` + *Request:*  	```plain 	curl http://localhost:8083/mancenter/rest/clusters/dev/members/192.168.2.78:5701/eventService 	``` + *Response:* `200` (application/json) + *Body:*  	```json 	{ 	  \&quot;eventThreadCount\&quot;:5, 	  \&quot;eventQueueCapacity\&quot;:1000000, 	  \&quot;eventQueueSize\&quot;:0 	} 	```  "
});

documentTitles["index.html#retrieve-partition-service-information"] = "Retrieve Partition Service Information";
index.add({
    url: "index.html#retrieve-partition-service-information",
    title: "Retrieve Partition Service Information",
    body: "##### Retrieve Partition Service Information + *Request Type:* GET + *URL:* `/rest/clusters/{clustername}/members/{member}/partitionService` + *Request:*  	```plain 	curl http://localhost:8083/mancenter/rest/clusters/dev/members/192.168.2.78:5701/partitionService 	``` + *Response:* `200` (application/json) + *Body:*  	```json 	{ 	  \&quot;partitionCount\&quot;:271, 	  \&quot;activePartitionCount\&quot;:68 	} 	```  "
});

documentTitles["index.html#retrieve-proxy-service-information"] = "Retrieve Proxy Service Information";
index.add({
    url: "index.html#retrieve-proxy-service-information",
    title: "Retrieve Proxy Service Information",
    body: "##### Retrieve Proxy Service Information + *Request Type:* GET + *URL:* `/rest/clusters/{clustername}/members/{member}/proxyService` + *Request:*  	```plain 	curl http://localhost:8083/mancenter/rest/clusters/dev/members/192.168.2.78:5701/proxyService 	``` + *Response:* `200` (application/json) + *Body:*  	```json 	{ 	  \&quot;proxyCount\&quot;:8 	} 	```  "
});

documentTitles["index.html#retrieve-all-managed-executors"] = "Retrieve All Managed Executors";
index.add({
    url: "index.html#retrieve-all-managed-executors",
    title: "Retrieve All Managed Executors",
    body: "##### Retrieve All Managed Executors + *Request Type:* GET + *URL:* `/rest/clusters/{clustername}/members/{member}/managedExecutors` + *Request:*  	```plain 	curl http://localhost:8083/mancenter/rest/clusters/dev/members/192.168.2.78:5701/managedExecutors 	``` + *Response:* `200` (application/json) + *Body:*  	```json 	[\&quot;hz:system\&quot;,\&quot;hz:scheduled\&quot;,\&quot;hz:client\&quot;,\&quot;hz:query\&quot;,\&quot;hz:io\&quot;,\&quot;hz:async\&quot;] 	```  "
});

documentTitles["index.html#retrieve-a-managed-executor"] = "Retrieve a Managed Executor";
index.add({
    url: "index.html#retrieve-a-managed-executor",
    title: "Retrieve a Managed Executor",
    body: "##### Retrieve a Managed Executor + *Request Type:* GET + *URL:* `/rest/clusters/{clustername}/members/{member}/managedExecutors/{managedExecutor}` + *Request:*  	```plain 	curl http://localhost:8083/mancenter/rest/clusters/dev/members/192.168.2.78:5701 	  /managedExecutors/hz:system 	``` + *Response:* `200` (application/json) + *Body:*  	```json 	{ 	  \&quot;name\&quot;:\&quot;hz:system\&quot;, 	  \&quot;queueSize\&quot;:0, 	  \&quot;poolSize\&quot;:0, 	  \&quot;remainingQueueCapacity\&quot;:2147483647, 	  \&quot;maximumPoolSize\&quot;:4, 	  \&quot;completedTaskCount\&quot;:12, 	  \&quot;terminated\&quot;:false 	} 	```  "
});

documentTitles["index.html#clients-resource"] = "Clients Resource";
index.add({
    url: "index.html#clients-resource",
    title: "Clients Resource",
    body: "### Clients Resource  This resource returns a list of clients belonging to the provided cluster.  "
});

documentTitles["index.html#retrieve-list-of-clients"] = "Retrieve List of Clients";
index.add({
    url: "index.html#retrieve-list-of-clients",
    title: "Retrieve List of Clients",
    body: "##### Retrieve List of Clients + *Request Type:* GET + *URL:* `/rest/clusters/{clustername}/clients` + *Request:*  	```plain 	curl http://localhost:8083/mancenter/rest/clusters/dev/clients 	``` + *Response:* `200` (application/json) + *Body:*  	```json 	[\&quot;192.168.2.78:61708\&quot;] 	```  "
});

documentTitles["index.html#retrieve-client-information"] = "Retrieve Client Information";
index.add({
    url: "index.html#retrieve-client-information",
    title: "Retrieve Client Information",
    body: "##### Retrieve Client Information + *Request Type:* GET + *URL:* `/rest/clusters/{clustername}/clients/{client}` + *Request:*  	```plain 	curl http://localhost:8083/mancenter/rest/clusters/dev/clients/192.168.2.78:61708 	``` + *Response:* `200` (application/json) + *Body:*  	```json 	{ 	  \&quot;uuid\&quot;:\&quot;6fae7af6-7a7c-4fa5-b165-cde24cf070f5\&quot;, 	  \&quot;address\&quot;:\&quot;192.168.2.78:61708\&quot;, 	  \&quot;clientType\&quot;:\&quot;JAVA\&quot; 	} 	```  "
});

documentTitles["index.html#maps-resource"] = "Maps Resource";
index.add({
    url: "index.html#maps-resource",
    title: "Maps Resource",
    body: "### Maps Resource  This resource returns a list of maps belonging to the provided cluster.   "
});

documentTitles["index.html#retrieve-list-of-maps"] = "Retrieve List of Maps";
index.add({
    url: "index.html#retrieve-list-of-maps",
    title: "Retrieve List of Maps",
    body: "##### Retrieve List of Maps + *Request Type:* GET + *URL:* `/rest/clusters/{clustername}/maps` + *Request:*  	```plain 	curl http://localhost:8083/mancenter/rest/clusters/dev/maps 	``` + *Response:* `200` (application/json) + *Body:*  	```json 	[\&quot;customers\&quot;,\&quot;orders\&quot;] 	```  "
});

documentTitles["index.html#retrieve-map-information"] = "Retrieve Map Information";
index.add({
    url: "index.html#retrieve-map-information",
    title: "Retrieve Map Information",
    body: "##### Retrieve Map Information + *Request Type:* GET + *URL:* `/rest/clusters/{clustername}/maps/{mapName}` + *Request:*  	```plain 	curl http://localhost:8083/mancenter/rest/clusters/dev/maps/customers 	``` + *Response:* `200` (application/json) + *Body:*  	```json 	{ 	  \&quot;cluster\&quot;:\&quot;dev\&quot;, 	  \&quot;name\&quot;:\&quot;customers\&quot;, 	  \&quot;ownedEntryCount\&quot;:1000, 	  \&quot;backupEntryCount\&quot;:1000, 	  \&quot;ownedEntryMemoryCost\&quot;:157890, 	  \&quot;backupEntryMemoryCost\&quot;:113683, 	  \&quot;heapCost\&quot;:297005, 	  \&quot;lockedEntryCount\&quot;:0, 	  \&quot;dirtyEntryCount\&quot;:0, 	  \&quot;hits\&quot;:3001, 	  \&quot;lastAccessTime\&quot;:1403608925777, 	  \&quot;lastUpdateTime\&quot;:1403608925777, 	  \&quot;creationTime\&quot;:1403602693388, 	  \&quot;putOperationCount\&quot;:110630, 	  \&quot;getOperationCount\&quot;:165945, 	  \&quot;removeOperationCount\&quot;:55315, 	  \&quot;otherOperationCount\&quot;:0, 	  \&quot;events\&quot;:0, 	  \&quot;maxPutLatency\&quot;:52, 	  \&quot;maxGetLatency\&quot;:30, 	  \&quot;maxRemoveLatency\&quot;:21 	} 	```    "
});

documentTitles["index.html#multimaps-resource"] = "MultiMaps Resource";
index.add({
    url: "index.html#multimaps-resource",
    title: "MultiMaps Resource",
    body: "### MultiMaps Resource  This resource returns a list of multimaps belonging to the provided cluster.   "
});

documentTitles["index.html#retrieve-list-of-multimaps"] = "Retrieve List of MultiMaps";
index.add({
    url: "index.html#retrieve-list-of-multimaps",
    title: "Retrieve List of MultiMaps",
    body: "##### Retrieve List of MultiMaps + *Request Type:* GET + *URL:* `/rest/clusters/{clustername}/multimaps` + *Request:*  	```plain 	curl http://localhost:8083/mancenter/rest/clusters/dev/multimaps 	``` + *Response:* `200` (application/json) + *Body:*  	```json 	[\&quot;customerAddresses\&quot;] 	```  "
});

documentTitles["index.html#retrieve-multimap-information"] = "Retrieve MultiMap Information";
index.add({
    url: "index.html#retrieve-multimap-information",
    title: "Retrieve MultiMap Information",
    body: "##### Retrieve MultiMap Information + *Request Type:* GET + *URL:* `/rest/clusters/{clustername}/multimaps/{multimapname}` + *Request:*  	```plain 	curl http://localhost:8083/mancenter/rest/clusters/dev/multimaps/customerAddresses 	``` + *Response:* `200` (application/json) + *Body:*  	```json 	{ 	  \&quot;cluster\&quot;:\&quot;dev\&quot;, 	  \&quot;name\&quot;:\&quot;customerAddresses\&quot;, 	  \&quot;ownedEntryCount\&quot;:996, 	  \&quot;backupEntryCount\&quot;:996, 	  \&quot;ownedEntryMemoryCost\&quot;:0, 	  \&quot;backupEntryMemoryCost\&quot;:0, 	  \&quot;heapCost\&quot;:0, 	  \&quot;lockedEntryCount\&quot;:0, 	  \&quot;dirtyEntryCount\&quot;:0, 	  \&quot;hits\&quot;:0, 	  \&quot;lastAccessTime\&quot;:1403603095521, 	  \&quot;lastUpdateTime\&quot;:1403603095521, 	  \&quot;creationTime\&quot;:1403602694158, 	  \&quot;putOperationCount\&quot;:166041, 	  \&quot;getOperationCount\&quot;:110694, 	  \&quot;removeOperationCount\&quot;:55347, 	  \&quot;otherOperationCount\&quot;:0, 	  \&quot;events\&quot;:0, 	  \&quot;maxPutLatency\&quot;:77, 	  \&quot;maxGetLatency\&quot;:69, 	  \&quot;maxRemoveLatency\&quot;:42 	} 	```   "
});

documentTitles["index.html#queues-resource"] = "Queues Resource";
index.add({
    url: "index.html#queues-resource",
    title: "Queues Resource",
    body: "### Queues Resource  This resource returns a list of queues belonging to the provided cluster.   "
});

documentTitles["index.html#retrieve-list-of-queues"] = "Retrieve List of Queues";
index.add({
    url: "index.html#retrieve-list-of-queues",
    title: "Retrieve List of Queues",
    body: "##### Retrieve List of Queues + *Request Type:* GET + *URL:* `/rest/clusters/{clustername}/queues` + *Request:*  	```plain 	curl http://localhost:8083/mancenter/rest/clusters/dev/queues 	``` + *Response:* `200` (application/json) + *Body:*  	```json	 	[\&quot;messages\&quot;] 	```  "
});

documentTitles["index.html#retrieve-queue-information"] = "Retrieve Queue Information";
index.add({
    url: "index.html#retrieve-queue-information",
    title: "Retrieve Queue Information",
    body: "##### Retrieve Queue Information + *Request Type:* GET + *URL:* `/rest/clusters/{clustername}/queues/{queueName}` + *Request:*  	```plain 	curl http://localhost:8083/mancenter/rest/clusters/dev/queues/messages 	``` + *Response:* `200` (application/json) + *Body:*  	```json 	{ 	  \&quot;cluster\&quot;:\&quot;dev\&quot;, 	  \&quot;name\&quot;:\&quot;messages\&quot;, 	  \&quot;ownedItemCount\&quot;:55408, 	  \&quot;backupItemCount\&quot;:55408, 	  \&quot;minAge\&quot;:0, 	  \&quot;maxAge\&quot;:0, 	  \&quot;aveAge\&quot;:0, 	  \&quot;numberOfOffers\&quot;:55408, 	  \&quot;numberOfRejectedOffers\&quot;:0, 	  \&quot;numberOfPolls\&quot;:0, 	  \&quot;numberOfEmptyPolls\&quot;:0, 	  \&quot;numberOfOtherOperations\&quot;:0, 	  \&quot;numberOfEvents\&quot;:0, 	  \&quot;creationTime\&quot;:1403602694196 	} 	```   "
});

documentTitles["index.html#topics-resource"] = "Topics Resource";
index.add({
    url: "index.html#topics-resource",
    title: "Topics Resource",
    body: "### Topics Resource  This resource returns a list of topics belonging to the provided cluster.   "
});

documentTitles["index.html#retrieve-list-of-topics"] = "Retrieve List of Topics";
index.add({
    url: "index.html#retrieve-list-of-topics",
    title: "Retrieve List of Topics",
    body: "##### Retrieve List of Topics + *Request Type:* GET + *URL:* `/rest/clusters/{clustername}/topics` + *Request:*  	```plain 	curl http://localhost:8083/mancenter/rest/clusters/dev/topics 	``` + *Response:* `200` (application/json) + *Body:*  	```json 	[\&quot;news\&quot;] 	```  "
});

documentTitles["index.html#retrieve-topic-information"] = "Retrieve Topic Information";
index.add({
    url: "index.html#retrieve-topic-information",
    title: "Retrieve Topic Information",
    body: "##### Retrieve Topic Information + *Request Type:* GET + *URL:* `/rest/clusters/{clustername}/topics/{topicName}` + *Request:*  	```plain 	curl http://localhost:8083/mancenter/rest/clusters/dev/topics/news 	``` + *Response:* `200` (application/json) + *Body:*  	```json 	{ 	  \&quot;cluster\&quot;:\&quot;dev\&quot;, 	  \&quot;name\&quot;:\&quot;news\&quot;, 	  \&quot;numberOfPublishes\&quot;:56370, 	  \&quot;totalReceivedMessages\&quot;:56370, 	  \&quot;creationTime\&quot;:1403602693411 	} 	```   "
});

documentTitles["index.html#executors-resource"] = "Executors Resource";
index.add({
    url: "index.html#executors-resource",
    title: "Executors Resource",
    body: "### Executors Resource  This resource returns a list of executors belonging to the provided cluster.   "
});

documentTitles["index.html#retrieve-list-of-executors"] = "Retrieve List of Executors";
index.add({
    url: "index.html#retrieve-list-of-executors",
    title: "Retrieve List of Executors",
    body: "##### Retrieve List of Executors + *Request Type:* GET + *URL:* `/rest/clusters/{clustername}/executors` + *Request:*  	```plain 	curl http://localhost:8083/mancenter/rest/clusters/dev/executors 	``` + *Response:* `200` (application/json) + *Body:*  	```json 	[\&quot;order-executor\&quot;] 	```  "
});

documentTitles["index.html#retrieve-executor-information-get-restclustersclusternameexecutorsexecutorname"] = "Retrieve Executor Information [GET] [/rest/clusters/{clustername}/executors/{executorName}]";
index.add({
    url: "index.html#retrieve-executor-information-get-restclustersclusternameexecutorsexecutorname",
    title: "Retrieve Executor Information [GET] [/rest/clusters/{clustername}/executors/{executorName}]",
    body: "##### Retrieve Executor Information [GET] [/rest/clusters/{clustername}/executors/{executorName}] + *Request Type:* GET + *URL:* `/rest/clusters/{clustername}/executors/{executorName}` + *Request:*  	```plain 	curl http://localhost:8083/mancenter/rest/clusters/dev/executors/order-executor 	``` + *Response:* `200` (application/json) + *Body:*  	```json 	{ 	  \&quot;cluster\&quot;:\&quot;dev\&quot;, 	  \&quot;name\&quot;:\&quot;order-executor\&quot;, 	  \&quot;creationTime\&quot;:1403602694196, 	  \&quot;pendingTaskCount\&quot;:0, 	  \&quot;startedTaskCount\&quot;:1241, 	  \&quot;completedTaskCount\&quot;:1241, 	  \&quot;cancelledTaskCount\&quot;:0 	} 	```      "
});

documentTitles["index.html#security"] = "Security";
index.add({
    url: "index.html#security",
    title: "Security",
    body: "# Security  &lt;font color=\&quot;#3981DB\&quot;&gt;**Hazelcast Enterprise**&lt;/font&gt; &lt;br&gt;&lt;/br&gt;  This chapter describes the security features of Hazelcast. These features allow you to perform security activities, such as intercepting socket connections and remote operations executed by the clients, encrypting the communications between the members at socket level, and using SSL socket communication. All of the Security features explained in this chapter are the features of &lt;font color=\&quot;#3981DB\&quot;&gt;**Hazelcast Enterprise**&lt;/font&gt; edition.  "
});

documentTitles["index.html#enabling-security-for-hazelcast-enterprise"] = "Enabling Security for Hazelcast Enterprise";
index.add({
    url: "index.html#enabling-security-for-hazelcast-enterprise",
    title: "Enabling Security for Hazelcast Enterprise",
    body: "## Enabling Security for Hazelcast Enterprise   With Hazelcast's extensible, JAAS based security feature, you can:  - authenticate both cluster members and clients,  - and perform access control checks on client operations. Access control can be done according to endpoint principal and/or endpoint address.   You can enable security declaratively or programmatically, as shown below.   ```xml &lt;hazelcast&gt;   ...       &lt;security enabled=\&quot;true\&quot;&gt;     ...   &lt;/security&gt; &lt;/hazelcast&gt; ```    ```java Config cfg = new Config(); SecurityConfig securityCfg = cfg.getSecurityConfig(); securityCfg.setEnabled( true ); ```  Also, see the [Setting License Key section](#setting-the-license-key) for information on how to set your &lt;font color=\&quot;#3981DB\&quot;&gt;**Hazelcast Enterprise**&lt;/font&gt; license.        "
});

documentTitles["index.html#socket-interceptor"] = "Socket Interceptor";
index.add({
    url: "index.html#socket-interceptor",
    title: "Socket Interceptor",
    body: "## Socket Interceptor  &lt;font color=\&quot;#3981DB\&quot;&gt;**Hazelcast Enterprise**&lt;/font&gt; &lt;br&gt;&lt;/br&gt;    Hazelcast allows you to intercept socket connections before a member joins a cluster or a client connects to a member of a cluster. This allow you to add custom hooks to join and perform connection procedures (like identity checking using Kerberos, etc.).   To use the socket interceptor, implement `com.hazelcast.nio.MemberSocketInterceptor` for members and `com.hazelcast.nio.SocketInterceptor` for clients.  The following example code enables the socket interceptor for members.  ```java public class MySocketInterceptor implements MemberSocketInterceptor {   public void init( SocketInterceptorConfig socketInterceptorConfig ) {     // initialize interceptor   }    void onConnect( Socket connectedSocket ) throws IOException {     // do something meaningful when a member has connected to the cluster   }    public void onAccept( Socket acceptedSocket ) throws IOException {     // do something meaningful when the cluster is ready to accept the member connection   } } ```  ```xml &lt;hazelcast&gt;   ...   &lt;network&gt;     ...     &lt;socket-interceptor enabled=\&quot;true\&quot;&gt;       &lt;class-name&gt;com.hazelcast.examples.MySocketInterceptor&lt;/class-name&gt;       &lt;properties&gt;         &lt;property name=\&quot;kerberos-host\&quot;&gt;kerb-host-name&lt;/property&gt;         &lt;property name=\&quot;kerberos-config-file\&quot;&gt;kerb.conf&lt;/property&gt;       &lt;/properties&gt;     &lt;/socket-interceptor&gt;   &lt;/network&gt;   ... &lt;/hazelcast&gt; ```  ```java public class MyClientSocketInterceptor implements SocketInterceptor {   void onConnect( Socket connectedSocket ) throws IOException {     // do something meaningful when connected   } }  ClientConfig clientConfig = new ClientConfig(); clientConfig.setGroupConfig( new GroupConfig( \&quot;dev\&quot;, \&quot;dev-pass\&quot; ) )     .addAddress( \&quot;10.10.3.4\&quot; );  MyClientSocketInterceptor clientSocketInterceptor = new MyClientSocketInterceptor(); clientConfig.setSocketInterceptor( clientSocketInterceptor ); HazelcastInstance client = HazelcastClient.newHazelcastClient( clientConfig ); ```       "
});

documentTitles["index.html#security-interceptor"] = "Security Interceptor";
index.add({
    url: "index.html#security-interceptor",
    title: "Security Interceptor",
    body: "## Security Interceptor  &lt;font color=\&quot;#3981DB\&quot;&gt;**Hazelcast Enterprise**&lt;/font&gt; &lt;br&gt;&lt;/br&gt;   Hazelcast allows you to intercept every remote operation executed by the client. This lets you add a very flexible custom security logic. To do this, implement `com.hazelcast.security.SecurityInterceptor`.  ```java public class MySecurityInterceptor implements SecurityInterceptor {    public void before( Credentials credentials, String serviceName,                       String methodName, Parameters parameters )       throws AccessControlException {     // credentials: client credentials      // serviceName: MapService.SERVICE_NAME, QueueService.SERVICE_NAME, ... etc     // methodName: put, get, offer, poll, ... etc     // parameters: holds parameters of the executed method, iterable.   }    public void after( Credentials credentials, String serviceName,                      String methodName, Parameters parameters ) {     // can be used for logging etc.   } } ```  The `before` method will be called before processing the request on the remote server. The `after` method will be called after the processing. Exceptions thrown while executing the `before` method will propagate to the client, but exceptions thrown while executing the `after` method will be suppressed.       "
});

documentTitles["index.html#encryption"] = "Encryption";
index.add({
    url: "index.html#encryption",
    title: "Encryption",
    body: "## Encryption  &lt;font color=\&quot;#3981DB\&quot;&gt;**Hazelcast Enterprise**&lt;/font&gt; &lt;br&gt;&lt;/br&gt;   Hazelcast allows you to encrypt the entire socket level communication among all Hazelcast members. Encryption is based on &lt;a href=\&quot;http://java.sun.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html\&quot; target=\&quot;_blank\&quot;&gt;Java Cryptography Architecture&lt;/a&gt;. In symmetric encryption, each node uses the same key, so the key is shared. Here is an example configuration for symmetric encryption.  You set the encryption algorithm, the salt value to use for generating the secret key, the password to use when generating the secret key, and the iteration count to use when generating the secret key. You also need to set `enabled` to true.  ```xml &lt;hazelcast&gt;   ...   &lt;network&gt;     ...     &lt;!--       Make sure to set enabled=true       Make sure this configuration is exactly the same on       all members     --&gt;     &lt;symmetric-encryption enabled=\&quot;true\&quot;&gt;       &lt;!--         encryption algorithm such as         DES/ECB/PKCS5Padding,         PBEWithMD5AndDES,         Blowfish,         DESede       --&gt;       &lt;algorithm&gt;PBEWithMD5AndDES&lt;/algorithm&gt;        &lt;!-- salt value to use when generating the secret key --&gt;       &lt;salt&gt;thesalt&lt;/salt&gt;        &lt;!-- pass phrase to use when generating the secret key --&gt;       &lt;password&gt;thepass&lt;/password&gt;        &lt;!-- iteration count to use when generating the secret key --&gt;       &lt;iteration-count&gt;19&lt;/iteration-count&gt;     &lt;/symmetric-encryption&gt;   &lt;/network&gt;   ... &lt;/hazelcast&gt; ```  &lt;br&gt; &lt;/br&gt;   ***RELATED INFORMATION***  *Please see the [SSL section](#ssl).*     "
});

documentTitles["index.html#ssl"] = "SSL";
index.add({
    url: "index.html#ssl",
    title: "SSL",
    body: "## SSL  &lt;font color=\&quot;#3981DB\&quot;&gt;**Hazelcast Enterprise**&lt;/font&gt; &lt;br&gt;&lt;/br&gt;   Hazelcast allows you to encrypt socket level communication between Hazelcast members and between Hazelcast clients and members, for end to end encryption. To use it, you need to implement `com.hazelcast.nio.ssl.SSLContextFactory` and configure the SSL section in network configuration.  ```java public class MySSLContextFactory implements SSLContextFactory {   public void init( Properties properties ) throws Exception {   }    public SSLContext getSSLContext() {     ...     SSLContext sslCtx = SSLContext.getInstance( protocol );     return sslCtx;   } } ```  ```xml &lt;hazelcast&gt;   ...   &lt;network&gt;     ...     &lt;ssl enabled=\&quot;true\&quot;&gt;       &lt;factory-class-name&gt;           com.hazelcast.examples.MySSLContextFactory       &lt;/factory-class-name&gt;       &lt;properties&gt;         &lt;property name=\&quot;foo\&quot;&gt;bar&lt;/property&gt;       &lt;/properties&gt;     &lt;/ssl&gt;   &lt;/network&gt;   ... &lt;/hazelcast&gt; ```  Hazelcast provides a default SSLContextFactory, `com.hazelcast.nio.ssl.BasicSSLContextFactory`, which uses configured keystore to initialize `SSLContext`. You define `keyStore` and `keyStorePassword`, and you can set `keyManagerAlgorithm` (default `SunX509`), `trustManagerAlgorithm` (default `SunX509`) and `protocol` (default `TLS`).  ```xml &lt;hazelcast&gt;   ...   &lt;network&gt;     ...     &lt;ssl enabled=\&quot;true\&quot;&gt;       &lt;factory-class-name&gt;           com.hazelcast.nio.ssl.BasicSSLContextFactory       &lt;/factory-class-name&gt;       &lt;properties&gt;         &lt;property name=\&quot;keyStore\&quot;&gt;keyStore&lt;/property&gt;         &lt;property name=\&quot;keyStorePassword\&quot;&gt;keyStorePassword&lt;/property&gt;         &lt;property name=\&quot;keyManagerAlgorithm\&quot;&gt;SunX509&lt;/property&gt;         &lt;property name=\&quot;trustManagerAlgorithm\&quot;&gt;SunX509&lt;/property&gt;         &lt;property name=\&quot;protocol\&quot;&gt;TLS&lt;/property&gt;       &lt;/properties&gt;     &lt;/ssl&gt;   &lt;/network&gt;   ... &lt;/hazelcast&gt; ```  Hazelcast client also has SSL support. You can configure Client SSL programmatically as shown below.  ```java System.setProperty(\&quot;javax.net.ssl.keyStore\&quot;, new File(\&quot;hazelcast.ks\&quot;).getAbsolutePath()); System.setProperty(\&quot;javax.net.ssl.trustStore\&quot;, new File(\&quot;hazelcast.ts\&quot;).getAbsolutePath()); System.setProperty(\&quot;javax.net.ssl.keyStorePassword\&quot;, \&quot;password\&quot;);  ClientConfig clientConfig = new ClientConfig(); clientConfig.getNetworkConfig().addAddress(\&quot;127.0.0.1\&quot;); ```  For example, you can set `keyStore` and `keyStorePassword` with the following system properties.   - `javax.net.ssl.keyStore`  - `javax.net.ssl.keyStorePassword`   ![image](images/NoteSmall.jpg) ***NOTE:*** *You cannot use SSL when [Hazelcast Encryption](#encryption) is enabled.*      "
});

documentTitles["index.html#credentials"] = "Credentials";
index.add({
    url: "index.html#credentials",
    title: "Credentials",
    body: "## Credentials  &lt;font color=\&quot;#3981DB\&quot;&gt;**Hazelcast Enterprise**&lt;/font&gt; &lt;br&gt;&lt;/br&gt;    One of the key elements in Hazelcast security is the `Credentials` object, which carries all credentials of an endpoint (member or client). Credentials is an interface which extends `Serializable`. You can either implement the three methods in the `Credentials` interface, or you can extend the `AbstractCredentials` class, which is an abstract implementation of `Credentials`.  Hazelcast calls the `Credentials.setEndpoint()` method when an authentication request arrives at the node before authentication takes place.  ```java package com.hazelcast.security; public interface Credentials extends Serializable {   String getEndpoint();   void setEndpoint( String endpoint ) ;       String getPrincipal() ;     } ```  Here is an example of extending the `AbstractCredentials` class.  ```java package com.hazelcast.security; ... public abstract class AbstractCredentials implements Credentials, DataSerializable {   private transient String endpoint;   private String principal;   ... } ```  `UsernamePasswordCredentials`, a custom implementation of Credentials, is in the Hazelcast `com.hazelcast.security` package. `UsernamePasswordCredentials` is used for default configuration during the authentication process of both members and clients.  ```java package com.hazelcast.security; ... public class UsernamePasswordCredentials extends Credentials {   private byte[] password;   ... } ```      "
});

documentTitles["index.html#clusterloginmodule"] = "ClusterLoginModule";
index.add({
    url: "index.html#clusterloginmodule",
    title: "ClusterLoginModule",
    body: "## ClusterLoginModule  &lt;font color=\&quot;#3981DB\&quot;&gt;**Hazelcast Enterprise**&lt;/font&gt; &lt;br&gt;&lt;/br&gt;   All security attributes are carried in the `Credentials` object. `Credentials` is used by &lt;a href=\&quot;http://docs.oracle.com/javase/7/docs/api/javax/security/auth/spi/LoginModule.html\&quot; target=\&quot;_blank\&quot;&gt;LoginModule&lt;/a&gt; s during the authentication process. User supplied attributes from `LoginModule`s are accessed by &lt;a href=\&quot;http://docs.oracle.com/javase/7/docs/api/javax/security/auth/callback/CallbackHandler.html\&quot; target=\&quot;_blank\&quot;&gt;CallbackHandler&lt;/a&gt; s. To access the `Credentials` object, Hazelcast uses its own specialized `CallbackHandler`. During initialization of `LoginModules`, Hazelcast passes this special `CallbackHandler` into the `LoginModule.initialize()` method.  Your implementation of `LoginModule` should create an instance of `com.hazelcast.security.CredentialsCallback` and call the `handle(Callback[] callbacks)` method of `CallbackHandler` during the login process.   `CredentialsCallback.getCredentials()` returns the supplied `Credentials` object.  ```java public class CustomLoginModule implements LoginModule {   CallbackHandler callbackHandler;   Subject subject;        public void initialize( Subject subject, CallbackHandler callbackHandler,                           Map&lt;String, ?&gt; sharedState, Map&lt;String, ?&gt; options ) {     this.subject = subject;     this.callbackHandler = callbackHandler;   }    public final boolean login() throws LoginException {     CredentialsCallback callback = new CredentialsCallback();     try {       callbackHandler.handle( new Callback[] { callback } );       credentials = cb.getCredentials();     } catch ( Exception e ) {       throw new LoginException( e.getMessage() );     }     ...   }   ... } ```  To use the default Hazelcast permission policy, you must create an instance of `com.hazelcast.security.ClusterPrincipal` that holds the `Credentials` object, and you must add it to `Subject.principals onLoginModule.commit()` as shown below.  ```java public class MyCustomLoginModule implements LoginModule {   ...   public boolean commit() throws LoginException {     ...     Principal principal = new ClusterPrincipal( credentials );     subject.getPrincipals().add( principal );              return true;   }   ... } ```  Hazelcast has an abstract implementation of `LoginModule` that does callback and cleanup operations and holds the resulting `Credentials` instance. `LoginModule`s extending `ClusterLoginModule` can access `Credentials`, `Subject`, `LoginModule` instances and options, and `sharedState` maps. Extending the `ClusterLoginModule` is recommended instead of implementing all required stuff.  ```java package com.hazelcast.security; ... public abstract class ClusterLoginModule implements LoginModule {    protected abstract boolean onLogin() throws LoginException;   protected abstract boolean onCommit() throws LoginException;   protected abstract boolean onAbort() throws LoginException;   protected abstract boolean onLogout() throws LoginException; } ``` &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#enterprise-integration"] = "Enterprise Integration";
index.add({
    url: "index.html#enterprise-integration",
    title: "Enterprise Integration",
    body: "### Enterprise Integration  Using the above API, you can implement a `LoginModule` that performs authentication against the Security System of your choice, such as an LDAP store like &lt;a href=\&quot;https://directory.apache.org/\&quot; target=\&quot;_blank\&quot;&gt;Apache Directory&lt;/a&gt; or some other corporate standard you might have. For example, you may wish to have your clients send an identification token in the `Credentials` object. This token can then be sent to your back-end security system via the `LoginModule` that runs on the cluster side.  Additionally, the same system may authenticate the user and also then return the roles that are attributed to the user. These roles can then be used for data structure authorization.   ***RELATED INFORMATION***  *Please refer to &lt;a href=\&quot;http://docs.oracle.com/javase/7/docs/technotes/guides/security/jaas/JAASRefGuide.html\&quot; target=\&quot;_blank\&quot;&gt;JAAS Reference Guide&lt;/a&gt; for further information.*     "
});

documentTitles["index.html#cluster-member-security"] = "Cluster Member Security";
index.add({
    url: "index.html#cluster-member-security",
    title: "Cluster Member Security",
    body: "## Cluster Member Security  &lt;font color=\&quot;#3981DB\&quot;&gt;**Hazelcast Enterprise**&lt;/font&gt; &lt;br&gt;&lt;/br&gt;   Hazelcast supports standard Java Security (JAAS) based authentication between cluster members. To implement it, you configure one or more LoginModules and an instance of `com.hazelcast.security.ICredentialsFactory`. Although Hazelcast has default implementations using cluster group and group-password and UsernamePasswordCredentials on authentication, it is recommended that you implement the LoginModules and an instance of `com.hazelcast.security.ICredentialsFactory` according to your specific needs and environment.  ```xml &lt;security enabled=\&quot;true\&quot;&gt;   &lt;member-credentials-factory        class-name=\&quot;com.hazelcast.examples.MyCredentialsFactory\&quot;&gt;     &lt;properties&gt;       &lt;property name=\&quot;property1\&quot;&gt;value1&lt;/property&gt;       &lt;property name=\&quot;property2\&quot;&gt;value2&lt;/property&gt;     &lt;/properties&gt;   &lt;/member-credentials-factory&gt;   &lt;member-login-modules&gt;     &lt;login-module usage=\&quot;required\&quot;         class-name=\&quot;com.hazelcast.examples.MyRequiredLoginModule\&quot;&gt;       &lt;properties&gt;         &lt;property name=\&quot;property3\&quot;&gt;value3&lt;/property&gt;       &lt;/properties&gt;     &lt;/login-module&gt;     &lt;login-module usage=\&quot;sufficient\&quot;         class-name=\&quot;com.hazelcast.examples.MySufficientLoginModule\&quot;&gt;       &lt;properties&gt;         &lt;property name=\&quot;property4\&quot;&gt;value4&lt;/property&gt;       &lt;/properties&gt;     &lt;/login-module&gt;     &lt;login-module usage=\&quot;optional\&quot;         class-name=\&quot;com.hazelcast.examples.MyOptionalLoginModule\&quot;&gt;       &lt;properties&gt;         &lt;property name=\&quot;property5\&quot;&gt;value5&lt;/property&gt;       &lt;/properties&gt;     &lt;/login-module&gt;   &lt;/member-login-modules&gt;   ... &lt;/security&gt; ```  You can define as many as LoginModules as you want in configuration. They are executed in the order listed in configuration. The `usage` attribute has 4 values: 'required', 'requisite', 'sufficient' and 'optional' as defined in `javax.security.auth.login.AppConfigurationEntry.LoginModuleControlFlag`.  ```java package com.hazelcast.security; /**  * ICredentialsFactory is used to create Credentials objects to be used  * during node authentication before connection accepted by master node.  */ public interface ICredentialsFactory {    void configure( GroupConfig groupConfig, Properties properties );    Credentials newCredentials();    void destroy(); } ```  Properties defined in configuration are passed to the `ICredentialsFactory.configure()` method as java.util.Properties and to the `LoginModule.initialize()` method as java.util.Map.      "
});

documentTitles["index.html#native-client-security"] = "Native Client Security";
index.add({
    url: "index.html#native-client-security",
    title: "Native Client Security",
    body: "## Native Client Security  &lt;font color=\&quot;#3981DB\&quot;&gt;**Hazelcast Enterprise**&lt;/font&gt; &lt;br&gt;&lt;/br&gt;    Hazelcast's Client security includes both authentication and authorization.  "
});

documentTitles["index.html#authentication"] = "Authentication";
index.add({
    url: "index.html#authentication",
    title: "Authentication",
    body: "### Authentication  The authentication mechanism works the same as cluster member authentication. To implement client authentication, you configure a Credential and one or more LoginModules. The client side does not have and does not need a factory object to create Credentials objects like `ICredentialsFactory`. You must create the credentials at the client side and send them to the connected member during the connection process.  ```xml &lt;security enabled=\&quot;true\&quot;&gt;   &lt;client-login-modules&gt;     &lt;login-module usage=\&quot;required\&quot;         class-name=\&quot;com.hazelcast.examples.MyRequiredClientLoginModule\&quot;&gt;       &lt;properties&gt;         &lt;property name=\&quot;property3\&quot;&gt;value3&lt;/property&gt;       &lt;/properties&gt;     &lt;/login-module&gt;     &lt;login-module usage=\&quot;sufficient\&quot;         class-name=\&quot;com.hazelcast.examples.MySufficientClientLoginModule\&quot;&gt;       &lt;properties&gt;         &lt;property name=\&quot;property4\&quot;&gt;value4&lt;/property&gt;       &lt;/properties&gt;     &lt;/login-module&gt;     &lt;login-module usage=\&quot;optional\&quot;         class-name=\&quot;com.hazelcast.examples.MyOptionalClientLoginModule\&quot;&gt;       &lt;properties&gt;         &lt;property name=\&quot;property5\&quot;&gt;value5&lt;/property&gt;       &lt;/properties&gt;     &lt;/login-module&gt;   &lt;/client-login-modules&gt;   ... &lt;/security&gt; ```  You can define as many as `LoginModules` as you want in configuration. Those are executed in the order given in configuration. The `usage` attribute has 4 values: 'required', 'requisite', 'sufficient' and 'optional' as defined in `javax.security.auth.login.AppConfigurationEntry.LoginModuleControlFlag`.  ```java ClientConfig clientConfig = new ClientConfig(); clientConfig.setCredentials( new UsernamePasswordCredentials( \&quot;dev\&quot;, \&quot;dev-pass\&quot; ) ); HazelcastInstance client = HazelcastClient.newHazelcastClient( clientConfig ); ```  "
});

documentTitles["index.html#authorization"] = "Authorization";
index.add({
    url: "index.html#authorization",
    title: "Authorization",
    body: "### Authorization  Hazelcast client authorization is configured by a client permission policy. Hazelcast has a default permission policy implementation that uses permission configurations defined in the Hazelcast security configuration. Default policy permission checks are done against instance types (map, queue, etc.), instance names (map, queue, name, etc.), instance actions (put, read, remove, add, etc.), client endpoint addresses, and client principal defined by the Credentials object. Instance and principal names and endpoint addresses can be defined as wildcards(*). Please see the [Network Configuration section](#network-configuration) and [Using Wildcard section](#using-wildcard).  ```xml &lt;security enabled=\&quot;true\&quot;&gt;   &lt;client-permissions&gt;     &lt;!-- Principal 'admin' from endpoint '127.0.0.1' has all permissions. --&gt;     &lt;all-permissions principal=\&quot;admin\&quot;&gt;       &lt;endpoints&gt;         &lt;endpoint&gt;127.0.0.1&lt;/endpoint&gt;       &lt;/endpoints&gt;     &lt;/all-permissions&gt;              &lt;!-- Principals named 'dev' from all endpoints have 'create', 'destroy',           'put', 'read' permissions for map named 'default'. --&gt;     &lt;map-permission name=\&quot;default\&quot; principal=\&quot;dev\&quot;&gt;       &lt;actions&gt;         &lt;action&gt;create&lt;/action&gt;         &lt;action&gt;destroy&lt;/action&gt;         &lt;action&gt;put&lt;/action&gt;         &lt;action&gt;read&lt;/action&gt;       &lt;/actions&gt;     &lt;/map-permission&gt;              &lt;!-- All principals from endpoints '127.0.0.1' or matching to '10.10.*.*'           have 'put', 'read', 'remove' permissions for map          whose name matches to 'com.foo.entity.*'. --&gt;     &lt;map-permission name=\&quot;com.foo.entity.*\&quot;&gt;       &lt;endpoints&gt;         &lt;endpoint&gt;10.10.*.*&lt;/endpoint&gt;         &lt;endpoint&gt;127.0.0.1&lt;/endpoint&gt;       &lt;/endpoints&gt;       &lt;actions&gt;         &lt;action&gt;put&lt;/action&gt;         &lt;action&gt;read&lt;/action&gt;         &lt;action&gt;remove&lt;/action&gt;       &lt;/actions&gt;     &lt;/map-permission&gt;              &lt;!-- Principals named 'dev' from endpoints matching to either           '192.168.1.1-100' or '192.168.2.*'           have 'create', 'add', 'remove' permissions for all queues. --&gt;     &lt;queue-permission name=\&quot;*\&quot; principal=\&quot;dev\&quot;&gt;       &lt;endpoints&gt;         &lt;endpoint&gt;192.168.1.1-100&lt;/endpoint&gt;         &lt;endpoint&gt;192.168.2.*&lt;/endpoint&gt;       &lt;/endpoints&gt;       &lt;actions&gt;         &lt;action&gt;create&lt;/action&gt;         &lt;action&gt;add&lt;/action&gt;         &lt;action&gt;remove&lt;/action&gt;       &lt;/actions&gt;     &lt;/queue-permission&gt;              &lt;!-- All principals from all endpoints have transaction permission.--&gt;     &lt;transaction-permission /&gt;   &lt;/client-permissions&gt; &lt;/security&gt; ```  You can also define your own policy by implementing `com.hazelcast.security.IPermissionPolicy`.  ```java package com.hazelcast.security; /**  * IPermissionPolicy is used to determine any Subject's   * permissions to perform a security sensitive Hazelcast operation.  *  */ public interface IPermissionPolicy {   void configure( SecurityConfig securityConfig, Properties properties );        PermissionCollection getPermissions( Subject subject,                                        Class&lt;? extends Permission&gt; type );        void destroy(); } ```  Permission policy implementations can access client-permissions that are in configuration by using `SecurityConfig. getClientPermissionConfigs()` when Hazelcast calls the method `configure(SecurityConfig securityConfig, Properties properties)`.  The `IPermissionPolicy.getPermissions(Subject subject, Class&lt;? extends Permission&gt; type)` method is used to determine a client request that has been granted permission to perform a security-sensitive operation.   Permission policy should return a `PermissionCollection` containing permissions of the given type for the given `Subject`. The Hazelcast access controller will call `PermissionCollection.implies(Permission)` on returning `PermissionCollection` and it will decide whether or not the current `Subject` has permission to access the requested resources.  "
});

documentTitles["index.html#permissions"] = "Permissions";
index.add({
    url: "index.html#permissions",
    title: "Permissions",
    body: "### Permissions  - All Permission  ```xml &lt;all-permissions principal=\&quot;principal\&quot;&gt;   &lt;endpoints&gt;     ...   &lt;/endpoints&gt; &lt;/all-permissions&gt; ```  - Map Permission  ```xml &lt;map-permission name=\&quot;name\&quot; principal=\&quot;principal\&quot;&gt;   &lt;endpoints&gt;     ...   &lt;/endpoints&gt;   &lt;actions&gt;     ...   &lt;/actions&gt; &lt;/map-permission&gt; ``` 	Actions: all, create, destroy, put, read, remove, lock, intercept, index, listen  - Queue Permission  ```xml &lt;queue-permission name=\&quot;name\&quot; principal=\&quot;principal\&quot;&gt;   &lt;endpoints&gt;     ...   &lt;/endpoints&gt;   &lt;actions&gt;     ...   &lt;/actions&gt; &lt;/queue-permission&gt; ```  	Actions: all, create, destroy, add, remove, read, listen  - Multimap Permission  ```xml &lt;multimap-permission name=\&quot;name\&quot; principal=\&quot;principal\&quot;&gt;   &lt;endpoints&gt;     ...   &lt;/endpoints&gt;   &lt;actions&gt;     ...   &lt;/actions&gt; &lt;/multimap-permission&gt; ``` 	Actions: all, create, destroy, put, read, remove, listen, lock  - Topic Permission  ```xml &lt;topic-permission name=\&quot;name\&quot; principal=\&quot;principal\&quot;&gt;   &lt;endpoints&gt;     ...   &lt;/endpoints&gt;   &lt;actions&gt;     ...   &lt;/actions&gt; &lt;/topic-permission&gt; ``` 	Actions: create, destroy, publish, listen  - List Permission  ```xml &lt;list-permission name=\&quot;name\&quot; principal=\&quot;principal\&quot;&gt;   &lt;endpoints&gt;     ...   &lt;/endpoints&gt;   &lt;actions&gt;     ...   &lt;/actions&gt; &lt;/list-permission&gt; ``` 	Actions: all, create, destroy, add, read, remove, listen  - Set Permission  ```xml &lt;set-permission name=\&quot;name\&quot; principal=\&quot;principal\&quot;&gt;   &lt;endpoints&gt;     ...   &lt;/endpoints&gt;   &lt;actions&gt;     ...   &lt;/actions&gt; &lt;/set-permission&gt; ``` 	Actions: all, create, destroy, add, read, remove, listen  - Lock Permission  ```xml &lt;lock-permission name=\&quot;name\&quot; principal=\&quot;principal\&quot;&gt;   &lt;endpoints&gt;     ...   &lt;/endpoints&gt;   &lt;actions&gt;     ...   &lt;/actions&gt; &lt;/lock-permission&gt; ``` 	Actions: all, create, destroy, lock, read  - AtomicLong Permission  ```xml &lt;atomic-long-permission name=\&quot;name\&quot; principal=\&quot;principal\&quot;&gt;   &lt;endpoints&gt;         ...   &lt;/endpoints&gt;   &lt;actions&gt;     ...   &lt;/actions&gt; &lt;/atomic-long-permission&gt; ``` 	Actions: all, create, destroy, read, modify  - CountDownLatch Permission  ```xml &lt;countdown-latch-permission name=\&quot;name\&quot; principal=\&quot;principal\&quot;&gt;   &lt;endpoints&gt;     ...   &lt;/endpoints&gt;   &lt;actions&gt;     ...   &lt;/actions&gt; &lt;/countdown-latch-permission&gt; ``` 	Actions: all, create, destroy, modify, read 	 - IdGenerator Permission  ```xml &lt;id-generator-permission name=\&quot;name\&quot; principal=\&quot;principal\&quot;&gt;   &lt;endpoints&gt;     ...   &lt;/endpoints&gt;   &lt;actions&gt;     ...   &lt;/actions&gt; &lt;/id-generator-permission&gt; ``` 	Actions: all, create, destroy, modify, read   - Semaphore Permission  ```xml &lt;semaphore-permission name=\&quot;name\&quot; principal=\&quot;principal\&quot;&gt;   &lt;endpoints&gt;     ...   &lt;/endpoints&gt;   &lt;actions&gt;     ...   &lt;/actions&gt; &lt;/semaphore-permission&gt; ``` 	Actions: all, create, destroy, acquire, release, read  - Executor Service Permission  ```xml &lt;executor-service-permission name=\&quot;name\&quot; principal=\&quot;principal\&quot;&gt;   &lt;endpoints&gt;     ...   &lt;/endpoints&gt;   &lt;actions&gt;     ...   &lt;/actions&gt; &lt;/executor-service-permission&gt; ``` 	Actions: all, create, destroy  - Transaction Permission  ```xml &lt;transaction-permission principal=\&quot;principal\&quot;&gt;   &lt;endpoints&gt;     ...   &lt;/endpoints&gt; &lt;/transaction-permission&gt; ```  &lt;br&gt; &lt;/br&gt;    "
});

documentTitles["index.html#performance"] = "Performance";
index.add({
    url: "index.html#performance",
    title: "Performance",
    body: "# Performance  This chapter provides information on the performance features of Hazelcast including slow operations detector, back pressure and data affinity. Moreover, the chapter describes the best performance practices for Hazelcast deployed on Amazon EC2. It also describes the threading models for I/O, events, executors and operations.   "
});

documentTitles["index.html#data-affinity"] = "Data Affinity";
index.add({
    url: "index.html#data-affinity",
    title: "Data Affinity",
    body: "## Data Affinity  Data affinity ensures that related entries exist on the same node. If related data is on the same node, operations can be executed without the cost of extra network calls and extra wire data. This feature is provided by using the same partition keys for related data.  **Co-location of related data and computation**  Hazelcast has a standard way of finding out which member owns/manages each key object. The following operations will be routed to the same member, since all of them are operating based on the same key `\&quot;key1\&quot;`.  ```java HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance(); Map mapA = hazelcastInstance.getMap( \&quot;mapA\&quot; ); Map mapB = hazelcastInstance.getMap( \&quot;mapB\&quot; ); Map mapC = hazelcastInstance.getMap( \&quot;mapC\&quot; );  // since map names are different, operation will be manipulating // different entries, but the operation will take place on the // same member since the keys (\&quot;key1\&quot;) are the same mapA.put( \&quot;key1\&quot;, value ); mapB.get( \&quot;key1\&quot; ); mapC.remove( \&quot;key1\&quot; );  // lock operation will still execute on the same member // of the cluster since the key (\&quot;key1\&quot;) is same hazelcastInstance.getLock( \&quot;key1\&quot; ).lock();  // distributed execution will execute the 'runnable' on the // same member since \&quot;key1\&quot; is passed as the key.    hazelcastInstance.getExecutorService().executeOnKeyOwner( runnable, \&quot;key1\&quot; ); ```  When the keys are the same, entries are stored on the same node. But we sometimes want to have related entries stored on the same node, such as a customer and his/her order entries. We would have a customers map with customerId as the key and an orders map with orderId as the key. Since customerId and orderId are different keys, a customer and his/her orders may fall into different members/nodes in your cluster. So how can we have them stored on the same node? We create an affinity between customer and orders. If we make them part of the same partition then these entries will be co-located. We achieve this by making orderIds `PartitionAware`.  ```java public class OrderKey implements Serializable, PartitionAware {    private final long customerId;   private final long orderId;    public OrderKey( long orderId, long customerId ) {     this.customerId = customerId;     this.orderId = orderId;   }    public long getCustomerId() {     return customerId;   }    public long getOrderId() {     return orderId;   }    public Object getPartitionKey() {     return customerId;   }    @Override   public String toString() {     return \&quot;OrderKey{\&quot;       + \&quot;customerId=\&quot; + customerId       + \&quot;, orderId=\&quot; + orderId       + '}';   } } ```  Notice that OrderKey implements `PartitionAware` and that `getPartitionKey()` returns the `customerId`. This will make sure that the `Customer` entry and its `Order`s will be stored on the same node.  ```java HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance(); Map mapCustomers = hazelcastInstance.getMap( \&quot;customers\&quot; ); Map mapOrders = hazelcastInstance.getMap( \&quot;orders\&quot; );  // create the customer entry with customer id = 1 mapCustomers.put( 1, customer );  // now create the orders for this customer mapOrders.put( new OrderKey( 21, 1 ), order ); mapOrders.put( new OrderKey( 22, 1 ), order ); mapOrders.put( new OrderKey( 23, 1 ), order ); ```  Assume that you have a customers map where `customerId` is the key and the customer object is the value. You want to remove one of the customer orders and return the number of remaining orders. Here is how you would normally do it.  ```java public static int removeOrder( long customerId, long orderId ) throws Exception {   IMap&lt;Long, Customer&gt; mapCustomers = instance.getMap( \&quot;customers\&quot; );   IMap mapOrders = hazelcastInstance.getMap( \&quot;orders\&quot; );    mapCustomers.lock( customerId );   mapOrders.remove( orderId );   Set orders = orderMap.keySet(Predicates.equal( \&quot;customerId\&quot;, customerId ));   mapCustomers.unlock( customerId );    return orders.size(); } ```  There are couple of things you should consider.  1. There are four distributed operations there: lock, remove, keySet, unlock. Can you reduce  the number of distributed operations? 2. The customer object may not be that big, but can you not have to pass that object through the  wire? Think about a scenario where you set order count to the customer object for fast access, so you  should do a get and a put, and as a result, the customer object is passed through the wire twice.  Instead, why not move the computation over to the member (JVM) where your customer data resides. Here is how you can do this with distributed executor service.  1. Send a `PartitionAware` `Callable` task. 2. `Callable` does the deletion of the order right there and returns with the remaining  order count. 3. Upon completion of the `Callable` task, return the result (remaining order count). You  do not have to wait until the task is completed; since distributed executions are asynchronous, you can do other things in the meantime.  Here is some example code.  ```java HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance();  public int removeOrder( long customerId, long orderId ) throws Exception {   IExecutorService executorService     = hazelcastInstance.getExecutorService( \&quot;ExecutorService\&quot; );      OrderDeletionTask task = new OrderDeletionTask( customerId, orderId );   Future&lt;Integer&gt; future = executorService.submit( task );   int remainingOrders = future.get();      return remainingOrders; }  public static class OrderDeletionTask     implements Callable&lt;Integer&gt;, PartitionAware, Serializable {    private long customerId;   private long orderId;    public OrderDeletionTask() {   }    public OrderDeletionTask(long customerId, long orderId) {     this.customerId = customerId;     this.orderId = orderId;   }    @Override   public Integer call() {     Map&lt;Long, Customer&gt; customerMap = hazelcastInstance.getMap( \&quot;customers\&quot; );     IMap&lt;OrderKey, Order&gt; orderMap = hazelcastInstance.getMap( \&quot;orders\&quot; );          mapCustomers.lock( customerId );     Customer customer = mapCustomers.get( customerId );     Predicate predicate = Predicates.equal( \&quot;customerId\&quot;, customerId );     Set&lt;OrderKey&gt; orderKeys = orderMap.localKeySet( predicate );     int orderCount = orderKeys.size();     for (OrderKey key : orderKeys) {       if (key.orderId == orderId) {         orderCount--;         orderMap.delete( key );       }     }     mapCustomers.unlock( customerId );          return orderCount;   }    @Override   public Object getPartitionKey() {     return customerId;   } } ```  The benefits of doing the same operation with distributed `ExecutorService` based on the key are:  - Only one distributed execution (`executorService.submit(task)`), instead of four. - Less data is sent over the wire. - Since lock/update/unlock cycle is done locally (local to the customer data), lock duration for the `Customer` entry is much less, thus enabling higher concurrency.    "
});

documentTitles["index.html#back-pressure"] = "Back Pressure";
index.add({
    url: "index.html#back-pressure",
    title: "Back Pressure",
    body: "## Back Pressure  Hazelcast uses operations to make remote calls. For example, a `map.get` is an operation and a `map.put` is one operation for the primary  and one operation for each of the backups, i.e. `map.put` is executed for the primary and also for each backup. In most cases, there will be a natural balance between the number of threads performing operations and the number of operations being executed. However, there are two situations where this balance and operations  can pile up and eventually lead to Out of Memory Exception (OOME):  - Asynchronous calls: With async calls, the system may be flooded with the requests.  - Asynchronous backups: The asynchronous backups may be piling up.  To prevent the system from crashing, Hazelcast provides back pressure. Back pressure works by:   - limiting the number of concurrent operation invocations,   - periodically making an async backup sync.  Back pressure is disabled by default and you can enable it using the following system property:  `hazelcast.backpressure.enabled`  To control the number of concurrent invocations, you can configure the number of invocations allowed per partition using the  following system property:  `hazelcast.backpressure.max.concurrent.invocations.per.partition`  The default value of this system property is 100. Using a default configuration a system is allowed to have (271 + 1) * 100 = 27200 concurrent invocations (271 partitions + 1 for generic operations).   Back pressure is only applied to normal operations. System operations like heart beats and partition migration operations  are not influenced by back pressure. 27200 invocations might seem like a lot, but keep in mind that executing a task on `IExecutor`  or acquiring a lock also requires an operation.  If the maximum number of invocations has been reached, Hazelcast will automatically apply an exponential back off policy. This gives the system some time to deal with the load. Using the following system property, you can configure the maximum time to wait before a `HazelcastOverloadException` is thrown:  `hazelcast.backpressure.backoff.timeout.millis`  This system property's default value is 60000 ms.  The Health Monitor keeps an eye on the usage of the invocations. If it sees a member has consumed 70% or more of the invocations, it starts to log health messages.  Apart from controlling the number of invocations, you also need to control the number of pending async backups. This is done by periodically making these backups sync instead of async. This forces all pending backups to get drained. For this, Hazelcast tracks the number of asynchronous backups for each partition. At every **Nth** call, one synchronization is forced. This **N** is  controlled through the following property:  `hazelcast.backpressure.syncwindow`  This system property's default value is 100. It means, out of 100 *asynchronous* backups, Hazelcast makes 1 of them a *synchronous* one. A randomization is added, so the sync window with default configuration will be between 75 and 125  invocations.   &lt;br&gt;&lt;/br&gt;  ***RELATED INFORMATION***  *Please refer to the [System Properties section](#system-properties) to learn how to configure the system properties.*    "
});

documentTitles["index.html#threading-model"] = "Threading Model";
index.add({
    url: "index.html#threading-model",
    title: "Threading Model",
    body: "## Threading Model  Your application server has its own threads. Hazelcast does not use these; it manages its own threads.  "
});

documentTitles["index.html#io-threading"] = "I/O Threading";
index.add({
    url: "index.html#io-threading",
    title: "I/O Threading",
    body: "### I/O Threading  Hazelcast uses a pool of threads for I/O. A single thread does not perform all the I/O. Instead, multiple threads perform the I/O. On each cluster member, the I/O threading is split up in 3 types of I/O threads:  * I/O thread for the accept requests. * I/O threads to read data from other members/clients. * I/O threads to write data to other members/clients.  You can configure the number of I/O threads using the `hazelcast.io.thread.count` system property. Its default value is 3 per member. If 3 is used, in total there are 7 I/O threads: 1 accept I/O thread, 3 read I/O threads, and 3 write I/O threads. Each I/O thread has its own Selector instance and waits on the `Selector.select` if there is nothing to do.  ![image](images/NoteSmall.jpg) ***NOTE:*** *You can also specify counts for input and output threads separately. There are `hazelcast.io.input.thread.count` and `hazelcast.io.output.thread.count` properties for this purpose. Please refer to the [System Properties section](#system-properties) for information on these properties and how to set them.*   Hazelcast periodically scans utilization of each I/O thread and can decide to migrate a connection to a new thread if the existing thread is servicing a disproportionate number of I/O events. You can customize the scanning interval by configuring the `hazelcast.io.balancer.interval.seconds` system property; its default interval is 20 seconds. You can disable the balancing process by setting this property to a negative value.  In case of the read I/O thread, when sufficient bytes for a packet have been received, the `Packet` object is created. This `Packet` object is  then sent to the system where it is de-multiplexed. If the `Packet` header signals that it is an operation/response, the `Packet` is handed  over to the operation service (please see the [Operation Threading section](#operation-threading)). If the `Packet` is an event, it is handed  over to the event service (please see the [Event Threading section](#event-threading)).       "
});

documentTitles["index.html#event-threading"] = "Event Threading";
index.add({
    url: "index.html#event-threading",
    title: "Event Threading",
    body: "### Event Threading  Hazelcast uses a shared event system to deal with components that rely on events, such as topic, collections, listeners, and Near Cache.   Each cluster member has an array of event threads and each thread has its own work queue. When an event is produced, either locally or remotely, an event thread is selected (depending on if there is a message ordering) and the event is placed in the work queue for that event thread.  The following properties can be set to alter the behavior of the system.  * `hazelcast.event.thread.count`: Number of event-threads in this array. Its default value is 5. * `hazelcast.event.queue.capacity`: Capacity of the work queue. Its default value is 1000000. * `hazelcast.event.queue.timeout.millis`: Timeout for placing an item on the work queue. Its default value is 250.  If you process a lot of events and have many cores, changing the value of `hazelcast.event.thread.count` property to a higher value is a good practice. This way, more events can be processed in parallel.  Multiple components share the same event queues. If there are 2 topics, say A and B, for certain messages they may share the same queue(s) and hence the same event thread. If there are a lot of pending messages produced by A, then B needs to wait. Also, when processing a message from A takes a lot of time and the event thread is used for that, B suffers from this.  That is why it is better to offload processing to a dedicated thread (pool) so that systems are better isolated.  If the events are produced at a higher rate than they are consumed, the queue grows in size. To prevent overloading the system and running into an `OutOfMemoryException`, the queue is given a capacity of 1 million items. When the maximum capacity is reached, the items are dropped. This means that the event system is a 'best effort' system. There is no guarantee that you are going to get an event. Topic A might have a lot of pending messages and therefore B cannot receive messages because the queue has no capacity and messages for B are dropped.      "
});

documentTitles["index.html#iexecutor-threading"] = "IExecutor Threading";
index.add({
    url: "index.html#iexecutor-threading",
    title: "IExecutor Threading",
    body: "### IExecutor Threading  Executor threading is straight forward. When a task is received to be executed on Executor E, then E will have its own `ThreadPoolExecutor` instance and the work is placed in the work queue of this executor. Thus, Executors are fully isolated, but still share the same underlying hardware - most importantly the CPUs.   You can configure the IExecutor using the `ExecutorConfig` (programmatic configuration) or using `&lt;executor&gt;` (declarative configuration). Please also see the [Configuring Executor Service section](#configuring-executor-service).      "
});

documentTitles["index.html#operation-threading"] = "Operation Threading";
index.add({
    url: "index.html#operation-threading",
    title: "Operation Threading",
    body: "### Operation Threading  There are 2 types of operations:  * Operations that are aware of a certain partition, e.g. `IMap.get(key)`. * Operations that are not partition aware, such as the `IExecutorService.executeOnMember(command, member)` operation.  Each of these operation types has a different threading model explained in the following sections.  "
});

documentTitles["index.html#partition-aware-operations"] = "Partition-aware Operations";
index.add({
    url: "index.html#partition-aware-operations",
    title: "Partition-aware Operations",
    body: "#### Partition-aware Operations  To execute partition-aware operations, an array of operation threads is created. The size of this array has a default value of two times the number of cores and a minimum value of 2. This value can be changed using the `hazelcast.operation.thread.count` property.  Each operation thread has its own work queue and it consumes messages from this work queue. If a partition-aware  operation needs to be scheduled, the right thread is found using the formula below.  `threadIndex = partitionId % partition thread-count`  After the `threadIndex` is determined, the operation is put in the work queue of that operation thread. This means the followings:   * A single operation thread executes operations for multiple partitions; if there are 271 partitions and  10 partition threads, then roughly every operation thread executes operations for 27 partitions.    * Each partition belongs to only 1 operation thread. All operations for a partition are always handled by exactly the same operation thread.    * Concurrency control is not needed to deal with partition-aware operations because once a partition-aware  operation is put in the work queue of a partition-aware operation thread, only   1 thread is able to touch that partition.  Because of this threading strategy, there are two forms of false sharing you need to be aware of:  * False sharing of the partition - two completely independent data structures share the same partition. For example, if there  is a map `employees` and a map `orders`, the method `employees.get(\&quot;peter\&quot;)` running on partition 25 may be blocked  by the method `orders.get(1234)` also running on partition 25. If independent data structures share the same partition,  a slow operation on one data structure can slow down the other data structures.   * False sharing of the partition-aware operation thread - each operation thread is responsible for executing  operations on a number of partitions. For example, *thread 1* could be responsible for partitions 0, 10, 20, etc. and *thread-2* could be responsible for partitions  1, 11, 21, etc. If an operation for partition 1 takes a lot of time, it blocks the execution of an operation for partition  11 because both of them are mapped to the same operation thread.  You need to be careful with long running operations because you could starve operations of a thread.  As a general rule, the partition thread should be released as soon as possible because operations are not designed as long running operations. That is why, for example, it is very dangerous to execute a long running operation  using `AtomicReference.alter()` or an `IMap.executeOnKey()`, because these operations block other operations to be executed.  Currently, there is no support for work stealing. Different partitions that map to the same thread may need to wait  till one of the partitions is finished, even though there are other free partition-aware operation threads available.  **Example:**  Take a 3 node cluster. Two members will have 90 primary partitions and one member will have 91 primary partitions. Let's say you have one CPU and 4 cores per CPU. By default, 8 operation threads will be allocated to serve 90 or 91 partitions.  "
});

documentTitles["index.html#operations-that-are-not-partition-aware"] = "Operations that are Not Partition-aware";
index.add({
    url: "index.html#operations-that-are-not-partition-aware",
    title: "Operations that are Not Partition-aware",
    body: "#### Operations that are Not Partition-aware  To execute operations that are not partition-aware, e.g. `IExecutorService.executeOnMember(command, member)`, generic operation  threads are used. When the Hazelcast instance is started, an array of operation threads is created. The size of this array  has a default value of the number of cores divided by two with a minimum value of 2. It can be changed using the  `hazelcast.operation.generic.thread.count` property.   A non-partition-aware operation thread does not execute an operation for a specific partition. Only partition-aware   operation threads execute partition-aware operations.   Unlike the partition-aware operation threads, all the generic operation threads share the same work queue: `genericWorkQueue`.  If a non-partition-aware operation needs to be executed, it is placed in that work queue and any generic operation  thread can execute it. The big advantage is that you automatically have work balancing since any generic operation  thread is allowed to pick up work from this queue.  The disadvantage is that this shared queue can be a point of contention. You may not see this contention in  production since performance is dominated by I/O and the system does not run many non-partition-aware operations.   "
});

documentTitles["index.html#priority-operations"] = "Priority Operations";
index.add({
    url: "index.html#priority-operations",
    title: "Priority Operations",
    body: "#### Priority Operations   In some cases, the system needs to run operations with a higher priority, e.g. an important system operation. To support priority operations, Hazelcast has the following features:  * For partition-aware operations: Each partition thread has its own work queue and it also has a priority   work queue. The partition thread always checks the priority queue before it processes work from its normal work queue.  * For non-partition-aware operations: Next to the `genericWorkQueue`, there is also a `genericPriorityWorkQueue`. When a priority operation  needs to be run, it is put in the `genericPriorityWorkQueue`. Like the partition-aware operation threads, a generic  operation thread first checks the `genericPriorityWorkQueue` for work.    Since a worker thread blocks on the normal work queue (either partition specific or generic), a priority operation may not be picked up because it is not put in the queue where it is blocking. Hazelcast always sends a 'kick the worker' operation that   only triggers the worker to wake up and check the priority queue.   "
});

documentTitles["index.html#operation-response-and-invocation-future"] = "Operation-response and Invocation-future";
index.add({
    url: "index.html#operation-response-and-invocation-future",
    title: "Operation-response and Invocation-future",
    body: "#### Operation-response and Invocation-future  When an Operation is invoked, a `Future` is returned. Please see the example code below.  ```java GetOperation operation = new GetOperation( mapName, key ); Future future = operationService.invoke( operation ); future.get(); ```  The calling side blocks for a reply. In this case, `GetOperation` is set in the work queue for the partition of `key`, where it eventually is executed. Upon execution, a response is returned and placed on the `genericWorkQueue` where it is executed by a  \&quot;generic operation thread\&quot;. This thread signals the `future` and notifies the blocked thread that a response is available.  Hazelcast has a plan of exposing this `future` to the outside world, and we will provide the ability to register a completion listener so you can perform asynchronous calls.   "
});

documentTitles["index.html#local-calls"] = "Local Calls";
index.add({
    url: "index.html#local-calls",
    title: "Local Calls",
    body: "#### Local Calls  When a local partition-aware call is done, an operation is made and handed over to the work queue of the correct partition operation thread, and a `future` is returned. When the calling thread calls `get` on that `future`, it acquires a lock and waits for the result  to become available. When a response is calculated, the `future` is looked up and the waiting thread is notified.    In the future, this will be optimized to reduce the amount of expensive systems calls, such as `lock.acquire()`/`notify()` and the expensive interaction with the operation-queue. Probably, we will add support for a caller-runs mode, so that an operation is directly run on the calling thread.     "
});

documentTitles["index.html#slowoperationdetector"] = "SlowOperationDetector";
index.add({
    url: "index.html#slowoperationdetector",
    title: "SlowOperationDetector",
    body: "## SlowOperationDetector  The `SlowOperationDetector` monitors the operation threads and collects information about all slow operations. An `Operation` is a task executed by a generic or partition thread (see [Operation Threading](#operation-threading)). An operation is considered as slow when it takes more computation time than the configured threshold.  The `SlowOperationDetector` stores the fully qualified classname of the operation and its stacktrace as well as operation details, start time and duration of each slow invocation. All collected data is available in the [Management Center](#monitoring-members).  The `SlowOperationDetector` is configured via the following system properties.  - `hazelcast.slow.operation.detector.enabled` - `hazelcast.slow.operation.detector.log.purge.interval.seconds` - `hazelcast.slow.operation.detector.log.retention.seconds` - `hazelcast.slow.operation.detector.stacktrace.logging.enabled` - `hazelcast.slow.operation.detector.threshold.millis`  Please refer to the [System Properties section](#system-properties) for explanations of these properties.  "
});

documentTitles["index.html#logging-of-slow-operations"] = "Logging of Slow Operations";
index.add({
    url: "index.html#logging-of-slow-operations",
    title: "Logging of Slow Operations",
    body: "### Logging of Slow Operations  The detected slow operations are logged as warnings in the Hazelcast log files:  ``` WARN 2015-05-07 11:05:30,890 SlowOperationDetector: [127.0.0.1]:5701   Slow operation detected: com.hazelcast.map.impl.operation.PutOperation   Hint: You can enable the logging of stacktraces with the following config   property: hazelcast.slow.operation.detector.stacktrace.logging.enabled WARN 2015-05-07 11:05:30,891 SlowOperationDetector: [127.0.0.1]:5701   Slow operation detected: com.hazelcast.map.impl.operation.PutOperation   (2 invocations) WARN 2015-05-07 11:05:30,892 SlowOperationDetector: [127.0.0.1]:5701   Slow operation detected: com.hazelcast.map.impl.operation.PutOperation   (3 invocations) ```  Stacktraces are always reported to the Management Center, but by default they are not printed to keep the log size small. If logging of stacktraces is enabled, the full stacktrace is printed every 100 invocations. All other invocations print a shortened version.  "
});

documentTitles["index.html#purging-of-slow-operation-logs"] = "Purging of Slow Operation Logs";
index.add({
    url: "index.html#purging-of-slow-operation-logs",
    title: "Purging of Slow Operation Logs",
    body: "### Purging of Slow Operation Logs  Since a Hazelcast cluster can run for a very long time, Hazelcast purges the slow operation logs periodically to prevent an OOME. You can configure the purge interval and the retention time for each invocation.  The purging removes each invocation whose retention time is exceeded. When all invocations are purged from a slow operation log, the log is deleted.      "
});

documentTitles["index.html#hazelcast-performance-on-aws"] = "Hazelcast Performance on AWS";
index.add({
    url: "index.html#hazelcast-performance-on-aws",
    title: "Hazelcast Performance on AWS",
    body: "## Hazelcast Performance on AWS  Amazon Web Services (AWS) platform can be an unpredictable environment compared to traditional in-house data centers. This is because the machines, databases or CPUs are shared with other unknown applications in the cloud, causing fluctuations. When you gear up your Hazelcast application from a physical environment to Amazon EC2, you should configure it so that any network outage or fluctuation is minimized and its performance is maximized. This section provides notes on improving the performance of Hazelcast on AWS.  "
});

documentTitles["index.html#selecting-ec2-instance-type"] = "Selecting EC2 Instance Type";
index.add({
    url: "index.html#selecting-ec2-instance-type",
    title: "Selecting EC2 Instance Type",
    body: "### Selecting EC2 Instance Type  Hazelcast is an in-memory data grid that distributes the data and computation to the nodes that are connected with a network, making Hazelcast very sensitive to the network. Not all EC2 Instance types are the same in terms of the network performance. It is recommended that you choose instances that have **10 Gigabit** or **High** network performance for Hazelcast deployments. Please see the below table for the recommended instances.  Instance Type|Network Performance -|- m3.2xlarge|High m1.xlarge|High c3.2xlarge|High c3.4xlarge|High c3.8xlarge|10 Gigabit c1.xlarge|High cc2.8xlarge|10 Gigabit m2.4xlarge|High cr1.8xlarge|10 Gigabit  "
});

documentTitles["index.html#dealing-with-network-latency"] = "Dealing with Network Latency";
index.add({
    url: "index.html#dealing-with-network-latency",
    title: "Dealing with Network Latency",
    body: "### Dealing with Network Latency  Since data is sent and received very frequently in Hazelcast applications, latency in the network becomes a crucial issue. In terms of the latency, AWS cloud performance is not the same for each region. There are vast differences in the speed and optimization from region to region.  When you do not pay attention to AWS regions, Hazelcast applications may run tens or even hundreds of times slower than necessary. The following notes are potential workarounds.  - Create a cluster only within a region. It is not recommended that you deploy a single cluster that spans across multiple regions. - If a Hazelcast application is hosted on Amazon EC2 instances in multiple EC2 regions, you can reduce the latency by serving the end users` requests from the EC2 region which has the lowest network latency. Changes in network connectivity and routing result in changes in the latency between hosts on the Internet. Amazon has a web service (Route 53) that lets the cloud architects use DNS to route end-user requests to the EC2 region that gives the fastest response. This latency-based routing is based on latency measurements performed over a period of time. Please have a look at &lt;a href=\&quot;http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/HowDoesRoute53Work.html\&quot; target=\&quot;_blank\&quot;&gt;Route53&lt;/a&gt;. - Move the deployment to another region. The &lt;a href=\&quot;http://www.cloudping.info/\&quot; target=\&quot;_blank\&quot;&gt;CloudPing&lt;/a&gt; tool gives instant estimates on the latency from your location. By using it frequently, CloudPing can be helpful to determine the regions which have the lowest latency. - The &lt;a href=\&quot;http://cloudharmony.com/speedtest\&quot; target=\&quot;_blank\&quot;&gt;SpeedTest&lt;/a&gt; tool allows you to test the network latency and also the downloading/uploading speeds.  "
});

documentTitles["index.html#selecting-virtualization"] = "Selecting Virtualization";
index.add({
    url: "index.html#selecting-virtualization",
    title: "Selecting Virtualization",
    body: "### Selecting Virtualization  AWS uses two virtualization types to launch the EC2 instances: Para-Virtualization (PV) and Hardware-assisted Virtual Machine (HVM). According to the tests we performed, HVM provided up to three times higher throughput than PV. Therefore, we recommend you use HVM when you run Hazelcast on EC2.          "
});

documentTitles["index.html#hazelcast-simulator"] = "Hazelcast Simulator";
index.add({
    url: "index.html#hazelcast-simulator",
    title: "Hazelcast Simulator",
    body: "# Hazelcast Simulator  Hazelcast Simulator is a production simulator used to test Hazelcast and Hazelcast-based applications in clustered environments. It also allows you to create your own tests and perform them on your Hazelcast clusters and applications that are deployed to cloud computing environments. In your tests, you can provide any property that can be specified on these environments (Amazon EC2, Google Compute Engine(GCE), or your own environment): properties such as hardware specifications, operating system, Java version, etc.  Hazelcast Simulator allows you to add potential production problems, such as real-life failures, network problems, overloaded CPU, and failing nodes to your tests. It also provides a benchmarking and performance testing platform by supporting performance tracking and also supporting various out-of-the-box profilers.  Hazelcast Simulator makes use of Apache jclouds&amp;reg;, an open source multi-cloud toolkit that is primarily designed for testing on the clouds like Amazon EC2 and GCE.  You can use Hazelcast Simulator for the following use cases:  - In your pre-production phase to simulate the expected throughput/latency of Hazelcast with your specific requirements. - To test if Hazelcast behaves as expected when you implement a new functionality in your project. - As part of your test suite in your deployment process. - When you upgrade your Hazelcast version.  Hazelcast Simulator is available as a downloadable package on the Hazelcast &lt;a href=\&quot;http://www.hazelcast.org/download\&quot; target=\&quot;_blank\&quot;&gt;web site&lt;/a&gt;. Please refer to the [Installing Simulator section](#installing-simulator) for more information.  "
});

documentTitles["index.html#key-concepts"] = "Key Concepts";
index.add({
    url: "index.html#key-concepts",
    title: "Key Concepts",
    body: "## Key Concepts  The following are the key concepts mentioned with Hazelcast Simulator.  - **Test** -  A test class for the functionality you want to test, such as a Hazelcast map. This test class may seem like a JUnit test, but it uses custom annotations to define methods for different test phases (e.g. setup, warmup, run, verify).  - **TestSuite** -  A property file that contains the name of the test class and the properties you want to set on that test class instance. In most cases, a `TestSuite` contains a single test class, but you can configure multiple tests within a single `TestSuite`.  - **Failure** -  An indication that something has gone wrong. Failures are picked up by the `Agent` and sent back to the `Coordinator`. Please see the descriptions below for the `Agent` and `Coordinator`.  - **Worker** - A Java Virtual Machine (JVM) responsible for running a `TestSuite`. It can be configured to spawn a Hazelcast client or member instance.  - **Agent** - A JVM installed on a piece of hardware. Its main responsibility is spawning, monitoring and terminating `Workers`.  - **Coordinator** -  A JVM that can run anywhere, such as on your local machine. **Coordinator** is actually responsible for running the test using the `Agents`. You configure it with a list of `Agent` IP addresses, and you run it by sending a command like \&quot;run this testsuite with 10 worker JVMs for 2 hours\&quot;.  - **Provisioner** -  Spawns and terminates cloud instances, and installs `Agents` on the remote machines. It can be used in combination with EC2 (or any other cloud), but it can also be used in a static setup, such as a local machine or a cluster of machines in your data center.  - **Communicator** -  A JVM that enables the communication between the `Agents` and `Workers`.  - `simulator.properties` - The configuration file you use to adapt the Hazelcast Simulator to your business needs (e.g. cloud selection and configuration).     "
});

documentTitles["index.html#installing-simulator"] = "Installing Simulator";
index.add({
    url: "index.html#installing-simulator",
    title: "Installing Simulator",
    body: "## Installing Simulator  Hazelcast Simulator needs a Unix shell to run. Ensure that your local and remote machines are running under Unix, Linux or Mac OS. Hazelcast Simulator may work with Windows using a Unix-like environment such as Cygwin, but that is not officially supported at the moment.  "
});

documentTitles["index.html#firewall-settings"] = "Firewall Settings";
index.add({
    url: "index.html#firewall-settings",
    title: "Firewall Settings",
    body: "### Firewall Settings  Please ensure that all remote machines are reachable via TCP ports 22, 9000 and 5701 to 5751 on their external network interface (for example, `eth0`). The first two ports are used by Hazelcast Simulator. The other ports are used by Hazelcast itself. Port 9001 is used on the loopback device on all remote machines for local communication.  ![](images/Network.png)  "
});

documentTitles["index.html#setting-up-the-local-machine-coordinator"] = "Setting Up the Local Machine (Coordinator)";
index.add({
    url: "index.html#setting-up-the-local-machine-coordinator",
    title: "Setting Up the Local Machine (Coordinator)",
    body: "### Setting Up the Local Machine (Coordinator)  Hazelcast Simulator is provided as a separate downloadable package, in `zip` or `tar.gz` format. You can download either one [here](http://www.hazelcast.org/download).  After the download is completed, follow the below steps.  - Unpack the `tar.gz` or `zip` file to a folder that you prefer to be the home folder for Hazelcast Simulator. The file extracts with the name `hazelcast-simulator-&lt;`*version*`&gt;`. (If you are updating Hazelcast Simulator, perform this same unpacking, but skip the following steps.)  - Add the following lines to the file `~/.bashrc` (for Unix/Linux) or to the file `~/.profile` (for Mac OS).  ``` export SIMULATOR_HOME=&lt;extracted folder path&gt;/hazelcast-simulator-&lt;version&gt; PATH=$SIMULATOR_HOME/bin:$PATH ```  - Create a working folder for your Simulator `TestSuite` (`tests` is an example name in the following commands).  ``` mkdir ~/tests ```  - Copy the `simulator.properties` file to your working folder.  ``` cp $SIMULATOR_HOME/conf/simulator.properties ~/tests ```  "
});

documentTitles["index.html#setting-up-the-remote-machines-agents-workers"] = "Setting Up the Remote Machines (Agents, Workers)";
index.add({
    url: "index.html#setting-up-the-remote-machines-agents-workers",
    title: "Setting Up the Remote Machines (Agents, Workers)",
    body: "### Setting Up the Remote Machines (Agents, Workers)  After you have installed Hazelcast Simulator as described in the previous section, make sure you create a user on the remote machines upon which you want to run `Agents` and `Workers`. The default username used by Hazelcast Simulator is `simulator`. You can change this in the `simulator.properties` file in your working folder.  Please ensure that you can connect to the remote machines with the configured username and without password authentication (see the next section). The [Provisioner](#provisioner) terminates when it needs to access the remote machines and cannot connect automatically.  "
});

documentTitles["index.html#setting-up-the-publicprivate-key-pair"] = "Setting Up the Public/Private Key Pair";
index.add({
    url: "index.html#setting-up-the-publicprivate-key-pair",
    title: "Setting Up the Public/Private Key Pair",
    body: "### Setting Up the Public/Private Key Pair  The preferred method for password free authentication is using an RSA (Rivest,Shamir and Adleman cryptosystem) public/private key pair. The RSA key should not require you to enter the pass-phrase manually. A key with a pass-phrase and ssh-agent-forwarding is strongly recommended, but a key without a pass-phrase also works.  "
});

documentTitles["index.html#local-machine-coordinator"] = "Local Machine (Coordinator)";
index.add({
    url: "index.html#local-machine-coordinator",
    title: "Local Machine (Coordinator)",
    body: "#### Local Machine (Coordinator)  Make sure you have the files `id_rsa.pub` and `id_rsa` in your local `~/.ssh` folder.  If you do not have the RSA keys, you can generate a public/private key pair using the following command.  ``` ssh-keygen -t rsa -C \&quot;your_email@example.com\&quot; ```  Press `[Enter]` for all questions. The value for the e-mail address is not relevant in this case. After you execute this command, you should have the files `id_rsa.pub` and `id_rsa` in your `~/.ssh` folder.  "
});

documentTitles["index.html#remote-machines-agents-workers"] = "Remote Machines (Agents, Workers)";
index.add({
    url: "index.html#remote-machines-agents-workers",
    title: "Remote Machines (Agents, Workers)",
    body: "#### Remote Machines (Agents, Workers)  Please ensure you have appended the public key (`id_rsa.pub`) to the `~/.ssh/authorized_keys` file on all remote machines (`Agents` and `Workers`). You can  copy the public key to all your remote machines using the following command.  ``` ssh-copy-id -i ~/.ssh/id_rsa.pub simulator@remote-ip-address ```  "
});

documentTitles["index.html#ssh-connection-test"] = "SSH Connection Test";
index.add({
    url: "index.html#ssh-connection-test",
    title: "SSH Connection Test",
    body: "#### SSH Connection Test  You can check if the connection works as expected using the following command from the `Coordinator` machine (it will print `ok` if everything is fine).  ``` ssh -o BatchMode=yes simulator@remote-ip-address \&quot;echo ok\&quot; 2&gt;&amp;1 ```      "
});

documentTitles["index.html#setting-up-for-amazon-ec2"] = "Setting Up For Amazon EC2";
index.add({
    url: "index.html#setting-up-for-amazon-ec2",
    title: "Setting Up For Amazon EC2",
    body: "## Setting Up For Amazon EC2  Having installed the Simulator, this section describes how to prepare the Simulator for testing a Hazelcast cluster deployed at Amazon EC2.   To do this, copy the file `SIMULATOR_HOME/conf/simulator.properties` to your working folder and edit this file. You should set the values for the following parameters that are included in this file.  - CLOUD_PROVIDER: Maven artifact ID of the cloud provider. In this case it is `aws-ec2` for Amazon EC2. Please refer to the [Simulator.Properties File Description section](#simulator-properties-file-description) for a full list of cloud providers. - CLOUD_IDENTITY: The path to the file that contains your EC2 access key.  - CLOUD_CREDENTIAL: The path to the file that contains your EC2 secret key.  - MACHINE_SPEC: The parameter by which you can specify the EC2 instance type, operating system of the instance, EC2 region, etc.   The following is an example of a `simulator.properties` file with the parameters explained above. For this example, you should have created the files `~/ec2.identity` and `~/ec2.credential` that contain your EC2 access key and secret key, respectively.  ``` CLOUD_PROVIDER=aws-ec2 CLOUD_IDENTITY=~/ec2.identity CLOUD_CREDENTIAL=~/ec2.credential MACHINE_SPEC=hardwareId=c3.xlarge,imageId=us-east-1/ami-1b3b2472 ```   ![image](images/NoteSmall.jpg) ***NOTE***: *Creating these files in your working folder instead of just setting the access and secret keys in the `simulator.properties` file is for security reasons. It is too easy to share your credentials with the outside world; now you can safely add the `simulator.properties` file in your source repository or share it with other people.*  ![image](images/NoteSmall.jpg) ***NOTE***: *For the full description of  the `simulator.properties` file, please refer to the [Simulator.Properties File Description section](#simulator-properties-file-description).*        "
});

documentTitles["index.html#setting-up-for-google-compute-engine"] = "Setting Up For Google Compute Engine";
index.add({
    url: "index.html#setting-up-for-google-compute-engine",
    title: "Setting Up For Google Compute Engine",
    body: "## Setting Up For Google Compute Engine  To prepare the Simulator for testing a Hazelcast cluster deployed at Google Compute Engine (GCE), first you need an e-mail address to be used as a GCE service account. You can obtain this e-mail address in the Admin GUI console of GCE. In this console, select **Credentials** in the menu **API &amp;  Auth**. Then, click the **Create New Client ID** button and select **Service Account**. Usually, this e-mail address is in this form: `&lt;your account ID&gt;@developer.gserviceaccount.com`.  Save the **p12** keystore file that you obtained while creating your Service Account (you will refer to that path). In the `bin` folder of the Hazelcast Simulator package that you downloaded, edit the `setupGce.sh` script to specify the following parameters:  - GCE_id: Your developer e-mail address that you obtained in the Admin GUI console of GCE. - p12File: The path to your p12 file you saved while you were obtaining your developer e-mail address.  After you run the edited `setupGce.sh` script, the `simulator.properties` file that you need for a proper testing of your instances on GCE is created in the `conf` folder of Hazelcast Simulator.      "
});

documentTitles["index.html#setting-up-machines-manually"] = "Setting Up Machines Manually";
index.add({
    url: "index.html#setting-up-machines-manually",
    title: "Setting Up Machines Manually",
    body: "## Setting Up Machines Manually  You may want to set up Hazelcast Simulator on the environments different than your clusters placed on a cloud: for example, your local machines, a test laboratory, etc. In this case, perform the following steps.  1. Copy the `SIMULATOR_HOME/conf/simulator.properties` to your working directory.  2. Change CLOUD_PROVIDER to 'static'  3. Edit the `USER` in the `simulator.properties` file if you want to use a different user name than `simulator`.  4. Create an RSA key pair or use an existing one. Using the key should not require entering the pass-phrase manually. A key with pass-phrase and ssh-agent-forwarding is strongly recommended, but a key without a pass-phrase will also work.   You can check whether a key pair exists with this command:   ```  ls -al ~/.ssh  ```  If it does not exist, you can create a key pair on the client machine with this command:   ```  ssh-keygen -t rsa  ```    You will get a few more questions:   	* Enter a file in which to save the key (/home/demo/.ssh/id_rsa):  	* Enter a pass-phrase (empty for no pass-phrase): (pass-phrase is optional)  5. Copy the public key into the `~/.ssh/authorized_keys` file on the remote machines with this command:   ```  ssh-copy-id user@123.45.56.78  ```  6. Create the `agents.txt` file and add the IP addresses of the machines. The content of the `agents.txt` file with the IP addresses added looks like the following:   ```  98.76.65.54  10.28.37.46  ```  7. Run the command `provisioner --restart` to verify.   ![image](images/NoteSmall.jpg) ***NOTE***: *For the full description of the `simulator.properties` file, please refer to the [Simulator.Properties File Description section](#simulator-properties-file-description).*        "
});

documentTitles["index.html#executing-a-simulator-test"] = "Executing a Simulator Test";
index.add({
    url: "index.html#executing-a-simulator-test",
    title: "Executing a Simulator Test",
    body: "## Executing a Simulator Test  After you install and prepare the Hazelcast Simulator for your environment, it is time to perform a test. In the following sections, you are going to verify the setup by running a simple map test with strings as keys and values.   You can start with creating the working folder.  ``` mkdir simulator-example ```  A path of working folder needs to be visible in the output of the provisioner/coordinator.  "
});

documentTitles["index.html#creating-and-editing-properties-file"] = "Creating and Editing Properties File";
index.add({
    url: "index.html#creating-and-editing-properties-file",
    title: "Creating and Editing Properties File",
    body: "### Creating and Editing Properties File  You need to create the file `test.properties` in the working folder. Execute the following command to create and edit this file. 	 ``` cat &gt; test.properties ```  Copy the following lines into the file `test.properties`.  ``` class=com.hazelcast.simulator.tests.map.StringStringMapTest threadCount=10 keyLocality=Random keyLength=300 valueLength=300 keyCount=100000 putProb=0.2 basename=map ```  The property `class` defines the actual test case and the rest are the properties you want to bind to your test. If a property is not defined in this file, the default value of the property given in your test code is used. Please see the `properties` comment in the `StringStringMapTest`. You will see the following.  ```     // properties     public int keyLength = 10;     public int valueLength = 10;     public int keyCount = 10000;     public int valueCount = 10000;     public String basename = \&quot;stringStringMap\&quot;;     public KeyLocality keyLocality = KeyLocality.RANDOM;     public int minNumberOfMembers = 0; ```   After you created the file `test.properties` and set your properties successfully, you need to configure the simulator using the file `simulator.properties`.  Execute the following command to create and edit this file.  ``` cat &gt; simulator.properties ```  Copy the following lines into this file and set the properties.  ``` CLOUD_PROVIDER=aws-ec2 CLOUD_IDENTITY=~/ec2.identity CLOUD_CREDENTIAL=~/ec2.credential MACHINE_SPEC=hardwareId=m3.medium,locationId=us-east-1,imageId=us-east-1/ami-fb8e9292 JDK_FLAVOR=oracle JDK_VERSION=7 ```  Please refer to &lt;a href=\&quot;http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSGettingStartedGuide/AWSCredentials.html\&quot; target=\&quot;_blank\&quot;&gt;here&lt;/a&gt; for information on `CLOUD_IDENTITY` and `CLOUD_CREDENTIAL`.   ***NOTE:*** *For a full description of the file `simulator.properties`, please see the [Simulator.Properties File Description section](#simulator-properties-file-description). You can find the sample simulator properties in the `dist/simulator-tests/simulator.properties`. You can also copy this file to the working folder and then edit according to your needs.*  "
});

documentTitles["index.html#running-the-test"] = "Running the Test";
index.add({
    url: "index.html#running-the-test",
    title: "Running the Test",
    body: "### Running the Test  When in the working folder, execute the following commands step by step to run the test.  **1. Starting Instances**  First of all, you need agents to run the test on them. Execute the following command to start 4 EC2 instances and install Java and the agents to these instances.  ``` provisioner --scale 4 ``` 	 The output of the command looks like the following.  ``` INFO  09:05:06 Hazelcast Simulator Provisioner INFO  09:05:06 Version: 0.5, Commit: c6e82c5, Build Time: 18.06.2015 @ 11:58:06 UTC INFO  09:05:06 SIMULATOR_HOME: /disk1/hazelcast-simulator-0.5 INFO  09:05:07 Loading simulator.properties: /disk1/exampleSandbox/simulator.properties INFO  09:05:07 ============================================================== INFO  09:05:07 Provisioning 4 aws-ec2 machines INFO  09:05:07 ============================================================== INFO  09:05:07 Current number of machines: 0 INFO  09:05:07 Desired number of machines: 4 INFO  09:05:07 Using init script:/disk1/hazelcast-simulator-0.5/conf/init.sh INFO  09:05:07 JDK spec: oracle 7 INFO  09:05:07 Hazelcast version-spec: outofthebox INFO  09:05:11 Created compute INFO  09:05:11 Machine spec: hardwareId=m3.medium,locationId=us-east-1,imageId=us-east-1/ami-fb8e9292 INFO  09:05:18 Created template INFO  09:05:18 Login name to the remote machines: simulator INFO  09:05:18 Security group: 'simulator' is found in region 'us-east-1' INFO  09:05:18 Creating machines... (can take a few minutes) INFO  09:06:18     54.211.146.186 LAUNCHED INFO  09:06:18     54.166.1.79 LAUNCHED INFO  09:06:18     54.147.196.63 LAUNCHED INFO  09:06:18     54.144.235.111 LAUNCHED INFO  09:06:30     54.211.146.186 JAVA INSTALLED INFO  09:06:32     54.166.1.79 JAVA INSTALLED INFO  09:06:32     54.144.235.111 JAVA INSTALLED INFO  09:06:34     54.147.196.63 JAVA INSTALLED INFO  09:06:40     54.166.1.79 SIMULATOR AGENT INSTALLED INFO  09:06:40 Killing Agent on: 54.166.1.79 INFO  09:06:40 Starting Agent on: 54.166.1.79 INFO  09:06:40     54.211.146.186 SIMULATOR AGENT INSTALLED INFO  09:06:40 Killing Agent on: 54.211.146.186 INFO  09:06:40     54.166.1.79 SIMULATOR AGENT STARTED INFO  09:06:40 Starting Agent on: 54.211.146.186 INFO  09:06:40     54.211.146.186 SIMULATOR AGENT STARTED INFO  09:06:42     54.144.235.111 SIMULATOR AGENT INSTALLED INFO  09:06:42 Killing Agent on: 54.144.235.111 INFO  09:06:42 Starting Agent on: 54.144.235.111 INFO  09:06:43     54.144.235.111 SIMULATOR AGENT STARTED INFO  09:06:47     54.147.196.63 SIMULATOR AGENT INSTALLED INFO  09:06:47 Killing Agent on: 54.147.196.63 INFO  09:06:47 Starting Agent on: 54.147.196.63 INFO  09:06:47     54.147.196.63 SIMULATOR AGENT STARTED INFO  09:06:47 Pausing for machine warmup... (10 sec) INFO  09:06:57 Duration: 00d 00h 01m 49s INFO  09:06:57 ============================================================== INFO  09:06:57 Successfully provisioned 4 aws-ec2 machines INFO  09:06:57 ============================================================== INFO  09:06:57 Shutting down Provisioner... INFO  09:06:57 Done! ```  You can also see the file `agents.txt` that was created automatically by the provisioner in the working folder. The file `agents.txt` includes IP addresses of the started EC2 instances. You can see this file's content using the following command.  ``` less agents.txt ```  First column lists the public IP addresses and the second one lists the private IP addresses. A public IP address is used for the communication between the coordinator and agent. A private IP address is used for the communications between client and member and also between member and member. A private IP address cannot be connected to from the outside of EC2 environment.  **2. Running the Test Suite**  After you created the instances and agents are installed to them, execute the following command to run your test suite. 	 ``` coordinator test.properties ```  Please refer to the [Coordinator section](#coordinator) for detailed information about the arguments of `coordinator`.  The output looks like the following.  ``` INFO  09:57:17 Hazelcast Simulator Coordinator INFO  09:57:17 Version: 0.5, Commit: c6e82c5, Build Time: 02.07.2015 @ 09:50:21 UTC INFO  09:57:17 SIMULATOR_HOME: /disk1/hazelcast-simulator-0.5 INFO  09:57:17 Loading simulator.properties: /disk1/exampleSandbox/simulator.properties INFO  09:57:17 Loading testsuite file: /disk1/exampleSandbox/test.properties INFO  09:57:17 Loading Hazelcast configuration: /disk1/hazelcast-simulator-0.5/conf/hazelcast.xml INFO  09:57:17 Loading Hazelcast client configuration: /disk1/hazelcast-simulator-0.5/conf/client-hazelcast.xml INFO  09:57:17 Loading Log4j configuration for worker: /disk1/hazelcast-simulator-0.5/conf/worker-log4j.xml INFO  09:57:17 Loading agents file: /disk1/exampleSandbox/agents.txt INFO  09:57:17 HAZELCAST_VERSION_SPEC: maven=3.5 INFO  09:57:17 -------------------------------------------------------------- INFO  09:57:17 Waiting for agents to start INFO  09:57:17 -------------------------------------------------------------- INFO  09:57:17 Connect to agent 54.211.146.186 OK INFO  09:57:17 Connect to agent 54.166.1.79 OK INFO  09:57:17 Connect to agent 54.147.196.63 OK INFO  09:57:17 Connect to agent 54.144.235.111 OK INFO  09:57:17 -------------------------------------------------------------- INFO  09:57:17 All agents are reachable! INFO  09:57:17 -------------------------------------------------------------- INFO  09:57:21 Performance monitor enabled: false INFO  09:57:21 Total number of agents: 4 INFO  09:57:21 Total number of Hazelcast member workers: 4 INFO  09:57:21 Total number of Hazelcast client workers: 0 INFO  09:57:21     Agent 54.211.146.186 members: 1 clients: 0 mode: MIXED INFO  09:57:21     Agent 54.166.1.79 members: 1 clients: 0 mode: MIXED INFO  09:57:21     Agent 54.147.196.63 members: 1 clients: 0 mode: MIXED INFO  09:57:21     Agent 54.144.235.111 members: 1 clients: 0 mode: MIXED INFO  09:57:21 Killing all remaining workers INFO  09:57:21 Successfully killed all remaining workers INFO  09:57:21 Starting 4 member workers INFO  09:57:41 Successfully started member workers INFO  09:57:41 Skipping client startup, since no clients are configured INFO  09:57:41 Successfully started a grand total of 4 Workers JVMs after 20120 ms INFO  09:57:41 Starting testsuite: 2015-07-02__09_57_17 INFO  09:57:41 Tests in testsuite: 1 INFO  09:57:41 Running time per test: 00d 00h 01m 00s INFO  09:57:41 Expected total testsuite time: 00d 00h 01m 00s INFO  09:57:41 Running 1 tests sequentially INFO  09:57:41 -------------------------------------------------------------- Running Test: TestCase{       id=     , class=com.hazelcast.simulator.tests.map.StringStringMapTest     , keyCount=100000     , keyLength=300     , keyLocality=Random     , putProb=0.2     , threadCount=10     , valueLength=300 } -------------------------------------------------------------- INFO  09:57:41 Starting Test initialization INFO  09:57:42 Completed Test initialization INFO  09:57:42 Starting Test setup INFO  09:57:44 Completed Test setup INFO  09:57:44 Starting Test local warmup INFO  09:57:46 Waiting for localWarmup completion: 00d 00h 00m 00s INFO  09:57:52 Waiting for localWarmup completion: 00d 00h 00m 06s INFO  09:57:57 Waiting for localWarmup completion: 00d 00h 00m 12s INFO  09:58:03 Waiting for localWarmup completion: 00d 00h 00m 18s INFO  09:58:09 Waiting for localWarmup completion: 00d 00h 00m 24s INFO  09:58:15 Waiting for localWarmup completion: 00d 00h 00m 30s INFO  09:58:20 Waiting for localWarmup completion: 00d 00h 00m 35s INFO  09:58:26 Waiting for localWarmup completion: 00d 00h 00m 41s INFO  09:58:32 Completed Test local warmup INFO  09:58:32 Starting Test global warmup INFO  09:58:33 Completed Test global warmup INFO  09:58:33 Starting Test start INFO  09:58:34 Completed Test start INFO  09:58:34 Test will run for 00d 00h 01m 00s INFO  09:59:04 Running 00d 00h 00m 30s   50.00% complete INFO  09:59:34 Running 00d 00h 01m 00s  100.00% complete INFO  09:59:34 Test finished running INFO  09:59:34 Starting Test stop INFO  09:59:36 Completed Test stop INFO  09:59:37 Starting Test global verify INFO  09:59:39 Completed Test global verify INFO  09:59:39 Starting Test local verify INFO  09:59:41 Completed Test local verify INFO  09:59:41 Starting Test global tear down INFO  09:59:43 Finished Test global tear down INFO  09:59:43 Starting Test local tear down INFO  09:59:45 Completed Test local tear down INFO  09:59:45 Terminating workers INFO  09:59:45 All workers have been terminated INFO  09:59:45 Starting cool down (10 sec) INFO  09:59:55 Finished cool down INFO  09:59:55 Total running time: 133 seconds INFO  09:59:55 ----------------------------------------------------------------------------- INFO  09:59:55 No failures have been detected! INFO  09:59:55 ----------------------------------------------------------------------------- ```  **3. Downloading the Results**   Now you need the logs and results that the workers generated. You can get these requirements from agents via `provisioner`.    ``` provisioner --download ```  The output looks like the following.  ``` INFO  10:05:41 Hazelcast Simulator Provisioner INFO  10:05:41 Version: 0.5, Commit: c6e82c5, Build Time: 02.07.2015 @ 09:50:21 UTC INFO  10:05:41 SIMULATOR_HOME: /disk1/hazelcast-simulator-0.5 INFO  10:05:41 Loading simulator.properties: /disk1/exampleSandbox/simulator.properties INFO  10:05:42 ============================================================== INFO  10:05:42 Download artifacts of 4 machines INFO  10:05:42 ============================================================== INFO  10:05:42 Downloading from 54.211.146.186 INFO  10:05:42 Downloading from 54.166.1.79 INFO  10:05:42 Downloading from 54.147.196.63 INFO  10:05:42 Downloading from 54.144.235.111 INFO  10:05:43 ============================================================== INFO  10:05:43 Finished Downloading Artifacts of 4 machines INFO  10:05:43 ============================================================== INFO  10:05:43 Shutting down Provisioner... INFO  10:05:43 Done! ```   The artifacts (log files) are downloaded into the `workers` subfolder of the working folder.  **4. Terminating the Instances**  If want to terminate the instances, execute the following command.  ``` provisioner --terminate ``` 	 If an EC2 machine with an agent running is idle for 2 hours, that machine will automatically terminate itself to prevent running into a big bill.  The output looks like the following.  ``` INFO  10:26:46 Hazelcast Simulator Provisioner INFO  10:26:46 Version: 0.5, Commit: c6e82c5, Build Time: 02.07.2015 @ 09:50:21 UTC INFO  10:26:46 SIMULATOR_HOME: /disk1/hazelcast-simulator-0.5 INFO  10:26:46 Loading simulator.properties: /disk1/exampleSandbox/simulator.properties INFO  10:26:46 ============================================================== INFO  10:26:46 Terminating 4 aws-ec2 machines (can take some time) INFO  10:26:46 ============================================================== INFO  10:26:46 Current number of machines: 4 INFO  10:26:46 Desired number of machines: 0 INFO  10:27:10     54.211.146.186 Terminating INFO  10:27:10     54.147.196.63 Terminating INFO  10:27:10     54.144.235.111 Terminating INFO  10:27:10     54.166.1.79 Terminating INFO  10:28:13 Updating /disk1/exampleSandbox/agents.txt INFO  10:28:13 Duration: 00d 00h 01m 27s INFO  10:28:13 ============================================================== INFO  10:28:13 Terminated 4 of 4, remaining=0 INFO  10:28:13 ============================================================== INFO  10:28:13 Shutting down Provisioner... INFO  10:28:13 Done! ```  "
});

documentTitles["index.html#running-the-test-with-a-script"] = "Running the Test with a Script";
index.add({
    url: "index.html#running-the-test-with-a-script",
    title: "Running the Test with a Script",
    body: "### Running the Test with a Script  Another option to run the test is using a script. Execute the following command to create a script called, for example, `run.sh`.  ``` cat &gt; run.sh ```   This option is for your convenience. It gathers all the commands used to perform a test into one script. The following is the content of this example `run.sh` script.  ``` #!/bin/bash set -e provisioner --scale 4 coordinator test.properties provisioner --download ```  Note that you should make the script `run.sh` executable executing the following command.  ``` chmod +x run.sh ``` 	 &lt;br&gt;&lt;/br&gt; ***RELATED INFORMATION***  *Please see the [Provisioner section](#provisioner) and the [Coordinator section](#coordinator) for more `provisioner` and `coordinator` commands.* &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#using-maven-archetypes"] = "Using Maven Archetypes";
index.add({
    url: "index.html#using-maven-archetypes",
    title: "Using Maven Archetypes",
    body: "### Using Maven Archetypes  Alternatively, you can execute tests using the Simulator archetype. Please see the following.  ``` mvn archetype:generate  \     -DarchetypeGroupId=com.hazelcast.simulator \     -DarchetypeArtifactId=archetype \     -DarchetypeVersion=0.5 \     -DgroupId=yourgroupid  \     -DartifactId=yourproject ```  This creates a fully working Simulator project, including the test having `yourgroupid`.   1. After this project is generated, go to the created folder and execute the following command.     ``` mvn clean install    ```  2. Then, go to your working folder.      ``` cd &lt;working folder&gt;    ```   3. Edit the `simulator.properties` file as explained in the [Simulator.Properties File Description section](#simulator-properties-file-description).   4. Run the test from your working folder using the following command.     ``` ./run.sh    ```  The output is the same as shown in the [Running the Test section](#running-the-test).      "
});

documentTitles["index.html#provisioner"] = "Provisioner";
index.add({
    url: "index.html#provisioner",
    title: "Provisioner",
    body: "## Provisioner  The provisioner is responsible for provisioning (starting/stopping) instances in a cloud. It will start an Operating System instance, install Java, open firewall ports and install Simulator Agents.  You can configure the behavior of the cluster—such as cloud, operating system, hardware, JVM version, Hazelcast version or region—through the file `simulator.properties`. Please see the [Simulator.Properties File Description section](#simulator-properties-file-description) for more information.   You can use the following arguments with the `provisioner`.  To start a cluster:  ``` provisioner --scale 1 ```  To scale to a 2 member cluster:  ``` provisioner --scale 2 ```  To scale back to a 1 member cluster:  ``` provisioner --scale 1 ```  To terminate all members in the cluster:  ``` provisioner --terminate ```  or  ``` provisioner --scale 0 ```  If you want to restart all agents and also upload the newest JARs to the machines:  ``` provisioner --restart ```  To download all the worker home folders (containing logs and whatever has been put inside):  ``` provisioner --download ``` This command is also useful if you added a profiling because the profiling information will also be downloaded. The command is also useful when an out of memory exception is thrown because you can download the heap dump.   To remove all the worker home directories:  ``` provisioner --clean ```  "
});

documentTitles["index.html#accessing-the-provisioned-machine"] = "Accessing the Provisioned Machine";
index.add({
    url: "index.html#accessing-the-provisioned-machine",
    title: "Accessing the Provisioned Machine",
    body: "### Accessing the Provisioned Machine  When a machine is provisioned, a user with the name `simulator` is created on the remote machine by default, and that user is added to the sudousers list. Also, the public key of your local user is copied to the remote machine and added to the file  `~/.ssh/authorized_keys`. You can login to that machine using the following command.  ``` ssh simulator@ip ```  You can change the name of the created user to something else by setting the `USER=&lt;somename&gt;` property in the file `simulator.properties`. Be careful not to pick a name that is used on the target image: for example, if you use `ec2-user/ubuntu`, and the default user of that image is `ec2-user/ubuntu`, then you can run into authentication problems.     "
});

documentTitles["index.html#coordinator"] = "Coordinator";
index.add({
    url: "index.html#coordinator",
    title: "Coordinator",
    body: "## Coordinator  The Coordinator is responsible for actually running the test using the agents.  You can deploy your test on the workers using the following command.  ``` coordinator yourtest.properties. ```  This command creates a single worker per agent and runs the test for 60 seconds (the default duration for a Hazelcast Simulator test).  If your test properties file is called `test.properties`, then you can use the following command to have the coordinator pick up your `test.properties` file automatically.  ``` coordinator ```  "
});

documentTitles["index.html#controlling-hazelcast-declarative-configuration"] = "Controlling Hazelcast Declarative Configuration";
index.add({
    url: "index.html#controlling-hazelcast-declarative-configuration",
    title: "Controlling Hazelcast Declarative Configuration",
    body: "### Controlling Hazelcast Declarative Configuration  By default, the coordinator uses the files `SIMULATOR_HOME/conf/hazelcast.xml` and `SIMULATOR_HOME/conf/ client-hazelcast.xml` to generate the correct Hazelcast configuration. To use your own configuration files instead, use the following arguments:  ``` coordinator --clientHzFile=your-client-hazelcast.xml --hzFile your-hazelcast.xml .... ```    "
});

documentTitles["index.html#controlling-test-duration"] = "Controlling Test Duration";
index.add({
    url: "index.html#controlling-test-duration",
    title: "Controlling Test Duration",
    body: "### Controlling Test Duration  You can control the duration of a single test using the `--duration` argument. The default duration is 60 seconds. You can specify your own durations using *m* for minutes, *d* for days or *s* for seconds with this argument.  You can see the usage of the `--duration` argument in the following example commands.  ``` coordinator --duration 90s  map.properties ```  ``` coordinator --duration 3m  map.properties ```  ``` coordinator --duration 12h  map.properties ```  ``` coordinator --duration 2d  map.properties ```  "
});

documentTitles["index.html#controlling-client-and-workers"] = "Controlling Client And Workers";
index.add({
    url: "index.html#controlling-client-and-workers",
    title: "Controlling Client And Workers",
    body: "### Controlling Client And Workers  By default, the provisioner starts the cluster members. You can also use the `--memberWorkerCount` and `--clientWorkerCount` arguments to control how many members and clients you want to have.  The following command creates a 4 node Hazelcast cluster and 8 clients, and all load will be generated through the clients. It also runs the `map.properties` test for a duration of 12 hours.   ``` coordinator --memberWorkerCount 4 --clientWorkerCount 8 --duration 12h  map.properties ```  Profiles are usually configured with some clients and some members. If you want to have members and no clients:  ``` coordinator --memberWorkerCount 12  --duration 12h  map.properties ```  If you want to have a JVM with embedded client plus member and all communication goes through the client:  ``` coordinator --mixedWorkerCount 12  --duration 12h  map.properties ```  If you want to run 2 member JVMs per machine:  ``` coordinator --memberWorkerCount 24  --duration 12h  map.properties ```  As you notice, you can play with the actual deployment.     "
});

documentTitles["index.html#communicator"] = "Communicator";
index.add({
    url: "index.html#communicator",
    title: "Communicator",
    body: "## Communicator  Communicator enables you to pass messages to Agents, Workers and Tests. You can use messages to simulate various conditions: for example, Hazelcast discomforts like network partitioning and high CPU utilization.  "
});

documentTitles["index.html#example"] = "Example";
index.add({
    url: "index.html#example",
    title: "Example",
    body: "### Example  ``` $ communicator --message-address Agent=*,Worker=* spinCore ``` This will send the message `spinCore` to all Workers.   Each interaction with Communicator has to specify:  - Message Type - Message Address  "
});

documentTitles["index.html#message-types"] = "Message Types";
index.add({
    url: "index.html#message-types",
    title: "Message Types",
    body: "### Message Types  - `kill` - Kills a JVM running a message recipient. In practice, you probably want to send this message to Worker(s) only. The reason for this is you rarely want to kill an Agent and it does not make sense to send this to just a single test; it would kill other tests sharing the same JVM as well. - `blockHzTraffic` - Blocks the incoming traffic to TCP port range 5700:5800. - `newMember` - Starts a new member. You can send this message to Agents only. - `softKill` - Instructs a JVM that is running a message recipient to exit. - `spinCore` - Starts a new busy-spinning thread. You can use it to simulate increased CPU consumption. - `unblockTraffic` - Open ports blocked by the `blockHzTraffic` message. - `oom` - Forces a message recipient to use all memory and cause an OutOfMemoryError. - `terminateWorker` - Terminates a random Worker. This message type can be targeted to an Agent only.  "
});

documentTitles["index.html#message-addressing"] = "Message Addressing";
index.add({
    url: "index.html#message-addressing",
    title: "Message Addressing",
    body: "### Message Addressing  You can send a message to Agent, Worker or Test. These resources create a naturally hierarchy, making the messaging address hierarchical as well.  Syntax: `Agent=&lt;mode&gt;[,Worker=&lt;mode&gt;[,Test=&lt;mode&gt;]]`.  Mode can be either '*' for broadcast or 'R' for a single random destination.  **Addressing Example 1:**  `Agent=*,Worker=R`: A message will be routed to all agents, then each agent will pass it to a single random worker, and each worker will pass the message for processing.  **Addressing Example 2:**  `Agent=*,Worker=R,Test=*`: A message will be routed to all agents, then each agent will pass the message to a single random worker and workers will pass the message to all tests for processing.  "
});

documentTitles["index.html#addressing-shortcuts"] = "Addressing Shortcuts";
index.add({
    url: "index.html#addressing-shortcuts",
    title: "Addressing Shortcuts",
    body: "#### Addressing Shortcuts  Hierarchical addressing is powerful, but it can be quite verbose. You can use convenient shortcuts, as shown below.  - `--oldest-member`: Sends a message to a worker with the oldest cluster member. - `--random-agent`: Sends a message to a random agent. - `--random-worker`: Sends a message to a random worker.  **Example:** The following command starts a busy-spinning thread in a JVM running a random Worker.  ``` communicator --random-worker spinCore ```       "
});

documentTitles["index.html#simulatorproperties-file-description"] = "Simulator.Properties File Description";
index.add({
    url: "index.html#simulatorproperties-file-description",
    title: "Simulator.Properties File Description",
    body: "## Simulator.Properties File Description  The file `simulator.properties` is placed at the `conf` folder of your Hazelcast Simulator. This file is used to prepare the Simulator tests for their proper executions according to your business needs.  ![](images/NoteSmall.jpg)***NOTE:*** *Currently, the main focuses are on the Simulator tests of Hazelcast on Amazon EC2 and Google Compute Engine (GCE). For the preparation of `simulator.properties` for GCE, please refer to the [Setting Up For GCE section](#setting-up-for-google-compute-engine). The following `simulator.properties` file description is mainly for Amazon EC2.*  This file includes the following parameters.  - `CLOUD_PROVIDER`: The Maven artifact ID of your cloud provider. For example, it is `aws-ec2` if you are going to test your Hazelcast on Amazon EC2. For the full list of supported clouds, please refer to &lt;a href=\&quot;http://jclouds.apache.org/reference/providers/\&quot; target=\&quot;_blank\&quot;&gt;here&lt;/a&gt;. - `CLOUD_IDENTITY`: The full path of the file containing your AWS access key. - `CLOUD_CREDENTIAL`: The full path of the file containing your AWS secret key.  - `CLOUD_POLL_INITIAL_PERIOD`: The time in milliseconds between the requests (polls) from jclouds&amp;reg; to your cloud. Its default value is `50`. - `CLOUD_POLL_MAX_PERIOD`: The maximum time in milliseconds between the polls to your cloud. Its default value is `1000`. - `CLOUD_BATCH_SIZE`: The number of machines to be started/terminated in one go. For Amazon EC2, its acceptable value is `20`. - `GROUP_NAME`: The prefix for the agent name. You may want to give different names for different test clusters. For GCE, you need to be very careful using multiple group names, since for every port and every group name, a firewall rule is made and you can only have 100 firewall rules. If the name contains `${username}`, this section will be replaced by the actual user that runs the test. This makes it very easy to identify which user owns a certain machine. - `USER`: The name of the user on your local machine. jclouds&amp;reg; automatically creates a new user on the remote machine with this name as the login name. It also copies the public key of your system to the remote machine and adds it to the file `~/.ssh/authorized_keys`. Therefore, once the instance is created, you can login with the command `ssh &lt;USER&gt;@&lt;IP address&gt;`. Its default value is `simulator`. - `SSH_OPTIONS`: The options added to SSH. You do not need to change these options. - `SECURITY_GROUP`: The name of the security group that includes the instances created for the Simulator test. For Amazon EC2, this group will be created automatically if it does not exist. If you do not specify a region for the parameter `MACHINE_SPEC` (using the `locationId` attribute), the region will be `us-east-1`. If a security group already exists, please make sure the ports 22, 9000, 9001 and the ports between 5701 and 5751 are open. For GCE, this parameter is not used. - `SUBNET_ID`: The VPC Subnet ID for Amazon EC2. If this value is different from `default`, then the instances will be created in EC2 VPC and the parameter `SECURITY_GROUP` will be ignored. For GCE, this parameter is not used. - `MACHINE_SPEC`: Specifications of the instance to be created. You can specify attributes such as the operating system, Amazon Machine Image (AMI), hardware properties, EC2 instance type and EC2 region. Please see the [Setting Up For EC2 section](#setting-up-for-amazon-ec2) for an example `MACHINE-SPEC` value and please refer to the `TemplateBuilderSpec` class of the `org.jclouds.compute.domain` package at jclouds&amp;reg; JavaDoc for a full list of machine specifications. Please refer to &lt;a href=\&quot;http://aws.amazon.com/ec2/\&quot; target=\&quot;_blank\&quot;&gt;Amazon EC2&lt;/a&gt; for more information, such as for Amazon EC2 instance types. - `HAZELCAST_VERSION_SPEC`: The workers can be configured to use a specific version of Hazelcast. By this way, you do not need to depend on the Hazelcast version provided by the simulator. You can configure the Hazelcast version in one of the following ways: 	- `outofthebox`: This is the default value provided by the Simulator itself. 	- `maven=&lt;version&gt;`: Used to give a specific version from the maven repository (for examples, `maven=3.2`, `maven=3.3-SNAPSHOT`). Local Hazelcast artifacts will be preferred, so you can checkout, for example, an experimental branch and build the artifacts locally. This will all be done on the local machine, not on the agent machine. 	- `bringmyown`: Used to specify your own dependencies. For more information on the values, please see the `--workerClassPath` setting of the Controller. 	- `git=&lt;version&gt;`: If you want the Simulator to use a specific version of Hazelcast from GIT, you can use this parameter (for example, `git=f0288f713` to build a specific revision, or `git=v3.2.3` to build a version from a GIT tag, or `git=&lt;your repository&gt;/&lt;your branch&gt;` to build a version from a branch in a specific repository). Use the parameter `GIT_CUSTOM_REPOSITORIES` to specify custom repositories, explained below. The main Hazelcast repository is always named  as `origin`. - `GIT_BUILD_DIR`: When you set the parameter `HAZELCAST_VERSION_SPEC` to `git=&lt;version&gt;`, the Hazelcast sources will be downloaded to this directory. Its default value is `$HOME/.hazelcast-build/` - `GIT_CUSTOM_REPOSITORIES`: Comma separated list of additional GIT repositories to be fetched. Use this parameter when you set the parameter `HAZELCAST_VERSION_SPEC` to `git=&lt;version&gt;` and specify additional repositories. Hazelcast Simulator will always fetch the repository at &lt;a href=\&quot;https://github.com/hazelcast/hazelcast\&quot; target=\&quot;_blank\&quot;&gt;https://github.com/hazelcast/hazelcast&lt;/a&gt;. This parameter specifies additional repositories. You can use both remote and local repositories. Remote repositories must be accessible for anonymous and local repositories must be accessible for the current user. Its default value is empty. Only the main Hazelcast repository is used by default. - `MVN_EXECUTABLE`: This parameter specifies the path to a local Maven installation when you set the parameter `HAZELCAST_VERSION_SPEC` to `git=&lt;version&gt;`. Its default value is `/usr/bin/mvn`. - `JDK_FLAVOR`: Available flavors are `oracle`, `openjdk`, `ibm` and `outofthebox`. `outofthebox` is the one provided by the image so no software is installed by the Simulator. If you select a flavor different than `outofthebox`, the currect behavior is that only 64-bit JVMs are going to be installed. Therefore, make sure that your operating system is 64-bit.  - `JDK_64_BITS`: Specifies whether a 64-bit JVM should be installed or not. For now, only `true` is allowed. - `JDK_VERSION`: The version of Java to be installed. Oracle and IBM support 6, 7, and 8. OpenJDK supports 6 and 7. - `PROFILER`: The worker can be configured with a profiler. Available options are `none`, `yourkit`, `hprof`, `perf`, `vtune` and `flightrecorder`. The `yourkit` profiles currently only work on 64-bit Linux (there is no support for Windows or Mac). - `FLIGHTRECORDER_SETTINGS`: Includes the settings for the `flightrecorder` profiler. For options, please refer to &lt;a href=\&quot;http://docs.oracle.com/cd/E15289_01/doc.40/e15062/optionxx.htm#BABIECII\&quot; target=\&quot;_blank\&quot;&gt;here&lt;/a&gt;. - `YOURKIT_SETTINGS`: Includes the settings for the `yourkit` profiler. When `yourkit` is enabled, a snapshot is created and put in the worker home directory. Therefore, when the artifacts are downloaded, the snapshots are included and can be loaded with your Yourkit GUI. Make sure that the path matches the JVM 32/64 bits. The files `libypagent.so`, which are included in the Simulator, are for YourKit Java Profiler 2013. For more information on the Yourkit setting, please refer to &lt;a href=\&quot;http://www.yourkit.com/docs/java/help/agent.jsp\&quot; target=\&quot;_blank\&quot;&gt;here&lt;/a&gt; and  &lt;a href=\&quot;http://www.yourkit.com/docs/java/help/startup_options.jsp\&quot; target=\&quot;_blank\&quot;&gt;here&lt;/a&gt;. - `HPROF_SETTINGS`: Includes the settings for the `hprof` profiler, which is a part of the JDK. By default, the file `java.hprof.txt` is created in the worker directory. This file can be downloaded using the command `provisioner --download` after a test has run. For configuration options, please refer to &lt;a href=\&quot;http://docs.oracle.com/javase/7/docs/technotes/samples/hprof.html\&quot; target=\&quot;_blank\&quot;&gt;here&lt;/a&gt;. - `PERF_SETTINGS`: Includes the settings for the `perf` profiler, available only for Linux. For more information, please see &lt;a href=\&quot;https://perf.wiki.kernel.org/index.php/Tutorial#Sampling_with_perf_record\&quot; target=\&quot;_blank\&quot;&gt;https://perf.wiki.kernel.org/index.php/Tutorial#Sampling_with_perf_record&lt;/a&gt;. - `VTUNE_SETTINGS`: Includes the settings for the `vtune` profiler. It requires Intel VTune to be installed on the system. For more information, please refer to &lt;a href=\&quot;https://software.intel.com/sites/products/documentation/doclib/iss/2013/amplifier/lin/ug_docs/GUID-09766DB6-3FA8-445B-8E70-5BC9A1BE7C55.htm#GUID-09766DB6-3FA8-445B-8E70-5BC9A1BE7C55]\&quot; target=\&quot;_blank\&quot;&gt;here&lt;/a&gt;.     "
});

documentTitles["index.html#performance-and-benchmarking"] = "Performance and Benchmarking";
index.add({
    url: "index.html#performance-and-benchmarking",
    title: "Performance and Benchmarking",
    body: "## Performance and Benchmarking   Hazelcast Simulator can use probes to record throughput and latency while running a test. Hazelcast Simulator can inject a probe into a test, and then it is the responsibility of the test to notify the probe about the start/end of each action.  There are two classes of probes:  - `SimpleProbe`: Counts the number of events. It does not have a notion of start/end. - `IntervalProbe`: Differentiates between start/end of an action. Used to measure latency.  How to use probes is explained below.  1. Define a probe as a test property. Hazelcast Simulator will inject the appropriate probe implementation.     ``` public class IntIntMapTest {     private static final ILogger log = Logger.getLogger(IntIntMapTest.class);     private enum Operation {         PUT,         GET     }     [...]     // Probes will be injected by Hazelcast Simulator     public IntervalProbe intervalProbe;     public IntervalProbe anotherIntervalProbe;     public SimpleProbe simpleProbe;    ```  2. Use the probe in your test code.     ```     getLatency.started();     map.get(key);     getLatency.done();    ```  3. Configure the probe in your `test.properties` file.     ``` probe-intervalProbe=throughput probe-simpleProbe=throughput    ```  The configuration format is `probe-&lt;nameOfField&gt;=&lt;type&gt;`, where `nameOfField` is the name you choose for the probe, and `type` is the type of probe. Please keep in mind that this format is likely to change in future versions of Hazelcast Simulator.  A probe of class `IntervalProbe` can have the following types.  - `latency`: Measures the latency distribution. - `maxLatency`: Records the highest latency. Unlike the previous probe, it records only the single highest latency measured, not a full distribution. - `hdr`: Same as latency, but it uses HdrHistogram under the hood. This will replace the latency probe in future versions of Simulator. - `disabled`: Dummy probe. It does not record anything.  A probe of class `SimpleProbe` can have the following implementations.  - `throughput`: Measures throughput. - `disabled`: Dummy probe. It does not record anything.   It is important to understand that the class of a probe does not mandate what the probe is actually measuring. Therefore, the tests just know a class of probe, but they do not know if the probe generates, for example, a full latency histogram or just a maximum recorded latency. This detail must be implemented from a point of view of a test.   "
});

documentTitles["index.html#wan"] = "WAN";
index.add({
    url: "index.html#wan",
    title: "WAN",
    body: "# WAN  &lt;font color=\&quot;#3981DB\&quot;&gt;**Hazelcast Enterprise**&lt;/font&gt; &lt;br&gt;&lt;/br&gt;  This chapter explains how you can replicate the state of your clusters over Wide Area Network (WAN) environments.  &lt;br&gt;&lt;/br&gt; ***RELATED INFORMATION***  *You can download the white paper **Hazelcast on AWS: Best Practices for Deployment** from &lt;a href=\&quot;http://hazelcast.com/resources/hazelcast-on-aws-best-practices-for-deployment/\&quot; target=\&quot;_blank\&quot;&gt;Hazelcast.com&lt;/a&gt;.*  &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#wan-replication"] = "WAN Replication";
index.add({
    url: "index.html#wan-replication",
    title: "WAN Replication",
    body: "## WAN Replication  There are cases where you need to synchronize multiple clusters to the same state. Synchronization of clusters, also known as WAN Replication, is mainly used for replicating state of different clusters over WAN environments like the Internet.   Imagine you have different data centers in New York, London and Tokyo each running an independent Hazelcast cluster. Every cluster would be operating at native speed in their own LAN (Local Area Network), but you also want some or all recordsets in these clusters to be replicated to each other: updates in the Tokyo cluster should also replicate to London and New York, in the meantime updates in the New York cluster are synchronized to the Tokyo and London clusters.      "
});

documentTitles["index.html#defining-wan-replication"] = "Defining WAN Replication";
index.add({
    url: "index.html#defining-wan-replication",
    title: "Defining WAN Replication",
    body: "### Defining WAN Replication  The current WAN Replication implementation supports two different operation modes.  - **Active-Passive:** This mode is mostly used for failover scenarios where you want to replicate an active cluster to one   or more passive clusters, for the purpose of maintaining a backup.  - **Active-Active:** Every cluster is equal, each cluster replicate to all other clusters. This is normally used to connect   different clients to different clusters for the sake of the shortest path between client and server.  Let's see how we can declaratively configure WAN Replication from the New York cluster to target the London and Tokyo clusters:  ```xml &lt;hazelcast&gt; ...   &lt;!-- No Delay Replication Configuration --&gt;   &lt;wan-replication name=\&quot;my-wan-cluster\&quot;&gt;     &lt;target-cluster group-name=\&quot;tokyo\&quot; group-password=\&quot;tokyo-pass\&quot;&gt;       &lt;replication-impl&gt;          com.hazelcast.enterprise.wan.replication.WanNoDelayReplication       &lt;/replication-impl&gt;       &lt;end-points&gt;         &lt;address&gt;10.2.1.1:5701&lt;/address&gt;         &lt;address&gt;10.2.1.2:5701&lt;/address&gt;       &lt;/end-points&gt;     &lt;/target-cluster&gt;   &lt;/wan-replication&gt;    &lt;!-- Batch Replication Configuration --&gt;   &lt;wan-replication name=\&quot;my-wan-cluster-batch\&quot; snapshot-enabled=\&quot;false\&quot;&gt;     &lt;target-cluster group-name=\&quot;london\&quot; group-password=\&quot;london-pass\&quot;&gt;       &lt;replication-impl&gt;          com.hazelcast.enterprise.wan.replication.WanBatchReplication       &lt;/replication-impl&gt;       &lt;end-points&gt;         &lt;address&gt;10.3.5.1:5701&lt;/address&gt;         &lt;address&gt;10.3.5.2:5701&lt;/address&gt;       &lt;/end-points&gt;     &lt;/target-cluster&gt;   &lt;/wan-replication&gt; ... &lt;/hazelcast&gt; ```  The following are the definitions for the configuration elements:  - `name`: Name for your WAN replication configuration. - `snapshot-enabled`: Only valid when used with `WanBatchReplication`. When set to `true`, only the latest events (based on key) are selected and sent in a batch.  - `target-cluster`: Configures target cluster's group name and password. - `replication-impl`: Name of the class implementation for the WAN replication. - `end-points`: IP addresses of the cluster members for which the WAN replication is implemented.   And the following is the equivalent programmatic configuration snippet:  ```java Config config = new Config();  //No delay replication config WanReplicationConfig wrConfig = new WanReplicationConfig(); WanTargetClusterConfig  wtcConfig = wrConfig.getWanTargetClusterConfig();  wrConfig.setName(\&quot;my-wan-cluster\&quot;); wtcConfig.setGroupName(\&quot;tokyo\&quot;).setGroupPassword(\&quot;tokyo-pass\&quot;); wtcConfig.setReplicationImpl(\&quot;com.hazelcast.enterprise.wan.replication.WanNoDelayReplication\&quot;);  List&lt;String&gt; endpoints = new ArrayList&lt;String&gt;(); endpoints.add(\&quot;10.2.1.1:5701\&quot;); endpoints.add(\&quot;10.2.1.1:5701\&quot;); wtcConfig.setEndpoints(endpoints); config.addWanReplicationConfig(wrConfig);  //Batch Replication Config WanReplicationConfig wrConfig = new WanReplicationConfig(); WanTargetClusterConfig  wtcConfig = wrConfig.getWanTargetClusterConfig();  wrConfig.setName(\&quot;my-wan-cluster-batch\&quot;); wrConfig.setSnapshotEnabled(false); wtcConfig.setGroupName(\&quot;london\&quot;).setGroupPassword(\&quot;london\&quot;); wtcConfig.setReplicationImpl(\&quot;com.hazelcast.enterprise.wan.replication.WanBatchReplication\&quot;);  List&lt;String&gt; batchEndpoints = new ArrayList&lt;String&gt;(); batchEndpoints.add(\&quot;10.3.5.1:5701\&quot;); batchEndpoints.add(\&quot;10.3.5.2:5701\&quot;); wtcConfig.setEndpoints(batchEndpoints); config.addWanReplicationConfig(wrConfig); ```   Using this configuration, the cluster running in New York is replicating to Tokyo and London. The Tokyo and London clusters should have similar configurations if you want to run in Active-Active mode.  If the New York and London cluster configurations contain the `wan-replication` element and the Tokyo cluster does not, it means New York and London are active endpoints and Tokyo is a passive endpoint.  "
});

documentTitles["index.html#wan-replication-implementations"] = "WAN Replication Implementations";
index.add({
    url: "index.html#wan-replication-implementations",
    title: "WAN Replication Implementations",
    body: "#### WAN Replication Implementations  Hazelcast offers two different WAN replication implementations:   - `WanNoDelayReplication`  - `WanBatchReplication`  As you see in the above configuration examples, these implementations are configured using the `replication-impl` element (in the declarative configuration) or the method `setReplicationImpl` (in the programmatic configuration).   The implementation `WanNoDelayReplication` sends replication events to the target cluster as soon as they are generated.  The implementation `WanBatchReplication`, on the other hand, waits until:  -  a pre-defined number of replication events are generated, (please refer to the [Batch Size section](#batch-size)). - or a pre-defined amount of time is passed (please refer to the [Batch Maximum Delay section](#batch-maximum-delay)).         "
});

documentTitles["index.html#configuring-wan-replication-for-imap-and-icache"] = "Configuring WAN Replication for IMap and ICache";
index.add({
    url: "index.html#configuring-wan-replication-for-imap-and-icache",
    title: "Configuring WAN Replication for IMap and ICache",
    body: "### Configuring WAN Replication for IMap and ICache  Yon can configure the WAN replication for Hazelcast's IMap and ICache data structures. To enable WAN replication for an IMap or ICache instance, you can use the `wan-replication-ref` element. Each IMap and ICache instance can have different WAN replication configurations.  **Enabling WAN Replication for IMap:**  Imagine you have different distributed maps, however only one of those maps should be replicated to a target cluster. To achieve this, configure the map that you want replicated by adding the `wan-replication-ref` element in the map configuration as shown below.  ```xml &lt;hazelcast&gt;   &lt;wan-replication name=\&quot;my-wan-cluster\&quot;&gt;     ...   &lt;/wan-replication&gt;   &lt;map name=\&quot;my-shared-map\&quot;&gt;     &lt;wan-replication-ref name=\&quot;my-wan-cluster\&quot;&gt;        &lt;merge-policy&gt;com.hazelcast.map.merge.PassThroughMergePolicy&lt;/merge-policy&gt;        &lt;republishing-enabled&gt;false&lt;/republishing-enabled&gt;     &lt;/wan-replication-ref&gt;   &lt;/map&gt;   ... &lt;/hazelcast&gt; ```  The following is the equivalent programmatic configuration:  ```java Config config = new Config();  WanReplicationConfig wrConfig = new WanReplicationConfig(); WanTargetClusterConfig  wtcConfig = wrConfig.getWanTargetClusterConfig();  wrConfig.setName(\&quot;my-wan-cluster\&quot;); ... config.addWanReplicationConfig(wrConfig);  WanReplicationRef wanRef = new WanReplicationRef(); wanRef.setName(\&quot;my-wan-cluster\&quot;); wanRef.setMergePolicy(PassThroughMergePolicy.class.getName()); wanRef.setRepublishingEnabled(false); config.getMapConfig(\&quot;my-shared-map\&quot;).setWanReplicationRef(wanRef); ```  You see that we have `my-shared-map` configured to replicate itself to the cluster targets defined in the earlier `wan-replication` element.  `wan-replication-ref` has the following elements;  - `name`: Name of `wan-replication` configuration. IMap or ICache instance uses this `wan-replication` configuration.  - `merge-policy`: Resolve conflicts that are occurred when target cluster already has the replicated entry key. - `republishing-enabled`: When enabled, an incoming event to a member is forwarded to target cluster of that member.  When using Active-Active Replication, multiple clusters can simultaneously update the same entry in a distributed data structure. You can configure a merge policy to resolve these potential conflicts, as shown in the above example configuration (using the `merge-policy` sub-element under the `wan-replication-ref` element).  Hazelcast provides the following merge policies for IMap:  - `com.hazelcast.map.merge.PutIfAbsentMapMergePolicy`: Incoming entry merges from the source map to the target map if it does not exist in the target map. - `com.hazelcast.map.merge.HigherHitsMapMergePolicy`: Incoming entry merges from the source map to the target map if the source entry has more hits than the target one. - `com.hazelcast.map.merge.PassThroughMergePolicy`: Incoming entry merges from the source map to the target map unless the incoming entry is not null. - `com.hazelcast.map.merge.LatestUpdateMapMergePolicy`: Incoming entry merges from the source map to the target map if the source entry has been updated more recently than the target entry. Please note that this merge policy can only be used when the clusters' clocks are in sync.  ![image](images/NoteSmall.jpg) ***NOTE:*** *When using WAN replication, please note that only key based events are replicated to the target cluster. Operations like `clear`, `destroy` and `evictAll` are NOT replicated.*  &lt;br&gt;&lt;/br&gt;  **Enabling WAN Replication for ICache:**  The following is a declarative configuration example for enabling WAN Replication for ICache:   ```xml &lt;wan-replication name=\&quot;my-wan-cluster\&quot;&gt;    ... &lt;/wan-replication&gt; &lt;cache name=\&quot;my-shared-cache\&quot;&gt;    &lt;wan-replication-ref name=\&quot;my-wan-cluster\&quot;&gt;       &lt;merge-policy&gt;com.hazelcast.cache.merge.PassThroughCacheMergePolicy&lt;/merge-policy&gt;       &lt;republishing-enabled&gt;true&lt;/republishing-enabled&gt;    &lt;/wan-replication-ref&gt; &lt;/cache&gt; ```  The following is the equivalent programmatic configuration:   ```java Config config = new Config();  WanReplicationConfig wrConfig = new WanReplicationConfig(); WanTargetClusterConfig  wtcConfig = wrConfig.getWanTargetClusterConfig();  wrConfig.setName(\&quot;my-wan-cluster\&quot;); ... config.addWanReplicationConfig(wrConfig);  WanReplicationRef cacheWanRef = new WanReplicationRef(); cacheWanRef.setName(\&quot;my-wan-cluster\&quot;); cacheWanRef.setMergePolicy(\&quot;com.hazelcast.cache.merge.PassThroughCacheMergePolicy\&quot;); cacheWanRef.setRepublishingEnabled(true); config.getCacheConfig(\&quot;my-shared-cache\&quot;).setWanReplicationRef(cacheWanRef); ```  ![image](images/NoteSmall.jpg) ***NOTE:*** *Caches that are created dynamically do not support WAN replication functionality. Cache configurations should be defined either declaratively (by XML) or programmatically on both source and target clusters.*   Hazelcast provides the following merge policies for ICache:  - `com.hazelcast.cache.merge.HigherHitsCacheMergePolicy`: Incoming entry merges from the source cache to the target cache if the source entry has more hits than the target one. - `com.hazelcast.cache.merge.PassThroughCacheMergePolicy`: Incoming entry merges from the source cache to the target cache unless the incoming entry is not null.    "
});

documentTitles["index.html#batch-size"] = "Batch Size";
index.add({
    url: "index.html#batch-size",
    title: "Batch Size",
    body: "### Batch Size  When `WanBatchReplication` is preferred as the replication implementation, the maximum size of events that are sent in a single batch can be changed  depending on your needs. Default value for batch size is `500`.  Batch size can be set for each target cluster by modifying related `WanTargetClusterConfig`.  You can change this property using the declarative configuration as shown below.  ```xml ...  &lt;wan-replication name=\&quot;my-wan-cluster\&quot;&gt;     &lt;target-cluster group-name=\&quot;london\&quot; group-password=\&quot;london-pass\&quot;&gt;         ...         &lt;batch-size&gt;1000&lt;/batch-size&gt;         ...     &lt;/target-cluster&gt;  &lt;/wan-replication&gt; ... ```  And, the following is the equivalent programmatic configuration:  ```java ...  WanReplicationConfig wanConfig = config.getWanReplicationConfig(\&quot;my-wan-cluster\&quot;);  WanTargetClusterConfig targetClusterConfig = new WanTargetClusterConfig();  ...  targetClusterConfig.setBatchSize(1000);  wanConfig.addTargetClusterConfig(targetClusterConfig) ... ```       "
});

documentTitles["index.html#batch-maximum-delay"] = "Batch Maximum Delay";
index.add({
    url: "index.html#batch-maximum-delay",
    title: "Batch Maximum Delay",
    body: "### Batch Maximum Delay  When using `WanBatchReplication` if the number of WAN replication events generated does not reach [Batch Size](#batch-size), they are sent to the target cluster after a certain amount of time is passed.  Default value of for this duration is `1` seconds.  Maximum delay can be set for each target cluster by modifying related `WanTargetClusterConfig`.  You can change this property using the declarative configuration as shown below.  ```xml ...  &lt;wan-replication name=\&quot;my-wan-cluster\&quot;&gt;     &lt;target-cluster group-name=\&quot;london\&quot; group-password=\&quot;london-pass\&quot;&gt;         ...         &lt;batch-max-delay-millis&gt;2&lt;/batch-max-delay-millis&gt;         ...     &lt;/target-cluster&gt;  &lt;/wan-replication&gt; ... ```  And, the following is the equivalent programmatic configuration:  ```java ...  WanReplicationConfig wanConfig = config.getWanReplicationConfig(\&quot;my-wan-cluster\&quot;);  WanTargetClusterConfig targetClusterConfig = new WanTargetClusterConfig();  ...  targetClusterConfig.setBatchMaxDelayMillis(2);  wanConfig.addTargetClusterConfig(targetClusterConfig) ... ```       "
});

documentTitles["index.html#response-timeout"] = "Response Timeout";
index.add({
    url: "index.html#response-timeout",
    title: "Response Timeout",
    body: "### Response Timeout  After a replication event is sent to the target cluster, the source member waits for an acknowledgement that event has reached the target. If confirmation is not received inside a timeout duration window, the event is resent to the target cluster.  Default value of this duration is `60000` milliseconds.  You can change this duration depending on your network latency for each target cluster by modifying related `WanTargetClusterConfig`.  You can change this property using the declarative configuration as shown below.  ```xml ...  &lt;wan-replication name=\&quot;my-wan-cluster\&quot;&gt;     &lt;target-cluster group-name=\&quot;london\&quot; group-password=\&quot;london-pass\&quot;&gt;         ...         &lt;response-timeout-millis&gt;70000&lt;/response-timeout-millis&gt;         ...     &lt;/target-cluster&gt;  &lt;/wan-replication&gt; ... ```  And, the following is the equivalent programmatic configuration:  ```java ...  WanReplicationConfig wanConfig = config.getWanReplicationConfig(\&quot;my-wan-cluster\&quot;);  WanTargetClusterConfig targetClusterConfig = new WanTargetClusterConfig();  ...  targetClusterConfig.setResponseTimeoutMillis(70000);  wanConfig.addTargetClusterConfig(targetClusterConfig) ... ```       "
});

documentTitles["index.html#queue-capacity"] = "Queue Capacity";
index.add({
    url: "index.html#queue-capacity",
    title: "Queue Capacity",
    body: "### Queue Capacity  For huge clusters or high data mutation rates, you might need to increase the replication queue size. The default queue size for replication queues is `10000`. This means, if you have heavy put/update/remove rates, you might exceed the queue size so that the oldest, not yet replicated, updates might get lost. Note that a separate queue is used for each WAN Replication configured for IMap and ICache.   Queue capacity can be set for each target cluster by modifying related `WanTargetClusterConfig`.  You can change this property using the declarative configuration as shown below.  ```xml ...  &lt;wan-replication name=\&quot;my-wan-cluster\&quot;&gt;     &lt;target-cluster group-name=\&quot;london\&quot; group-password=\&quot;london-pass\&quot;&gt;         ...         &lt;queue-capacity&gt;15000&lt;/queue-capacity&gt;         ...     &lt;/target-cluster&gt;  &lt;/wan-replication&gt; ... ```  And, the following is the equivalent programmatic configuration:  ```java ...  WanReplicationConfig wanConfig = config.getWanReplicationConfig(\&quot;my-wan-cluster\&quot;);  WanTargetClusterConfig targetClusterConfig = new WanTargetClusterConfig();  ...  targetClusterConfig.setQueueCapacity(15000);  wanConfig.addTargetClusterConfig(targetClusterConfig) ... ```       "
});

documentTitles["index.html#queue-full-behavior"] = "Queue Full Behavior";
index.add({
    url: "index.html#queue-full-behavior",
    title: "Queue Full Behavior",
    body: "### Queue Full Behavior  In the previous Hazelcast releases, WAN replication was dropping the new events if WAN replication event queues are full. This behavior is now configurable starting with the release 3.6.   There are two different supported behaviors:   - `DISCARD_AFTER_MUTATION`: If you select this option, the new WAN events generated by the member are dropped and not replicated to the target cluster when the WAN event queues are full.    - `THROW_EXCEPTION`: If you select this option, the WAN queue size is checked before each supported mutating operation (like `IMap#put`, `ICache#put`). If one the queues of target cluster is full, `WANReplicationQueueFullException` is thrown and the operation is not allowed.  The following is an example configuration:  ```xml &lt;wan-replication name=\&quot;my-wan-cluster\&quot;&gt;   &lt;target-cluster group-name=\&quot;test-cluster-1\&quot; group-password=\&quot;test-pass\&quot;&gt;     ...     &lt;queue-full-behavior&gt;DISCARD_AFTER_MUTATION&lt;/queue-full-behavior&gt;   &lt;/target-cluster&gt; &lt;/wan-replication&gt; ```  ![image](images/NoteSmall.jpg) ***NOTE:*** *`queue-full-behavior` configuration is optional. Its default value is `DISCARD_AFTER_MUTATION`*.        "
});

documentTitles["index.html#event-filtering-api"] = "Event Filtering API";
index.add({
    url: "index.html#event-filtering-api",
    title: "Event Filtering API",
    body: "### Event Filtering API  Starting with 3.6, Enterprise WAN replication allows you to intercept WAN replication events before they are placed to WAN event replication queues by providing a filtering API. Using this API, you can monitor WAN replication events of each data structure separately.  You can attach filters to your data structures using  `filter` property of `wan-replication-ref` configuration inside `hazelcast.xml` as shown in the following example configuration. You can also configure it using programmatic configuration.  ```xml &lt;hazelcast&gt;   &lt;map name=\&quot;testMap\&quot;&gt;     &lt;wan-replication-ref name=\&quot;test\&quot;&gt;       ...       &lt;filters&gt;         &lt;filter-impl&gt;com.example.SampleFilter&lt;/filter-impl&gt;         &lt;filter-impl&gt;com.example.SampleFilter2&lt;/filter-impl&gt;       &lt;/filters&gt;     &lt;/wan-replication-ref&gt;   &lt;/map&gt;\&quot; &lt;/hazelcast&gt; ```  As shown in the above configuration, you can define more than one filter. Filters are called in the order that they are introduced. A WAN replication event is only eligible to publish if it passes all the filters.  Map and Cache have different filter interfaces. These interfaces are shown below.  **For map**:  ```java package com.hazelcast.map.wan.filter; ...  /**  * Wan event filtering interface for {@link com.hazelcast.core.IMap}  * based wan replication events  *  * @param &lt;K&gt; the type of the key  * @param &lt;V&gt; the type of the value  */ public interface MapWanEventFilter&lt;K, V&gt; {      /**      * This method decides whether this entry view is suitable to replicate      * over WAN      *      * @param mapName      * @param entryView      * @return &lt;tt&gt;true&lt;/tt&gt; if WAN event is not eligible for replication      */     boolean filter(String mapName, EntryView&lt;K, V&gt; entryView, WanFilterEventType eventType); } ```   **For cache**:  ```java package com.hazelcast.cache.wan.filter; ...  /**  * Wan event filtering interface for cache based wan replication events  *  * @param &lt;K&gt; the type of the key  * @param &lt;V&gt; the type of the value  */ public interface CacheWanEventFilter&lt;K, V&gt; {      /**      * This method decides whether this entry view is suitable to replicate      * over WAN.      *      * @param entryView      * @return &lt;tt&gt;true&lt;/tt&gt; if WAN event is not eligible for replication.      */     boolean filter(String cacheName, CacheEntryView&lt;K, V&gt; entryView, WanFilterEventType eventType); } ```  The method `filter` takes three parameters:  - `mapName`/`cacheName`: Name of the related data structure. - `entryView`: [EntryView](https://github.com/hazelcast/hazelcast/blob/master/hazelcast/src/main/java/com/hazelcast/core/EntryView.java)  or [CacheEntryView](https://github.com/hazelcast/hazelcast/blob/master/hazelcast/src/main/java/com/hazelcast/cache/CacheEntryView.java) depending on the data structure. - `eventType`: Enum type - `UPDATED(1)` or `REMOVED(2)` - depending on the event.      "
});

documentTitles["index.html#acknowledge-types"] = "Acknowledge Types";
index.add({
    url: "index.html#acknowledge-types",
    title: "Acknowledge Types",
    body: "### Acknowledge Types  Starting with 3.6, WAN replication supports different acknowledge (ACK) types for each target cluster group. Using this ACK types, you can choose from two different ACK types depending on your consistency requirements. The following ACK types are supported:   - `ACK_ON_RECEIPT`: Events that are received by target cluster that are considered as successful. This option does not guarantee that the received event is actually applied but it is faster. - `ACK_ON_OPERATION_COMPLETE`: This option guarantees that the event is received by the target cluster and it is applied. It is more time consuming. But   but it is the best way if you have strong consistency requirements.  The following is an example configuration:  ```xml &lt;wan-replication name=\&quot;my-wan-cluster\&quot;&gt;   &lt;target-cluster group-name=\&quot;test-cluster-1\&quot; group-password=\&quot;test-pass\&quot;&gt;     ...     &lt;acknowledge-type&gt;ACK_ON_OPERATION_COMPLETE&lt;/acknowledge-type&gt;   &lt;/target-cluster&gt; &lt;/wan-replication&gt; ```  ![image](images/NoteSmall.jpg) ***NOTE:*** *`acknowledge-type` configuration is optional. Its default value is `ACK_ON_RECEIPT`*.         "
});

documentTitles["index.html#wan-replication-additional-information"] = "WAN Replication Additional Information";
index.add({
    url: "index.html#wan-replication-additional-information",
    title: "WAN Replication Additional Information",
    body: "### WAN Replication Additional Information  Each cluster in WAN topology has to have a unique `group-name` property for a proper handling of forwarded events.   Starting with 3.6, WAN replication backs up its event queues to other nodes to prevent event loss in case of member failures. WAN replication's backup mechanism depends on the related data structures' backup operations. Note that, WAN replication is supported for IMap and ICache. That means, as far as you set a backup count for your IMap or ICache instances, WAN replication events generated by these instances are also replicated.   There is no additional configuration to enable/disable WAN replication event backups.        "
});

documentTitles["index.html#osgi"] = "OSGI";
index.add({
    url: "index.html#osgi",
    title: "OSGI",
    body: "# OSGI  This chapter explains how Hazelcast is supported on OSGI (Open Service Gateway Initiatives) environments.  "
});

documentTitles["index.html#osgi-support"] = "OSGI Support";
index.add({
    url: "index.html#osgi-support",
    title: "OSGI Support",
    body: "## OSGI Support  Hazelcast bundles provide OSGI services so that Hazelcast users can manage (create, access, shutdown) Hazelcast instances through these services on OSGI environments. When you enable the property `hazelcast.osgi.start` (default is disabled), when an Hazelcast OSGI service is activated, a default Hazelcast instance is created automatically.  Created Hazelcast instances can be served as an OSGI service that the other Hazelcast bundles can access. Registering created Hazelcast instances behavior is enabled by default; you can disable it using the property `hazelcast.osgi.register.disabled`.  Each Hazelcast bundle provides a different OSGI service. Their instances can be grouped (clustered) together to prevent possible compatibility issues between different Hazelcast versions/bundles. This grouping behavior is enabled by default and you disable it using the property `hazelcast.osgi.grouping.disabled`.  Hazelcast OSGI service's lifecycle (and the owned/created instances's lifecycles) is the same with the owner Hazelcast bundles. When the bundle is stopped (deactivated), the owned service and Hazelcast instances are also deactivated/shutdown and deregistered automatically. When the bundle is re-activated, its service is registered again.  The Hazelcast Enterprise JAR package is also an OSGI bundle like the Hazelcast Open Source JAR package.  "
});

documentTitles["index.html#api"] = "API";
index.add({
    url: "index.html#api",
    title: "API",
    body: "## API  **`HazelcastOSGiService`:** Contract point for Hazelcast services on top of OSGI. Registered to `org.osgi.framework.BundleContext` as the OSGI service so the other bundles can access and use Hazelcast on the OSGI environment through this service.  **`HazelcastOSGiInstance`:** Contract point for `HazelcastInstance` implementations based on OSGI service. `HazelcastOSGiService` provides proxy Hazelcast instances typed `HazelcastOSGiInstance` which is a subtype of `HazelcastInstance` and these instances delegate all calls to the underlying `HazelcastInstance`.  "
});

documentTitles["index.html#configuring-hazelcast-osgi-support"] = "Configuring Hazelcast OSGI Support";
index.add({
    url: "index.html#configuring-hazelcast-osgi-support",
    title: "Configuring Hazelcast OSGI Support",
    body: "## Configuring Hazelcast OSGI Support  `HazelcastOSGiService` uses three configurations:  - **`hazelcast.osgi.start`:** If this property is enabled (it is disabled by default), when an `HazelcastOSGiService` is activated, a default Hazelcast instance is created automatically. &lt;br&gt;&lt;/br&gt; - **`hazelcast.osgi.register.disabled`:** If this property is disabled (it is disabled by default), when a Hazelcast instance is created by `HazelcastOSGiService`, the created `HazelcastOSGiInstance` is registered automatically as OSGI service with type of `HazelcastOSGiInstance` and it is deregistered automatically when the created `HazelcastOSGiInstance` is shutdown. &lt;br&gt;&lt;/br&gt; - **`hazelcast.osgi.grouping.disabled`:** If this property is disabled (it is disabled by default), every created `HazelcastOSGiInstance` is grouped as their owner `HazelcastOSGiService` and do not join each other unless no group name is specified in the `GroupConfig` of `Config`.  "
});

documentTitles["index.html#design"] = "Design";
index.add({
    url: "index.html#design",
    title: "Design",
    body: "## Design  `HazelcastOSGiService` is specific to each Hazelcast bundle. This means that every Hazelcast bundle has its own `HazelcastOSGiService` instance.  Every Hazelcast bundle registers its `HazelcastOSGiService` instances via Hazelcast Bundle Activator (`com.hazelcast.osgi.impl.Activator`) while they are being started, and it deregisters its `HazelcastOSGiService` instances while they are being stopped.  Each `HazelcastOSGiService` instance has a different service ID as the combination of Hazelcast version and artifact type (`OSS` or `EE`). Examples are `3.6#OSS`, `3.6#EE`, `3.7#OSS`, `3.7#EE`, etc.  `HazelcastOSGiService` instance lifecycle is the same with the owner Hazelcast bundle. This means that when the owner bundle is deactivated, the owned `HazelcastOSGiService` instance is deactivated, and all active Hazelcast instances that are created and served by that `HazelcastOSGiService` instance are also shutdown and deregistered. When the Hazelcast bundle is re-activated, its `HazelcastOSGiService` instance is registered again as the OSGI service.  ![](images/osgi_design.png)  "
});

documentTitles["index.html#using-hazelcast-osgi-service"] = "Using Hazelcast OSGI Service";
index.add({
    url: "index.html#using-hazelcast-osgi-service",
    title: "Using Hazelcast OSGI Service",
    body: "## Using Hazelcast OSGI Service  "
});

documentTitles["index.html#getting-hazelcast-osgi-service-instances"] = "Getting Hazelcast OSGI Service Instances";
index.add({
    url: "index.html#getting-hazelcast-osgi-service-instances",
    title: "Getting Hazelcast OSGI Service Instances",
    body: "### Getting Hazelcast OSGI Service Instances  You can access all `HazelcastOSGiService` instances through `org.osgi.framework.BundleContext` for each Hazelcast bundle as follows:  ```java for (ServiceReference serviceRef : context.getServiceReferences(HazelcastOSGiService.class.getName(), null)) {     HazelcastOSGiService service = (HazelcastOSGiService) context.getService(serviceRef);     String serviceId = service.getId();     ... }  ```   "
});

documentTitles["index.html#managing-and-using-hazelcast-instances"] = "Managing and Using Hazelcast instances";
index.add({
    url: "index.html#managing-and-using-hazelcast-instances",
    title: "Managing and Using Hazelcast instances",
    body: "### Managing and Using Hazelcast instances  You can use `HazelcastOSGiService` instance to create and shutdown Hazelcast instances on OSGI environments. The created Hazelcast instances are `HazelcastOSGiInstance` typed (which is sub-type of `HazelcastInstance`) and are just proxies to the underlying Hazelcast instance. There are several methods in `HazelcastOSGiService` to use Hazelcast instances on OSGI environments as shown below.  ```java // Get the default Hazelcast instance owned by `hazelcastOsgiService` // Returns null if `HAZELCAST_OSGI_START` is not enabled HazelcastOSGiInstance defaultInstance = hazelcastOsgiService.getDefaultHazelcastInstance();     // Creates a new Hazelcast instance with default configurations as owned by `hazelcastOsgiService` HazelcastOSGiInstance newInstance1 = hazelcastOsgiService.newHazelcastInstance();     // Creates a new Hazelcast instance with specified configuration as owned by `hazelcastOsgiService` Config config = new Config(); config.setInstanceName(\&quot;OSGI-Instance\&quot;); ... HazelcastOSGiInstance newInstance2 = hazelcastOsgiService.newHazelcastInstance(config);    // Gets the Hazelcast instance with the name `OSGI-Instance`, which is `newInstance2` created above HazelcastOSGiInstance instance = hazelcastOsgiService.getHazelcastInstanceByName(\&quot;OSGI-Instance\&quot;);    // Shuts down the Hazelcast instance with name `OSGI-Instance`, which is `newInstance2` hazelcastOsgiService.shutdownHazelcastInstance(instance);    // Print all active Hazelcast instances owned by `hazelcastOsgiService` for (HazelcastOSGiInstance instance : hazelcastOsgiService.getAllHazelcastInstances()) {     System.out.println(instance); }    // Shuts down all Hazelcast instances owned by `hazelcastOsgiService` hazelcastOsgiService.shutdownAll(); ```     "
});

documentTitles["index.html#extending-hazelcast"] = "Extending Hazelcast";
index.add({
    url: "index.html#extending-hazelcast",
    title: "Extending Hazelcast",
    body: "# Extending Hazelcast  This chapter describes the different possibilities to extend Hazelcast with additional services or features.      "
});

documentTitles["index.html#user-defined-services"] = "User Defined Services";
index.add({
    url: "index.html#user-defined-services",
    title: "User Defined Services",
    body: "## User Defined Services  In the case of special/custom needs, you can use Hazelcast's SPI (Service Provider Interface) module to develop your own distributed data structures and services on top of Hazelcast. Hazelcast SPI is an internal, low-level API which is expected to change in each release except for the patch releases. Your structures and services evolve as the SPI changes.   Throughout this section, we create an example distributed counter that will be the guide to reveal the Hazelcast Services SPI usage.  Here is our counter.  ```java public interface Counter{    int inc(int amount); } ```  This counter will have the following features: - It will be stored in Hazelcast.  - Different cluster members can call it.  - It will be scalable, meaning that the capacity for the number of counters scales with the number of cluster members. - It will be highly available, meaning that if a member hosting this counter goes down, a backup will be available on a different member.  All these features are done with the steps below. Each step adds a new functionality to this counter.  1. Create the class. 2. Enable the class. 3. Add properties. 5. Place a remote call. 5. Create the containers. 6. Enable partition migration. 6. Create the backups.           "
});

documentTitles["index.html#creating-the-service-class"] = "Creating the Service Class";
index.add({
    url: "index.html#creating-the-service-class",
    title: "Creating the Service Class",
    body: "### Creating the Service Class  To have the counter as a functioning distributed object, we need a class. This class (named CounterService in the following example code) is the gateway between Hazelcast internals and the counter, allowing us to add features to the counter. The following example code creates the class `CounterService`. Its lifecycle is managed by Hazelcast.   `CounterService` should implement the interface `com.hazelcast.spi.ManagedService` as shown below. The `com.hazelcast.spi.ManagedService` [source code is here](https://github.com/hazelcast/hazelcast/blob/master/hazelcast/src/main/java/com/hazelcast/spi/ManagedService.java).  `CounterService` implements the following methods.   - `init`: This is called when `CounterService` is initialized. `NodeEngine` enables access to Hazelcast internals such as `HazelcastInstance` and `PartitionService`. Also, the object `Properties` will provide us with the ability to create our own properties. - `shutdown`: This is called when `CounterService` is shutdown. It cleans up the resources. - `reset`: This is called when cluster members face the Split-Brain issue. This occurs when disconnected members that have created their own cluster are merged back into the main cluster. Services can also implement the `SplitBrainHandleService` to indicate that they can take part in the merge process. For `CounterService` we are going to implement `reset` as a no-op.   ```java import com.hazelcast.spi.ManagedService; import com.hazelcast.spi.NodeEngine;  import java.util.Properties; import java.util.concurrent.ConcurrentHashMap; import java.util.concurrent.ConcurrentMap;  public class CounterService implements ManagedService {     private NodeEngine nodeEngine;      @Override     public void init( NodeEngine nodeEngine, Properties properties ) {         System.out.println( \&quot;CounterService.init\&quot; );         this.nodeEngine = nodeEngine;     }      @Override     public void shutdown( boolean terminate ) {         System.out.println( \&quot;CounterService.shutdown\&quot; );     }      @Override     public void reset() {     }  } ```        "
});

documentTitles["index.html#enabling-the-service-class"] = "Enabling the Service Class";
index.add({
    url: "index.html#enabling-the-service-class",
    title: "Enabling the Service Class",
    body: "### Enabling the Service Class  Now, we need to enable the class `CounterService`. The declarative way of doing this is shown below.  ```xml &lt;network&gt;    &lt;join&gt;&lt;multicast enabled=\&quot;true\&quot;/&gt; &lt;/join&gt; &lt;/network&gt; &lt;services&gt;    &lt;service enabled=\&quot;true\&quot;&gt;       &lt;name&gt;CounterService&lt;/name&gt;       &lt;class-name&gt;CounterService&lt;/class-name&gt;    &lt;/service&gt; &lt;/services&gt; ```  The `CounterService` is declared within the `services` configuration element.   - Set the `enabled` attribute to `true` to enable the service. - Set the `name` attribute to the name of the service. It should be a unique name (`CounterService` in our case) since it will be looked up when a remote call is made. Note that the value of this attribute will be sent at each request, and that a longer `name` value means more data (de)serialization. A good practice is to give an understandable name with the shortest possible length. - Set the `class-name` attribute to the class name of the service (`CounterService` in our case). The class should have a *no-arg* constructor. Otherwise, the object cannot be initialized.  Note that multicast is enabled as the join mechanism. In the later sections for the `CounterService` example, we will see why.         "
});

documentTitles["index.html#adding-properties-to-the-service"] = "Adding Properties to the Service";
index.add({
    url: "index.html#adding-properties-to-the-service",
    title: "Adding Properties to the Service",
    body: "### Adding Properties to the Service  The `init` method for `CounterService` takes the `Properties` object as an argument. This means we can add properties to the service that are passed to the `init` method; see [Creating the Service Class](#creating-the-service-class). You can add properties declaratively as shown below. (You likely want to name your properties something other than someproperty.)  ```xml &lt;service enabled=\&quot;true\&quot;&gt;    &lt;name&gt;CounterService&lt;/name&gt;    &lt;class-name&gt;CounterService&lt;/class-name&gt;    &lt;properties&gt;        &lt;someproperty&gt;10&lt;/someproperty&gt;    &lt;/properties&gt; &lt;/service&gt; ```  If you want to parse a more complex XML, you can use the interface `com.hazelcast.spi.ServiceConfigurationParser`. It gives you access to the XML DOM tree.      "
});

documentTitles["index.html#starting-the-service"] = "Starting the Service";
index.add({
    url: "index.html#starting-the-service",
    title: "Starting the Service",
    body: "### Starting the Service  Now, let's start a `HazelcastInstance` as shown below, which will start the `CounterService`.   ```java import com.hazelcast.core.Hazelcast;  public class Member {     public static void main(String[] args) {         Hazelcast.newHazelcastInstance();     } } ```  Once it starts, the `CounterService init` method prints the following output.  `CounterService.init`  Once the HazelcastInstance is shutdown (for example, with Ctrl+C), the `CounterService shutdown` method prints the following output.  `CounterService.shutdown`      "
});

documentTitles["index.html#placing-a-remote-call-via-proxy"] = "Placing a Remote Call via Proxy";
index.add({
    url: "index.html#placing-a-remote-call-via-proxy",
    title: "Placing a Remote Call via Proxy",
    body: "### Placing a Remote Call via Proxy  In the previous sections for the `CounterService` example, we started `CounterService` as part of a HazelcastInstance startup.  Now, let's connect the `Counter` interface to `CounterService` and perform a remote call to the cluster member hosting the counter data. Then, we will return a dummy result.   Remote calls are performed via a proxy in Hazelcast. Proxies expose the methods at the client side. Once a method is called, proxy creates an operation object, sends this object to the cluster member responsible from executing that operation, and then sends the result.   "
});

documentTitles["index.html#making-counter-a-distributed-object"] = "Making Counter a Distributed Object";
index.add({
    url: "index.html#making-counter-a-distributed-object",
    title: "Making Counter a Distributed Object",
    body: "#### Making Counter a Distributed Object  First, we need to make the `Counter` interface a distributed object by extending the `DistributedObject` interface, as shown below.   ```java import com.hazelcast.core.DistributedObject;  public interface Counter extends DistributedObject {     int inc(int amount); } ```  "
});

documentTitles["index.html#implementing-managedservice-and-remoteservice"] = "Implementing ManagedService and RemoteService";
index.add({
    url: "index.html#implementing-managedservice-and-remoteservice",
    title: "Implementing ManagedService and RemoteService",
    body: "#### Implementing ManagedService and RemoteService  Now, we need to make the `CounterService` class implement not only the `ManagedService` interface, but also the interface `com.hazelcast.spi.RemoteService`. This way, a client will be able to get a handle of a counter proxy. You can read the [source code for RemoteService here](https://github.com/hazelcast/hazelcast/blob/master/hazelcast/src/main/java/com/hazelcast/spi/RemoteService.java).   ```java import com.hazelcast.core.DistributedObject; import com.hazelcast.spi.ManagedService; import com.hazelcast.spi.NodeEngine; import com.hazelcast.spi.RemoteService;  import java.util.Properties;  public class CounterService implements ManagedService, RemoteService {     public static final String NAME = \&quot;CounterService\&quot;;      private NodeEngine nodeEngine;      @Override     public DistributedObject createDistributedObject(String objectName) {         return new CounterProxy(objectName, nodeEngine, this);     }      @Override     public void destroyDistributedObject(String objectName) {         // for the time being a no-op, but in the later examples this will be implemented     }      @Override     public void init(NodeEngine nodeEngine, Properties properties) {         this.nodeEngine = nodeEngine;     }      @Override     public void shutdown(boolean terminate) {     }      @Override     public void reset() {     } } ```  The `CounterProxy` returned by the method `createDistributedObject` is a local representation to (potentially) remote managed data and logic. &lt;br&gt;&lt;/br&gt;  ![image](images/NoteSmall.jpg) ***NOTE:*** *Note that caching and removing the proxy instance are done outside of this service.* &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#implementing-counterproxy"] = "Implementing CounterProxy";
index.add({
    url: "index.html#implementing-counterproxy",
    title: "Implementing CounterProxy",
    body: "#### Implementing CounterProxy  Now, it is time to implement the `CounterProxy` as shown below. `CounterProxy` extends [AbstractDistributedObject, source code here](https://github.com/hazelcast/hazelcast/blob/master/hazelcast/src/main/java/com/hazelcast/spi/AbstractDistributedObject.java).   ```java import com.hazelcast.spi.AbstractDistributedObject; import com.hazelcast.spi.InvocationBuilder; import com.hazelcast.spi.NodeEngine; import com.hazelcast.util.ExceptionUtil;  import java.util.concurrent.Future;  public class CounterProxy extends AbstractDistributedObject&lt;CounterService&gt; implements Counter {     private final String name;      public CounterProxy(String name, NodeEngine nodeEngine, CounterService counterService) {         super(nodeEngine, counterService);         this.name = name;     }      @Override     public String getServiceName() {         return CounterService.NAME;     }      @Override     public String getName() {         return name;     }      @Override     public int inc(int amount) {         NodeEngine nodeEngine = getNodeEngine();         IncOperation operation = new IncOperation(name, amount);         int partitionId = nodeEngine.getPartitionService().getPartitionId(name);         InvocationBuilder builder = nodeEngine.getOperationService()                 .createInvocationBuilder(CounterService.NAME, operation, partitionId);         try {             final Future&lt;Integer&gt; future = builder.invoke();             return future.get();         } catch (Exception e) {             throw ExceptionUtil.rethrow(e);         }     } } ```   `CounterProxy` is a local representation of remote data/functionality. It does not include the counter state. Therefore, the method `inc` should be invoked on the cluster member hosting the real counter. You can invoke it using Hazelcast SPI; then it will send the operations to the correct member and return the results.  Let's dig deeper into the method `inc`.  - First, we create `IncOperation` with a given `name` and `amount`. - Then, we get the partition ID based on the `name`; by this way, all operations for a given name will result in the same partition ID. - Then, we create an `InvocationBuilder` where the connection between operation and partition is made. - Finally, we invoke the `InvocationBuilder` and wait for its result. This waiting is performed with a `future.get()`. In our case, timeout is not important. However, it is a good practice to use a timeout for a real system since operations should complete in a certain amount of time.   "
});

documentTitles["index.html#dealing-with-exceptions"] = "Dealing with Exceptions";
index.add({
    url: "index.html#dealing-with-exceptions",
    title: "Dealing with Exceptions",
    body: "#### Dealing with Exceptions  Hazelcast's `ExceptionUtil` is a good solution when it comes to dealing with execution exceptions. When the execution of the operation fails with an exception, an `ExecutionException` is thrown and handled with the method `ExceptionUtil.rethrow(Throwable)`.   If it is an `InterruptedException`, we have two options: either propagate the exception or just use the `ExceptionUtil.rethrow` for all exceptions. Please see the example code below.   ```java   try {      final Future&lt;Integer&gt; future = invocation.invoke();      return future.get();   } catch(InterruptedException e){      throw e;   } catch(Exception e){      throw ExceptionUtil.rethrow(e);   } ```  "
});

documentTitles["index.html#implementing-the-partitionawareoperation-interface"] = "Implementing the PartitionAwareOperation Interface";
index.add({
    url: "index.html#implementing-the-partitionawareoperation-interface",
    title: "Implementing the PartitionAwareOperation Interface",
    body: "#### Implementing the PartitionAwareOperation Interface  Now, let's write the `IncOperation`. It implements the `PartitionAwareOperation` interface, meaning that it will be executed on the partition that hosts the counter. See the [PartitionAwareOperation source code here](https://github.com/hazelcast/hazelcast/blob/master/hazelcast/src/main/java/com/hazelcast/spi/PartitionAwareOperation.java).  The method `run` does the actual execution. Since `IncOperation` will return a response, the method `returnsResponse` returns `true`. If your method is asynchronous and does not need to return a response, it is better to return `false` since it will be faster. The actual response is stored in the field `returnValue`; retrieve it with the method `getResponse`.  There are two more methods in this code: `writeInternal` and `readInternal`. Since `IncOperation` needs to be serialized, these two methods are overridden, and hence, `objectId` and `amount` are serialized and available when those operations are executed.   For the deserialization, note that the operation must have a *no-arg* constructor.   ```java import com.hazelcast.nio.ObjectDataInput; import com.hazelcast.nio.ObjectDataOutput; import com.hazelcast.spi.AbstractOperation; import com.hazelcast.spi.PartitionAwareOperation;  import java.io.IOException;  class IncOperation extends AbstractOperation implements PartitionAwareOperation {     private String objectId;     private int amount, returnValue;      // Important to have a no-arg constructor for deserialization     public IncOperation() {     }      public IncOperation(String objectId, int amount) {         this.amount = amount;         this.objectId = objectId;     }      @Override     public void run() throws Exception {         System.out.println(\&quot;Executing \&quot; + objectId + \&quot;.inc() on: \&quot; + getNodeEngine().getThisAddress());         returnValue = 0;     }      @Override     public boolean returnsResponse() {         return true;     }      @Override     public Object getResponse() {         return returnValue;     }      @Override     protected void writeInternal(ObjectDataOutput out) throws IOException {         super.writeInternal(out);         out.writeUTF(objectId);         out.writeInt(amount);     }      @Override     protected void readInternal(ObjectDataInput in) throws IOException {         super.readInternal(in);         objectId = in.readUTF();         amount = in.readInt();     } } ```  "
});

documentTitles["index.html#running-the-code"] = "Running the Code";
index.add({
    url: "index.html#running-the-code",
    title: "Running the Code",
    body: "#### Running the Code  Now, let's run our code.  ```java import com.hazelcast.core.Hazelcast; import com.hazelcast.core.HazelcastInstance;  import java.util.UUID;  public class Member {     public static void main(String[] args) {         HazelcastInstance[] instances = new HazelcastInstance[2];         for (int k = 0; k &lt; instances.length; k++)             instances[k] = Hazelcast.newHazelcastInstance();          Counter[] counters = new Counter[4];         for (int k = 0; k &lt; counters.length; k++)             counters[k] = instances[0].getDistributedObject(CounterService.NAME, k+\&quot;counter\&quot;);          for (Counter counter : counters)             System.out.println(counter.inc(1));          System.out.println(\&quot;Finished\&quot;);         System.exit(0);     } } ```  Once run, you will see the output as below.  `Executing 0counter.inc() on: Address[192.168.1.103]:5702`  `0`  `Executing 1counter.inc() on: Address[192.168.1.103]:5702`  `0`  `Executing 2counter.inc() on: Address[192.168.1.103]:5701`  `0`  `Executing 3counter.inc() on: Address[192.168.1.103]:5701`  `0`  `Finished`  Note that counters are stored in different cluster members. Also note that increment is not active for now since the value remains as **0**.   Until now, we have performed the basics to get this up and running. In the next section, we will make a real counter, cache the proxy instances and deal with proxy instance destruction.        "
});

documentTitles["index.html#creating-containers"] = "Creating Containers";
index.add({
    url: "index.html#creating-containers",
    title: "Creating Containers",
    body: "### Creating Containers  Let's create a Container for every partition in the system. This container will contain all counters and proxies.   ```java import java.util.HashMap; import java.util.Map;  class Container {     private final Map&lt;String, Integer&gt; values = new HashMap();      int inc(String id, int amount) {         Integer counter = values.get(id);         if (counter == null) {             counter = 0;         }         counter += amount;         values.put(id, counter);         return counter;     }          public void init(String objectName) {         values.put(objectName,0);     }      public void destroy(String objectName) {         values.remove(objectName);     }          ... } ```  Hazelcast guarantees that a single thread will be active in a single partition. Therefore, when accessing a container, concurrency control will not be an issue.   The code in our example uses a `Container` instance per partition approach. With this approach, there will not be any mutable shared state between partitions. This approach also makes operations on partitions simpler since you do not need to filter out data that does not belong to a certain partition.   The code performs the tasks below.  - It creates a container for every partition with the method `init`. - It creates the proxy with the method `createDistributedObject`. - It removes the value of the object with the method `destroyDistributedObject`, otherwise we may get an OutOfMemory exception.  "
});

documentTitles["index.html#integrating-the-container-in-the-counterservice"] = "Integrating the Container in the CounterService";
index.add({
    url: "index.html#integrating-the-container-in-the-counterservice",
    title: "Integrating the Container in the CounterService",
    body: "#### Integrating the Container in the CounterService  Let's integrate the `Container` in the `CounterService`, as shown below.  ```java import com.hazelcast.spi.ManagedService; import com.hazelcast.spi.NodeEngine; import com.hazelcast.spi.RemoteService;  import java.util.HashMap; import java.util.Map; import java.util.Properties;  public class CounterService implements ManagedService, RemoteService {     public final static String NAME = \&quot;CounterService\&quot;;     Container[] containers;     private NodeEngine nodeEngine;      @Override     public void init(NodeEngine nodeEngine, Properties properties) {         this.nodeEngine = nodeEngine;         containers = new Container[nodeEngine.getPartitionService().getPartitionCount()];         for (int k = 0; k &lt; containers.length; k++)             containers[k] = new Container();     }      @Override     public void shutdown(boolean terminate) {     }      @Override     public CounterProxy createDistributedObject(String objectName) {         int partitionId = nodeEngine.getPartitionService().getPartitionId(objectName);         Container container = containers[partitionId];         container.init(objectName);         return new CounterProxy(objectName, nodeEngine, this);     }      @Override     public void destroyDistributedObject(String objectName) {         int partitionId = nodeEngine.getPartitionService().getPartitionId(objectName);         Container container = containers[partitionId];         container.destroy(objectName);     }      @Override     public void reset() {     }      public static class Container {         final Map&lt;String, Integer&gt; values = new HashMap&lt;String, Integer&gt;();          private void init(String objectName) {             values.put(objectName, 0);         }          private void destroy(String objectName){             values.remove(objectName);         }     } } ```   "
});

documentTitles["index.html#connecting-the-incoperationrun-method-to-the-container"] = "Connecting the IncOperation.run Method to the Container";
index.add({
    url: "index.html#connecting-the-incoperationrun-method-to-the-container",
    title: "Connecting the IncOperation.run Method to the Container",
    body: "#### Connecting the IncOperation.run Method to the Container  As the last step in creating a Container, we connect the method `IncOperation.run` to the Container, as shown below.  `partitionId` has a range between **0** and **partitionCount** and can be used as an index for the container array. Therefore, you can use `partitionId` to retrieve the container, and once the container has been retrieved, you can access the value.   ```java import com.hazelcast.nio.ObjectDataInput; import com.hazelcast.nio.ObjectDataOutput; import com.hazelcast.spi.AbstractOperation; import com.hazelcast.spi.PartitionAwareOperation;  import java.io.IOException; import java.util.Map;  class IncOperation extends AbstractOperation implements PartitionAwareOperation {     private String objectId;     private int amount, returnValue;      public IncOperation() {     }      public IncOperation(String objectId, int amount) {         this.amount = amount;         this.objectId = objectId;     }      @Override     public void run() throws Exception {         System.out.println(\&quot;Executing \&quot; + objectId + \&quot;.inc() on: \&quot; + getNodeEngine().getThisAddress());         CounterService service = getService();         CounterService.Container container = service.containers[getPartitionId()];         Map&lt;String, Integer&gt; valuesMap = container.values;          Integer counter = valuesMap.get(objectId);         counter += amount;         valuesMap.put(objectId, counter);         returnValue = counter;     }      @Override     public boolean returnsResponse() {         return true;     }      @Override     public Object getResponse() {         return returnValue;     }      @Override     protected void writeInternal(ObjectDataOutput out) throws IOException {         super.writeInternal(out);         out.writeUTF(objectId);         out.writeInt(amount);     }      @Override     protected void readInternal(ObjectDataInput in) throws IOException {         super.readInternal(in);         objectId = in.readUTF();         amount = in.readInt();     } } ```  "
});

documentTitles["index.html#running-the-sample-code"] = "Running the Sample Code";
index.add({
    url: "index.html#running-the-sample-code",
    title: "Running the Sample Code",
    body: "#### Running the Sample Code  Let's run the following sample code.  ```java import com.hazelcast.core.Hazelcast; import com.hazelcast.core.HazelcastInstance;  public class Member {     public static void main(String[] args) {         HazelcastInstance[] instances = new HazelcastInstance[2];         for (int k = 0; k &lt; instances.length; k++)             instances[k] = Hazelcast.newHazelcastInstance();          Counter[] counters = new Counter[4];         for (int k = 0; k &lt; counters.length; k++)             counters[k] = instances[0].getDistributedObject(CounterService.NAME, k+\&quot;counter\&quot;);          System.out.println(\&quot;Round 1\&quot;);         for (Counter counter: counters)             System.out.println(counter.inc(1));          System.out.println(\&quot;Round 2\&quot;);         for (Counter counter: counters)             System.out.println(counter.inc(1));          System.out.println(\&quot;Finished\&quot;);         System.exit(0);     } } ```  The output will be as follows. It indicates that we have now a basic distributed counter up and running.  ``` Round 1 Executing 0counter.inc() on: Address[192.168.1.103]:5702 1 Executing 1counter.inc() on: Address[192.168.1.103]:5702 1 Executing 2counter.inc() on: Address[192.168.1.103]:5701 1 Executing 3counter.inc() on: Address[192.168.1.103]:5701 1 Round 2 Executing 0counter.inc() on: Address[192.168.1.103]:5702 2 Executing 1counter.inc() on: Address[192.168.1.103]:5702 2 Executing 2counter.inc() on: Address[192.168.1.103]:5701 2 Executing 3counter.inc() on: Address[192.168.1.103]:5701 2 Finished ```       "
});

documentTitles["index.html#partition-migration"] = "Partition Migration";
index.add({
    url: "index.html#partition-migration",
    title: "Partition Migration",
    body: "### Partition Migration  In the previous section, we created a real distributed counter. Now, we need to make sure that the content of the partition containers is migrated to different cluster members when a member joins or leaves the cluster. To make this happen, first we need to add three new methods (`applyMigrationData`, `toMigrationData` and `clear`) to the `Container`.  - `toMigrationData`: This method is called when Hazelcast wants to start the partition migration from the member owning the partition. The result of the `toMigrationData` method is the partition data in a form that can be serialized to another member. - `applyMigrationData`: This method is called when `migrationData` (created by the method `toMigrationData`) will be applied to the member that will be the new partition owner. - `clear`: This method is called when the partition migration is successfully completed and the old partition owner gets rid of all data in the partition. This method is also called when the partition migration operation fails and the to-be-the-new partition owner needs to roll back its changes.  ```java import java.util.HashMap; import java.util.Map;  class Container {     private final Map&lt;String, Integer&gt; values = new HashMap();      int inc(String id, int amount) {         Integer counter = values.get(id);         if (counter == null) {             counter = 0;         }         counter += amount;         values.put(id, counter);         return counter;     }      void clear() {         values.clear();     }      void applyMigrationData(Map&lt;String, Integer&gt; migrationData) {         values.putAll(migrationData);     }      Map&lt;String, Integer&gt; toMigrationData() {         return new HashMap(values);     }      public void init(String objectName) {         values.put(objectName,0);     }      public void destroy(String objectName) {         values.remove(objectName);     } } ```   "
});

documentTitles["index.html#transferring-migrationdata"] = "Transferring migrationData";
index.add({
    url: "index.html#transferring-migrationdata",
    title: "Transferring migrationData",
    body: "#### Transferring migrationData  After you add these three methods to the `Container`, you need to create a `CounterMigrationOperation` class that transfers `migrationData` from one member to another and calls the method `applyMigrationData` on the correct partition of the new partition owner.   An example is shown below.  ```java import com.hazelcast.nio.ObjectDataInput; import com.hazelcast.nio.ObjectDataOutput; import com.hazelcast.spi.AbstractOperation;  import java.io.IOException; import java.util.HashMap; import java.util.Map;  public class CounterMigrationOperation extends AbstractOperation {      Map&lt;String, Integer&gt; migrationData;      public CounterMigrationOperation() {     }      public CounterMigrationOperation(Map&lt;String, Integer&gt; migrationData) {         this.migrationData = migrationData;     }      @Override     public void run() throws Exception {         CounterService service = getService();         Container container = service.containers[getPartitionId()];         container.applyMigrationData(migrationData);     }      @Override     protected void writeInternal(ObjectDataOutput out) throws IOException {         out.writeInt(migrationData.size());         for (Map.Entry&lt;String, Integer&gt; entry : migrationData.entrySet()) {             out.writeUTF(entry.getKey());             out.writeInt(entry.getValue());         }     }      @Override     protected void readInternal(ObjectDataInput in) throws IOException {         int size = in.readInt();         migrationData = new HashMap&lt;String, Integer&gt;();         for (int i = 0; i &lt; size; i++)             migrationData.put(in.readUTF(), in.readInt());     } } ```   &lt;br&gt;&lt;/br&gt; ![image](images/NoteSmall.jpg) ***NOTE:*** *During a partition migration, no other operations are executed on the related partition.* &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#letting-hazelcast-know-counterservice-can-do-partition-migrations"] = "Letting Hazelcast Know CounterService Can Do Partition Migrations";
index.add({
    url: "index.html#letting-hazelcast-know-counterservice-can-do-partition-migrations",
    title: "Letting Hazelcast Know CounterService Can Do Partition Migrations",
    body: "#### Letting Hazelcast Know CounterService Can Do Partition Migrations  We need to make our `CounterService` class implement the `MigrationAwareService` interface. This will let Hazelcast know that the `CounterService` can perform partition migration.  With the `MigrationAwareService` interface, some additional methods are exposed. For example, the method `prepareMigrationOperation` returns all the data of the partition that is going to be moved. You can read the [MigrationAwareService source code here](https://github.com/hazelcast/hazelcast/blob/master/hazelcast/src/main/java/com/hazelcast/spi/MigrationAwareService.java).  The method `commitMigration` commits the data, meaning that in this case, it clears the partition container of the old owner.   ```java import com.hazelcast.core.DistributedObject; import com.hazelcast.partition.MigrationEndpoint; import com.hazelcast.spi.*;  import java.util.Map; import java.util.Properties;  public class CounterService implements ManagedService, RemoteService, MigrationAwareService {     public final static String NAME = \&quot;CounterService\&quot;;     Container[] containers;     private NodeEngine nodeEngine;      @Override     public void init(NodeEngine nodeEngine, Properties properties) {         this.nodeEngine = nodeEngine;         containers = new Container[nodeEngine.getPartitionService().getPartitionCount()];         for (int k = 0; k &lt; containers.length; k++)             containers[k] = new Container();     }      @Override     public void shutdown(boolean terminate) {     }      @Override     public DistributedObject createDistributedObject(String objectName) {         int partitionId = nodeEngine.getPartitionService().getPartitionId(objectName);         Container container = containers[partitionId];         container.init(objectName);         return new CounterProxy(objectName, nodeEngine,this);     }      @Override     public void destroyDistributedObject(String objectName) {         int partitionId = nodeEngine.getPartitionService().getPartitionId(objectName);         Container container = containers[partitionId];         container.destroy(objectName);     }      @Override     public void beforeMigration(PartitionMigrationEvent e) {         //no-op     }      @Override     public void clearPartitionReplica(int partitionId) {         Container container = containers[partitionId];         container.clear();     }      @Override     public Operation prepareReplicationOperation(PartitionReplicationEvent e) {         if (e.getReplicaIndex() &gt; 1) {             return null;         }         Container container = containers[e.getPartitionId()];         Map&lt;String, Integer&gt; data = container.toMigrationData();         return data.isEmpty() ? null : new CounterMigrationOperation(data);     }      @Override     public void commitMigration(PartitionMigrationEvent e) {         if (e.getMigrationEndpoint() == MigrationEndpoint.SOURCE) {             Container c = containers[e.getPartitionId()];             c.clear();         }          //todo     }      @Override     public void rollbackMigration(PartitionMigrationEvent e) {         if (e.getMigrationEndpoint() == MigrationEndpoint.DESTINATION) {             Container c = containers[e.getPartitionId()];             c.clear();         }     }      @Override     public void reset() {     } } ```  "
});

documentTitles["index.html#running-the-sample-code"] = "Running the Sample Code";
index.add({
    url: "index.html#running-the-sample-code",
    title: "Running the Sample Code",
    body: "#### Running the Sample Code  We can run the following code.  ```java import com.hazelcast.core.Hazelcast; import com.hazelcast.core.HazelcastInstance;  public class Member {     public static void main(String[] args) throws Exception {         HazelcastInstance[] instances = new HazelcastInstance[3];         for (int k = 0; k &lt; instances.length; k++)             instances[k] = Hazelcast.newHazelcastInstance();          Counter[] counters = new Counter[4];         for (int k = 0; k &lt; counters.length; k++)             counters[k] = instances[0].getDistributedObject(CounterService.NAME, k + \&quot;counter\&quot;);          for (Counter counter : counters)             System.out.println(counter.inc(1));          Thread.sleep(10000);          System.out.println(\&quot;Creating new members\&quot;);          for (int k = 0; k &lt; 3; k++) {             Hazelcast.newHazelcastInstance();         }          Thread.sleep(10000);          for (Counter counter : counters)             System.out.println(counter.inc(1));          System.out.println(\&quot;Finished\&quot;);         System.exit(0);     } } ```  And we get the following output.  ``` Executing 0counter.inc() on: Address[192.168.1.103]:5702 Executing backup 0counter.inc() on: Address[192.168.1.103]:5703 1 Executing 1counter.inc() on: Address[192.168.1.103]:5703 Executing backup 1counter.inc() on: Address[192.168.1.103]:5701 1 Executing 2counter.inc() on: Address[192.168.1.103]:5701 Executing backup 2counter.inc() on: Address[192.168.1.103]:5703 1 Executing 3counter.inc() on: Address[192.168.1.103]:5701 Executing backup 3counter.inc() on: Address[192.168.1.103]:5703 1 Creating new members Executing 0counter.inc() on: Address[192.168.1.103]:5705 Executing backup 0counter.inc() on: Address[192.168.1.103]:5703 2 Executing 1counter.inc() on: Address[192.168.1.103]:5703 Executing backup 1counter.inc() on: Address[192.168.1.103]:5704 2 Executing 2counter.inc() on: Address[192.168.1.103]:5705 Executing backup 2counter.inc() on: Address[192.168.1.103]:5704 2 Executing 3counter.inc() on: Address[192.168.1.103]:5704 Executing backup 3counter.inc() on: Address[192.168.1.103]:5705 2 Finished ```  You can see that the counters have moved. `0counter` moved from *192.168.1.103:5702* to *192.168.1.103:5705* and it is incremented correctly. Our counters can now move around in the cluster. You will see the counters will be redistributed once you add or remove a cluster member.      "
});

documentTitles["index.html#creating-backups"] = "Creating Backups";
index.add({
    url: "index.html#creating-backups",
    title: "Creating Backups",
    body: "### Creating Backups  Finally, we make sure that the counter data is available on another member when a member goes down. To do this, have the `IncOperation` class implement the `BackupAwareOperation` interface contained in the SPI package. See the following code.  ```java class IncOperation extends AbstractOperation  	implements PartitionAwareOperation, BackupAwareOperation {    ...           @Override    public int getAsyncBackupCount() {       return 0;    }     @Override    public int getSyncBackupCount() {       return 1;    }     @Override    public boolean shouldBackup() {       return true;    }     @Override    public Operation getBackupOperation() {       return new IncBackupOperation(objectId, amount);    } } ```  The methods `getAsyncBackupCount` and `getSyncBackupCount` specify the count for asynchronous and synchronous backups. Our sample has one synchronous backup and no asynchronous backups. In the above code, counts of the backups are hard-coded, but they can also be passed to `IncOperation` as parameters.   The method `shouldBackup` specifies whether our Operation needs a backup or not. For our sample, it returns `true`, meaning the Operation will always have a backup even if there are no changes. Of course, in real systems, we want to have backups if there is a change. For `IncOperation` for example, having a backup when `amount` is null would be a good practice.  The method `getBackupOperation` returns the operation (`IncBackupOperation`) that actually performs the backup creation; the backup itself is an operation and will run on the same infrastructure.   If a backup should be made and `getSyncBackupCount` returns **3**, then three `IncBackupOperation` instances are created and sent to the three machines containing the backup partition. If fewer machines are available, then backups need to be created. Hazelcast will just send a smaller number of operations.   "
});

documentTitles["index.html#performing-the-backup-with-incbackupoperation"] = "Performing the Backup with IncBackupOperation";
index.add({
    url: "index.html#performing-the-backup-with-incbackupoperation",
    title: "Performing the Backup with IncBackupOperation",
    body: "#### Performing the Backup with IncBackupOperation  Now, let's have a look at the `IncBackupOperation`. It implements `BackupOperation`, you can see the [source code for BackupOperation here](https://github.com/hazelcast/hazelcast/blob/master/hazelcast/src/main/java/com/hazelcast/spi/BackupOperation.java).  ```java public class IncBackupOperation  	extends AbstractOperation implements BackupOperation {    private String objectId;    private int amount;     public IncBackupOperation() {    }     public IncBackupOperation(String objectId, int amount) {       this.amount = amount;       this.objectId = objectId;    }     @Override    protected void writeInternal(ObjectDataOutput out) throws IOException {       super.writeInternal(out);       out.writeUTF(objectId);       out.writeInt(amount);    }     @Override    protected void readInternal(ObjectDataInput in) throws IOException {       super.readInternal(in);       objectId = in.readUTF();       amount = in.readInt();    }     @Override    public void run() throws Exception {       CounterService service = getService();       System.out.println(\&quot;Executing backup \&quot; + objectId + \&quot;.inc() on: \&quot;          + getNodeEngine().getThisAddress());       Container c = service.containers[getPartitionId()];       c.inc(objectId, amount);    } } ``` &lt;br&gt;&lt;/br&gt; ![image](images/NoteSmall.jpg) ***NOTE:*** *Hazelcast will also make sure that a new IncOperation for that particular key will not be executed before the (synchronous) backup operation has completed.* &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#running-the-sample-code"] = "Running the Sample Code";
index.add({
    url: "index.html#running-the-sample-code",
    title: "Running the Sample Code",
    body: "#### Running the Sample Code  Let's see the backup functionality in action with the following code.  ```java public class Member {    public static void main(String[] args) throws Exception {       HazelcastInstance[] instances = new HazelcastInstance[2];       for (int k = 0; k &lt; instances.length; k++)           instances[k] = Hazelcast.newHazelcastInstance();            Counter counter = instances[0].getDistributedObject(CounterService.NAME, \&quot;counter\&quot;);       counter.inc(1);       System.out.println(\&quot;Finished\&quot;);       System.exit(0);     } } ```  Once it is run, the following output will be seen.  ``` Executing counter0.inc() on: Address[192.168.1.103]:5702 Executing backup counter0.inc() on: Address[192.168.1.103]:5701 Finished ```  As it can be seen, both `IncOperation` and `IncBackupOperation` are executed. Notice that these operations have been executed on different cluster members to guarantee high availability.      "
});

documentTitles["index.html#waitnotifyservice"] = "WaitNotifyService";
index.add({
    url: "index.html#waitnotifyservice",
    title: "WaitNotifyService",
    body: "## WaitNotifyService  `WaitNotifyService` is an interface offered by SPI for the objects (e.g. Lock, Semaphore) to be used when a thread needs to wait for a lock to be released. You can see the [WaitNotifyService source code here](https://github.com/hazelcast/hazelcast/tree/master/hazelcast/src/main/java/com/hazelcast/spi/impl/waitnotifyservice).  `WaitNotifyService` keeps a list of waiters. For each notify operation:  - it looks for a waiter, - it asks the waiter whether it wants to keep waiting, - if the waiter responds *no*, the service executes its registered operation (operation itself knows where to send a response), - it rinses and repeats until a waiter wants to keep waiting.   Each waiter can sit on a wait-notify queue for, at most, its operation's call timeout. For example, by default, each waiter can wait here for at most 1 minute. A continuous task scans expired/timed-out waiters and invalidates them with `CallTimeoutException`. Each waiter on the remote side should retry and keep waiting if it still wants to wait. This is a liveness check for remote waiters.   This way, it is possible to distinguish an unresponsive node and a long (~infinite) wait. On the caller side, if the waiting thread does not get a response for either a call timeout or for more than *2 times the call-timeout*, it will exit with `OperationTimeoutException`.    Note that this behavior breaks the fairness. Hazelcast does not support fairness for any of the data structures with blocking operations (i.e. lock and semaphore).    "
});

documentTitles["index.html#discovery-spi"] = "Discovery SPI";
index.add({
    url: "index.html#discovery-spi",
    title: "Discovery SPI",
    body: "## Discovery SPI  By default, Hazelcast is bundled with multiple ways to define and find other members in the same network. Commonly used, especially with development, is the Multicast discovery. This sends out a multicast request to a network segment and awaits other members to answer with their IP addresses. In addition, Hazelcast supports fixed IP addresses: [JClouds](https://jclouds.apache.org/reference/providers/) or [AWS (Amazon EC2)](https://aws.amazon.com/de/ec2/) based discoveries.    Since there is an ever growing number of public and private cloud environments, as well as numerous Service Discovery systems in the wild, Hazelcast provides cloud or service discovery vendors with the option to implement their own discovery strategy.    Over the course of this section, we will build a simple discovery strategy based on the `/etc/hosts` file.     "
});

documentTitles["index.html#discovery-spi-interfaces-and-classes"] = "Discovery SPI Interfaces and Classes";
index.add({
    url: "index.html#discovery-spi-interfaces-and-classes",
    title: "Discovery SPI Interfaces and Classes",
    body: "### Discovery SPI Interfaces and Classes  The Hazelcast Discovery SPI (Member Discovery Extensions) consists of multiple interfaces and abstract classes. In the following sub-sections, we will have a quick look at all of them and shortly introduce the idea and usage behind them. The example will follow in the next section, [Discovery Strategy](#discovery-strategy).  "
});

documentTitles["index.html#discoverystrategy-implement"] = "DiscoveryStrategy: Implement";
index.add({
    url: "index.html#discoverystrategy-implement",
    title: "DiscoveryStrategy: Implement",
    body: "#### DiscoveryStrategy: Implement  The `com.hazelcast.spi.discovery.DiscoveryStrategy` interface is the main entry point for vendors to implement their corresponding member discovery strategies. Its main purpose is to return discovered members on request. The `com.hazelcast.spi.discovery.DiscoveryStrategy` interface also offers light lifecycle capabilities for setup and teardown logic (for example, opening or closing sockets or REST API clients).  `DiscoveryStrategy`s can also do automatic registration / de-registration on service discovery systems if necessary. You can use the provided `DiscoveryNode` that is passed to the factory method to retrieve local addresses and ports, as well as metadata.   "
});

documentTitles["index.html#abstractdiscoverystrategy-abstract-class"] = "AbstractDiscoveryStrategy: Abstract Class";
index.add({
    url: "index.html#abstractdiscoverystrategy-abstract-class",
    title: "AbstractDiscoveryStrategy: Abstract Class",
    body: "#### AbstractDiscoveryStrategy: Abstract Class  The `com.hazelcast.spi.discovery.AbstractDiscoveryStrategy` is a convenience abstract class meant to ease the implementation of strategies. It basically provides additional support for reading / resolving configuration properties and empty implementations of lifecycle methods if unnecessary.    "
});

documentTitles["index.html#discoverystrategyfactory-factory-contract"] = "DiscoveryStrategyFactory: Factory Contract";
index.add({
    url: "index.html#discoverystrategyfactory-factory-contract",
    title: "DiscoveryStrategyFactory: Factory Contract",
    body: "#### DiscoveryStrategyFactory: Factory Contract  The `com.hazelcast.spi.discovery.DiscoveryStrategyFactory` interface describes the factory contract that creates a certain `DiscoveryStrategy`. `DiscoveryStrategyFactory`s are registered automatically at startup of a Hazelcast member or client whenever they are found in the classpath. For automatic discovery, factories need to announce themselves as SPI services using a resource file according to the [Java Service Provider Interface](https://docs.oracle.com/javase/tutorial/sound/SPI-intro.html). The service registration file must be part of the JAR file, located under `META-INF/services/com.hazelcast.spi.discovery.DiscoveryStrategyFactory`, and consist of a line with the full canonical class name of the `DiscoveryStrategy` per provided strategy implementation.  "
});

documentTitles["index.html#discoverynode-describe-a-member"] = "DiscoveryNode: Describe a Member";
index.add({
    url: "index.html#discoverynode-describe-a-member",
    title: "DiscoveryNode: Describe a Member",
    body: "#### DiscoveryNode: Describe a Member   The `com.hazelcast.spi.discovery.DiscoveryNode` abstract class describes a member in the Discovery SPI. It is used for multiple purposes, since it will be returned from strategies for discovered members. It is also passed to `DiscoveryStrategyFactory`s factory method to define the local member itself if created on a Hazelcast member; on Hazelcast clients, null will be passed.  "
});

documentTitles["index.html#simplediscoverynode-default-discoverynode"] = "SimpleDiscoveryNode: Default DiscoveryNode";
index.add({
    url: "index.html#simplediscoverynode-default-discoverynode",
    title: "SimpleDiscoveryNode: Default DiscoveryNode",
    body: "#### SimpleDiscoveryNode: Default DiscoveryNode  `com.hazelcast.spi.discovery.SimpleDiscoveryNode` is a default implementation of the `DiscoveryNode`. It is meant for convenience use of the Discovery SPI and can be returned from vendor implementations if no special needs are required.   "
});

documentTitles["index.html#nodefilter-filter-members"] = "NodeFilter: Filter Members";
index.add({
    url: "index.html#nodefilter-filter-members",
    title: "NodeFilter: Filter Members",
    body: "#### NodeFilter: Filter Members  You can configure `com.hazelcast.spi.discovery.NodeFilter` before startup and you can implement logic to do additional filtering of members. This might be necessary if query languages for discovery strategies are not expressive enough to describe members or to overcome inefficiencies of strategy implementations.   ![image](images/NoteSmall.jpg) ***NOTE:*** *The `DiscoveryStrategy` vendor does not need to take possibly configured filters into account as their use is transparent to the strategies.*  "
});

documentTitles["index.html#discoveryservice-support-in-integrator-systems"] = "DiscoveryService: Support In Integrator Systems";
index.add({
    url: "index.html#discoveryservice-support-in-integrator-systems",
    title: "DiscoveryService: Support In Integrator Systems",
    body: "#### DiscoveryService: Support In Integrator Systems  A `com.hazelcast.spi.discovery.integration.DiscoveryService` is part of the integration domain. `DiscoveryStrategy` vendors do not need to implement `DiscoveryService` because it is meant to support the Discovery SPI in situations where vendors integrate Hazelcast into their own systems or frameworks. Certain needs might be necessary as part of the classloading or [Java Service Provider Interface](https://docs.oracle.com/javase/tutorial/sound/SPI-intro.html) lookup.  "
});

documentTitles["index.html#discoveryserviceprovider-provide-a-discoveryservice"] = "DiscoveryServiceProvider: Provide a DiscoveryService";
index.add({
    url: "index.html#discoveryserviceprovider-provide-a-discoveryservice",
    title: "DiscoveryServiceProvider: Provide a DiscoveryService",
    body: "#### DiscoveryServiceProvider: Provide a DiscoveryService  Use the `com.hazelcast.spi.discovery.integration.DiscoveryServiceProvider` to provide a `DiscoveryService` to the Hazelcast discovery subsystem. Configure the provider with the Hazelcast configuration API.  "
});

documentTitles["index.html#discoveryservicesettings-configure-discoveryservice"] = "DiscoveryServiceSettings: Configure DiscoveryService";
index.add({
    url: "index.html#discoveryservicesettings-configure-discoveryservice",
    title: "DiscoveryServiceSettings: Configure DiscoveryService",
    body: "#### DiscoveryServiceSettings: Configure DiscoveryService  A `com.hazelcast.spi.discovery.integration.DiscoveryServiceSettings` instance is passed to the `DiscoveryServiceProvider` at creation time to configure the `DiscoveryService`.  "
});

documentTitles["index.html#discoverymode-member-or-client"] = "DiscoveryMode: Member or Client";
index.add({
    url: "index.html#discoverymode-member-or-client",
    title: "DiscoveryMode: Member or Client",
    body: "#### DiscoveryMode: Member or Client  The `com.hazelcast.spi.discovery.integration.DiscoveryMode` enum tells if a created `DiscoveryService` is running on a Hazelcast member or client, and to change behavior accordingly.        "
});

documentTitles["index.html#discovery-strategy"] = "Discovery Strategy";
index.add({
    url: "index.html#discovery-strategy",
    title: "Discovery Strategy",
    body: "### Discovery Strategy  This sub-section will walk through the implementation of a simple `DiscoveryStrategy` and their necessary setup.  "
});

documentTitles["index.html#discovery-strategy-example"] = "Discovery Strategy Example";
index.add({
    url: "index.html#discovery-strategy-example",
    title: "Discovery Strategy Example",
    body: "#### Discovery Strategy Example  The example strategy will use the local `/etc/hosts` (and on Windows it will use the equivalent to the \*nix hosts file named `%SystemRoot%\system32\drivers\etc\hosts`) to lookup IP addresses of different hosts. The strategy implementation expects hosts to be configured with hostname sub-groups under the same domain. So far to theory, let's get into it.  The full example's source code can be found in the [Hazelcast examples repository](https://github.com/hazelcast/hazelcast-code-samples).   "
});

documentTitles["index.html#configuring-site-domain"] = "Configuring Site Domain";
index.add({
    url: "index.html#configuring-site-domain",
    title: "Configuring Site Domain",
    body: "#### Configuring Site Domain  As a first step we do some basic configuration setup. We want the user to be able to configure the site domain for the discovery inside the hosts file, therefore we define a configuration property called `site-domain`. The configuration is not optional: it must be configured before the creation of the `HazelcastInstance`, either via XML or the Hazelcast Config API.       It is recommended that you keep all defined properties in a separate configuration class as public constants (public final static) with sufficient documentation. This allows users to easily look up possible configuration values.  ```java package com.hazelcast.examples.spi.discovery;  import com.hazelcast...;  public class HostsDiscoveryConfiguration {   /**    * 'site-domain' configures the basic site domain for the lookup, to    * find other sub-domains of the cluster members and retrieve their assigned    * IP addresses.    */   public static final PropertyDefinition DOMAIN = new SimplePropertyDefinition(     \&quot;site-domain\&quot;, PropertyTypeConverter.STRING   );      // Prevent instantiation   private HostsDiscoveryConfiguration() {} } ```  An additional `ValueValidator` could be passed to the definition to make sure the configured value looks like a domain or has a special format.  "
});

documentTitles["index.html#creating-discovery"] = "Creating Discovery";
index.add({
    url: "index.html#creating-discovery",
    title: "Creating Discovery",
    body: "#### Creating Discovery  As the second step we create the very simple `DiscoveryStrategyFactory` implementation class. To keep things clear we are going to name the discovery strategy after its purpose: looking into the hosts file.  ```java package com.hazelcast.examples.spi.discovery;  import com.hazelcast...;  public class HostsDiscoveryStrategyFactory     implements DiscoveryStrategyFactory {       private static final Collection&lt;PropertyDefinition&gt; PROPERTIES =       Collections.singletonList( HostsDiscoveryConfiguration.SITE_DOMAIN );       public Class&lt;? extends DiscoveryStrategy&gt; getDiscoveryStrategyType() {     // Returns the actual class type of the DiscoveryStrategy     // implementation, to match it against the configuration     return HostsDiscoveryStrategy.class;   }       public Collection&lt;PropertyDefinition&gt; getConfigurationProperties() {     return PROPERTIES;   }       public DiscoveryStrategy newDiscoveryStrategy( DiscoveryNode discoveryNode,                                           ILogger logger,                                           Map&lt;String, Comparable&gt; properties ) {                                                return new HostsDiscoveryStrategy( logger, properties );                                         }    } ```   This factory now defines properties known to the discovery strategy implementation and provides a clean way to instantiate it. While creating the `HostsDiscoveryStrategy` we ignore the passed `DiscoveryNode` since this strategy will not support automatic registration of new nodes. In cases where the strategy does not support registration, the environment has to handle this in some provided way.  ![image](images/NoteSmall.jpg) ***NOTE:*** *Remember that, when created on a Hazelcast client, the provided `DiscoveryNode` will be null, as there is no local member in existence.*  Next, we register the `DiscoveryStrategyFactory` to make Hazelcast pick it up automatically at startup. As described earlier, this is done according to the [Java Service Provider Interface](https://docs.oracle.com/javase/tutorial/sound/SPI-intro.html) specification. The filename is the name of the interface itself. Therefore we create a new resource file called `com.hazelcast.spi.discovery.DiscoveryStrategyFactory` and place it under `META-INF/services`. The content is the full canonical class name of our factory implementation.    ```plain com.hazelcast.examples.spi.discovery.HostsDiscoveryStrategyFactory ```  If our JAR file will contain multiple factories, each consecutive line can define another full canonical `DiscoveryStrategyFactory` implementation class name.  "
});

documentTitles["index.html#implementing-discovery-strategy"] = "Implementing Discovery Strategy";
index.add({
    url: "index.html#implementing-discovery-strategy",
    title: "Implementing Discovery Strategy",
    body: "#### Implementing Discovery Strategy  Now comes the interesting part. We are going to implement the discovery itself. The previous parts we did are normally pretty similar for all strategies aside from the configuration properties itself. However, implementing the discovery heavily depends on the way the strategy has to come up with IP addresses of other Hazelcast members.  "
});

documentTitles["index.html#extending-the-abstractdiscoverystrategy"] = "Extending The `AbstractDiscoveryStrategy`";
index.add({
    url: "index.html#extending-the-abstractdiscoverystrategy",
    title: "Extending The `AbstractDiscoveryStrategy`",
    body: "#### Extending The `AbstractDiscoveryStrategy`  For ease of implementation, we will back our implementation by extending the `AbstractDiscoveryStrategy` and only implementing the absolute minimum ourselves.  ```java package com.hazelcast.examples.spi.discovery;  import com.hazelcast...;  public class HostsDiscoveryStrategy     extends AbstractDiscoveryStrategy {        private final String siteDomain;          public HostsDiscoveryStrategy( ILogger logger,                                  Map&lt;String, Comparable&gt; properties ) {                                         super( logger, properties );          // Make it possible to override the value from the configuration on     // the system's environment or JVM properties     // -Ddiscovery.hosts.site-domain=some.domain     this.siteDomain = getOrNull( \&quot;discovery.hosts\&quot;,                                  HostsDiscoveryConfiguration.DOMAIN );   }                                    public Iterable&lt;DiscoveryNode&gt; discoverNodes() {     List&lt;String&gt; assignments = filterHosts();     return mapToDiscoveryNodes( assignments );   }      // ... } ```  "
});

documentTitles["index.html#overriding-discovery-configuration"] = "Overriding Discovery Configuration";
index.add({
    url: "index.html#overriding-discovery-configuration",
    title: "Overriding Discovery Configuration",
    body: "#### Overriding Discovery Configuration  So far our implementation will retrieve the configuration property for the `site-domain`. Our implementation offers the option to override the value from the configuration (XML or Config API) right from the system environment or JVM properties. That can be useful when the `hazelcast.xml` defines a setup for an developer system (like `cluster.local`) and operations wants to override it for the real deployment. By providing a prefix (in this case `discovery.hosts`) we created an external property named `discovery.hosts.site-domain` which can be set as an environment variable or passed as a JVM property from the startup script.  The lookup priority is explained in the following list, priority is from top to bottom:   - JVM properties (or `hazelcast.xml` &lt;properties/&gt; section)  - System environment  - Configuration properties  "
});

documentTitles["index.html#implementing-lookup"] = "Implementing Lookup";
index.add({
    url: "index.html#implementing-lookup",
    title: "Implementing Lookup",
    body: "#### Implementing Lookup  Since we now have the value for our property we can implement the actual lookup and mapping as already prepared in the `discoverNodes` method. The following part is very specific to this special discovery strategy, for completeness we're showing it anyways.    ```java private static final String HOSTS_NIX = \&quot;/etc/hosts\&quot;; private static final String HOSTS_WINDOWS =                    \&quot;%SystemRoot%\\system32\\drivers\\etc\\hosts\&quot;;  private List&lt;String&gt; filterHosts() {   String os = System.getProperty( \&quot;os.name\&quot; );          String hostsPath;   if ( os.contains( \&quot;Windows\&quot; ) ) {     hostsPath = HOSTS_WINDOWS;   } else {     hostsPath = HOSTS_NIX;   }      File hosts = new File( hostsPath );      // Read all lines   List&lt;String&gt; lines = readLines( hosts );      List&lt;String&gt; assignments = new ArrayList&lt;String&gt;();   for ( String line : lines ) {     // Example:     // 192.168.0.1   host1.cluster.local     if ( matchesDomain( line ) ) {       assignments.add( line );     }   }   return assignments; } ```  "
});

documentTitles["index.html#mapping-to-discoverynodes"] = "Mapping to `DiscoveryNode`s";
index.add({
    url: "index.html#mapping-to-discoverynodes",
    title: "Mapping to `DiscoveryNode`s",
    body: "#### Mapping to `DiscoveryNode`s  After we now collected the address assignments configured in the hosts file we can go to the final step and map those to the `DiscoveryNode`s to return them from our strategy.   ```java private Iterable&lt;DiscoveryNode&gt; mapToDiscoveryNodes( List&lt;String&gt; assignments ) {   Collection&lt;DiscoveryNode&gt; discoveredNodes = new ArrayList&lt;DiscoveryNode&gt;();      for ( String assignment : assignments ) {     String address = sliceAddress( assignment );     String hostname = sliceHostname( assignment );          Map&lt;String, Object&gt; attributes =          Collections.singletonMap( \&quot;hostname\&quot;, hostname );          InetAddress inetAddress = mapToInetAddress( address );     Address addr = new Address( inetAddress, NetworkConfig.DEFAULT_PORT );          discoveredNodes.add( new SimpleDiscoveryNode( addr, attributes ) );   }   return discoveredNodes; } ```  With that mapping we now have a full discovery, executed whenever Hazelcast asks for IPs. So why don't we read them in once and cache them? The answer is simple, it might happen that members go down or come up over time. Since we expect the hosts file to be injected into the running container it also might change over time. We want to get the latest available members, therefore we read the file on request.  "
});

documentTitles["index.html#configuring-discoverystrategy"] = "Configuring `DiscoveryStrategy`";
index.add({
    url: "index.html#configuring-discoverystrategy",
    title: "Configuring `DiscoveryStrategy`",
    body: "#### Configuring `DiscoveryStrategy`  To actually use the new `DiscoveryStrategy` implementation we need to configure it like in the following example:  ```xml &lt;hazelcast&gt;   &lt;!-- activate Discovery SPI --&gt;   &lt;properties&gt;     &lt;property name=\&quot;hazelcast.discovery.enabled\&quot;&gt;true&lt;/property&gt;   &lt;/properties&gt;      &lt;network&gt;     &lt;join&gt;       &lt;!-- deactivating other discoveries --&gt;       &lt;multicast enabled=\&quot;false\&quot;/&gt;       &lt;tcp-ip enabled=\&quot;false\&quot; /&gt;       &lt;aws enabled=\&quot;false\&quot;/&gt;              &lt;!-- activate our discovery strategy --&gt;       &lt;discovery-strategies&gt;                &lt;!-- class equals to the DiscoveryStrategy not the factory! --&gt;         &lt;discovery-strategy enabled=\&quot;true\&quot;             class=\&quot;com.hazelcast.examples.spi.discovery.HostsDiscoveryStrategy\&quot;&gt;                        &lt;properties&gt;             &lt;property name=\&quot;site-domain\&quot;&gt;cluster.local&lt;/property&gt;           &lt;/properties&gt;         &lt;/discovery-strategy&gt;       &lt;/discovery-strategies&gt;     &lt;/join&gt;   &lt;/network&gt; &lt;/hazelcast&gt; ```  To find out further details, please have a look at the Discovery SPI Javadoc.     "
});

documentTitles["index.html#discoveryservice-framework-integration"] = "DiscoveryService (Framework integration)";
index.add({
    url: "index.html#discoveryservice-framework-integration",
    title: "DiscoveryService (Framework integration)",
    body: "### DiscoveryService (Framework integration)  Since the `DiscoveryStrategy` is meant for cloud vendors or implementors of service discovery systems, the `DiscoveryService` is meant for integrators. In this case, integrators means people integrating Hazelcast into their own systems or frameworks. In those situations, there are sometimes special requirements on how to lookup framework services like the discovery strategies or similar services. Integrators can extend or implement their own `DiscoveryService` and `DiscoveryServiceProvider` and inject it using the Hazelcast Config API (`com.hazelcast.config.DiscoveryConfig`) prior to instantiating the `HazelcastInstance`. In any case, integrators might have to remember that a `DiscoveryService` might have to change behavior based on the runtime environment (Hazelcast member or client), and then the `DiscoveryServiceSettings` should provide information about the started `HazelcastInstance`.  Since the implementation heavily depends on one's needs, there is no reason to provide an example of how to implement your own `DiscoveryService`. However, Hazelcast provides a default implementation which can be a good example to get started. This default implementation is `com.hazelcast.spi.discovery.impl.DefaultDiscoveryService`.     "
});

documentTitles["index.html#config-properties-spi"] = "Config Properties SPI";
index.add({
    url: "index.html#config-properties-spi",
    title: "Config Properties SPI",
    body: "## Config Properties SPI  The Config Properties SPI is an easy way that you can configure SPI plugins using a prebuilt system of automatic conversion and validation.  "
});

documentTitles["index.html#config-properties-spi-classes"] = "Config Properties SPI Classes";
index.add({
    url: "index.html#config-properties-spi-classes",
    title: "Config Properties SPI Classes",
    body: "### Config Properties SPI Classes  The Config Properties SPI consists of a small set of classes and provided implementations.  "
});

documentTitles["index.html#propertydefinition-define-a-single-property"] = "PropertyDefinition: Define a Single Property";
index.add({
    url: "index.html#propertydefinition-define-a-single-property",
    title: "PropertyDefinition: Define a Single Property",
    body: "#### PropertyDefinition: Define a Single Property  The `com.hazelcast.config.properties.PropertyDefinition` interface defines a single property inside a given configuration. It consists of a key string and type (in form of a `com.hazelcast.core.TypeConverter`).  You can mark properties as optional and you can have an additional validation step to make sure the provided value matches certain rules (like port numbers must be between 0-65535 or similar).  "
});

documentTitles["index.html#simplepropertydefinition-basic-propertydefinition"] = "SimplePropertyDefinition: Basic PropertyDefinition";
index.add({
    url: "index.html#simplepropertydefinition-basic-propertydefinition",
    title: "SimplePropertyDefinition: Basic PropertyDefinition",
    body: "#### SimplePropertyDefinition: Basic PropertyDefinition  For convenience, the `com.hazelcast.config.properties.SimplePropertyDefinition` class is provided. This class is a basic implementation of the `PropertyDefinition` interface and should be enough for most situations. In case of additional needs, you are free to provide your own implementation of the `PropertyDefinition` interface.    "
});

documentTitles["index.html#propertytypeconverter-set-of-typeconverters"] = "PropertyTypeConverter: Set of TypeConverters";
index.add({
    url: "index.html#propertytypeconverter-set-of-typeconverters",
    title: "PropertyTypeConverter: Set of TypeConverters",
    body: "#### PropertyTypeConverter: Set of TypeConverters  The `com.hazelcast.config.properties.PropertyTypeConverter` enum provides a preset of `TypeConverter`s. Provided are the most common basic types:   - String  - Short  - Integer  - Long  - Float  - Double  - Boolean   "
});

documentTitles["index.html#valuevalidator-and-validationexception"] = "ValueValidator and ValidationException";
index.add({
    url: "index.html#valuevalidator-and-validationexception",
    title: "ValueValidator and ValidationException",
    body: "#### ValueValidator and ValidationException  The `com.hazelcast.config.properties.ValueValidator` interface implements additional value validation. The configured value will be validated before it is returned to the requester. If validation fails, a `com.hazelcast.config.properties.ValidationException` is thrown and the requester has to handle it or throw the exception further.  "
});

documentTitles["index.html#config-properties-spi-example"] = "Config Properties SPI Example";
index.add({
    url: "index.html#config-properties-spi-example",
    title: "Config Properties SPI Example",
    body: "### Config Properties SPI Example  This sub-section will show a quick example of how to setup, configure and use the Config Properties SPI.  "
});

documentTitles["index.html#defining-a-config-propertydefinition"] = "Defining a Config PropertyDefinition";
index.add({
    url: "index.html#defining-a-config-propertydefinition",
    title: "Defining a Config PropertyDefinition",
    body: "#### Defining a Config PropertyDefinition  Defining a property is as easy as giving it a name and a type.  ```java PropertyDefinition property = new SimplePropertyDefinition(     \&quot;my-key\&quot;, PropertyTypeConverter.STRING ); ```  We defined a property named `my-key` with a type of a string. If none of the predefined `TypeConverter`s matches the need, users are free to provide their own implementation.  "
});

documentTitles["index.html#providing-a-value-in-xml"] = "Providing a value in XML";
index.add({
    url: "index.html#providing-a-value-in-xml",
    title: "Providing a value in XML",
    body: "#### Providing a value in XML  The above property is now configurable in two ways:  ```xml &lt;!-- option 1 --&gt; &lt;my-key&gt;value&lt;/my-key&gt;  &lt;!-- option 2 --&gt; &lt;property name=\&quot;my-key\&quot;&gt;value&lt;/property&gt; ```  ![image](images/NoteSmall.jpg) ***NOTE:*** *In any case, both options are useable interchangeably, however the later version is recommended by Hazelcast for schema applicability.*   "
});

documentTitles["index.html#retrieving-a-propertydefinition-value"] = "Retrieving a PropertyDefinition Value";
index.add({
    url: "index.html#retrieving-a-propertydefinition-value",
    title: "Retrieving a PropertyDefinition Value",
    body: "#### Retrieving a PropertyDefinition Value  To eventually retrieve a value, use the `PropertyDefinition` to get and convert the value automatically.   ```java public &lt;T&gt; T getConfig( PropertyDefinition property,                          Map&lt;String, Comparable&gt; properties ) {    Map&lt;String, Comparable&gt; properties = ...;   TypeConverter typeConverter = property.typeConverter();    Comparable value = properties.get( property.key() );   return typeConverter.convert( value ); } ```     "
});

documentTitles["index.html#network-partitioning-split-brain-syndrome"] = "Network Partitioning - Split Brain Syndrome";
index.add({
    url: "index.html#network-partitioning-split-brain-syndrome",
    title: "Network Partitioning - Split Brain Syndrome",
    body: "# Network Partitioning - Split Brain Syndrome  Imagine that you have 10-node cluster and that the network is divided into two in a way that 4 servers cannot see the other 6. As a result, you end up having two separate clusters: 4-node cluster and 6-node cluster. Members in each sub-cluster think that the other nodes are dead even though they are not. This situation is called Network Partitioning (a.k.a. *Split-Brain Syndrome*).  However, these two clusters have a combination of the 271 (using default) primary and backup partitions. It’s very likely that not all of the 271 partitions, including both primaries and backups, exist in both mini-clusters. Therefore, from each mini-cluster’s perspective, data has been lost as some partitions no longer exist (they exist on the other segment).      "
});

documentTitles["index.html#understanding-partition-recreation"] = "Understanding Partition Recreation";
index.add({
    url: "index.html#understanding-partition-recreation",
    title: "Understanding Partition Recreation",
    body: "## Understanding Partition Recreation  If a MapStore was in use, those lost partitions would be reloaded from some database, making each mini-cluster complete. Each mini-cluster will then recreate the missing primary partitions and continue to store data in them, including backups on the other nodes.      "
});

documentTitles["index.html#understanding-backup-partition-creation"] = "Understanding Backup Partition Creation";
index.add({
    url: "index.html#understanding-backup-partition-creation",
    title: "Understanding Backup Partition Creation",
    body: "## Understanding Backup Partition Creation  When primary partitions exist without a backup, a backup version problem will be detected and a backup partition will be created. When backups exist without a primary, the backups will be promoted to primary partitions and new backups will be created with proper versioning. At this time, both mini-clusters have repaired themselves with all 271 partitions with backups, and continue to handle traffic without any knowledge of each other. Given that they have enough remaining memory (assumption), they are just smaller and can handle less throughput.      "
});

documentTitles["index.html#understanding-the-update-overwrite-scenario"] = "Understanding The Update Overwrite Scenario";
index.add({
    url: "index.html#understanding-the-update-overwrite-scenario",
    title: "Understanding The Update Overwrite Scenario",
    body: "## Understanding The Update Overwrite Scenario  If a MapStore is in use and the network to the database is available, one or both of the mini-clusters will write updates to the same database. There is a potential for the mini-clusters to overwrite the same cache entry records if modified in both mini-clusters. This overwrite scenario represents a potential data loss, and thus the database design should consider an insert and aggregate on read or version strategy rather than update records in place.  If the network to the database is not available, then based on the configured or coded consistency level or transaction, entry updates are held in cache or updates are rejected (fully synchronous and consistent). When held in cache, the updates will be considered dirty and will be written to the database when it becomes available. You can view the dirty entry counts per cluster member in the Management Center web console (please see the [Map Monitoring section](#map-monitoring)).      "
});

documentTitles["index.html#what-happens-when-the-network-failure-is-fixed"] = "What Happens When The Network Failure Is Fixed";
index.add({
    url: "index.html#what-happens-when-the-network-failure-is-fixed",
    title: "What Happens When The Network Failure Is Fixed",
    body: "## What Happens When The Network Failure Is Fixed  Since it is a network failure, there is no way to programmatically avoid your application running as two separate independent clusters. But what will happen after the network failure is fixed and connectivity is restored between these two clusters? Will these two clusters merge into one again? If they do, how are the data conflicts resolved, because you might end up having two different values for the same key in the same map?  When the network is restored, all 271 partitions should exist in both mini-clusters and they should all undergo the merge. Once all primaries are merged, all backups are rewritten so their versions are correct. You may want to write a merge policy using the `MapMergePolicy` interface that rebuilds the entry from the database rather than from memory.  The only metadata available for merge decisions are from the `EntryView` interface that includes object size (cost), hits count, last updated/stored dates, and a version number that starts at zero and is incremented for each entry update. You could also create your own versioning scheme or capture a time series of deltas to reconstruct an entry.      "
});

documentTitles["index.html#how-hazelcast-split-brain-merge-happens"] = "How Hazelcast Split Brain Merge Happens";
index.add({
    url: "index.html#how-hazelcast-split-brain-merge-happens",
    title: "How Hazelcast Split Brain Merge Happens",
    body: "## How Hazelcast Split Brain Merge Happens  Here is, step by step, how Hazelcast split brain merge happens:  1. The oldest member of the cluster checks if there is another cluster with the same *group-name* and *group-password* in the network. 2. If the oldest member finds such a cluster, then it figures out which cluster should merge to the other. 3. Each member of the merging cluster will do the following.  - Pause. - Take locally owned map entries. - Close all of its network connections (detach from its cluster). - Join to the new cluster. - Send merge request for each of its locally owned map entry. - Resume. 	 Each member of the merging cluster rejoins the new cluster and sends a merge request for each of its locally owned map entries. Two important points:  -	The smaller cluster will merge into the bigger one. If they have equal number of members then a hashing algorithm determines the merging cluster. -	Each cluster may have different versions of the same key in the same map. The destination cluster will decide how to handle merging entry based on the `MergePolicy` set for that map. There are built-in merge policies such as `PassThroughMergePolicy`, `PutIfAbsentMapMergePolicy`, `HigherHitsMapMergePolicy` and `LatestUpdateMapMergePolicy`. You can develop your own merge policy by implementing `com.hazelcast.map.merge.MapMergePolicy`. You should set the full class name of your implementation to the `merge-policy` configuration.   ```java public interface MergePolicy {   /**   * Returns the value of the entry after the merge   * of entries with the same key. Returning value can be   * You should consider the case where existingEntry is null.   *   * @param mapName       name of the map   * @param mergingEntry  entry merging into the destination cluster   * @param existingEntry existing entry in the destination cluster   * @return final value of the entry. If returns null then entry will be removed.   */   Object merge( String mapName, EntryView mergingEntry, EntryView existingEntry ); } ```      "
});

documentTitles["index.html#specifying-merge-policies"] = "Specifying Merge Policies";
index.add({
    url: "index.html#specifying-merge-policies",
    title: "Specifying Merge Policies",
    body: "## Specifying Merge Policies  Here is how merge policies are specified per map:  ```xml &lt;hazelcast&gt;   ...   &lt;map name=\&quot;default\&quot;&gt;     &lt;backup-count&gt;1&lt;/backup-count&gt;     &lt;eviction-policy&gt;NONE&lt;/eviction-policy&gt;     &lt;max-size&gt;0&lt;/max-size&gt;     &lt;eviction-percentage&gt;25&lt;/eviction-percentage&gt;     &lt;!--       While recovering from split-brain (network partitioning),       map entries in the small cluster will merge into the bigger cluster       based on the policy set here. When an entry merge into the       cluster, there might an existing entry with the same key already.       Values of these entries might be different for that same key.       Which value should be set for the key? Conflict is resolved by       the policy set here. Default policy is hz.ADD_NEW_ENTRY        There are built-in merge policies such as       There are built-in merge policies such as       com.hazelcast.map.merge.PassThroughMergePolicy; entry will be added if           there is no existing entry for the key.       com.hazelcast.map.merge.PutIfAbsentMapMergePolicy ; entry will be           added if the merging entry doesn't exist in the cluster.       com.hazelcast.map.merge.HigherHitsMapMergePolicy ; entry with the           higher hits wins.       com.hazelcast.map.merge.LatestUpdateMapMergePolicy ; entry with the           latest update wins.     --&gt;     &lt;merge-policy&gt;MY_MERGE_POLICY_CLASS&lt;/merge-policy&gt;   &lt;/map&gt;    ... &lt;/hazelcast&gt; ```  ![image](images/NoteSmall.jpg) ***NOTE:*** *Map is the only Hazelcast distributed data structure that merges after a split brain syndrome. For the other data structures (e.g. Queue, Topic, IdGenerator, etc. ), one instance of that data structure is chosen after split brain syndrome. *    "
});

documentTitles["index.html#system-properties"] = "System Properties";
index.add({
    url: "index.html#system-properties",
    title: "System Properties",
    body: "# System Properties  The table below lists the system properties with their descriptions in alphabetical order.    Property Name | Default Value | Type | Description :--------------|:---------------|:------|:------------ `hazelcast.application.validation.token`||string|This property can be used to verify that Hazelcast members only join when their application level configuration is the same. `hazelcast.backpressure.backoff.timeout.millis`|60000|int|Controls the maximum timeout in milliseconds to wait for an invocation space to be available. The value needs to be equal to or larger than 0. `hazelcast.backpressure.enabled`|false|bool|Enable back pressure. `hazelcast.backpressure.max.concurrent.invocations.per.partition`|100|int|The maximum number of concurrent invocations per partition. `hazelcast.backpressure.syncwindow`|1000|string|Used when back pressure is enabled. The larger the sync window value, the less frequent a asynchronous backup is converted to a sync backup. `hazelcast.cache.invalidation.batch.enabled`|true|bool|Specifies whether the cache invalidation event batch sending is enabled or not. `hazelcast.cache.invalidation.batch.size`|100|int|Defines the maximum number of cache invalidation events to be drained and sent to the event listeners in a batch. `hazelcast.cache.invalidation.batchfrequency.seconds`|5|int|Defines cache invalidation event batch sending frequency in seconds. `hazelcast.clientengine.thread.count`||int|Maximum number of threads to process non-partition-aware client requests, like `map.size()`, query, executor tasks, etc. Default count is 20 times number of cores. `hazelcast.client.event.queue.capacity`|1000000|string|Default value of the capacity of executor that handles incoming event packets. `hazelcast.client.event.thread.count`|5|string|Thread count for handling incoming event packets. `hazelcast.client.heartbeat.interval`|10000|string|The frequency of heartbeat messages sent by the clients to members. `hazelcast.client.heartbeat.timeout`|300000|string|Timeout for the heartbeat messages sent by the client to members. If no messages pass between client and member within the given time via this property in milliseconds, the connection will be closed. `hazelcast.client.invocation.timeout.seconds`|120|string|Time to give up the invocation when a member in the member list is not reachable. `hazelcast.client.max.no.heartbeat.seconds`|300|int|Time after which the member assumes the client is dead and closes its connections to the client. `hazelcast.client.shuffle.member.list`|true|string|The client shuffles the given member list to prevent all clients to connect to the same member when this property is `false`. When it is set to `true`, the client tries to connect to the members in the given order. `hazelcast.connect.all.wait.seconds` | 120 | int | Timeout to connect all other cluster members when a member is joining to a cluster. `hazelcast.connection.monitor.interval` | 100 | int  |   Minimum interval in milliseconds to consider a connection error as critical. `hazelcast.connection.monitor.max.faults` | 3 | int  |   Maximum IO error count before disconnecting from a member. `hazelcast.discovery.public.ip.enabled` | false | bool | Enable use of public IP address in member discovery with Discovery SPI. `hazelcast.enterprise.license.key` | null | string  |   &lt;a href=\&quot;http://www.hazelcast.com/products.jsp\&quot; target=\&quot;_blank\&quot;&gt;Hazelcast Enterprise&lt;/a&gt; license key. `hazelcast.event.queue.capacity` | 1000000 | int | Capacity of internal event queue. `hazelcast.event.queue.timeout.millis` | 250 | int | Timeout to enqueue events to event queue. `hazelcast.event.thread.count` | 5 | int | Number of event handler threads. `hazelcast.graceful.shutdown.max.wait` | 600 | int  |   Maximum wait in seconds during graceful shutdown. `hazelcast.health.monitoring.delay.seconds`|30|int|Health monitoring logging interval in seconds. `hazelcast.health.monitoring.level`|SILENT|string|Health monitoring log level. When *SILENT*, logs are printed only when values exceed some predefined threshold. When *NOISY*, logs are always printed periodically. Set *OFF* to turn off completely. `hazelcast.heartbeat.interval.seconds` | 1 | int  |   Heartbeat send interval in seconds. `hazelcast.icmp.enabled` | false | bool  |   Enable ICMP ping. `hazelcast.icmp.timeout` | 1000 | int |   ICMP timeout in milliseconds. `hazelcast.icmp.ttl` | 0 | int |   ICMP TTL (maximum numbers of hops to try). `hazelcast.initial.min.cluster.size` | 0 | int  |   Initial expected cluster size to wait before member to start completely. `hazelcast.initial.wait.seconds` | 0 | int  |   Initial time in seconds to wait before member to start completely. `hazelcast.io.balancer.interval.seconds`|20|int|Interval in seconds between IOBalancer executions. `hazelcast.io.input.thread.count` | 3 | int | Number of socket input threads. `hazelcast.io.output.thread.count` | 3 | int | Number of socket output threads. `hazelcast.io.thread.count` | 3 | int | Number of threads performing socket input and socket output. If, for example, the default value (3) is used, it means there are 3 threads performing input and 3 threads performing output (6 threads in total). `hazelcast.jcache.provider.type`||string|Type of the JCache provider. Values can be `client` or `server`. `hazelcast.jmx` | false | bool  |   Enable [JMX](#monitoring-with-jmx) agent. `hazelcast.lock.max.lease.time.seconds`|Long.MAX_VALUE | long | All locks which are acquired without an explicit lease time use this value (in seconds) as the lease time. When you want to set an explicit lease time for your locks, you cannot set it to a longer time than this value. `hazelcast.logging.type` | jdk | enum |   Name of [logging](#logging-configuration) framework type to send logging events. `hazelcast.mancenter.home` | mancenter | string |  Folder where Management Center data files are stored (license information, time travel information, etc.). `hazelcast.map.expiry.delay.seconds`|10|int|Useful to deal with some possible edge cases. For example, when using EntryProcessor, without this delay, you may see an EntryProcessor running on owner partition found a key but EntryBackupProcessor did not find it on backup. As a result of this, when backup promotes to owner, you will end up an unprocessed key. `hazelcast.map.load.chunk.size` | 1000 | int |   Chunk size for [MapLoader](#loading-and-storing-persistent-data)'s map initialization process (MapLoader.loadAllKeys()). `hazelcast.map.replica.wait.seconds.for.scheduled.tasks`|10|int|Scheduler delay for map tasks those will be executed on backup members. `hazelcast.map.write.behind.queue.capacity`|50000|string|Maximum write-behind queue capacity per member. It is the total of all write-behind queue sizes in a member including backups. Its maximum value is `Integer.MAX_VALUE`. The value of this property is taken into account only if the `write-coalescing` element of the Map Store configuration is `false`. Please refer to the [Map Store section](#map-store) for the description of the `write-coalescing` element. `hazelcast.master.confirmation.interval.seconds` | 30 | int  |   Interval at which members send master confirmation. `hazelcast.max.join.merge.target.seconds`|20|int|Split-brain merge timeout for a specific target. `hazelcast.max.join.seconds`|300|int| Join timeout, maximum time to try to join before giving. `hazelcast.max.no.heartbeat.seconds` | 300 | int  |   Maximum timeout of heartbeat in seconds for a member to assume it is dead. `hazelcast.max.no.master.confirmation.seconds` | 450 | int  |   Max timeout of master confirmation from other members. `hazelcast.max.wait.seconds.before.join` | 20 | int  |   Maximum wait time before join operation. `hazelcast.mc.max.visible.instance.count` | 100 | int  |   Management Center maximum visible instance count. `hazelcast.mc.max.visible.slow.operations.count`|10|int|Management Center maximum visible slow operations count. `hazelcast.mc.url.change.enabled` | true | bool  |   Management Center changing server url is enabled. `hazelcast.member.list.publish.interval.seconds` | 600 | int  |   Interval at which master member publishes a member list. `hazelcast.memcache.enabled`| false | bool |   Enable [Memcache](#memcache-client) client request listener service. `hazelcast.merge.first.run.delay.seconds` | 300 | int |   Initial run delay of [split brain/merge process](#network-partitioning-split-brain-syndrome) in seconds. `hazelcast.merge.next.run.delay.seconds` | 120 | int |   Run interval of [split brain/merge process](#network-partitioning-split-brain-syndrome) in seconds. `hazelcast.migration.min.delay.on.member.removed.seconds`|5|int|Minimum delay (in seconds) between detection of a member that has left and start of the rebalancing process. `hazelcast.operation.backup.timeout.millis`|5000|int|Maximum time a caller to wait for backup responses of an operation. After this timeout, operation response will be returned to the caller even no backup response is received. `hazelcast.operation.call.timeout.millis`| 60000 | int | Timeout to wait for a response when a remote call is sent, in milliseconds. `hazelcast.operation.generic.thread.count` | -1 | int | Number of generic operation handler threads. `-1` means CPU core count x 2. `hazelcast.operation.thread.count` | -1 | int | Number of partition based operation handler threads. `-1` means CPU core count x 2. `hazelcast.partition.backup.sync.interval`|30|int|Interval for syncing backup replicas. `hazelcast.partition.count` | 271 | int  |   Total partition count. `hazelcast.partition.max.parallel.replications`|5|int|Maximum number of parallel partition backup replication operations per member. When a partition backup ownership changes or a backup inconsistency is detected, the members start to sync their backup partitions. This parameter limits the maximum running replication operations in parallel. `hazelcast.partition.migration.interval` | 0 | int |   Interval to run partition migration tasks in seconds. `hazelcast.partition.migration.timeout` | 300 | int  |   Timeout for partition migration tasks in seconds. `hazelcast.partition.table.send.interval`|15|int|Interval for publishing partition table periodically to all cluster members. `hazelcast.partitioning.strategy.class`|null|string|Class name implementing `com.hazelcast.core.PartitioningStrategy`, which defines key to partition mapping. `hazelcast.performance.monitor.max.rolled.file.count`|10|int|The PerformanceMonitor uses a rolling file approach to prevent eating too much disk space. This property sets the maximum number of rolling files to keep on disk. `hazelcast.performance.monitor.max.rolled.file.size.mb`|10|int|The performance monitor uses a rolling file approach to prevent eating too much disk space. This property sets the maximum size in MB for a single file. Every HazelcastInstance gets its own history of log files. `hazelcast.performance.monitoring.enabled`||bool|Enable the performance monitor, a tool which allows you to see internal performance metrics. These metrics are written to a dedicated log file. `hazelcast.performance.monitor.delay.seconds`||int| The period between successive entries in the performance monitor's log file. `hazelcast.prefer.ipv4.stack` | true | bool  |   Prefer IPv4 network interface when picking a local address. `hazelcast.query.max.local.partition.limit.for.precheck`|3|int|Maximum value of local partitions to trigger local pre-check for TruePredicate query operations on maps. `hazelcast.query.optimizer.type`|RULES|String|Type of the query optimizer. For optimizations based on static rules, set the value to `RULES`. To disable the optimization, set the value to `NONE`. `hazelcast.query.predicate.parallel.evaluation`|false|bool|Each Hazelcast member evaluates query predicates using a single thread by default. In most cases, the overhead of inter-thread communications overweight can benefit from parallel execution. When you have a large dataset and/or slow predicate, you may benefit from parallel predicate evaluations. Set to `true` if you are using slow predicates or have &gt; 100,000s entries per member. `hazelcast.query.result.size.limit`|-1|int|Result size limit for query operations on maps. This value defines the maximum number of returned elements for a single query result. If a query exceeds this number of elements, a QueryResultSizeExceededException is thrown. Its default value is -1, meaning it is disabled. `hazelcast.rest.enabled` | false | bool |   Enable [REST](#rest-client) client request listener service. `hazelcast.shutdownhook.enabled` | true | bool  | Enable Hazelcast shutdownhook thread. When this is enabled, this thread terminates the Hazelcast instance without waiting to shutdown gracefully. `hazelcast.slow.operation.detector.enabled`|true|bool|Enables/disables the [SlowOperationDetector](#slowoperationdetector). `hazelcast.slow.operation.detector.log.purge.interval.seconds`|300|int|Purge interval for slow operation logs. `hazelcast.slow.operation.detector.log.retention.seconds`|3600|int|Defines the retention time of invocations in slow operation logs. If an invocation is older than this value, it will be purged from the log to prevent unlimited memory usage. When all invocations are purged from a log, the log itself will be deleted. `hazelcast.slow.operation.detector.stacktrace.logging.enabled`|false|bool|Defines if the stacktraces of slow operations are logged in the log file. Stack traces are always reported to the Management Center, but by default, they are not printed to keep the log size small. `hazelcast.slow.operation.detector.threshold.millis`|10000|int|Defines a threshold above which a running operation in `OperationService` is considered to be slow. These operations log a warning and are shown in the Management Center with detailed information, e.g. stacktrace. `hazelcast.socket.bind.any` | true | bool | Bind both server-socket and client-sockets to any local interface. `hazelcast.socket.client.bind`|true|bool|Bind client socket to an interface when connecting to a remote server socket. When set to `false`, client socket is not bound to any interface. `hazelcast.socket.client.bind.any` | true | bool |   Bind client-sockets to any local interface. If not set, `hazelcast.socket.bind.any` will be used as default. `hazelcast.socket.client.receive.buffer.size`|-1|int|Hazelcast creates all connections with receive buffer size set according to the `hazelcast.socket.receive.buffer.size`. When it detects a connection opened by a client, then it adjusts the receive buffer size according to this property. It is in kilobytes and the default value is -1. `hazelcast.socket.client.send.buffer.size`|-1|int|Hazelcast creates all connections with send buffer size set according to the `hazelcast.socket.send.buffer.size`. When it detects a connection opened by a client, then it adjusts the send buffer size according to this property. It is in kilobytes and the default value is -1. `hazelcast.socket.connect.timeout.seconds`|0|int|Socket connection timeout in seconds. `Socket.connect()` will be blocked until either connection is established or connection is refused or this timeout passes. Default is 0, means infinite. `hazelcast.socket.keep.alive` | true | bool  | Socket set keep alive (`SO_KEEPALIVE`). `hazelcast.socket.linger.seconds`|0|int|Set socket `SO_LINGER` option. `hazelcast.socket.no.delay` | true | bool  |   Socket set TCP no delay. `hazelcast.socket.receive.buffer.size` | 32 | int | Socket receive buffer (`SO_RCVBUF`) size in KB. If you have a very fast network (e.g. 10gbit) and/or you have large entries, then you may benefit from increasing sender/receiver buffer sizes. Use this property and the next one below tune the size. For example, a send/receive buffer size of 1024 kB is a safe starting point for a 10gbit network. `hazelcast.socket.send.buffer.size` | 32 | int  | Socket send buffer (`SO_SNDBUF`) size in KB. `hazelcast.socket.server.bind.any` | true | bool | Bind server-socket to any local interface. If not set, `hazelcast.socket.bind.any` will be used as default. `hazelcast.tcp.join.port.try.count`|3|int|The number of incremental ports, starting with the port number defined in the network configuration, that will be used to connect to a host (which is defined without a port in TCP/IP member list while a member is searching for a cluster). `hazelcast.unsafe.mode` | auto | string  | \&quot;auto\&quot; (the default value) automatically detects whether the usage of `Unsafe` is suitable for a given platform. \&quot;disabled\&quot; explicitly disables the `Unsafe` usage in your platform. \&quot;enforced\&quot; enforces the usage of `Unsafe` even if your platform does not support it. This property can only be set by passing a JVM-wide system property. `hazelcast.phone.home.enabled` | true | bool  |   Enable or disable the sending of phone home data to Hazelcast's phone home server. `hazelcast.wait.seconds.before.join` | 5 | int  | Wait time before join operation.       "
});

documentTitles["index.html#common-exception-types"] = "Common Exception Types";
index.add({
    url: "index.html#common-exception-types",
    title: "Common Exception Types",
    body: "# Common Exception Types  You may see the following exceptions in any Hazelcast operation when the following situations occur:  - `HazelcastInstanceNotActiveException`: Thrown when `HazelcastInstance` is not active (already shutdown or being shutdown) during an invocation.   - `HazelcastOverloadException`: Thrown when the system will not handle any more load due to an overload. This exception is thrown when back pressure is enabled.  - `DistributedObjectDestroyedException`: Thrown when an already destroyed `DistributedObject` (IMap, IQueue, etc.) is accessed or when a method is called over a destroyed `DistributedObject`.  - `MemberLeftException`: Thrown when a member leaves during an invocation or execution.  Hazelcast also throws the following exceptions in the cases of overall system problems such as networking issues and long pauses:  - `PartitionMigratingException`: Thrown when an operation is executed on a partition, but that partition is currently being moved.  - `TargetNotMemberException`: Thrown when an operation is sent to a machine that is not a member of the cluster.  - `CallerNotMemberException`: Thrown when an operation was sent by a machine which is not a member in the cluster when the operation is executed.  - `WrongTargetException`: Thrown when an operation is executed on the wrong machine, usually because the partition that operation belongs to has been moved to some other member.          "
});

documentTitles["index.html#license-questions"] = "License Questions";
index.add({
    url: "index.html#license-questions",
    title: "License Questions",
    body: "# License Questions  Hazelcast is distributed using the &lt;a href=\&quot;http://www.apache.org/licenses/LICENSE-2.0\&quot; target=\&quot;_blank\&quot;&gt;Apache License 2&lt;/a&gt;, therefore permissions are granted to use, reproduce and distribute it along with any kind of open source and closed source applications.  Hazelcast Enterprise is a commercial product of Hazelcast, Inc. and is distributed under a commercial license that must be acquired before using it in any type of released software. Feel free to contact &lt;a href=\&quot;http://hazelcast.com/contact/\&quot; target=\&quot;_blank\&quot;&gt;Hazelcast sales department&lt;/a&gt; for more information on commercial offers.  Depending on the used feature-set, Hazelcast has certain runtime dependencies which might have different licenses. Following are dependencies and their respective licenses.  "
});

documentTitles["index.html#embedded-dependencies"] = "Embedded Dependencies";
index.add({
    url: "index.html#embedded-dependencies",
    title: "Embedded Dependencies",
    body: "## Embedded Dependencies  Embedded dependencies are merged (shaded) with the Hazelcast codebase at compile-time. These dependencies become an integral part of the Hazelcast distribution.  For license files of embedded dependencies, please see the `license` directory of the Hazelcast distribution, available at our &lt;a href=\&quot;http://hazelcast.org/download/\&quot; target=\&quot;_blank\&quot;&gt;download page&lt;/a&gt;.  **minimal-json**:  minimal-json is a JSON parsing and generation library which is a part of the Hazelcast distribution. It is used for communication between the Hazelcast cluster and the Management Center.  minimal-json is distributed under the &lt;a href=\&quot;http://opensource.org/licenses/MIT\&quot; target=\&quot;_blank\&quot;&gt;MIT license&lt;/a&gt; and offers the same rights to add, use, modify, and distribute the source code as the Apache License 2.0 that Hazelcast uses. However, some other restrictions might apply.  "
});

documentTitles["index.html#runtime-dependencies"] = "Runtime Dependencies";
index.add({
    url: "index.html#runtime-dependencies",
    title: "Runtime Dependencies",
    body: "## Runtime Dependencies  Depending on the used features, additional dependencies might be added to the dependency set. Those runtime dependencies might have other licenses. See the following list of additional runtime dependencies.  **Spring Framework**:  Hazelcast offers a tight integration into the Spring Framework. Hazelcast can be configured and controlled using Spring.  The Spring Framework is distributed under the terms of the &lt;a href=\&quot;http://www.apache.org/licenses/LICENSE-2.0\&quot; target=\&quot;_blank\&quot;&gt;Apache License 2&lt;/a&gt; and therefore it is fully compatible with Hazelcast.  **Hibernate**:  Hazelcast integrates itself into Hibernate as a second-level cache provider.  Hibernate is distributed under the terms of the &lt;a href=\&quot;https://www.gnu.org/licenses/lgpl-2.1.html\&quot; target=\&quot;_blank\&quot;&gt;Lesser General Public License 2.1&lt;/a&gt;,  also known as LGPL. Please read carefully the terms of the LGPL since restrictions might apply.  **Apache Tomcat**:  Hazelcast Enterprise offers native integration into Apache Tomcat for web session clustering.  Apache Tomcat is distributed under the terms of the &lt;a href=\&quot;http://www.apache.org/licenses/LICENSE-2.0\&quot; target=\&quot;_blank\&quot;&gt;Apache License 2&lt;/a&gt; and therefore fully compatible with Hazelcast.  **Eclipse Jetty**:  Hazelcast Enterprise offers native integration into Jetty for web session clustering.  Jetty is distributed with a dual licensing strategy. It is licensed under the terms of the &lt;a href=\&quot;http://www.apache.org/licenses/LICENSE-2.0\&quot; target=\&quot;_blank\&quot;&gt;Apache License 2&lt;/a&gt; and under the &lt;a href=\&quot;https://www.eclipse.org/legal/epl-v10.html\&quot; target=\&quot;_blank\&quot;&gt;Eclipse Public License v1.0&lt;/a&gt;, also known as EPL. Due to the Apache License, it is fully compatible with Hazelcast.  **JCache API (JSR 107)**:  Hazelcast offers a native implementation for JCache (JSR 107), which has a runtime dependency to the JCache API.  The JCache API is distributed under the terms of the so called &lt;a href=\&quot;https://jcp.org/aboutJava/communityprocess/licenses/jsr107/Spec-License-JSR-107-10_22_12.pdf\&quot; target=\&quot;_blank\&quot;&gt;Specification License&lt;/a&gt;). Please read carefully the terms of this license since restrictions might apply.  **Boost C++ Libraries**:  Hazelcast Enterprise offers a native C++ client, which has a link-time dependency to the Boost C++ Libraries.  The Boost Libraries are distributed under the terms of the &lt;a href=\&quot;http://www.boost.org/LICENSE_1_0.txt\&quot; target=\&quot;_blank\&quot;&gt;Boost Software License&lt;/a&gt;), which is very similar to the MIT or BSD license. Please read carefully the terms of this license since restrictions might apply.       "
});

documentTitles["index.html#frequently-asked-questions"] = "Frequently Asked Questions";
index.add({
    url: "index.html#frequently-asked-questions",
    title: "Frequently Asked Questions",
    body: "# Frequently Asked Questions     "
});

documentTitles["index.html#why-271-as-the-default-partition-count"] = "Why 271 as the default partition count?";
index.add({
    url: "index.html#why-271-as-the-default-partition-count",
    title: "Why 271 as the default partition count?",
    body: "## Why 271 as the default partition count?  The partition count of 271, being a prime number, is a good choice because it will be distributed to the members almost evenly. For a small to medium sized cluster, the count of 271 gives an almost even partition distribution and optimal-sized partitions.  As your cluster becomes bigger, you should make this count bigger to have evenly distributed partitions.  &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#is-hazelcast-thread-safe"] = "Is Hazelcast thread safe?";
index.add({
    url: "index.html#is-hazelcast-thread-safe",
    title: "Is Hazelcast thread safe?",
    body: "## Is Hazelcast thread safe?  Yes. All Hazelcast data structures are thread safe.  &lt;br&gt;&lt;/br&gt; "
});

documentTitles["index.html#how-do-members-discover-each-other"] = "How do members discover each other?";
index.add({
    url: "index.html#how-do-members-discover-each-other",
    title: "How do members discover each other?",
    body: "## How do members discover each other?   When a member is started in a cluster, it will dynamically and automatically be discovered. There are three types of discovery.  -	Multicast discovery: members in a cluster discover each other by multicast, by default.  -	Discovery by TCP/IP: the first member created in the cluster (leader) will form a list of IP addresses of other joining members and will send this list to these members so the members will know each other. -	If your application is placed on Amazon EC2, Hazelcast has an automatic discovery mechanism. You will give your Amazon credentials and the joining member will be discovered automatically.  Once members are discovered, all the communication between them will be via TCP/IP. &lt;br&gt;&lt;/br&gt; ***RELATED INFORMATION***  *Please refer to the [Discovering Cluster Members section](#discovering-cluster-members) for detailed information.*  &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#what-happens-when-a-member-goes-down"] = "What happens when a member goes down?";
index.add({
    url: "index.html#what-happens-when-a-member-goes-down",
    title: "What happens when a member goes down?",
    body: "## What happens when a member goes down?  Once a member is gone (crashes), the following happens since data in each member has a backup in other members.  -	First, the backups in other members are restored. -	Then, data from these restored backups are recovered. -	And finally, backups for these recovered data are formed.  So eventually, no data is lost.  &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#how-do-i-test-the-connectivity"] = "How do I test the connectivity?";
index.add({
    url: "index.html#how-do-i-test-the-connectivity",
    title: "How do I test the connectivity?",
    body: "## How do I test the connectivity?  If you notice that there is a problem with a member joining a cluster, you may want to perform a connectivity test between the member to be joined and a member from the cluster. You can use the `iperf` tool for this purpose. For example, you can execute the below command on one member (i.e. listening on port 5701).  `iperf -s -p 5701`  And you can execute the below command on the other member.  `iperf -c` *`&lt;IP address&gt;`* `-d -p 5701`  The output should include connection information, such as the IP addresses, transfer speed, and bandwidth. Otherwise, if the output says `No route to host`, it means a network connection problem exists.  &lt;br&gt;&lt;/br&gt;   "
});

documentTitles["index.html#how-do-i-choose-keys-properly"] = "How do I choose keys properly?";
index.add({
    url: "index.html#how-do-i-choose-keys-properly",
    title: "How do I choose keys properly?",
    body: "## How do I choose keys properly?  When you store a key and value in a distributed Map, Hazelcast serializes the key and value, and stores the byte array version of them in local ConcurrentHashMaps. These ConcurrentHashMaps use `equals` and `hashCode` methods of byte array version of your key. It does not take into account the actual `equals` and `hashCode` implementations of your objects. So it is important that you choose your keys in a proper way.   Implementing `equals` and `hashCode` is not enough, it is also important that the object is always serialized into the same byte array. All primitive types like String, Long, Integer, etc. are good candidates for keys to be used in Hazelcast. An unsorted Set is an example of a very bad candidate because Java Serialization may serialize the same unsorted set in two different byte arrays.  &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#how-do-i-reflect-value-modifications"] = "How do I reflect value modifications?";
index.add({
    url: "index.html#how-do-i-reflect-value-modifications",
    title: "How do I reflect value modifications?",
    body: "## How do I reflect value modifications?  Hazelcast always return a clone copy of a value. Modifying the returned value does not change the actual value in the map (or multimap, list, set). You should put the modified value back to make changes visible to all members.  ```java V value = map.get( key ); value.updateSomeProperty(); map.put( key, value ); ```  Collections which return values of methods (such as `IMap.keySet`, `IMap.values`, `IMap.entrySet`, `MultiMap.get`, `MultiMap.remove`, `IMap.keySet`, `IMap.values`) contain cloned values. These collections are NOT backed up by related Hazelcast objects. Therefore, changes to them are **NOT** reflected in the originals, and vice-versa.  &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#how-do-i-test-my-hazelcast-cluster"] = "How do I test my Hazelcast cluster?";
index.add({
    url: "index.html#how-do-i-test-my-hazelcast-cluster",
    title: "How do I test my Hazelcast cluster?",
    body: "## How do I test my Hazelcast cluster?  Hazelcast allows you to create more than one instance on the same JVM. Each member is called `HazelcastInstance` and each will have its own configuration, socket and threads, so you can treat them as totally separate instances.   This enables you to write and to run cluster unit tests on a single JVM. Because you can use this feature for creating separate members different applications running on the same JVM (imagine running multiple web applications on the same JVM), you can also use this feature for testing your Hazelcast cluster.  Let's say you want to test if two members have the same size of a map.  ```java @Test public void testTwoMemberMapSizes() {   // start the first member   HazelcastInstance h1 = Hazelcast.newHazelcastInstance();   // get the map and put 1000 entries   Map map1 = h1.getMap( \&quot;testmap\&quot; );   for ( int i = 0; i &lt; 1000; i++ ) {     map1.put( i, \&quot;value\&quot; + i );   }   // check the map size   assertEquals( 1000, map1.size() );   // start the second member   HazelcastInstance h2 = Hazelcast.newHazelcastInstance();   // get the same map from the second member   Map map2 = h2.getMap( \&quot;testmap\&quot; );   // check the size of map2   assertEquals( 1000, map2.size() );   // check the size of map1 again   assertEquals( 1000, map1.size() ); } ```  In the test above, everything happens in the same thread. When developing a multi-threaded test, you need to carefully handle coordination of the thread executions. it is highly recommended that you use `CountDownLatch` for thread coordination (you can certainly use other ways). Here is an example where we need to listen for messages and make sure that we got these messages.  ```java @Test public void testTopic() {   // start two member cluster   HazelcastInstance h1 = Hazelcast.newHazelcastInstance();   HazelcastInstance h2 = Hazelcast.newHazelcastInstance();   String topicName = \&quot;TestMessages\&quot;;   // get a topic from the first member and add a messageListener   ITopic&lt;String&gt; topic1 = h1.getTopic( topicName );   final CountDownLatch latch1 = new CountDownLatch( 1 );   topic1.addMessageListener( new MessageListener() {     public void onMessage( Object msg ) {       assertEquals( \&quot;Test1\&quot;, msg );       latch1.countDown();     }   });   // get a topic from the second member and add a messageListener   ITopic&lt;String&gt; topic2 = h2.getTopic(topicName);   final CountDownLatch latch2 = new CountDownLatch( 2 );   topic2.addMessageListener( new MessageListener() {     public void onMessage( Object msg ) {       assertEquals( \&quot;Test1\&quot;, msg );       latch2.countDown();     }   } );   // publish the first message, both should receive this   topic1.publish( \&quot;Test1\&quot; );   // shutdown the first member   h1.shutdown();   // publish the second message, second member's topic should receive this   topic2.publish( \&quot;Test1\&quot; );   try {     // assert that the first member's topic got the message     assertTrue( latch1.await( 5, TimeUnit.SECONDS ) );     // assert that the second members' topic got two messages     assertTrue( latch2.await( 5, TimeUnit.SECONDS ) );   } catch ( InterruptedException ignored ) {   } } ``` You can start Hazelcast members with different configurations. Remember to call `Hazelcast.shutdownAll()` after each test case to make sure that there is no other running member left from the previous tests.  ```java @After public void cleanup() throws Exception {   Hazelcast.shutdownAll(); } ```  For more information please &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/tree/master/hazelcast/src/test/java/com/hazelcast/cluster\&quot; target=\&quot;_blank\&quot;&gt;check our existing tests&lt;/a&gt;.  &lt;br&gt;&lt;/br&gt;   "
});

documentTitles["index.html#does-hazelcast-support-hundreds-of-members"] = "Does Hazelcast support hundreds of members?";
index.add({
    url: "index.html#does-hazelcast-support-hundreds-of-members",
    title: "Does Hazelcast support hundreds of members?",
    body: "## Does Hazelcast support hundreds of members?  Yes. Hazelcast performed a successful test on Amazon EC2 with 200 members.  &lt;br&gt;&lt;/br&gt;   "
});

documentTitles["index.html#does-hazelcast-support-thousands-of-clients"] = "Does Hazelcast support thousands of clients?";
index.add({
    url: "index.html#does-hazelcast-support-thousands-of-clients",
    title: "Does Hazelcast support thousands of clients?",
    body: "## Does Hazelcast support thousands of clients?  Yes. However, there are some points you should consider. The environment should be LAN with a high stability and the network speed should be 10 Gbps or higher. If the number of members is high, the client type should be selected as Dummy, not Smart Client. In the case of Smart Clients, since each client will open a connection to the members, these members should be powerful enough (for example, more cores) to handle hundreds or thousands of connections and client requests. Also, you should consider using near caches in clients to lower the network traffic. And you should use the Hazelcast releases with the NIO implementation (which starts with Hazelcast 3.2).  Also, you should configure the clients attentively. Please refer to the [Java Client section](#hazelcast-java-client) section for configuration notes.  &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#what-is-the-difference-between-old-litemember-and-new-smart-client"] = "What is the difference between old LiteMember and new Smart Client?";
index.add({
    url: "index.html#what-is-the-difference-between-old-litemember-and-new-smart-client",
    title: "What is the difference between old LiteMember and new Smart Client?",
    body: "## What is the difference between old LiteMember and new Smart Client?  LiteMember supports task execution (distributed executor service), smart client does not. Also, LiteMember is highly coupled with cluster, smart client is not.  &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#how-do-you-give-support"] = "How do you give support?";
index.add({
    url: "index.html#how-do-you-give-support",
    title: "How do you give support?",
    body: "## How do you give support?  We have two support services: community and commercial support. Community support is provided through our &lt;a href=\&quot;https://groups.google.com/forum/#!forum/hazelcast\&quot; target=\&quot;_blank\&quot;&gt;Mail Group&lt;/a&gt; and &lt;a href=\&quot;http://www.stackoverflow.com\&quot; target=\&quot;_blank\&quot;&gt;StackOverflow&lt;/a&gt; web site. For information on support subscriptions, please see &lt;a href=\&quot;https://hazelcast.com/pricing/\&quot; target=\&quot;_blank\&quot;&gt;Hazelcast.com&lt;/a&gt;.  &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#does-hazelcast-persist"] = "Does Hazelcast persist?";
index.add({
    url: "index.html#does-hazelcast-persist",
    title: "Does Hazelcast persist?",
    body: "## Does Hazelcast persist?  No. However, Hazelcast provides `MapStore` and `MapLoader` interfaces. For example, when you implement the `MapStore` interface, Hazelcast calls your store and load methods whenever needed.  &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#can-i-use-hazelcast-in-a-single-server"] = "Can I use Hazelcast in a single server?";
index.add({
    url: "index.html#can-i-use-hazelcast-in-a-single-server",
    title: "Can I use Hazelcast in a single server?",
    body: "## Can I use Hazelcast in a single server?  Yes. But please note that Hazelcast's main design focus is multi-member clusters to be used as a distribution platform.   &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#how-can-i-monitor-hazelcast"] = "How can I monitor Hazelcast?";
index.add({
    url: "index.html#how-can-i-monitor-hazelcast",
    title: "How can I monitor Hazelcast?",
    body: "## How can I monitor Hazelcast?  [Hazelcast Management Center](#management-center) is what you use to monitor and manage the members running Hazelcast. In addition to monitoring the overall state of a cluster, you can analyze and browse data structures in detail, you can update map configurations, and you can take thread dumps from members.   Moreover, JMX monitoring is also provided. Please see the [Monitoring with JMX section](#monitoring-with-jmx) for details.  &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#how-can-i-see-debug-level-logs"] = "How can I see debug level logs?";
index.add({
    url: "index.html#how-can-i-see-debug-level-logs",
    title: "How can I see debug level logs?",
    body: "## How can I see debug level logs?  By changing the log level to \&quot;Debug\&quot;. Below are sample lines for **log4j** logging framework. Please see the [Logging Configuration section](#logging-configuration) to learn how to set logging types.  First, set the logging type as follows.  ```java String location = \&quot;log4j.configuration\&quot;; String logging = \&quot;hazelcast.logging.type\&quot;; System.setProperty( logging, \&quot;log4j\&quot; ); /**if you want to give a new location. **/ System.setProperty( location, \&quot;file:/path/mylog4j.properties\&quot; ); ```  Then set the log level to \&quot;Debug\&quot; in the properties file. Below is example content.   `# direct log messages to stdout #`  `log4j.appender.stdout=org.apache.log4j.ConsoleAppender`  `log4j.appender.stdout.Target=System.out`  `log4j.appender.stdout.layout=org.apache.log4j.PatternLayout`  `log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p [%c{1}] - %m%n`  &lt;br&gt; &lt;/br&gt;  `log4j.logger.com.hazelcast=debug`  `#log4j.logger.com.hazelcast.cluster=debug`  `#log4j.logger.com.hazelcast.partition=debug`  `#log4j.logger.com.hazelcast.partition.InternalPartitionService=debug`  `#log4j.logger.com.hazelcast.nio=debug`  `#log4j.logger.com.hazelcast.hibernate=debug`  The line `log4j.logger.com.hazelcast=debug` is used to see debug logs for all Hazelcast operations. Below this line, you can select to see specific logs (cluster, partition, hibernate, etc.).  &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#what-is-the-difference-between-client-server-and-embedded-topologies"] = "What is the difference between client-server and embedded topologies?";
index.add({
    url: "index.html#what-is-the-difference-between-client-server-and-embedded-topologies",
    title: "What is the difference between client-server and embedded topologies?",
    body: "## What is the difference between client-server and embedded topologies?  In the embedded topology, members include both the data and application. This type of topology is the most useful if your application focuses on high performance computing and many task executions. Since application is close to data, this topology supports data locality.   In the client-server topology, you create a cluster of members and scale the cluster independently. Your applications are hosted on the clients, and the clients communicate with the members in the cluster to reach data.   Client-server topology fits better if there are multiple applications sharing the same data or if application deployment is significantly greater than the cluster size (for example, 500 application servers vs. 10 member cluster).  &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#how-do-i-know-it-is-safe-to-kill-the-second-member"] = "How do I know it is safe to kill the second member?";
index.add({
    url: "index.html#how-do-i-know-it-is-safe-to-kill-the-second-member",
    title: "How do I know it is safe to kill the second member?",
    body: "## How do I know it is safe to kill the second member?  Below code snippet shuts down the cluster members if the cluster is safe for a member shutdown.  ```java PartitionService partitionService = hazelcastInstance.getPartitionService(); if (partitionService.isClusterSafe()) {   hazelcastInstance.shutdown(); // or terminate } ```  Below code snippet shuts down the local member if the member is safe to be shutdown.  ```java PartitionService partitionService = hazelcastInstance.getPartitionService(); if (partitionService.isLocalMemberSafe()) {   hazelcastInstance.shutdown(); // or terminate } ```  ***RELATED INFORMATION***  *Please refer to [Safety Checking Cluster Members](#safety-checking-cluster-members) for more information.*  &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#when-do-i-need-native-memory-solutions"] = "When do I need Native Memory solutions?";
index.add({
    url: "index.html#when-do-i-need-native-memory-solutions",
    title: "When do I need Native Memory solutions?",
    body: "## When do I need Native Memory solutions?  Native Memory solutions can be preferred:  - when the amount of data per member is large enough to create significant garbage collection pauses. - when your application requires predictable latency.  &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#is-there-any-disadvantage-of-using-near-cache"] = "Is there any disadvantage of using near-cache?";
index.add({
    url: "index.html#is-there-any-disadvantage-of-using-near-cache",
    title: "Is there any disadvantage of using near-cache?",
    body: "## Is there any disadvantage of using near-cache?  The only disadvantage when using Near Cache is that it may cause stale reads.  &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#is-hazelcast-secure"] = "Is Hazelcast secure?";
index.add({
    url: "index.html#is-hazelcast-secure",
    title: "Is Hazelcast secure?",
    body: "## Is Hazelcast secure?  Hazelcast supports symmetric encryption, secure sockets layer (SSL), and Java Authentication and Authorization Service (JAAS). Please see the [Security chapter](#security) for more information.  &lt;br&gt;&lt;/br&gt;   "
});

documentTitles["index.html#how-can-i-set-socket-options"] = "How can I set socket options?";
index.add({
    url: "index.html#how-can-i-set-socket-options",
    title: "How can I set socket options?",
    body: "## How can I set socket options?  Hazelcast allows you to set some socket options such as `SO_KEEPALIVE`, `SO_SNDBUF`, and `SO_RCVBUF` using Hazelcast configuration properties. Please see `hazelcast.socket.*` properties explained in the [System Properties section](#system-properties).  &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#i-periodically-see-client-disconnections-during-idle-time"] = "I periodically see client disconnections during idle time?";
index.add({
    url: "index.html#i-periodically-see-client-disconnections-during-idle-time",
    title: "I periodically see client disconnections during idle time?",
    body: "## I periodically see client disconnections during idle time?  In Hazelcast, socket connections are created with the `SO_KEEPALIVE` option enabled by default. In most operating systems, default keep-alive time is 2 hours. If you have a firewall between clients and servers which is configured to reset idle connections/sessions, make sure that the firewall's idle timeout is greater than the TCP keep-alive defined in the OS.  For additional information please see:   - &lt;a href=\&quot;http://tldp.org/HOWTO/TCP-Keepalive-HOWTO/usingkeepalive.html\&quot; target=\&quot;_blank\&quot;&gt;Using TCP keepalive under Linux&lt;/a&gt;  - &lt;a href=\&quot;http://technet.microsoft.com/en-us/library/cc957549.aspx\&quot; target=\&quot;_blank\&quot;&gt;Microsoft TechNet&lt;/a&gt;    &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#how-to-get-rid-of-javalangoutofmemoryerror-unable-to-create-new-native-thread"] = "How to get rid of \&quot;java.lang.OutOfMemoryError: unable to create new native thread\&quot;?";
index.add({
    url: "index.html#how-to-get-rid-of-javalangoutofmemoryerror-unable-to-create-new-native-thread",
    title: "How to get rid of \&quot;java.lang.OutOfMemoryError: unable to create new native thread\&quot;?",
    body: "## How to get rid of \&quot;java.lang.OutOfMemoryError: unable to create new native thread\&quot;?  If you encounter an error of `java.lang.OutOfMemoryError: unable to create new native thread`, it may be caused by exceeding the available file descriptors on your operating system, especially if it is Linux. This exception is usually thrown on a running member, after a period of time when the thread count exhausts the file descriptor availability.  The JVM on Linux consumes a file descriptor for each thread created.  The default number of file descriptors available in Linux is usually 1024. If you have many JVMs running on a single machine, it is possible to exceed this default number.  You can view the limit using the following command.  `# ulimit -a`  At the operating system level, Linux users can control the amount of resources (and in particular, file descriptors) used via one of the following options.  1 - Editing the `limits.conf` file:  `# vi /etc/security/limits.conf`   ``` testuser soft nofile 4096&lt;br&gt; testuser hard nofile 10240&lt;br&gt; ```  2 - Or using the `ulimit` command:  `# ulimit -Hn`  ``` 10240 ```  The default number of process per users is 1024. Adding the following to your `$HOME/.profile` could solve the issue:  `# ulimit -u 4096`  &lt;br&gt;&lt;/br&gt;  "
});

documentTitles["index.html#does-repartitioning-wait-for-entry-processor"] = "Does repartitioning wait for Entry Processor?";
index.add({
    url: "index.html#does-repartitioning-wait-for-entry-processor",
    title: "Does repartitioning wait for Entry Processor?",
    body: "## Does repartitioning wait for Entry Processor?  Repartitioning is the process of redistributing the partition ownerships. Hazelcast performs the repartitioning in the cases where a member leaves the cluster or joins the cluster. If a repartitioning will happen while an entry processor is active in a member processing on an entry object, the repartitioning waits for the entry processor to complete its job.  "
});

documentTitles["index.html#why-do-hazelcast-instances-on-different-machines-not-see-each-other"] = "Why do Hazelcast instances on different machines not see each other?";
index.add({
    url: "index.html#why-do-hazelcast-instances-on-different-machines-not-see-each-other",
    title: "Why do Hazelcast instances on different machines not see each other?",
    body: "## Why do Hazelcast instances on different machines not see each other?  Assume you have two instances on two different machines and you develop a configuration as shown below.  ```java Config config = new Config(); NetworkConfig network = config.getNetworkConfig();  JoinConfig join = network.getJoin(); join.getMulticastConfig().setEnabled(false); join.getTcpIpConfig().addMember(\&quot;IP1\&quot;)     .addMember(\&quot;IP2\&quot;).setEnabled(true); network.getInterfaces().setEnabled(true)     .addInterface(\&quot;IP1\&quot;).addInterface(\&quot;IP2\&quot;); ```     When you create the Hazelcast instance, you have to pass the configuration to the instance. If you create the instances without passing the configuration, each instance starts but cannot see each other. Therefore, a correct way to create the instance is the following:  ``` HazelcastInstance instance = Hazelcast.newHazelcastInstance(config); ```  The following is an incorrect way:  ``` HazelcastInstance instance = Hazelcast.newHazelcastInstance(); ```    "
});

documentTitles["index.html#what-does-replica-1-has-no-owner-mean"] = "What Does \&quot;Replica: 1 has no owner\&quot; Mean?";
index.add({
    url: "index.html#what-does-replica-1-has-no-owner-mean",
    title: "What Does \&quot;Replica: 1 has no owner\&quot; Mean?",
    body: "## What Does \&quot;Replica: 1 has no owner\&quot; Mean?  When you start more members after the first one is started, you will see `replica: 1 has no owner` entry in the newly started member's log. There is no need to worry about it since it refers to a transitory state. It only means the replica partition is not ready/assigned yet and eventually it will be.            "
});

documentTitles["index.html#glossary"] = "Glossary";
index.add({
    url: "index.html#glossary",
    title: "Glossary",
    body: "# Glossary  Term|Definition :-|:- **2-phase Commit**|2-phase commit protocol is an atomic commitment protocol for distributed systems. It consists of two phases: commit-request and commit. In commit-request phase, transaction manager coordinates all of the transaction resources to commit or abort. In commit-phase, transaction manager decides to finalize operation by committing or aborting according to the votes of the each transaction resource. **ACID**|A set of properties (Atomicity, Consistency, Isolation, Durability) guaranteeing that transactions are processed reliably. Atomicity requires that each transaction be all or nothing (i.e. if one part of the transaction fails, the entire transaction will fail). Consistency ensures that only valid data following all rules and constraints is written. Isolation ensures that transactions are securely and independently processed at the same time without interference (and without transaction ordering). Durability means that once a transaction has been committed, it will remain so, no matter if there is a power loss, crash, or error. **Cache**|A high-speed access area that can be either a reserved section of main memory or storage device.  **Garbage Collection**|Garbage collection is the recovery of storage that is being used by an application when that application no longer needs the storage. This frees the storage for use by other applications (or processes within an application). It also ensures that an application using increasing amounts of storage does not reach its quota. Programming languages that use garbage collection are often interpreted within virtual machines like the JVM. The environment that runs the code is also responsible for garbage collection. **Hazelcast Cluster**|A virtual environment formed by Hazelcast members communicating with each other in the cluster. **Hazelcast Partitions**|Memory segments containing the data. Hazelcast is built-on the partition concept, it uses partitions to store and process data. Each partition can have hundreds or thousands of data entries depending on your memory capacity. You can think of a partition as a block of data. In general and optimally, a partition should have a maximum size of 50-100 Megabytes. **IMDG**|An in-memory data grid (IMDG) is a data structure that resides entirely in memory, and is distributed among many nodes in a single location or across multiple locations. IMDGs can support thousands of in-memory data updates per second, and they can be clustered and scaled in ways that support large quantities of data. **Invalidation**|The process of marking an object as being invalid across the distributed cache. **Java heap**|Java heap is the space that Java can reserve and use in memory for dynamic memory allocation. All runtime objects created by a Java application are stored in heap. By default, the heap size is 128 MB, but this limit is reached easily for business applications. Once the heap is full, new objects cannot be created and the Java application shows errors. **LRU, LFU**|LRU and LFU are two of eviction algorithms. LRU is the abbreviation for Least Recently Used. It refers to entries eligible for eviction due to lack of interest by applications. LFU is the abbreviation for Least Frequently Used. It refers to the entries eligible for eviction due to having the lowest usage frequency. **Member**|A Hazelcast instance. Depending on your Hazelcast usage, it can refer to a server or a Java virtual machine (JVM). Members belong to a Hazelcast cluster. Members are also referred as nodes, member nodes, cluster members, or Hazelcast members. **Multicast**|A type of communication where data is addressed to a group of destination nodes simultaneously. **Near Cache**|A caching model. When near cache is enabled, an object retrieved from a remote node is put into the local cache and the future requests made to this object will be handled by this local node. For example, if you have a map with data that is mostly read, then using near cache is a good idea. **NoSQL**|\&quot;Not Only SQL\&quot;. A database model that provides a mechanism for storage and retrieval of data that is tailored in means other than the tabular relations used in relational databases. It is a type of database which does not adhering to the traditional relational database management system (RDMS) structure. It is not built on tables and does not employ SQL to manipulate data. It also may not provide full ACID guarantees, but still has a distributed and fault tolerant architecture. **OSGI**|Formerly known as the Open Services Gateway initiative, it describes a modular system and a service platform for the Java programming language that implements a complete and dynamic component model. **Race Condition**|This condition occurs when two or more threads can access shared data and they try to change it at the same time. **RSA**|An algorithm developed by Rivest, Shamir and Adleman to generate, encrypt and decrypt keys for secure data transmissions.  **Serialization**|Process of converting an object into a stream of bytes in order to store the object or transmit it to memory, a database, or a file. Its main purpose is to save the state of an object in order to be able to recreate it when needed. The reverse process is called deserialization. **Split Brain**|Split brain syndrome, in a clustering context, is a state in which a cluster of nodes gets divided (or partitioned) into smaller clusters of nodes, each of which believes it is the only active cluster. **Transaction**|Means a sequence of information exchange and related work (such as data store updating) that is treated as a unit for the purposes of satisfying a request and for ensuring data store integrity.        "
});


