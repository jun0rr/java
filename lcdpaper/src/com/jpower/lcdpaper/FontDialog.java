/*
 * Direitos Autorais Reservados (c) 2011 Juno Roesler
 * Contato: juno.rr@gmail.com
 * 
 * Esta biblioteca é software livre; você pode redistribuí-la e/ou modificá-la sob os
 * termos da Licença Pública Geral Menor do GNU conforme publicada pela Free
 * Software Foundation; tanto a versão 2.1 da Licença, ou qualquer
 * versão posterior.
 * 
 * Esta biblioteca é distribuída na expectativa de que seja útil, porém, SEM
 * NENHUMA GARANTIA; nem mesmo a garantia implícita de COMERCIABILIDADE
 * OU ADEQUAÇÃO A UMA FINALIDADE ESPECÍFICA. Consulte a Licença Pública
 * Geral Menor do GNU para mais detalhes.
 * 
 * Você deve ter recebido uma cópia da Licença Pública Geral Menor do GNU junto
 * com esta biblioteca; se não, acesse 
 * http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html, 
 * ou escreva para a Free Software Foundation, Inc., no
 * endereço 59 Temple Street, Suite 330, Boston, MA 02111-1307 USA.
 */

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package com.jpower.lcdpaper;

import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JDialog;

/**
 *
 * @author Juno Roesler - juno.rr@gmail.com
 * @version 0.0 - 16/12/2012
 */
public class FontDialog extends javax.swing.JDialog implements KeyListener {

  private int style;
  
  private Labels labels;
  
  private static FontDialog dialog;
  
  
    /** Creates new form FontDialog */
    public FontDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        labels = new Labels();
        initComponents();
        sizeField.addKeyListener(this);
        style = Font.PLAIN;
    }
    
    
  public int getFontSize() {
    try {
      return Integer.parseInt(sizeField.getText());
    } catch(NumberFormatException e) {
      return -1;
    }
  }
  

  @Override public void keyTyped(KeyEvent e) {}


  @Override
  public void keyPressed(KeyEvent e) {
    if(e.getKeyCode() == e.VK_ENTER)
      this.updatePreview();
  }


  @Override public void keyReleased(KeyEvent e) {}

  
  public static String[] getFontNames() {
    return GraphicsEnvironment
        .getLocalGraphicsEnvironment()
        .getAvailableFontFamilyNames();
  }
  
  
  public Font getSelectedFont() {
    return new Font(getFontFamily(), getFontStyle(), getFontSize());
  }
  
  
  public FontDialog setDefaultFont(Font f) {
    if(f == null) return this;
    sizeField.setText(String.valueOf(f.getSize()));
    sizeSlider.setValue(f.getSize());
    style = f.getStyle();
    fontCombo.setSelectedItem(f.getFamily());
    updatePreview();
    return this;
  }
  
  
  public void updatePreview() {
    previewLabel.setFont(getSelectedFont());
    previewLabel.repaint();
  }
  
  
  public int getFontStyle() {
    return style;
  }
  
  
  public String getFontFamily() {
    return fontCombo.getSelectedItem().toString();
  }
  
  
  public static Font showDialog() {
    final Object obj = new Object();
    
    new Thread() {
      public void run() {
        dialog = new FontDialog(null, false);
        dialog.addWindowListener(new WindowAdapter() {
          public void windowClosed(WindowEvent e) {
            synchronized(obj) { obj.notify(); }
          }
        });
        dialog.setVisible(true);
      };
    }.start();
    
    try {
      synchronized(obj) { obj.wait(); }
      return dialog.getSelectedFont();
    } catch(InterruptedException ex) {
      return null;
    }
  }
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    fontCombo = new javax.swing.JComboBox();
    boldButton = new javax.swing.JToggleButton();
    italicButton = new javax.swing.JToggleButton();
    sizeLabel = new javax.swing.JLabel();
    sizeSlider = new javax.swing.JSlider();
    sizeField = new javax.swing.JTextField();
    previewLabel = new javax.swing.JLabel();
    nameLabel = new javax.swing.JLabel();
    styleLabel = new javax.swing.JLabel();
    jButton1 = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle(labels.font());

    fontCombo.setModel(new javax.swing.DefaultComboBoxModel(getFontNames()));
    fontCombo.setToolTipText(labels.fontName());
    fontCombo.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        fontComboActionPerformed(evt);
      }
    });

    boldButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/jpower/lcdpaper/icons/bold-icon-18.png"))); // NOI18N
    boldButton.setToolTipText(labels.fontBold());
    boldButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        boldButtonActionPerformed(evt);
      }
    });

    italicButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/jpower/lcdpaper/icons/italic-icon-18.png"))); // NOI18N
    italicButton.setToolTipText(labels.fontItalic());
    italicButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        italicButtonActionPerformed(evt);
      }
    });

    sizeLabel.setText(labels.fontSize());

    sizeSlider.setMaximum(40);
    sizeSlider.setMinimum(6);
    sizeSlider.setToolTipText(labels.fontSize());
    sizeSlider.setValue(12);
    sizeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        sizeSliderStateChanged(evt);
      }
    });

    sizeField.setText("12");
    sizeField.setToolTipText(labels.fontSize());

    previewLabel.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
    previewLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    previewLabel.setText("Font Preview - 12 34 90");
    previewLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

    nameLabel.setText(labels.fontName());

    styleLabel.setText(labels.fontStyle());

    jButton1.setText("OK");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton1ActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addComponent(previewLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fontCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addGap(18, 18, 18)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                      .addComponent(boldButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                      .addGap(18, 18, 18)
                      .addComponent(italicButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(styleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addGap(0, 5, Short.MAX_VALUE)))
              .addComponent(sizeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)))
          .addGroup(layout.createSequentialGroup()
            .addGap(89, 89, 89)
            .addComponent(sizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(sizeField, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addGap(110, 110, 110)
        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(styleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addComponent(boldButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(italicButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(fontCombo))
        .addGap(18, 18, 18)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(sizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(sizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(sizeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(previewLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jButton1)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    fontCombo.setSelectedItem("SansSerif");

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void sizeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sizeSliderStateChanged
    int value = sizeSlider.getValue();
    sizeField.setText(String.valueOf(value));
    updatePreview();
  }//GEN-LAST:event_sizeSliderStateChanged

  private void fontComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontComboActionPerformed
    updatePreview();
  }//GEN-LAST:event_fontComboActionPerformed

  private void boldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boldButtonActionPerformed
    if(boldButton.isSelected())
      style += Font.BOLD;
    else
      style -= Font.BOLD;
    updatePreview();
  }//GEN-LAST:event_boldButtonActionPerformed

  private void italicButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_italicButtonActionPerformed
    if(italicButton.isSelected())
      style += Font.ITALIC;
    else
      style -= Font.ITALIC;
    updatePreview();
  }//GEN-LAST:event_italicButtonActionPerformed

  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    this.dispose();
  }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FontDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FontDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FontDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FontDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

      System.out.println(FontDialog.showDialog());
    }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JToggleButton boldButton;
  private javax.swing.JComboBox fontCombo;
  private javax.swing.JToggleButton italicButton;
  private javax.swing.JButton jButton1;
  private javax.swing.JLabel nameLabel;
  private javax.swing.JLabel previewLabel;
  private javax.swing.JTextField sizeField;
  private javax.swing.JLabel sizeLabel;
  private javax.swing.JSlider sizeSlider;
  private javax.swing.JLabel styleLabel;
  // End of variables declaration//GEN-END:variables

}
